var resultJson = [{"path":"docs/ContactUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Contact Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"* *Bug reports, Suggestions* : Post in our https://github.com/se-edu/InternshipBook-level4/issues[issue tracker] if you noticed bugs or have suggestions on how to improve."},{"lineNumber":5,"author":{"gitID":"-"},"content":"* *Contributing* : We welcome pull requests. Follow the process described https://github.com/oss-generic/process[here]"},{"lineNumber":6,"author":{"gitID":"-"},"content":"* *Email us* : You can also reach us at `damith [at] comp.nus.edu.sg`"}],"authorContributionMap":{"wyinkok":1,"-":5}},{"path":"docs/UsingCheckstyle.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Using Checkstyle-IDEA"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"\u003d\u003d Configuring Checkstyle-IDEA"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":". Install the Checkstyle-IDEA plugin by going to `File` \u003e `Settings` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS). +"},{"lineNumber":13,"author":{"gitID":"-"},"content":"Select `Plugins`, press `Browse Repository`, and find the plugin. +"},{"lineNumber":14,"author":{"gitID":"-"},"content":"Restart the IDE to complete the installation."},{"lineNumber":15,"author":{"gitID":"-"},"content":". Click `File` \u003e `Settings...` \u003e `Other Settings` \u003e `Checkstyle`"},{"lineNumber":16,"author":{"gitID":"-"},"content":". Set `Scan Scope`  to `Only Java sources (including tests)`, so that the plugin will run checkstyle for our test source codes as well"},{"lineNumber":17,"author":{"gitID":"-"},"content":". Ensure that the `Checkstyle version` is set to `8.1`. This is the same version that we are using inside Gradle, so that you won\u0027t get any errors due to version incompatibility"},{"lineNumber":18,"author":{"gitID":"-"},"content":"+"},{"lineNumber":19,"author":{"gitID":"-"},"content":"image::checkstyle-idea-scan-scope.png[width\u003d\"500\"]"},{"lineNumber":20,"author":{"gitID":"-"},"content":". Click the plus sign under `Configuration File`"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":". Enter an arbitrary description e.g. InternshipBook"},{"lineNumber":22,"author":{"gitID":"-"},"content":". Select `Use a local Checkstyle file`"},{"lineNumber":23,"author":{"gitID":"-"},"content":". Use the checkstyle configuration file found at `config/checkstyle/checkstyle.xml`"},{"lineNumber":24,"author":{"gitID":"-"},"content":". Click `Next` \u003e `Finish`"},{"lineNumber":25,"author":{"gitID":"-"},"content":". Mark `Active` for the newly imported check configuration"},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":"image::checkstyle-idea-configuration.png[width\u003d\"700\"]"},{"lineNumber":28,"author":{"gitID":"-"},"content":". Click `OK`"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Troubleshooting Checkstyle-IDEA"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"**Problem: When importing `checkstyle.xml`, Checkstyle-IDEA plugin complains that `The Checkstyle rules file could not be parsed. ... The file has been blacklisted for 60s.`**"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Reason: `checkstyle.xml` is written for a particular version, but the plugin was not configured to the correct version."},{"lineNumber":35,"author":{"gitID":"-"},"content":"* Solution: Ensure that you have selected the correct `Checkstyle version`, that matches the version in `build.gradle`, as `checkstyle.xml` is written for Gradle\u0027s checkstyle."},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"**Problem: After setting up `checkstyle.xml`, Checkstyle-IDEA plugin does not seem to highlight the errors / real-time scanning seems broken.**"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"* Reason: The plugin may not immediately run after setting it up."},{"lineNumber":40,"author":{"gitID":"-"},"content":"* Solution: Restart the IDE."}],"authorContributionMap":{"wyinkok":1,"-":39}},{"path":"docs/UsingAppVeyor.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d AppVeyor"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://www.appveyor.com/[AppVeyor] is a _Continuous Integration_ platform for GitHub projects. It runs its builds on Windows virtual machines."},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"AppVeyor can run the project\u0027s tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken on Windows by the changes."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"The current AppVeyor setup performs the following things whenever someone pushes code to the repo:"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"* Runs the `gradlew.bat headless allTests` command."},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Automatically retries the build up to 3 times if a task fails."},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"If you would like to customize your AppVeyor build further, you can learn more about AppVeyor from the https://www.appveyor.com/docs/[AppVeyor Documentation]."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up AppVeyor"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":".  Fork the repo to your own organization."},{"lineNumber":19,"author":{"gitID":"-"},"content":".  Go to https://ci.appveyor.com/, and under `Login`, click on `GitHub` to login with your GitHub account. Enter your GitHub account details if needed."},{"lineNumber":20,"author":{"gitID":"-"},"content":"+"},{"lineNumber":21,"author":{"gitID":"-"},"content":"image:appveyor/login.png[Click on GitHub in the login page]"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":".  After logging in, you will be brought to your projects dashboard. Click on `NEW PROJECT`."},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":"image:appveyor/add-project-1.png[Click on \"NEW PROJECT\" in the projects dashboard]"},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":".  You will be brought to the `Select repository` page. Select `GitHub`."},{"lineNumber":28,"author":{"gitID":"-"},"content":"* On your first usage of AppVeyor, you will need to give AppVeyor authorization to your GitHub account. Click on `Authorize GitHub`."},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"image:appveyor/add-project-2.png[Click on Authorize GitHub]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"* This will bring you to a GitHub page that manages the access of third-party applications to your repositories."},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"Depending on whether you are the owner of the repository, you can either"},{"lineNumber":35,"author":{"gitID":"-"},"content":"grant access:"},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"-"},"content":"image:grant_access.png[Grant Access]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"-"},"content":"Or request access:"},{"lineNumber":40,"author":{"gitID":"-"},"content":"+"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image:request_access.png[Request Access]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"+"},{"lineNumber":43,"author":{"gitID":"-"},"content":".  AppVeyor will then list the repositories you have access to in your GitHub account. Find the repository you want to set AppVeyor up on, and then click `ADD`."},{"lineNumber":44,"author":{"gitID":"-"},"content":"+"},{"lineNumber":45,"author":{"gitID":"-"},"content":"image:appveyor/add-project-3.png[Click \"Add\" on the repository you want to set AppVeyor up on]"},{"lineNumber":46,"author":{"gitID":"-"},"content":"+"},{"lineNumber":47,"author":{"gitID":"-"},"content":".  AppVeyor will then be activated on that repository. To see the CI in action, push a commit to any branch!"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* Go to the repository and see the pushed commit. There should be an icon which will link you to the AppVeyor build:"},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":"image:appveyor/ci-pending.png[Commit build]"},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"-"},"content":"* As the build is run on a remote machine, we can only examine the logs it produces:"},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"-"},"content":"image:appveyor/ci-log.png[AppVeyor build]"},{"lineNumber":55,"author":{"gitID":"-"},"content":"+"},{"lineNumber":56,"author":{"gitID":"-"},"content":".  Update the link to the \"build status\" badge at the top of `README.adoc` to point to the AppVeyor build status of your own repo."},{"lineNumber":57,"author":{"gitID":"-"},"content":"* To find your build status badge URL, first go to your project settings by clicking on the \"Settings\" icon:"},{"lineNumber":58,"author":{"gitID":"-"},"content":"+"},{"lineNumber":59,"author":{"gitID":"-"},"content":"image:appveyor/project-settings-1.png[Click on project settings]"},{"lineNumber":60,"author":{"gitID":"-"},"content":"+"},{"lineNumber":61,"author":{"gitID":"-"},"content":"* Then go to the `Badges` section of your project settings by clicking on it:"},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":"image:appveyor/project-settings-2.png[Click on \"Badges\"]"},{"lineNumber":64,"author":{"gitID":"-"},"content":"+"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* As AppVeyor does not provide asciidoc code for the badge, we will have to create our own. Start by copying the markdown code provided:"},{"lineNumber":66,"author":{"gitID":"-"},"content":"+"},{"lineNumber":67,"author":{"gitID":"-"},"content":"image:appveyor/project-settings-3.png[Copy the markdown code]"},{"lineNumber":68,"author":{"gitID":"-"},"content":"+"},{"lineNumber":69,"author":{"gitID":"-"},"content":"The markdown code should be in this format:"},{"lineNumber":70,"author":{"gitID":"-"},"content":"+"},{"lineNumber":71,"author":{"gitID":"-"},"content":"----"},{"lineNumber":72,"author":{"gitID":"-"},"content":"[![Build status](\u003clink to image\u003e)](\u003clink to project\u003e)"},{"lineNumber":73,"author":{"gitID":"-"},"content":"----"},{"lineNumber":74,"author":{"gitID":"-"},"content":"+"},{"lineNumber":75,"author":{"gitID":"-"},"content":"Convert it to the asciidoc format as follows:"},{"lineNumber":76,"author":{"gitID":"-"},"content":"+"},{"lineNumber":77,"author":{"gitID":"-"},"content":"----"},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003clink to project\u003e[image:\u003clink to image\u003e[Build status]]"},{"lineNumber":79,"author":{"gitID":"-"},"content":"----"},{"lineNumber":80,"author":{"gitID":"-"},"content":"+"},{"lineNumber":81,"author":{"gitID":"-"},"content":"The asciidoc code should look similar to:"},{"lineNumber":82,"author":{"gitID":"-"},"content":"+"},{"lineNumber":83,"author":{"gitID":"-"},"content":"----"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"https://ci.appveyor.com/project/damithc/InternshipBook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"----"},{"lineNumber":86,"author":{"gitID":"-"},"content":"+"},{"lineNumber":87,"author":{"gitID":"-"},"content":"Copy and paste the asciidoc code to your `README.adoc` file."}],"authorContributionMap":{"wyinkok":1,"-":86}},{"path":"docs/UsingGradle.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Using Gradle"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":5,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":6,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":7,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":8,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"https://gradle.org/[Gradle] is a build automation tool. It can automate build-related tasks such as"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Running tests"},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Managing library dependencies"},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Analyzing code for style compliance"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"The gradle configuration for this project is defined in the _build script_ link:../build.gradle[`build.gradle`]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":19,"author":{"gitID":"-"},"content":"To learn more about gradle build scripts, refer https://docs.gradle.org/current/userguide/tutorial_using_tasks.html[Build Scripts Basics]."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"\u003d\u003d Running Gradle Commands"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"To run a Gradle command, open a command window on the project folder and enter the Gradle command. Gradle commands look like this:"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* On Windows: `gradlew \u003ctask1\u003e \u003ctask2\u003e ...` e.g. `gradlew clean allTests`"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* On Mac/Linux: `./gradlew \u003ctask1\u003e \u003ctask2\u003e...` e.g."},{"lineNumber":27,"author":{"gitID":"-"},"content":"`./gradlew clean allTests`"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"If you do not specify any tasks, Gradlew will run the default tasks `clean` `headless` `allTests` `coverage`"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u003d\u003d Cleaning the Project"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* *`clean`* +"},{"lineNumber":35,"author":{"gitID":"-"},"content":"Deletes the files created during the previous build tasks (e.g. files in the `build` folder). e.g. `./gradlew clean`"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*`clean` to force Gradle to execute a task*: +"},{"lineNumber":39,"author":{"gitID":"-"},"content":"When running a Gradle task, Gradle will try to figure out if the task needs running at all. If Gradle determines that the output of the task will be same as the previous time, it will not run the task. For example, it will not build the JAR file again if the relevant source files have not changed since the last time the JAR file was built. If we want to force Gradle to run a task, we can combine that task with `clean`. Once the build files have been `clean` ed, Gradle has no way to determine if the output will be same as before, so it will be forced to execute the task."},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u003d\u003d Creating the JAR file"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"* *`shadowJar`* +"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"Creates the `InternshipBook.jar` file in the `build/jar` folder, _if the current file is outdated_. +"},{"lineNumber":45,"author":{"gitID":"-"},"content":"e.g. `./gradlew shadowJar`"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"****"},{"lineNumber":48,"author":{"gitID":"-"},"content":"To force Gradle to create the JAR file even if the current one is up-to-date, you can \u0027`clean`\u0027 first. +"},{"lineNumber":49,"author":{"gitID":"-"},"content":"e.g. `./gradlew clean shadowJar`"},{"lineNumber":50,"author":{"gitID":"-"},"content":"****"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Why do we create a fat JAR?* If we package only our own class files into the JAR file, it will not work properly unless the user has all the other JAR files (i.e. third party libraries) our classes depend on, which is rather inconvenient. Therefore, we package all dependencies into a single JAR files, creating what is also known as a _fat_ JAR file. To create a fat JAR file, we use the Gradle plugin https://github.com/johnrengelman/shadow[shadow jar]."},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d Rendering AsciiDoc files"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"* **`asciidoctor`** +"},{"lineNumber":58,"author":{"gitID":"-"},"content":"Converts AsciiDoc files in `docs` to HTML format. Generated HTML files can be found in `build/docs`."},{"lineNumber":59,"author":{"gitID":"-"},"content":"* **`deployOfflineDocs`** +"},{"lineNumber":60,"author":{"gitID":"-"},"content":"Updates the offline user guide, and its associated files, used by the Help window in the application. Deployed HTML files and images can be found in `src/main/resources/docs`."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"\u003d\u003d Running the application"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* *`run`* +"},{"lineNumber":65,"author":{"gitID":"-"},"content":"Builds and runs the application."},{"lineNumber":66,"author":{"gitID":"-"},"content":"* *`runShadow`* +"},{"lineNumber":67,"author":{"gitID":"-"},"content":"Builds the application as a fat JAR, and then runs it."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d Running code style checks"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* **`checkstyleMain`** +"},{"lineNumber":72,"author":{"gitID":"-"},"content":"Runs the code style check for the main code base"},{"lineNumber":73,"author":{"gitID":"-"},"content":"* **`checkstyleTest`** +"},{"lineNumber":74,"author":{"gitID":"-"},"content":"Runs the code style check for the test code base"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"The set of code style rules implemented can be found in `config/checkstyle/checkstyle.xml`. To enable _exceptions_ to code styles, add in the comment `//CODESTYLE.OFF: RuleName` at the start of the section and `//CODESTYLE.ON: RuleName` at the end of the section."},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u003d\u003d Running Tests"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"* **`allTests`** +"},{"lineNumber":81,"author":{"gitID":"-"},"content":"Runs all tests."},{"lineNumber":82,"author":{"gitID":"-"},"content":"* **`guiTests`** +"},{"lineNumber":83,"author":{"gitID":"-"},"content":"Runs all tests in the `seedu.address.ui` and `systemtests` package"},{"lineNumber":84,"author":{"gitID":"-"},"content":"* **`nonGuiTests`** +"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Runs all non-GUI tests in the `seedu.address`"},{"lineNumber":86,"author":{"gitID":"-"},"content":"package"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* **`headless`** +"},{"lineNumber":88,"author":{"gitID":"-"},"content":"Sets the test mode as _headless_. The mode is effective for that Gradle run only so it should be combined with other test tasks."},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"Here are some examples:"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* `./gradlew headless allTests` -- Runs all tests in headless mode"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* `./gradlew clean nonGuiTests` -- Cleans the project and runs non-GUI"},{"lineNumber":94,"author":{"gitID":"-"},"content":"tests"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"\u003d\u003d Updating Dependencies"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"There is no need to run these Gradle tasks manually as they are called automatically by other relevant Gradle tasks."},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"* **`compileJava`** +"},{"lineNumber":101,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to compile and run the main program, and download any missing dependencies before compiling the classes. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e"},{"lineNumber":103,"author":{"gitID":"-"},"content":"`allprojects` -\u003e `dependencies` -\u003e `compile` for the list of dependencies required."},{"lineNumber":104,"author":{"gitID":"-"},"content":"* **`compileTestJava`** +"},{"lineNumber":105,"author":{"gitID":"-"},"content":"Checks whether the project has the required dependencies to perform testing, and download any missing dependencies before compiling the test classes. +"},{"lineNumber":106,"author":{"gitID":"-"},"content":"See `build.gradle` -\u003e `allprojects` -\u003e `dependencies` -\u003e `testCompile` for the list of dependencies required."}],"authorContributionMap":{"wyinkok":1,"-":105}},{"path":"docs/LearningOutcomes.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Learning Outcomes"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc: macro"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toclevels: 1"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":sectnumlevels: 1"},{"lineNumber":7,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":8,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":":repoURL: https://github.com/se-edu/InternshipBook-level4/tree/master"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"After studying this code and completing the corresponding exercises, you should be able to,"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"toc::[]"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"\u003d\u003d Use API Design `[LO-ApiDesign]`"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"Note how components of InternshipBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":41,"author":{"gitID":"-"},"content":"image:LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d Use Assertions `[LO-Assertions]`"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"Note how the InternshipBook app uses Java ``assert``s to verify assumptions."},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Add more assertions"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"* Add more assertions to InternshipBook as you see fit."},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d Use Logging `[LO-Logging]`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"Note \u003c\u003cDeveloperGuide#logging, how the InternshipBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Add more logging"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"Add more logging to InternshipBook as you see fit."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"Note how InternshipBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: identify more places for defensive coding"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"Analyze the InternshipBook code/design to identify,"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"* where defensive coding is used"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* where the code can be more defensive"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"Note \u003c\u003cUsingGradle#, how the InternshipBook app uses Gradle to automate build tasks\u003e\u003e."},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use gradle to run tasks"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"Note \u003c\u003cUsingTravis#, how the InternshipBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/InternshipBook-level4[image:https://travis-ci.org/se-edu/InternshipBook-level4.svg?branch\u003dmaster[Build Status]])"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use Travis in your own project"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Set up Travis to perform CI on your own fork."},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/InternshipBook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/InternshipBook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After \u003c\u003cUsingCoveralls#, setting up Coveralls\u003e\u003e for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/InternshipBook-level4?branch\u003dmaster[Here] is an example."},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"* Use the IDE to measure code coverage of your tests."},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"},{"lineNumber":148,"author":{"gitID":"-"},"content":"class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":151,"author":{"gitID":"-"},"content":""},{"lineNumber":152,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"},{"lineNumber":153,"author":{"gitID":"-"},"content":""},{"lineNumber":154,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"},{"lineNumber":155,"author":{"gitID":"-"},"content":""},{"lineNumber":156,"author":{"gitID":"-"},"content":"* Use the test case design heuristics mentioned above to improve test cases in other places."},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":"* Test methods `prefsReadSave()` and `InternshipBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":"* Test method `handleInternshipBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleInternshipBookChangedEvent(...)` from its dependencies."},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":170,"author":{"gitID":"-"},"content":"----"},{"lineNumber":171,"author":{"gitID":"-"},"content":"@Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":174,"author":{"gitID":"-"},"content":"    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    assertHistoryCorrect(invalidCommand);"},{"lineNumber":176,"author":{"gitID":"-"},"content":"}"},{"lineNumber":177,"author":{"gitID":"-"},"content":"----"},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":180,"author":{"gitID":"-"},"content":""},{"lineNumber":181,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."},{"lineNumber":184,"author":{"gitID":"-"},"content":""},{"lineNumber":185,"author":{"gitID":"-"},"content":"* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* Write an integration test for the same method."},{"lineNumber":187,"author":{"gitID":"-"},"content":""},{"lineNumber":188,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"\u003d\u003d Write System Tests `[LO-SystemTesting]`"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."},{"lineNumber":193,"author":{"gitID":"-"},"content":""},{"lineNumber":194,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":195,"author":{"gitID":"-"},"content":""},{"lineNumber":196,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write more system tests"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"* Write system tests for the new features you add."},{"lineNumber":201,"author":{"gitID":"-"},"content":""},{"lineNumber":202,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Write more automated GUI tests"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"* Covered by `[LO-SystemTesting]`"},{"lineNumber":211,"author":{"gitID":"-"},"content":""},{"lineNumber":212,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":213,"author":{"gitID":"-"},"content":""},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":"Here are some example design patterns used in the code base."},{"lineNumber":217,"author":{"gitID":"-"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."},{"lineNumber":219,"author":{"gitID":"-"},"content":"* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."},{"lineNumber":220,"author":{"gitID":"-"},"content":"* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."},{"lineNumber":221,"author":{"gitID":"-"},"content":"* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."},{"lineNumber":222,"author":{"gitID":"-"},"content":"* *MVC Pattern* :"},{"lineNumber":223,"author":{"gitID":"-"},"content":"** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."},{"lineNumber":224,"author":{"gitID":"-"},"content":"** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."},{"lineNumber":225,"author":{"gitID":"TanCiKang"},"content":"** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `InternshipListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."},{"lineNumber":226,"author":{"gitID":"-"},"content":"* *Abstraction Occurrence Pattern* : Not currently used in the app."},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":229,"author":{"gitID":"-"},"content":""},{"lineNumber":230,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"},{"lineNumber":231,"author":{"gitID":"-"},"content":""},{"lineNumber":232,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"},{"lineNumber":235,"author":{"gitID":"-"},"content":"* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."},{"lineNumber":236,"author":{"gitID":"-"},"content":""},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Find more applicable patterns"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."},{"lineNumber":246,"author":{"gitID":"-"},"content":""},{"lineNumber":247,"author":{"gitID":"-"},"content":"*Resources*"},{"lineNumber":248,"author":{"gitID":"-"},"content":""},{"lineNumber":249,"author":{"gitID":"-"},"content":"* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"},{"lineNumber":250,"author":{"gitID":"-"},"content":""},{"lineNumber":251,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"},{"lineNumber":252,"author":{"gitID":"-"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."},{"lineNumber":254,"author":{"gitID":"-"},"content":""},{"lineNumber":255,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":256,"author":{"gitID":"-"},"content":""},{"lineNumber":257,"author":{"gitID":"-"},"content":"\u003d\u003d Do Code Reviews `[LO-CodeReview]`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"wyinkok"},"content":"* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/InternshipBook-level4/pull/147[example]."},{"lineNumber":260,"author":{"gitID":"wyinkok"},"content":"* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/InternshipBook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/InternshipBook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"},{"lineNumber":261,"author":{"gitID":"-"},"content":""},{"lineNumber":262,"author":{"gitID":"-"},"content":""},{"lineNumber":263,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exercise: Review a PR"},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"* Review PRs created by team members."}],"authorContributionMap":{"wyinkok":15,"-":249,"TanCiKang":1}},{"path":"docs/team/TanCiKang.adoc","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"\u003d Ci Kang - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d PROJECT: JobbiBot"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"---"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"JobbiBot is an interactive application that aims to guide university students in their search for internships. JobbiBot is a Command"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"Line Interface application where most of the functions are accessed through typing the commands. Through JobbiBot,"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"users would be able to narrow down the overwhelming amount of internship opportunities by different attributes such as industry with"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"the help of JobbiBot which will guide the user slowly through the process with prompts and useful tips."},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"* *Major enhancement*: Modified the find function *to enable user to do a distinct union search*"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"** What it does: Allows users to search for multiple keywords and all internships containing any of the keywords will be listed."},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"the internship in the list are then tagged with tags containing keywords which it matches."},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"** Justification: This feature improves the product significantly because a user can narrow down their internships opportunities"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"yet at the same time keep their options open by selecting multiple keywords to search for. The union search will return ALL internships"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"that matches any of the keywords."},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"** Highlights: Enable the search of multiple keywords in all the attributes of the internships and can repeat the find command indefinitely until"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"a suitable list of internships are obtained for further filtering."},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"* *Minor enhancement*: Modified the preview list on the left to show important attributes and full details on the right panel if internship is selected."},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/functional/TanCiKang.md[Functional Code]]"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":" [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/test/TanCiKang.md[Test code]]"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"* *Other contributions*:"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"** Project management:"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"*** Managed release `v1.3` on GitHub"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"*** Setting up of initial milestones, issues and tasks for the team"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"** Enhancements to existing features:"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"*** Implemented Role https://github.com/CS2103JAN2018-F11-B3/main/issues/54[#52], Salary https://github.com/CS2103JAN2018-F11-B3/main/issues/64[#64], Industry https://github.com/CS2103JAN2018-F11-B3/main/issues/66[#66] and Region https://github.com/CS2103JAN2018-F11-B3/main/issues/67[#67] attributes"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"*** Morph Person Class to Internship Class https://github.com/CS2103JAN2018-F11-B3/main/issues/65[#65]"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"** Documentation:"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"*** Updated the model component in developers guide to match the current model"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"*** Remove unused commands and features provided by AddressBook4 from the User guide https://github.com/CS2103JAN2018-F11-B3/main/pull/85/files[#85]"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"*** Added and updated NFR and UseCase to the Developers Guide https://github.com/CS2103JAN2018-F11-B3/main/pull/2[#2] https://github.com/CS2103JAN2018-F11-B3/main/pull/3[#3] https://github.com/CS2103JAN2018-F11-B3/main/pull/52[#52]"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"** Community:"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"*** Collate codes for team https://github.com/CS2103JAN2018-F11-B3/main/pull/102[#102]"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"*** Setting up of Travis Auto Publishing for the team"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"*** Populating of database https://github.com/CS2103JAN2018-F11-B3/main/pull/193[#193]"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"include::../UserGuide.adoc[tag\u003dfindwithfeature]"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":64,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":65,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"include::../DeveloperGuide.adoc[tag\u003dfindwithfeatures]"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"include::../DeveloperGuide.adoc[tag\u003dusecase1]"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"include::../DeveloperGuide.adoc[tag\u003dnonfunctionalrequirements]"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d Some Instructions for Manual Testing"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtestcikang]"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"---"}],"authorContributionMap":{"TanCiKang":67,"-":10}},{"path":"docs/UserGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"\u003d JobbiBot - User Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":":experimental:"},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":12,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":13,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B3/tree/master"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"By: `Team CS2103-F11-B3`     Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Introduction"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"JobbiBot is a desktop Chatbot application for those who *prefer to use an interactive app to source for internship"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"opportunities*. Hence, JobbiBot is *optimized for those who prefer to work with a Command Line Interface* (CLI) while"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"still having the benefits of a Graphical User Interface (GUI). If you can type fast, JobbiBot can find the most suitable"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"internship matches faster than traditional GUI apps. Interested? Jump to the \u003c\u003cQuick Start\u003e\u003e to get started. Enjoy!"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"\u003d\u003d Quick Start"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":".  Ensure you have Java version `1.8.0_60` or later installed in your Computer."},{"lineNumber":28,"author":{"gitID":"-"},"content":"+"},{"lineNumber":29,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":30,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":31,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":32,"author":{"gitID":"-"},"content":"+"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":".  Download the latest `jobbibot.jar` https://github.com/CS2103JAN2018-F11-B3/main/releases[here]."},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":".  Copy the file to the folder you want to use as the home folder for your JobbiBot."},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":".  Double-click the file to start the app. The GUI like the one below should appear in a few seconds."},{"lineNumber":36,"author":{"gitID":"-"},"content":"+"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"image::ui.png[width\u003d\"790\"]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"+"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":".  Type the command `start` in the command box and press kbd:[Enter] if you would like to begin a conversation with JobbiBot."},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":".  Alternatively, if you would like to search for an internship directly without conversing with JobbiBot. Type your command in the command box and press kbd:[Enter] to execute it. +"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":".  Some example commands you can try:"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"* *`help`* : open the help window"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"* *`list`* : lists all internship"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"* **`save`**`3` : save the 3rd internship shown in the current list to a personal Saved Internship Collection"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"* **`find saved`** : view the Saved Internship Collection"},{"lineNumber":48,"author":{"gitID":"-"},"content":"* *`exit`* : exits the app"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":".  Refer to \u003c\u003cFeatures\u003e\u003e for more details of each command."},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"[[Features]]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"\u003d\u003d Features"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Viewing help : `help`"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"Shows more details of each command and a glossary of industries and roles that the student may refer to in his or her search."},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"Format: `help`"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"// tag::startnew[]"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Start conversation with program : `start` [since v1.3]"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"Initiates the message thread of JobbiBot. +"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"Format: `start`"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Clears previous conversation with program : `new` [since v1.3]"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"Clears previous message thread with JobbiBot. To restart the conversation, user has to type `start` again except for the `exit` and `help` commands. +"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"Format: `new`"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"Example:"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"* `new` +"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"Clears previous conversation with JobbiBot."},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"* `list` +"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"Typing `list` command before `start` command will throw an error. User will be prompted to type the `start` command first."},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"* `start` +"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"Initiates a new message thread with JobbiBot."},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"// end::startnew[]"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"// tag::findwithfeature[]"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Find internships by keyword(s): `find` [since v1.2]"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"Finds internships which contains any of the keywords. +"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"Format: `find KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"****"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"* The find is case insensitive. e.g `analyst` will match `Analyst`"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"* Tags other than \u0027saved\u0027 tag attached when using find/search function will be removed when using `list`."},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"* The order of the keywords does not matter. e.g. `Sales Marketing` will match `Marketing Sales`"},{"lineNumber":93,"author":{"gitID":"-"},"content":"* Duplicate keywords does not matter e.g `Sales Marketing Sales` is simply `Sales Marketing`"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"* Internships matching at least one keyword will be returned (i.e. an OR search). e.g. `Micro Dyson` will return `Dyson Technology`, `Dyson Engineering` `Microsoft`"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"* Keyword(s) matching the internship is added to the internship as tag(s)."},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"* Keyword tags are reset if user types the `find` command again."},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"****"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"* `find Data Analyst` +"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"Returns any internship with `Data` or `Analyst` in its description."},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"* `find Dow Micron Dyson` +"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"Returns any internship having names or description matching `Dow`, `Micron`, or `Dyson`."},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"* `find Engineering` +"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"Returns any internship having `Engineering` in its description."},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"* `find Serangoon` +"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"Returns any internship that has a region matching `Serangoon` in it."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* `find 800` +"},{"lineNumber":111,"author":{"gitID":"-"},"content":"Returns any internship that has a salary of 800 ONLY +"},{"lineNumber":112,"author":{"gitID":"-"},"content":"Tip: use `sort salary` to see internship containing salaries above a certain value"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"// end::findwithfeature[]"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"// tag::filterSort[]"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Filtering Internship by keyword(s): `filter` [since v1.3]"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"Filters the displayed internship list according to the given keywords.  +"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"Format: `filter KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"-"},"content":"****"},{"lineNumber":123,"author":{"gitID":"-"},"content":"* Only internships in the last searched (find command) list will be filtered"},{"lineNumber":124,"author":{"gitID":"-"},"content":"* If there is no last searched (find command), filter command will filter from the entire list"},{"lineNumber":125,"author":{"gitID":"-"},"content":"* If the list command is used, the searched list (find command) is reset, and any filter command used before find command will filter the entire list"},{"lineNumber":126,"author":{"gitID":"-"},"content":"* The keywords is case insensitive. e.g `marketing` will match `Marketing`"},{"lineNumber":127,"author":{"gitID":"-"},"content":"* The order of the keywords does not matter. e.g. `Marketing Analytics` will match `Analytics Marketing`"},{"lineNumber":128,"author":{"gitID":"-"},"content":"* Only full words will be matched e.g. `Market` will not match `Marketing`"},{"lineNumber":129,"author":{"gitID":"-"},"content":"* Note that there is no tags added unlike the case of find command, as the filter command matches only internships containing all the keywords argument and hence there is no need to distinguish between the different keywords."},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"* Only internships which contain all the keyword will be returned. e.g `filter Marketing Analytics` will return only internships containing Marketing AND Analytics but not Marketing Research or Data Analytics"},{"lineNumber":131,"author":{"gitID":"-"},"content":"****"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"* `filter data` +"},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":"Returns any entries containing data. e.g Data Analytics, Data Science"},{"lineNumber":137,"author":{"gitID":"-"},"content":"* `filter data analytics` +"},{"lineNumber":138,"author":{"gitID":"-"},"content":"Returns only entries containing data and analytics. e.g `data analytics internship`, `data analytics singapore`"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"* `filter 1000` +"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"Returns any internship that has a salary of 1000 ONLY +"},{"lineNumber":141,"author":{"gitID":"-"},"content":"Tip: use `sort salary` to see internship containing salaries above a certain value"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Sorting Internship by keyword(s): `sort` [since v1.4]"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":"Sorts the internship list according to the given keyword(s). +"},{"lineNumber":146,"author":{"gitID":"-"},"content":"Format: `sort KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":147,"author":{"gitID":"-"},"content":"Keywords are only limited to the following internship attribute types: `Industry` `Region` `Name` `Role` `Salary` +"},{"lineNumber":148,"author":{"gitID":"-"},"content":"Keywords can include \u0027-\u0027 (e.g `-Industry` `-Region` `-Name` `-Role` `-Salary`) to reverse the order of the sort for that attribute"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"****"},{"lineNumber":151,"author":{"gitID":"-"},"content":"* Salary is sorted from highest to lowest by default"},{"lineNumber":152,"author":{"gitID":"-"},"content":"* Other attributes are sorted from A-Z by default"},{"lineNumber":153,"author":{"gitID":"-"},"content":"* \u0027-\u0027 character before the attribute (e.g -industry) causes that attribute to be sorted in revese order"},{"lineNumber":154,"author":{"gitID":"-"},"content":"* The sort is case insensitive. e.g `name` will match `Name`"},{"lineNumber":155,"author":{"gitID":"-"},"content":"* The ordering of the keywords matters. e.g `sort Name Salary` will sort name before salary"},{"lineNumber":156,"author":{"gitID":"-"},"content":"* Only the first three keywords will be sorted. Subsequent keywords will be ignored"},{"lineNumber":157,"author":{"gitID":"-"},"content":"****"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":160,"author":{"gitID":"-"},"content":""},{"lineNumber":161,"author":{"gitID":"-"},"content":"* `sort name` +"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"Sorts the internship list according to name attribute."},{"lineNumber":163,"author":{"gitID":"TanCiKang"},"content":"* `sort salary region` +"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"Sorts the internship list according to salary first then region."},{"lineNumber":165,"author":{"gitID":"-"},"content":"* `sort salary region industry` +"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"Sorts the internship list according to salary first then region, then industry."},{"lineNumber":167,"author":{"gitID":"-"},"content":"* `sort salary salary` +"},{"lineNumber":168,"author":{"gitID":"-"},"content":"Is simply `sort salary`"},{"lineNumber":169,"author":{"gitID":"-"},"content":"* `sort salary name industry role` +"},{"lineNumber":170,"author":{"gitID":"wyinkok"},"content":"Only the first three attributes will be sorted. i.e `sort salary name industry` but not by role"},{"lineNumber":171,"author":{"gitID":"-"},"content":"* `sort -role` +"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"Sorts the internship list according to role attribute in reverse order (from Z-A)."},{"lineNumber":173,"author":{"gitID":"-"},"content":"* `sort name -industry` +"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"Sorts the internship list according to name (from A-Z), and then by industry (from Z-A)."},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"// end::filterSort[]"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"// tag::saveunsave[]"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Saving an internship to a Saved Collection : `save` [since v1.2]"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"Saves the specified internship from the internship book. +"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":"Format: `save INDEX`"},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"****"},{"lineNumber":184,"author":{"gitID":"wyinkok"},"content":"* Saves the internship at the specified `INDEX`."},{"lineNumber":185,"author":{"gitID":"wyinkok"},"content":"* The index refers to the index number that is shown in the most recent listing."},{"lineNumber":186,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":187,"author":{"gitID":"-"},"content":"****"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":190,"author":{"gitID":"-"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"* `list` +"},{"lineNumber":192,"author":{"gitID":"wyinkok"},"content":"`save 2` +"},{"lineNumber":193,"author":{"gitID":"wyinkok"},"content":"Saves the 2nd internship in the internship book."},{"lineNumber":194,"author":{"gitID":"wyinkok"},"content":"* `find Google` +"},{"lineNumber":195,"author":{"gitID":"wyinkok"},"content":"`save 1` +"},{"lineNumber":196,"author":{"gitID":"wyinkok"},"content":"Saves the 1st internship in the results of the `find` command."},{"lineNumber":197,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":198,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Remove a Saved internship from a Saved Collection : `unsave` [since v1.2]"},{"lineNumber":199,"author":{"gitID":"wyinkok"},"content":"Removes the specified internship from the saved internship collection. +"},{"lineNumber":200,"author":{"gitID":"wyinkok"},"content":"Format: `unsave INDEX`"},{"lineNumber":201,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":202,"author":{"gitID":"wyinkok"},"content":"****"},{"lineNumber":203,"author":{"gitID":"wyinkok"},"content":"* Removes the internship at the specified `INDEX`."},{"lineNumber":204,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":205,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* 1, 2, 3, ..."},{"lineNumber":206,"author":{"gitID":"-"},"content":"****"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"wyinkok"},"content":"Examples:"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"wyinkok"},"content":"* `find saved` +"},{"lineNumber":211,"author":{"gitID":"wyinkok"},"content":"`unsave 2` +"},{"lineNumber":212,"author":{"gitID":"wyinkok"},"content":"Removes the 2nd internship in the saved internship collection."},{"lineNumber":213,"author":{"gitID":"wyinkok"},"content":"* `find Google` +"},{"lineNumber":214,"author":{"gitID":"wyinkok"},"content":"`save 1` +"},{"lineNumber":215,"author":{"gitID":"wyinkok"},"content":"`unsave 1` +"},{"lineNumber":216,"author":{"gitID":"wyinkok"},"content":"Removes the 1st internship in the results of the `find` command the saved collection."},{"lineNumber":217,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Shows the full Saved Internship Collection : `find saved` or `filter saved` [since v1.3]"},{"lineNumber":219,"author":{"gitID":"wyinkok"},"content":"Shows all the internships with a `saved` tag. +"},{"lineNumber":220,"author":{"gitID":"wyinkok"},"content":"Format: `find saved` or `filter saved`"},{"lineNumber":221,"author":{"gitID":"wyinkok"},"content":"// end::saveunsave[]"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Selecting an internship : `select`"},{"lineNumber":224,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":225,"author":{"gitID":"TanCiKang"},"content":"Selects the internship identified by the index number used in the last internship listing. +"},{"lineNumber":226,"author":{"gitID":"-"},"content":"Format: `select INDEX`"},{"lineNumber":227,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":228,"author":{"gitID":"wyinkok"},"content":"****"},{"lineNumber":229,"author":{"gitID":"wyinkok"},"content":"* Selects the internship and loads the full internship web page for the internship at the specified `INDEX`."},{"lineNumber":230,"author":{"gitID":"-"},"content":"* The index refers to the index number shown in the most recent listing."},{"lineNumber":231,"author":{"gitID":"-"},"content":"* The index *must be a positive integer* `1, 2, 3, ...`"},{"lineNumber":232,"author":{"gitID":"-"},"content":"****"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"wyinkok"},"content":"Examples:"},{"lineNumber":235,"author":{"gitID":"-"},"content":""},{"lineNumber":236,"author":{"gitID":"wyinkok"},"content":"* `list` +"},{"lineNumber":237,"author":{"gitID":"wyinkok"},"content":"`select 2` +"},{"lineNumber":238,"author":{"gitID":"wyinkok"},"content":"Selects the 2nd internship in the internship book."},{"lineNumber":239,"author":{"gitID":"wyinkok"},"content":"* `find Singapore Tourism Board` +"},{"lineNumber":240,"author":{"gitID":"-"},"content":"`select 1` +"},{"lineNumber":241,"author":{"gitID":"TanCiKang"},"content":"Selects the 1st internship in the results of the `find` command."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Listing all internships : `list`"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"wyinkok"},"content":"Shows a list of all internships in the internship database. +"},{"lineNumber":246,"author":{"gitID":"-"},"content":"Format: `list`"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Listing entered user commands : `history`"},{"lineNumber":249,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":250,"author":{"gitID":"wyinkok"},"content":"Lists all the commands that you have entered in reverse chronological order. +"},{"lineNumber":251,"author":{"gitID":"wyinkok"},"content":"Format: `history`"},{"lineNumber":252,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":253,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":254,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undoing previous command : `undo`"},{"lineNumber":255,"author":{"gitID":"-"},"content":""},{"lineNumber":256,"author":{"gitID":"wyinkok"},"content":"Restores the internship database to the state before the previous _undoable_ command was executed. +"},{"lineNumber":257,"author":{"gitID":"-"},"content":"Format: `undo`"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":260,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":261,"author":{"gitID":"wyinkok"},"content":"Undoable commands: those commands that modify the internship book\u0027s content (`save` and `unsave`)."},{"lineNumber":262,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d"},{"lineNumber":263,"author":{"gitID":"-"},"content":""},{"lineNumber":264,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"wyinkok"},"content":"* `save 1` +"},{"lineNumber":267,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":268,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `save 1` command) +"},{"lineNumber":269,"author":{"gitID":"-"},"content":""},{"lineNumber":270,"author":{"gitID":"-"},"content":"* `select 1` +"},{"lineNumber":271,"author":{"gitID":"-"},"content":"`list` +"},{"lineNumber":272,"author":{"gitID":"-"},"content":"`undo` +"},{"lineNumber":273,"author":{"gitID":"-"},"content":"The `undo` command fails as there are no undoable commands executed previously."},{"lineNumber":274,"author":{"gitID":"-"},"content":""},{"lineNumber":275,"author":{"gitID":"wyinkok"},"content":"* `save 1` +"},{"lineNumber":276,"author":{"gitID":"wyinkok"},"content":"`unsave 1` +"},{"lineNumber":277,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `unsave 1` command) +"},{"lineNumber":278,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `save 1` command) +"},{"lineNumber":279,"author":{"gitID":"-"},"content":""},{"lineNumber":280,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Redoing the previously undone command : `redo`"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"Reverses the most recent `undo` command. +"},{"lineNumber":283,"author":{"gitID":"-"},"content":"Format: `redo`"},{"lineNumber":284,"author":{"gitID":"-"},"content":""},{"lineNumber":285,"author":{"gitID":"-"},"content":"Examples:"},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"wyinkok"},"content":"* `save 1` +"},{"lineNumber":288,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `save 1` command) +"},{"lineNumber":289,"author":{"gitID":"wyinkok"},"content":"`redo` (reapplies the `save 1` command) +"},{"lineNumber":290,"author":{"gitID":"-"},"content":""},{"lineNumber":291,"author":{"gitID":"wyinkok"},"content":"* `select 1` +"},{"lineNumber":292,"author":{"gitID":"-"},"content":"`redo` +"},{"lineNumber":293,"author":{"gitID":"-"},"content":"The `redo` command fails as there are no `undo` commands executed previously."},{"lineNumber":294,"author":{"gitID":"-"},"content":""},{"lineNumber":295,"author":{"gitID":"wyinkok"},"content":"* `save 1` +"},{"lineNumber":296,"author":{"gitID":"wyinkok"},"content":"`unsave 1` +"},{"lineNumber":297,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `unsave 1` command) +"},{"lineNumber":298,"author":{"gitID":"wyinkok"},"content":"`undo` (reverses the `save 1` command) +"},{"lineNumber":299,"author":{"gitID":"wyinkok"},"content":"`redo` (reapplies the `save 1` command) +"},{"lineNumber":300,"author":{"gitID":"wyinkok"},"content":"`redo` (reapplies the `unsave 1` command) +"},{"lineNumber":301,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":304,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Exiting the program : `exit`"},{"lineNumber":305,"author":{"gitID":"-"},"content":""},{"lineNumber":306,"author":{"gitID":"-"},"content":"Exits the program. +"},{"lineNumber":307,"author":{"gitID":"-"},"content":"Format: `exit`"},{"lineNumber":308,"author":{"gitID":"-"},"content":""},{"lineNumber":309,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Saving the data"},{"lineNumber":310,"author":{"gitID":"-"},"content":""},{"lineNumber":311,"author":{"gitID":"wyinkok"},"content":"Internships data are saved in the hard disk automatically after any command that changes the data. +"},{"lineNumber":312,"author":{"gitID":"wyinkok"},"content":"There is no need to save manually"},{"lineNumber":313,"author":{"gitID":"-"},"content":""},{"lineNumber":314,"author":{"gitID":"-"},"content":"\u003d\u003d Command Summary"},{"lineNumber":315,"author":{"gitID":"-"},"content":""},{"lineNumber":316,"author":{"gitID":"wyinkok"},"content":"* *Help* : `help`"},{"lineNumber":317,"author":{"gitID":"wyinkok"},"content":"* *Start JobbiBot conversation* : `start`"},{"lineNumber":318,"author":{"gitID":"wyinkok"},"content":"* *Clears previous JobbiBot conversation*: `new`"},{"lineNumber":319,"author":{"gitID":"-"},"content":"* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":320,"author":{"gitID":"-"},"content":"e.g. `find Analytics Engineering`"},{"lineNumber":321,"author":{"gitID":"-"},"content":"* *Filter* : `find KEYWORD [MORE_KEYWORDS]` +"},{"lineNumber":322,"author":{"gitID":"-"},"content":"e.g. `filter Marketing Singapore`"},{"lineNumber":323,"author":{"gitID":"wyinkok"},"content":"* *Sort* : `sort KEYWORD [MORE_KEYWORDS]`"},{"lineNumber":324,"author":{"gitID":"wyinkok"},"content":"e.g. `sort industry role salary`"},{"lineNumber":325,"author":{"gitID":"wyinkok"},"content":"* *Save an internship*  : `save INDEX` +"},{"lineNumber":326,"author":{"gitID":"wyinkok"},"content":"e.g. `save 2`"},{"lineNumber":327,"author":{"gitID":"wyinkok"},"content":"* *Unsave an internship* : `unsave INDEX` +"},{"lineNumber":328,"author":{"gitID":"wyinkok"},"content":"e.g. `unsave 2`"},{"lineNumber":329,"author":{"gitID":"wyinkok"},"content":"* *Show Saved Internship Collection* : `find saved` or `filter saved` +"},{"lineNumber":330,"author":{"gitID":"wyinkok"},"content":"e.g. `find saved` or `filter saved`"},{"lineNumber":331,"author":{"gitID":"wyinkok"},"content":"* *Select an internship* : `select INDEX` +"},{"lineNumber":332,"author":{"gitID":"wyinkok"},"content":"e.g.`select 3`"},{"lineNumber":333,"author":{"gitID":"wyinkok"},"content":"* *List all internships* : `list`"},{"lineNumber":334,"author":{"gitID":"-"},"content":"* *Undo* : `undo`"},{"lineNumber":335,"author":{"gitID":"-"},"content":"* *Redo* : `redo`"},{"lineNumber":336,"author":{"gitID":"wyinkok"},"content":"* *Exit* : `exit`"},{"lineNumber":337,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":338,"author":{"gitID":"wyinkok"},"content":"// tag::glossary[]"},{"lineNumber":339,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d List of Industries"},{"lineNumber":340,"author":{"gitID":"wyinkok"},"content":"This serves as a non-exhaustive lists of industries that users can search for in JobbiBot."},{"lineNumber":341,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":342,"author":{"gitID":"wyinkok"},"content":"* Arts"},{"lineNumber":343,"author":{"gitID":"wyinkok"},"content":"* Automotive"},{"lineNumber":344,"author":{"gitID":"wyinkok"},"content":"* Business"},{"lineNumber":345,"author":{"gitID":"wyinkok"},"content":"* Consultancy"},{"lineNumber":346,"author":{"gitID":"wyinkok"},"content":"* Education"},{"lineNumber":347,"author":{"gitID":"wyinkok"},"content":"* Finance"},{"lineNumber":348,"author":{"gitID":"wyinkok"},"content":"* Healthcare"},{"lineNumber":349,"author":{"gitID":"wyinkok"},"content":"* Hospitality"},{"lineNumber":350,"author":{"gitID":"wyinkok"},"content":"* Legal"},{"lineNumber":351,"author":{"gitID":"wyinkok"},"content":"* Manufacturing"},{"lineNumber":352,"author":{"gitID":"wyinkok"},"content":"* Media"},{"lineNumber":353,"author":{"gitID":"wyinkok"},"content":"* Retail"},{"lineNumber":354,"author":{"gitID":"wyinkok"},"content":"* Social Enterprise"},{"lineNumber":355,"author":{"gitID":"wyinkok"},"content":"* Technology"},{"lineNumber":356,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":357,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d List of Internship Roles"},{"lineNumber":358,"author":{"gitID":"wyinkok"},"content":"This table is a non exhaustive list of potential internship roles that users can search for in JobbiBot. Internship roles are organised by industry but not all industries are listed in this table."},{"lineNumber":359,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":360,"author":{"gitID":"wyinkok"},"content":"[width\u003d\"100%\",cols\u003d\"35%,65%\",options\u003d\"header\",]"},{"lineNumber":361,"author":{"gitID":"wyinkok"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":362,"author":{"gitID":"wyinkok"},"content":"|Industry | Internship Role"},{"lineNumber":363,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":364,"author":{"gitID":"wyinkok"},"content":".5+| Arts            | Animator"},{"lineNumber":365,"author":{"gitID":"wyinkok"},"content":"                     | Film Editor"},{"lineNumber":366,"author":{"gitID":"wyinkok"},"content":"                     | Graphic Designer"},{"lineNumber":367,"author":{"gitID":"wyinkok"},"content":"                     | Photographer"},{"lineNumber":368,"author":{"gitID":"wyinkok"},"content":"                     | Videographer"},{"lineNumber":369,"author":{"gitID":"TanCiKang"},"content":".8+| Business"},{"lineNumber":370,"author":{"gitID":"TanCiKang"},"content":"                     | Business Analyst"},{"lineNumber":371,"author":{"gitID":"wyinkok"},"content":"                     | Business Analytics"},{"lineNumber":372,"author":{"gitID":"wyinkok"},"content":"                     | Business Development"},{"lineNumber":373,"author":{"gitID":"TanCiKang"},"content":"                     | Business Development Associate"},{"lineNumber":374,"author":{"gitID":"wyinkok"},"content":"                     | Market Researcher"},{"lineNumber":375,"author":{"gitID":"wyinkok"},"content":"                     | Operations"},{"lineNumber":376,"author":{"gitID":"wyinkok"},"content":"                     | Sales"},{"lineNumber":377,"author":{"gitID":"wyinkok"},"content":"                     | Product Manager"},{"lineNumber":378,"author":{"gitID":"wyinkok"},"content":".4+| Consultancy"},{"lineNumber":379,"author":{"gitID":"wyinkok"},"content":"                     | Business Consultant"},{"lineNumber":380,"author":{"gitID":"wyinkok"},"content":"                     | Human Resource Consultant"},{"lineNumber":381,"author":{"gitID":"wyinkok"},"content":"                     | Sales Marketing Consultant"},{"lineNumber":382,"author":{"gitID":"wyinkok"},"content":"                     | Wealth Management Consultant"},{"lineNumber":383,"author":{"gitID":"wyinkok"},"content":".1+| Education"},{"lineNumber":384,"author":{"gitID":"wyinkok"},"content":"                     | Teacher"},{"lineNumber":385,"author":{"gitID":"wyinkok"},"content":".6+| Finance"},{"lineNumber":386,"author":{"gitID":"wyinkok"},"content":"                     | Accountant"},{"lineNumber":387,"author":{"gitID":"wyinkok"},"content":"                     | Audit Assistant"},{"lineNumber":388,"author":{"gitID":"wyinkok"},"content":"                     | Corporate Security Analyst"},{"lineNumber":389,"author":{"gitID":"wyinkok"},"content":"                     | Private Equity Analyst"},{"lineNumber":390,"author":{"gitID":"wyinkok"},"content":"                     | Risk Management"},{"lineNumber":391,"author":{"gitID":"wyinkok"},"content":"                     | Wealth Management Analyst"},{"lineNumber":392,"author":{"gitID":"wyinkok"},"content":".4+| Hospitality"},{"lineNumber":393,"author":{"gitID":"wyinkok"},"content":"                     | Customer Experience"},{"lineNumber":394,"author":{"gitID":"wyinkok"},"content":"                     | Events Planning and Management"},{"lineNumber":395,"author":{"gitID":"wyinkok"},"content":"                     | Guest Services and Relations"},{"lineNumber":396,"author":{"gitID":"wyinkok"},"content":"                     | Sustainability"},{"lineNumber":397,"author":{"gitID":"TanCiKang"},"content":".3+| IT"},{"lineNumber":398,"author":{"gitID":"TanCiKang"},"content":"                     | Business Development Associate"},{"lineNumber":399,"author":{"gitID":"TanCiKang"},"content":"                     | Technology Analyst Intern"},{"lineNumber":400,"author":{"gitID":"TanCiKang"},"content":"                     | Web Technology Intern"},{"lineNumber":401,"author":{"gitID":"wyinkok"},"content":".1+| Legal"},{"lineNumber":402,"author":{"gitID":"wyinkok"},"content":"                     | Legal Counsel"},{"lineNumber":403,"author":{"gitID":"wyinkok"},"content":".7+| Media"},{"lineNumber":404,"author":{"gitID":"wyinkok"},"content":"                     | Advertising / Content Creator"},{"lineNumber":405,"author":{"gitID":"wyinkok"},"content":"                     | Digital Marketer"},{"lineNumber":406,"author":{"gitID":"wyinkok"},"content":"                     | Editor"},{"lineNumber":407,"author":{"gitID":"wyinkok"},"content":"                     | Photojournalist"},{"lineNumber":408,"author":{"gitID":"wyinkok"},"content":"                     | Public Relation"},{"lineNumber":409,"author":{"gitID":"wyinkok"},"content":"                     | Social Media"},{"lineNumber":410,"author":{"gitID":"wyinkok"},"content":"                     | Writer"},{"lineNumber":411,"author":{"gitID":"wyinkok"},"content":" .3+| Retail"},{"lineNumber":412,"author":{"gitID":"wyinkok"},"content":"                     | Buyer"},{"lineNumber":413,"author":{"gitID":"wyinkok"},"content":"                     | Merchandiser"},{"lineNumber":414,"author":{"gitID":"wyinkok"},"content":"                     | Shop Assistant"},{"lineNumber":415,"author":{"gitID":"wyinkok"},"content":".18+| Technology"},{"lineNumber":416,"author":{"gitID":"wyinkok"},"content":"                     | Android Developer"},{"lineNumber":417,"author":{"gitID":"wyinkok"},"content":"                     | Computer Hardware Engineer"},{"lineNumber":418,"author":{"gitID":"wyinkok"},"content":"                     | Data Visualisation Engineer"},{"lineNumber":419,"author":{"gitID":"wyinkok"},"content":"                     | Data Scientist"},{"lineNumber":420,"author":{"gitID":"wyinkok"},"content":"                     | Full Stack Developer"},{"lineNumber":421,"author":{"gitID":"wyinkok"},"content":"                     | Information Security Analyst"},{"lineNumber":422,"author":{"gitID":"wyinkok"},"content":"                     | iOS Developer"},{"lineNumber":423,"author":{"gitID":"wyinkok"},"content":"                     | IT Support"},{"lineNumber":424,"author":{"gitID":"wyinkok"},"content":"                     | Machine Learning Researcher"},{"lineNumber":425,"author":{"gitID":"wyinkok"},"content":"                     | Mobile Developer"},{"lineNumber":426,"author":{"gitID":"wyinkok"},"content":"                     | .NET Developer"},{"lineNumber":427,"author":{"gitID":"wyinkok"},"content":"                     | Networks Engineer"},{"lineNumber":428,"author":{"gitID":"wyinkok"},"content":"                     | Software Engineer"},{"lineNumber":429,"author":{"gitID":"wyinkok"},"content":"                     | Software Quality Assurance Engineer"},{"lineNumber":430,"author":{"gitID":"wyinkok"},"content":"                     | Unity3D (AR/VR)"},{"lineNumber":431,"author":{"gitID":"wyinkok"},"content":"                     | User Experience Designer"},{"lineNumber":432,"author":{"gitID":"wyinkok"},"content":"                     | User Interface Designer"},{"lineNumber":433,"author":{"gitID":"wyinkok"},"content":"                     | Web Development"},{"lineNumber":434,"author":{"gitID":"wyinkok"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":435,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":436,"author":{"gitID":"wyinkok"},"content":"// end::glossary[]"}],"authorContributionMap":{"niloc94":1,"wyinkok":238,"TanCiKang":27,"-":170}},{"path":"docs/AboutUs.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d About Us"},{"lineNumber":2,"author":{"gitID":"-"},"content":":relfileprefix: team/"},{"lineNumber":3,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":4,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"JobbiBot was developed by CS2103-F11-B3 team. +"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"//_{The dummy content given below serves as a placeholder to be used by future forks of the project.}_ +"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"//{empty} +"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"and https://www.yale-nus.edu.sg[Yale-NUS College]."},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"\u003d\u003d Project Team"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Kok Wyin"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"image::Wyin.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"{empty}[http://github.com/wyinkok[github]]"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"{empty}[https://github.com/wyinkok/main/blob/master/docs/team/WyinKok-projectportfolio.adoc[PPP via Github]]"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"Role: Team Lead +"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"Responsibilities: UI component"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Colin Ng"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"image::Colin.png[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"{empty}[http://github.com/niloc94[github]]"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"Role: Developer +"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"Responsibilities: Model component"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Tan Ci Kang"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"image::CiKang.jpg[width\u003d\"150\", align\u003d\"left\"]"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"{empty}[https://github.com/TanCiKang[github]] [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/docs/team/TanCiKang.adoc[Project Portfolio]]"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"Role: Developer +"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"Responsibilities: Logic component"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"\u0027\u0027\u0027"},{"lineNumber":42,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"wyinkok":15,"-":21,"TanCiKang":6}},{"path":"docs/team/WyinKok-projectportfolio.adoc","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"\u003d Wyin Kok - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d PROJECT: JobbiBot"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"---"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"Jobbi Bot is a Chatbot Internship Search Application . Although it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"Users will communicate with Jobbi their via the CLI. In response, Jobbi will intelligently match the most suitable internships to the user\u0027s preferences."},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"* *Major enhancement*: Revamp the GUI into a chat application."},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"** What it does: It provides the end user with an interactive interface to search for their ideal internships."},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"** Justification: This feature caters to users who prefer to use an interactive application or require step by step guidance in searching for internships."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"** Highlights: This enhancement enhances the existing user interface. It required a firm understanding of user profile in order to create a chatbot persona that is realistic and approachable. The implementation was too challenging as it required an understanding of JavaFX components to revamp the GUI. The GUI was also beautified make JobbiBot more aesthetically appealing to young students."},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"* *Minor enhancement*: Added Save and Unsave commands that allows user to add and remove specific internships to their personal Saved Collection."},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/functional/wyinkok.md[Functional code]] [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/test/wyinkok.md[Test code]] [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/unused/wyinkok-unused.md[Unused code]]"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"* *Other contributions*:"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"** Project management:"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"*** Set up the team repository."},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"*** Managed releases `v1.4` on GitHub."},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"*** Set up all the tags, tagged issues and responded to most of the bugs from peer testing."},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"** Planning and design:"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"*** Designed the wireframe of the new JobbiBot GUI."},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"*** Planned attributes to be displayed on individual Internship Cards and Browser Panel."},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"*** Created multiple iterations of chatbot conversation scenarios and implemented the final iteration. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/81[#81])"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"** Enhancements to existing features:"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"*** Frequent quality control for User Guide and Developer Guide."},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"*** Populated database of internships. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/155[#155])"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"*** Removed unused commands and features provided by Address Book version 4. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/153[#153])"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"*** Updated the GUI color scheme and font. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/9[#9])"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"** Documentation:"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"*** Edited the ReadMe document. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/99[#99], https://github.com/CS2103JAN2018-F11-B3/main/pull/103[#103])"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"*** Did cosmetic tweaks to existing contents of the User Guide and added a suggested list of industries and roles for our target user. (Pull request https://github.com/CS2103JAN2018-F11-B3/main/pull/89[#89])"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"*** Quality control for both User guide and Developer\u0027s guide."},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"*** Updated use cases, target profile and user stories as we refined our product through the weeks."},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"** Community:"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"*** Reported bugs and suggestions for other teams in the class. (Examples:  https://github.com/CS2103JAN2018-W11-B4/main/issues/180[1], https://github.com/CS2103JAN2018-W11-B4/main/issues/199[2], https://github.com/CS2103JAN2018-W11-B4/main/issues/183[3])"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":56,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":57,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"include::../UserGuide.adoc[tag\u003dstartnew]"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"include::../UserGuide.adoc[tag\u003dsaveunsave]"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":67,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":68,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"include::../DeveloperGuide.adoc[tag\u003dui]"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"include::../DeveloperGuide.adoc[tag\u003dchatbot]"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"include::../DeveloperGuide.adoc[tag\u003dsaveunsave]"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Some Instructions for Manual Testing"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"include::../DeveloperGuide.adoc[tag\u003dstartmanualtestwyin]"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"include::../DeveloperGuide.adoc[tag\u003dsavemanualtestwyin]"}],"authorContributionMap":{"wyinkok":65,"-":15}},{"path":"README.adoc","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"\u003d JobbiBot"},{"lineNumber":2,"author":{"gitID":"-"},"content":"ifdef::env-github,env-browser[:relfileprefix: docs/]"},{"lineNumber":3,"author":{"gitID":"-"},"content":""},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"https://travis-ci.org/CS2103JAN2018-F11-B3/main[image:https://travis-ci.org/se-edu/InternshipBook-level4.svg?branch\u003dmaster[Build Status]]"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"https://ci.appveyor.com/project/damithc/InternshipBook-level4[image:https://ci.appveyor.com/api/projects/status/3boko2x2vr5cc3w2?svg\u003dtrue[Build status]]"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"https://coveralls.io/github/se-edu/InternshipBook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/InternshipBook-level4/badge.svg?branch\u003dmaster[Coverage Status]]"},{"lineNumber":8,"author":{"gitID":"-"},"content":"https://gitter.im/se-edu/Lobby[image:https://badges.gitter.im/se-edu/Lobby.svg[Gitter chat]]"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"image::docs/images/ui.png[width\u003d\"600\"]"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"ifndef::env-github[]"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"image::images/ui.png[width\u003d\"600\"]"},{"lineNumber":16,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"Jobbi Bot is a Chatbot Internship Search Application . Although it has a GUI, most of the user interactions happen using a CLI (Command Line Interface)."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"Users will communicate with Jobbi their via the CLI. In response, Jobbi will intelligently match the most suitable internships to the user\u0027s preferences."},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"Enjoy!"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"\u003d\u003d Site Map"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"* https://github.com/CS2103JAN2018-F11-B3/main/releases[Download the Latest Releases here]"},{"lineNumber":25,"author":{"gitID":"-"},"content":"* \u003c\u003cUserGuide#, User Guide\u003e\u003e"},{"lineNumber":26,"author":{"gitID":"-"},"content":"* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"},{"lineNumber":27,"author":{"gitID":"-"},"content":"* \u003c\u003cAboutUs#, About Us\u003e\u003e"},{"lineNumber":28,"author":{"gitID":"-"},"content":"* \u003c\u003cContactUs#, Contact Us\u003e\u003e"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"\u003d\u003d Acknowledgements"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"},{"lineNumber":33,"author":{"gitID":"-"},"content":"_Marco Jakob_."},{"lineNumber":34,"author":{"gitID":"-"},"content":"* Libraries used: https://github.com/TomasMikula/EasyBind[EasyBind], https://github.com/TestFX/TestFX[TextFX], https://bitbucket.org/controlsfx/controlsfx/[ControlsFX], https://github.com/FasterXML/jackson[Jackson], https://github.com/google/guava[Guava], https://github.com/junit-team/junit4[JUnit4]"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"\u003d\u003d Licence : link:LICENSE[MIT]"}],"authorContributionMap":{"wyinkok":11,"-":25}},{"path":"docs/UsingTravis.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Travis CI"},{"lineNumber":2,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":3,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"https://travis-ci.org/[Travis CI] is a _Continuous Integration_ platform for GitHub projects."},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"Travis CI can run the projects\u0027 tests automatically whenever new code is pushed to the repo. This ensures that existing functionality and features have not been broken by the changes."},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"The current Travis CI set up performs the following things whenever someone push code to the repo:"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"* Runs the `./gradlew clean headless allTests coverage coveralls -i` command (see \u003c\u003cUsingGradle#, UsingGradle\u003e\u003e for more details on what this command means)."},{"lineNumber":12,"author":{"gitID":"-"},"content":"* Automatically retries the build up to 3 times if a task fails."},{"lineNumber":13,"author":{"gitID":"-"},"content":"* Renders documentation from asciidoc to html and automatically publishes them using GitHub Pages."},{"lineNumber":14,"author":{"gitID":"-"},"content":"* Runs additional link:#repository-wide-checks[repository-wide checks]."},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"If you would like to customise your travis build further, you can learn more about Travis from https://docs.travis-ci.com/[Travis CI Documentation]."},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up Travis CI"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":".  Fork the repo to your own organization."},{"lineNumber":21,"author":{"gitID":"-"},"content":".  Go to https://travis-ci.org/ and click `Sign in with GitHub`, then enter your GitHub account details if needed."},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"image:signing_in.png[Signing into Travis CI]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"+"},{"lineNumber":25,"author":{"gitID":"-"},"content":".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."},{"lineNumber":26,"author":{"gitID":"-"},"content":"* If the organization is not shown, click `Review and add` as shown below:"},{"lineNumber":27,"author":{"gitID":"-"},"content":"+"},{"lineNumber":28,"author":{"gitID":"-"},"content":"image:review_and_add.png[Review and add]"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"This should bring you to a GitHub page that manages the access of third-party applications. Depending on whether you are the owner of the repository, you can either grant access"},{"lineNumber":31,"author":{"gitID":"-"},"content":"+"},{"lineNumber":32,"author":{"gitID":"-"},"content":"image:grant_access.png[Grant Access]"},{"lineNumber":33,"author":{"gitID":"-"},"content":"+"},{"lineNumber":34,"author":{"gitID":"-"},"content":"or request access"},{"lineNumber":35,"author":{"gitID":"-"},"content":"+"},{"lineNumber":36,"author":{"gitID":"-"},"content":"image:request_access.png[Request Access]"},{"lineNumber":37,"author":{"gitID":"-"},"content":"+"},{"lineNumber":38,"author":{"gitID":"-"},"content":"to Travis CI so that it can access your commits and build your code."},{"lineNumber":39,"author":{"gitID":"-"},"content":"* If repository cannot be found, click `Sync account`"},{"lineNumber":40,"author":{"gitID":"-"},"content":".  Activate the switch."},{"lineNumber":41,"author":{"gitID":"-"},"content":"+"},{"lineNumber":42,"author":{"gitID":"-"},"content":"image:flick_repository_switch.png[Activate the switch]"},{"lineNumber":43,"author":{"gitID":"-"},"content":"+"},{"lineNumber":44,"author":{"gitID":"-"},"content":".  This repo comes with a link:../.travis.yml[`.travis.yml`] that tells Travis what to do. So there is no need for you to create one yourself."},{"lineNumber":45,"author":{"gitID":"-"},"content":".  To see the CI in action, push a commit to the master branch!"},{"lineNumber":46,"author":{"gitID":"-"},"content":"* Go to the repository and see the pushed commit. There should be an icon which will link you to the Travis build."},{"lineNumber":47,"author":{"gitID":"-"},"content":"+"},{"lineNumber":48,"author":{"gitID":"-"},"content":"image:build_pending.png[Commit build]"},{"lineNumber":49,"author":{"gitID":"-"},"content":"+"},{"lineNumber":50,"author":{"gitID":"-"},"content":"* As the build is run on a provided remote machine, we can only examine the logs it produces:"},{"lineNumber":51,"author":{"gitID":"-"},"content":"+"},{"lineNumber":52,"author":{"gitID":"-"},"content":"image:travis_build.png[Travis build]"},{"lineNumber":53,"author":{"gitID":"-"},"content":"+"},{"lineNumber":54,"author":{"gitID":"-"},"content":".  If the build is successful, you should be able to check the coverage details of the tests at http://coveralls.io/[Coveralls]"},{"lineNumber":55,"author":{"gitID":"-"},"content":".  Update the link to the \u0027build status\u0027 badge at the top of the `README.adoc` to point to the build status of your own repo."},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"\u003d\u003d Enabling auto-publishing of documentation"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":".  Ensure that you have followed the steps above to set up Travis CI."},{"lineNumber":60,"author":{"gitID":"-"},"content":".  On GitHub, create a new user account and give this account collaborator and admin access to the repo. +"},{"lineNumber":61,"author":{"gitID":"-"},"content":"   Using this account, generate a personal access token https://github.com/settings/tokens/new[here]."},{"lineNumber":62,"author":{"gitID":"-"},"content":"+"},{"lineNumber":63,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":64,"author":{"gitID":"-"},"content":"Personal access tokens are like passwords so make sure you keep them secret! If the personal access token is leaked, please delete it and generate a new one."},{"lineNumber":65,"author":{"gitID":"-"},"content":"+"},{"lineNumber":66,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":67,"author":{"gitID":"-"},"content":"We use a new user account to generate the token for team projects to prevent team members from gaining access to other team members\u0027 repos. +"},{"lineNumber":68,"author":{"gitID":"-"},"content":"If you are the only one with write access to the repo, you can use your own account to generate the token."},{"lineNumber":69,"author":{"gitID":"-"},"content":"+"},{"lineNumber":70,"author":{"gitID":"-"},"content":"--"},{"lineNumber":71,"author":{"gitID":"-"},"content":"* Add a description for the token. (e.g. `Travis CI - deploy docs to gh-pages`)"},{"lineNumber":72,"author":{"gitID":"-"},"content":"* Check the `public_repo` checkbox."},{"lineNumber":73,"author":{"gitID":"-"},"content":"* Click `Generate Token` and copy your new personal access token."},{"lineNumber":74,"author":{"gitID":"-"},"content":"--"},{"lineNumber":75,"author":{"gitID":"-"},"content":"We will use this token to grant Travis access to the repo."},{"lineNumber":76,"author":{"gitID":"-"},"content":"+"},{"lineNumber":77,"author":{"gitID":"-"},"content":"image:generate_token.png[Generate token]"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":".  Head to the https://travis-ci.org/profile[Accounts] page, and find the switch for the forked repository."},{"lineNumber":80,"author":{"gitID":"-"},"content":"+"},{"lineNumber":81,"author":{"gitID":"-"},"content":"image:flick_repository_switch.png[Activate the switch]"},{"lineNumber":82,"author":{"gitID":"-"},"content":"+"},{"lineNumber":83,"author":{"gitID":"-"},"content":".  Click on the settings button next to the switch. In the Environment Variables section, add a new environment variable with"},{"lineNumber":84,"author":{"gitID":"-"},"content":"+"},{"lineNumber":85,"author":{"gitID":"-"},"content":"--"},{"lineNumber":86,"author":{"gitID":"-"},"content":"* name: `GITHUB_TOKEN`"},{"lineNumber":87,"author":{"gitID":"-"},"content":"* value: personal access token copied in step 1"},{"lineNumber":88,"author":{"gitID":"-"},"content":"* Display value in build log: `OFF`"},{"lineNumber":89,"author":{"gitID":"-"},"content":"--"},{"lineNumber":90,"author":{"gitID":"-"},"content":"image:travis_add_token.png[Travis add token]"},{"lineNumber":91,"author":{"gitID":"-"},"content":"+"},{"lineNumber":92,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":93,"author":{"gitID":"-"},"content":"*Make sure you set `Display value in build log` to `OFF`.* +"},{"lineNumber":94,"author":{"gitID":"-"},"content":"Otherwise, other people will be able to see the personal access token and thus have access this repo. +"},{"lineNumber":95,"author":{"gitID":"-"},"content":"Similarly, make sure you *do not print `$GITHUB_TOKEN` to the logs* in Travis scripts as the logs are viewable by the public."},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":".  Now, whenever there\u0027s a new commit to master branch, Travis will push the latest documentation to gh-pages branch."},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"**To verify that it works,**"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":".  Trigger Travis to regenerate documentation. To do so, you need to push a new commit to the master branch of the fork. +"},{"lineNumber":102,"author":{"gitID":"-"},"content":"   Suggested change: Remove the codacy badge from `README`."},{"lineNumber":103,"author":{"gitID":"-"},"content":".  Wait for Travis CI to finish running the build on your new commit."},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":".  Go to the URL `\\https://\u003cyour-username-or-organization-name\u003e.github.io/InternshipBook-level4/`. You should see your `README` file displayed."},{"lineNumber":105,"author":{"gitID":"-"},"content":""},{"lineNumber":106,"author":{"gitID":"-"},"content":"\u003d\u003d Repository-wide checks"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"In addition to running Gradle checks, we also configure Travis CI to run some repository-wide checks. Unlike the Gradle checks which only cover files used in the build process, these repository-wide checks cover _all_ files in the repository. They check for repository rules which are hard to enforce on development machines such as line ending requirements."},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"These checks are implemented as POSIX shell scripts, and thus can only be run on POSIX-compliant operating systems such as macOS and Linux. To run all checks locally on these operating systems, execute the following in the repository root directory:"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"[source,shell]"},{"lineNumber":113,"author":{"gitID":"-"},"content":"----"},{"lineNumber":114,"author":{"gitID":"-"},"content":"./config/travis/run-checks.sh"},{"lineNumber":115,"author":{"gitID":"-"},"content":"----"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"Any warnings or errors will be printed out to the console."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Implementing new checks"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"Checks are implemented as executable `check-*` scripts within the `config/travis/` directory. The `run-checks.sh` script will automatically pick up and run files named as such."},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"Check scripts should print out errors in the following format:"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"...."},{"lineNumber":126,"author":{"gitID":"-"},"content":"SEVERITY:FILENAME:LINE: MESSAGE"},{"lineNumber":127,"author":{"gitID":"-"},"content":"...."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"where `SEVERITY` is either `ERROR` or `WARN`, `FILENAME` is the path to the file relative to the current directory, `LINE` is the line of the file where the error occurred and `MESSAGE` is the message explaining the error."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"Check scripts must exit with a non-zero exit code if any errors occur."}],"authorContributionMap":{"wyinkok":1,"-":130}},{"path":"src/test/java/systemtests/SampleDataTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.nio.file.Files;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.nio.file.Paths;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"public class SampleDataTest extends JobbiBotSystemTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Returns null to force test app to load data of the file in {@code getDataFileLocation()}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    protected JobbiBot getInitialData() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        return null;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Returns a non-existent file location to force test app to load sample data."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        String filePath \u003d TestUtil.getFilePathInSandboxFolder(\"SomeFileThatDoesNotExist1234567890.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        deleteFileIfExists(filePath);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return filePath;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Deletes the file at {@code filePath} if it exists."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private void deleteFileIfExists(String filePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            Files.deleteIfExists(Paths.get(filePath));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(ioe);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"    public void internshipBook_dataFileDoesNotExist_loadSampleData() {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        Internship[] expectedList \u003d SampleDataUtil.getSampleInternships();"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        assertListMatching(getInternshipListPanel(), expectedList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":5,"-":44,"TanCiKang":2}},{"path":"docs/team/ColinNg.adoc","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"\u003d Colin Ng - Project Portfolio"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":":imagesDir: ../images"},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":":stylesDir: ../stylesheets"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d PROJECT: JobbiBot"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"---"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d Overview"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"JobbiBot is an interactive application that aims to guide university students in their search for internships. JobbiBot is a Command"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"Line Interface application where most of the functions are accessed through typing the commands. Through JobbiBot,"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"users would be able to narrow down the overwhelming amount of internship opportunities by different attributes such as salary and industry with"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"the help of JobbiBot which will guide the user slowly through the process with prompts and useful tips."},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"Afterwhich they can either save the list of internships while making the decision, select the internship and obtain comprehensive details about"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"the internship or they may restart the process and filter the internships differently."},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d Summary of contributions"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"* *Major enhancement*: Implement and designed the filter and sort feature"},{"lineNumber":21,"author":{"gitID":"-"},"content":"** What it does: Together with the find (implemented by Ci Kang) and save (implemented by Wyin) features, it provides the complete set of functionality to allows user to find, filter sort and subsequently save internships for exploring and viewing purposes."},{"lineNumber":22,"author":{"gitID":"-"},"content":"** Justification: The filter and sort feature (together with find) are essential tools for users to narrow down and view internships"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"** Highlights: This enhancement enhances the existing user interface. It required a firm understanding of user profile in order to create a chatbot persona that is realistic and approachable. The implementation was too challenging as it required an understanding of JavaFX components to revamp the GUI. The GUI was also beautified make JobbiBot more aesthetically appealing to young students."},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"* *Minor enhancement*: Added another data structure to model manager to allow for filtering and sorting"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"* *Code contributed*: [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/functional/niloc94.md[Functional code]]"},{"lineNumber":28,"author":{"gitID":"-"},"content":"  [https://github.com/CS2103JAN2018-F11-B3/main/blob/master/collated/test/niloc94.md[Test Code]]"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"* *Other contributions*:"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"** Project management:"},{"lineNumber":33,"author":{"gitID":"-"},"content":"*** Suggested and designed the implementation of various features for the team (Example using addressbook tag feature to implement save and unsave, and find tag features)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"*** Managed releases `v1.5rc` on GitHub"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"** Enhancements to existing features:"},{"lineNumber":37,"author":{"gitID":"-"},"content":"*** Fix bug for InternshipBook Parser https://github.com/CS2103JAN2018-F11-B3/main/pull/161[#161]"},{"lineNumber":38,"author":{"gitID":"-"},"content":"*** Updated test cases (under TypicalInternships class) to fit the JobbiBot types https://github.com/CS2103JAN2018-F11-B3/main/pull/169[#169]"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"** Documentation:"},{"lineNumber":41,"author":{"gitID":"-"},"content":"*** Documented the Major and Minor Components for the team https://github.com/CS2103JAN2018-F11-B3/main/pull/50[#50]"},{"lineNumber":42,"author":{"gitID":"-"},"content":"*** Documented User Stories https://github.com/CS2103JAN2018-F11-B3/main/pull/4[#4]"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"** Community:"},{"lineNumber":45,"author":{"gitID":"-"},"content":"*** Reported bugs and suggestions for other teams in the class (examples: https://github.com/CS2103JAN2018-T16-B2/main/issues/139[#139] , https://github.com/CS2103JAN2018-T16-B2/main/issues/141[#141] , https://github.com/CS2103JAN2018-T16-B2/main/issues/152[#152] )"},{"lineNumber":46,"author":{"gitID":"-"},"content":"*** Help teammates refactor codes https://github.com/CS2103JAN2018-F11-B3/main/pull/194[#194]"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the User Guide"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":51,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the User Guide. They showcase my ability to write documentation targeting end-users._"},{"lineNumber":52,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"include::../UserGuide.adoc[tag\u003dfilterSort]"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d Contributions to the Developer Guide"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":59,"author":{"gitID":"-"},"content":"|_Given below are sections I contributed to the Developer Guide. They showcase my ability to write technical documentation and the technical depth of my contributions to the project._"},{"lineNumber":60,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dfilter]"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Some Instructions for Manual Testing"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"include::../DeveloperGuide.adoc[tag\u003dmanualtestcolin]"},{"lineNumber":68,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"wyinkok":2,"-":48,"TanCiKang":18}},{"path":"src/test/java/systemtests/HelpCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.guihandles.HelpWindowHandle;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * A system test class for the help window, which contains interaction with other UI components."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"public class HelpCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""},{"lineNumber":23,"author":{"gitID":"-"},"content":"            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""},{"lineNumber":24,"author":{"gitID":"-"},"content":"            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void openHelpWindow() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        //use accelerator"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        getCommandBox().click();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        //getResultDisplay().click();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        getInternshipListPanel().click();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        getBrowserPanel().click();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingAccelerator();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertHelpWindowNotOpen();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"        //use menu button"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        getMainMenu().openHelpWindowUsingMenu();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        //use command box"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertHelpWindowOpen();"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // open help window and give it focus"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        executeCommand(HelpCommand.COMMAND_WORD);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // assert that while the help window is open the UI updates correctly for a command execution"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        //assertNotEquals(HelpCommand.SHOWING_HELP_MESSAGE, getResultDisplay().getText());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertNotEquals(BrowserPanel.DEFAULT_PAGE, getBrowserPanel().getLoadedUrl());"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        assertListMatching(getInternshipListPanel(), getModel().getFilteredInternshipList());"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"-"},"content":"     * Asserts that the help window is open, and closes it after checking."},{"lineNumber":71,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void assertHelpWindowOpen() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        getMainWindowHandle().focus();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"-"},"content":"     * Asserts that the help window isn\u0027t open."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    private void assertHelpWindowNotOpen() {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":5,"-":80,"TanCiKang":2}},{"path":"src/test/java/systemtests/SystemTestSetupHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Contains helper methods that system tests require."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SystemTestSetupHelper {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * Sets up a new {@code TestApp} and returns it."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    public TestApp setupApplication(Supplier\u003cReadOnlyJobbiBot\u003e internshipBook, String saveFileLocation) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            FxToolkit.registerStage(Stage::new);"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"            FxToolkit.setupApplication(() -\u003e testApp \u003d new TestApp(internshipBook, saveFileLocation));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Application takes too long to set up.\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return testApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Initializes TestFX."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static void initialize() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            FxToolkit.registerPrimaryStage();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"            FxToolkit.hideStage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        } catch (TimeoutException e) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * Encapsulates the primary stage of {@code TestApp} in a {@code MainWindowHandle} and returns it."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public MainWindowHandle setupMainWindowHandle() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            FxToolkit.setupStage((stage) -\u003e {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"                mainWindowHandle \u003d new MainWindowHandle(stage);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"                mainWindowHandle.focus();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to set up.\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"-"},"content":"     * Tears down existing stages."},{"lineNumber":65,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void tearDownStage() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            FxToolkit.cleanupStages();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Stage takes too long to tear down.\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":70}},{"path":"src/test/java/systemtests/SelectCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_INTERNSHIP_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.KEYWORD_MATCHING_AUDIT;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternships;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"public class SelectCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void select() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown unfiltered list -------------------------- */"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"        /* Case: select the first card in the internship list, command with leading spaces and trailing spaces"},{"lineNumber":25,"author":{"gitID":"-"},"content":"         * -\u003e selected"},{"lineNumber":26,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased() + \"   \";"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        /* Case: select the last card in the internship list -\u003e selected */"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        Index internshipCount \u003d Index.fromOneBased(getTypicalInternships().size());"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + internshipCount.getOneBased();"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, internshipCount);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        /* Case: undo previous selection -\u003e rejected */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        /* Case: redo selecting last card in the list -\u003e rejected */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"        /* Case: select the middle card in the internship list -\u003e selected */"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"        Index middleIndex \u003d Index.fromOneBased(internshipCount.getOneBased() / 2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* Case: select the current selected card -\u003e selected */"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, middleIndex);"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        /* Case: mixed case command word -\u003e selected */"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(\"SeLeCt 1\", INDEX_FIRST_INTERNSHIP);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        /* ------------------------ Perform select operations on the shown filtered list ---------------------------- */"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"        /* Case: filtered internship list, select index within bounds of address book but out of bounds of internship"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"         * list -\u003e rejected"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        showInternshipsWithName(KEYWORD_MATCHING_AUDIT);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        int invalidIndex \u003d getModel().getJobbiBot().getInternshipList().size();"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \""},{"lineNumber":64,"author":{"gitID":"TanCiKang"},"content":"                + invalidIndex, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"        /* Case: filtered internship list, select index within bounds of address book and internship list -\u003e selected */"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Index validIndex \u003d Index.fromOneBased(1);"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(validIndex.getZeroBased() \u003c getModel().getFilteredInternshipList().size());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, validIndex);"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        /* ----------------------------------- Perform invalid select operations ------------------------------------ */"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"},{"lineNumber":76,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"        invalidIndex \u003d getModel().getFilteredInternshipList().size() + 1;"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \""},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"                + invalidIndex, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","},{"lineNumber":89,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","},{"lineNumber":93,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * 1. Command box displays an empty string.\u003cbr\u003e"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * 2. Command box has the default style class.\u003cbr\u003e"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * 3. Result display box displays the success message of executing select command with the"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"     * {@code expectedSelectedCardIndex} of the selected internship.\u003cbr\u003e"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"     * 4. {@code Model}, {@code Storage} and {@code InternshipListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * 5. Selected card is at {@code expectedSelectedCardIndex} and the browser url is updated accordingly.\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * 6. Status bar remains unchanged.\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":110,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"                MESSAGE_SELECT_INTERNSHIP_SUCCESS, expectedSelectedCardIndex.getOneBased());"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"        int preExecutionSelectedCardIndex \u003d getInternshipListPanel().getSelectedCardIndex();"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     * Executes {@code command} and asserts that the,\u003cbr\u003e"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * 1. Command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * 2. Command box has the error style class.\u003cbr\u003e"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * 3. Result display box displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"     * 4. {@code Model}, {@code Storage} and {@code InternshipListPanel} remain unchanged.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"-"},"content":"     * 5. Browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Verifications 1, 3 and 4 are performed by"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":143,"author":{"gitID":"-"},"content":""},{"lineNumber":144,"author":{"gitID":"-"},"content":"        executeCommand(command);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":8,"-":115,"TanCiKang":27}},{"path":"src/test/java/systemtests/FindCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INTERNSHIPS_LISTED_OVERVIEW;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS1;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS2;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS3;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS4;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.DATASCIENCE;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING2;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING3;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.KEYWORD_MATCHING_AUDIT;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import java.util.ArrayList;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import java.util.HashMap;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import java.util.HashSet;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import java.util.Map;"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"import java.util.Set;"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"import org.junit.Test;"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.TagNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"//@@author TanCiKang"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"public class FindCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    public void find() throws CommandException, DuplicateInternshipException, InternshipNotFoundException,"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"            UniqueTagList.DuplicateTagException {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple internships in internship book, command with leading spaces and trailing spaces"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"         * -\u003e 2 internships found"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"         */"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_AUDIT + \"   \";"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS2, addTag(getInternshipWithoutTags(BUSINESS2), KEYWORD_MATCHING_AUDIT));"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS4, addTag(getInternshipWithoutTags(BUSINESS4), KEYWORD_MATCHING_AUDIT));"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, BUSINESS2, BUSINESS4);"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"        /* Case: repeat previous find command where internship list is displaying the internships we are finding"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"         * -\u003e 2 internships found"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"         */"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_AUDIT;"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship where internship list is not displaying the internship we are finding -\u003e 1 internship"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"         * found"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Data\";"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(DATASCIENCE, addTag(getInternshipWithoutTags(DATASCIENCE), \"Data\"));"},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, DATASCIENCE);"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship with 1 repeated keyword entered -\u003e 1 internship found */"},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Data Data\";"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple internships in internship book, 2 keywords -\u003e 2 internships found */"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Data Consulting\";"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(DATASCIENCE, addTag(getInternshipWithoutTags(DATASCIENCE), \"Data\"));"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS3, addTag(getInternshipWithoutTags(BUSINESS3), \"Consulting\"));"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, DATASCIENCE, BUSINESS3);"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple internships in internship book, 2 keywords in reversed order -\u003e 2 internships found */"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Consulting Data\";"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":87,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple internships in internship book, 2 keywords with 1 repeat -\u003e 2 internships found */"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Consulting Data Data\";"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple internships in internship book, 2 matching keywords and 1 non-matching keyword"},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"         * -\u003e 2 internships found"},{"lineNumber":96,"author":{"gitID":"TanCiKang"},"content":"         */"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Data Consulting NonMatchingKeyWord\";"},{"lineNumber":98,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":100,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"        /* Case: undo previous find command -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"        /* Case: redo previous find command -\u003e rejected */"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"        assertCommandFailure(command, expectedResultMessage);"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":111,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find salary of internship in internship book -\u003e 1 internships found */"},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"999\";"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING2, addTag(getInternshipWithoutTags(ENGINEERING2), \"999\"));"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, ENGINEERING2);"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find address of internship in internship book -\u003e 0 internships found */"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"Boulevard\";"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel);"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find email of internship in internship book -\u003e 0 internships found */"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + BUSINESS3.getEmail().value;"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel);"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship in internship book, keyword is same as name but of different case -\u003e 3 internships"},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"         found */"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" EnGinEeRing\";"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING1, addTag(getInternshipWithoutTags(ENGINEERING1),"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"                \"EnGinEeRing\"));"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING2, addTag(getInternshipWithoutTags(ENGINEERING2),"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"                \"EnGinEeRing\"));"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING3, addTag(getInternshipWithoutTags(ENGINEERING3),"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"                \"EnGinEeRing\"));"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, ENGINEERING1, ENGINEERING2, ENGINEERING3);"},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find a tag in internship in internship book -\u003e 1 internship found */"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(BUSINESS1.getTags());"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, BUSINESS1);"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":148,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple keywords from the same internship in internship book -\u003e 1 internships found */"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"Deloitte Pagar\";"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS2, addTag(getInternshipWithoutTags(BUSINESS2),"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"                \"Deloitte Pagar\"));"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, BUSINESS2);"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":156,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":157,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find single keyword that is in multiple internships in internship book -\u003e 2 internship found */"},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"Manufacturing\";"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING1, addTag(getInternshipWithoutTags(ENGINEERING1),"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":"                \"Manufacturing\"));"},{"lineNumber":162,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING2, addTag(getInternshipWithoutTags(ENGINEERING2),"},{"lineNumber":163,"author":{"gitID":"TanCiKang"},"content":"                \"Manufacturing\"));"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, ENGINEERING1, ENGINEERING2);"},{"lineNumber":165,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":166,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":168,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find multiple keywords that is in multiple internships in internship book -\u003e 3 internships found */"},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"PwC Audit\";"},{"lineNumber":170,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS1, addTag(getInternshipWithoutTags(BUSINESS1),"},{"lineNumber":171,"author":{"gitID":"TanCiKang"},"content":"                \"PwC saved\"));"},{"lineNumber":172,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS2, addTag(getInternshipWithoutTags(BUSINESS2),"},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"                \"Audit\"));"},{"lineNumber":174,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS4, addTag(getInternshipWithoutTags(BUSINESS4),"},{"lineNumber":175,"author":{"gitID":"TanCiKang"},"content":"                \"PwC Audit\"));"},{"lineNumber":176,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, BUSINESS1, BUSINESS2, BUSINESS4);"},{"lineNumber":177,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":178,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":179,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship in internship book, keyword is substring of name -\u003e 0 internships found */"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Engin\";"},{"lineNumber":182,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel);"},{"lineNumber":183,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":184,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":185,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":186,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship in internship book, name is substring of keyword -\u003e 0 internships found */"},{"lineNumber":187,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Engineerings\";"},{"lineNumber":188,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel);"},{"lineNumber":189,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":190,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":191,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find internship not in internship book -\u003e 0 internships found */"},{"lineNumber":193,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Analytics\";"},{"lineNumber":194,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":195,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":196,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":197,"author":{"gitID":"TanCiKang"},"content":"        /* Case: find while a internship is selected -\u003e selected card deselected */"},{"lineNumber":198,"author":{"gitID":"TanCiKang"},"content":"        showAllInternships();"},{"lineNumber":199,"author":{"gitID":"TanCiKang"},"content":"        selectInternship(Index.fromOneBased(1));"},{"lineNumber":200,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(getInternshipListPanel().getHandleToSelectedCard().getName().equals(BUSINESS3.getName().fullName));"},{"lineNumber":201,"author":{"gitID":"TanCiKang"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" Consulting\";"},{"lineNumber":202,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(BUSINESS3, addTag(getInternshipWithoutTags(BUSINESS3), \"Consulting\"));"},{"lineNumber":203,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, BUSINESS3);"},{"lineNumber":204,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":205,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardDeselected();"},{"lineNumber":206,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":207,"author":{"gitID":"TanCiKang"},"content":"        /* Case: mixed case command word -\u003e 3 internships found with Engineering tags added to them */"},{"lineNumber":208,"author":{"gitID":"TanCiKang"},"content":"        command \u003d \"FiNd Engineering\";"},{"lineNumber":209,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING1, addTag(getInternshipWithoutTags(ENGINEERING1),"},{"lineNumber":210,"author":{"gitID":"TanCiKang"},"content":"                \"Engineering\"));"},{"lineNumber":211,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING2, addTag(getInternshipWithoutTags(ENGINEERING2),"},{"lineNumber":212,"author":{"gitID":"TanCiKang"},"content":"                \"Engineering\"));"},{"lineNumber":213,"author":{"gitID":"TanCiKang"},"content":"        expectedModel.updateInternship(ENGINEERING3, addTag(getInternshipWithoutTags(ENGINEERING3),"},{"lineNumber":214,"author":{"gitID":"TanCiKang"},"content":"                \"Engineering\"));"},{"lineNumber":215,"author":{"gitID":"TanCiKang"},"content":"        ModelHelper.setSearchedList(expectedModel, ENGINEERING1, ENGINEERING2, ENGINEERING3);"},{"lineNumber":216,"author":{"gitID":"TanCiKang"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":217,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":218,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":219,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":220,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":221,"author":{"gitID":"TanCiKang"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":222,"author":{"gitID":"TanCiKang"},"content":"     * box displays {@code Messages#MESSAGE_INTERNSHIPS_LISTED_OVERVIEW} with the number of internship in the filtered"},{"lineNumber":223,"author":{"gitID":"TanCiKang"},"content":"     * list, and the model related components equal to {@code expectedModel}."},{"lineNumber":224,"author":{"gitID":"TanCiKang"},"content":"     * These verifications are done by"},{"lineNumber":225,"author":{"gitID":"TanCiKang"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"TanCiKang"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":227,"author":{"gitID":"TanCiKang"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":228,"author":{"gitID":"TanCiKang"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":229,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":230,"author":{"gitID":"TanCiKang"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":231,"author":{"gitID":"TanCiKang"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":232,"author":{"gitID":"TanCiKang"},"content":"                MESSAGE_INTERNSHIPS_LISTED_OVERVIEW, expectedModel.getFilteredInternshipList().size());"},{"lineNumber":233,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":234,"author":{"gitID":"TanCiKang"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"TanCiKang"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"TanCiKang"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":237,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":239,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":240,"author":{"gitID":"TanCiKang"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":241,"author":{"gitID":"TanCiKang"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":242,"author":{"gitID":"TanCiKang"},"content":"     * These verifications are done by"},{"lineNumber":243,"author":{"gitID":"TanCiKang"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":244,"author":{"gitID":"TanCiKang"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":245,"author":{"gitID":"TanCiKang"},"content":"     * error style."},{"lineNumber":246,"author":{"gitID":"TanCiKang"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":247,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"TanCiKang"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":249,"author":{"gitID":"TanCiKang"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":250,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":251,"author":{"gitID":"TanCiKang"},"content":"        executeCommand(command);"},{"lineNumber":252,"author":{"gitID":"TanCiKang"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":253,"author":{"gitID":"TanCiKang"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":254,"author":{"gitID":"TanCiKang"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":255,"author":{"gitID":"TanCiKang"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":256,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":257,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":258,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":259,"author":{"gitID":"TanCiKang"},"content":"     * Remove all tags from internship"},{"lineNumber":260,"author":{"gitID":"TanCiKang"},"content":"     * @param internshipToCopy"},{"lineNumber":261,"author":{"gitID":"TanCiKang"},"content":"     * @return Intership without tags"},{"lineNumber":262,"author":{"gitID":"TanCiKang"},"content":"     * @throws CommandException"},{"lineNumber":263,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":264,"author":{"gitID":"TanCiKang"},"content":"    public Internship getInternshipWithoutTags(Internship internshipToCopy)throws CommandException {"},{"lineNumber":265,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToCopy.getTags());"},{"lineNumber":266,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTagsCopy \u003d new UniqueTagList(internshipToCopy.getTags());"},{"lineNumber":267,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":268,"author":{"gitID":"TanCiKang"},"content":"        for (Tag nameTag : internshipTagsCopy) {"},{"lineNumber":269,"author":{"gitID":"TanCiKang"},"content":"            try {"},{"lineNumber":270,"author":{"gitID":"TanCiKang"},"content":"                internshipTags.delete(new Tag(nameTag.getTagName()));"},{"lineNumber":271,"author":{"gitID":"TanCiKang"},"content":"            } catch (TagNotFoundException e) {"},{"lineNumber":272,"author":{"gitID":"TanCiKang"},"content":"                throw new CommandException(\"Tag to be deleted not found\");"},{"lineNumber":273,"author":{"gitID":"TanCiKang"},"content":"            }"},{"lineNumber":274,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":275,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":276,"author":{"gitID":"TanCiKang"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":277,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":278,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":279,"author":{"gitID":"TanCiKang"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":280,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":281,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":282,"author":{"gitID":"TanCiKang"},"content":"        return new Internship("},{"lineNumber":283,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getName(),"},{"lineNumber":284,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getSalary(),"},{"lineNumber":285,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getEmail(),"},{"lineNumber":286,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getAddress(),"},{"lineNumber":287,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getIndustry(),"},{"lineNumber":288,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getRegion(),"},{"lineNumber":289,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getRole(),"},{"lineNumber":290,"author":{"gitID":"TanCiKang"},"content":"                correctTagReferences);"},{"lineNumber":291,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":292,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":293,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":294,"author":{"gitID":"TanCiKang"},"content":"     * Add tag to internship"},{"lineNumber":295,"author":{"gitID":"TanCiKang"},"content":"     * @param internshipToCopy"},{"lineNumber":296,"author":{"gitID":"TanCiKang"},"content":"     * @param tagNames"},{"lineNumber":297,"author":{"gitID":"TanCiKang"},"content":"     * @return internship with tag"},{"lineNumber":298,"author":{"gitID":"TanCiKang"},"content":"     * @throws UniqueTagList.DuplicateTagException"},{"lineNumber":299,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":300,"author":{"gitID":"TanCiKang"},"content":"    public Internship addTag(Internship internshipToCopy, String tagNames)throws UniqueTagList.DuplicateTagException {"},{"lineNumber":301,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToCopy.getTags());"},{"lineNumber":302,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":303,"author":{"gitID":"TanCiKang"},"content":"        for (String tagName : tagNames.split(\"\\\\s+\")) {"},{"lineNumber":304,"author":{"gitID":"TanCiKang"},"content":"            internshipTags.add(new Tag(tagName));"},{"lineNumber":305,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":306,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":307,"author":{"gitID":"TanCiKang"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":308,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":309,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":310,"author":{"gitID":"TanCiKang"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":311,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":312,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":313,"author":{"gitID":"TanCiKang"},"content":"        return new Internship("},{"lineNumber":314,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getName(),"},{"lineNumber":315,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getSalary(),"},{"lineNumber":316,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getEmail(),"},{"lineNumber":317,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getAddress(),"},{"lineNumber":318,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getIndustry(),"},{"lineNumber":319,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getRegion(),"},{"lineNumber":320,"author":{"gitID":"TanCiKang"},"content":"                internshipToCopy.getRole(),"},{"lineNumber":321,"author":{"gitID":"TanCiKang"},"content":"                correctTagReferences);"},{"lineNumber":322,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":323,"author":{"gitID":"TanCiKang"},"content":"}"},{"lineNumber":324,"author":{"gitID":"TanCiKang"},"content":""}],"authorContributionMap":{"wyinkok":1,"TanCiKang":306,"-":17}},{"path":"src/test/java/systemtests/ModelHelper.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Contains helper methods to set up {@code Model} for testing."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class ModelHelper {"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    private static final Predicate\u003cInternship\u003e PREDICATE_MATCHING_NO_INTERNSHIPS \u003d unused -\u003e false;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s searched list to display only {@code toDisplay}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static void setSearchedList(Model model, List\u003cInternship\u003e toDisplay) {"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"        Optional\u003cPredicate\u003cInternship\u003e\u003e predicate \u003d"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        model.updateSearchedInternshipList(predicate.orElse(PREDICATE_MATCHING_NO_INTERNSHIPS));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setSearchedList(Model, List)"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static void setSearchedList(Model model, Internship... toDisplay) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        setSearchedList(model, Arrays.asList(toDisplay));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s filtered list to display only {@code toDisplay}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, List\u003cInternship\u003e toDisplay) {"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"        Optional\u003cPredicate\u003cInternship\u003e\u003e predicate \u003d"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                toDisplay.stream().map(ModelHelper::getPredicateMatching).reduce(Predicate::or);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        model.updateFilteredInternshipList(predicate.orElse(PREDICATE_MATCHING_NO_INTERNSHIPS));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @see ModelHelper#setFilteredList(Model, List)"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static void setFilteredList(Model model, Internship... toDisplay) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        setFilteredList(model, Arrays.asList(toDisplay));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"     * Returns a predicate that evaluates to true if this {@code Internship} equals to {@code other}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"    private static Predicate\u003cInternship\u003e getPredicateMatching(Internship other) {"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"        return internship -\u003e internship.equals(other);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Updates {@code model}\u0027s list to display the sorted list {@code toDisplay}."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public static void setSortedList(Model model, List\u003cString\u003e keywords) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        model.setComparator(keywords);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":55,"TanCiKang":7}},{"path":"docs/DeveloperGuide.adoc","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"\u003d JobbiBot - Developer Guide"},{"lineNumber":2,"author":{"gitID":"-"},"content":":toc:"},{"lineNumber":3,"author":{"gitID":"-"},"content":":toc-title:"},{"lineNumber":4,"author":{"gitID":"-"},"content":":toc-placement: preamble"},{"lineNumber":5,"author":{"gitID":"-"},"content":":sectnums:"},{"lineNumber":6,"author":{"gitID":"-"},"content":":imagesDir: images"},{"lineNumber":7,"author":{"gitID":"-"},"content":":stylesDir: stylesheets"},{"lineNumber":8,"author":{"gitID":"-"},"content":":xrefstyle: full"},{"lineNumber":9,"author":{"gitID":"-"},"content":"ifdef::env-github[]"},{"lineNumber":10,"author":{"gitID":"-"},"content":":tip-caption: :bulb:"},{"lineNumber":11,"author":{"gitID":"-"},"content":":note-caption: :information_source:"},{"lineNumber":12,"author":{"gitID":"-"},"content":"endif::[]"},{"lineNumber":13,"author":{"gitID":"niloc94"},"content":":repoURL: https://github.com/CS2103JAN2018-F11-B3/tree/master"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"By: `Team CS2103-F11-B3`      Since: `Jan 2018`      Licence: `MIT`"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"\u003d\u003d Setting up"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Prerequisites"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":". *JDK `1.8.0_60`* or later"},{"lineNumber":22,"author":{"gitID":"-"},"content":"+"},{"lineNumber":23,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":24,"author":{"gitID":"-"},"content":"Having any Java 8 version is not enough. +"},{"lineNumber":25,"author":{"gitID":"-"},"content":"This app will not work with earlier versions of Java 8."},{"lineNumber":26,"author":{"gitID":"-"},"content":"+"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":". *IntelliJ* IDE"},{"lineNumber":29,"author":{"gitID":"-"},"content":"+"},{"lineNumber":30,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":31,"author":{"gitID":"-"},"content":"IntelliJ by default has Gradle and JavaFx plugins installed. +"},{"lineNumber":32,"author":{"gitID":"-"},"content":"Do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Setting up the project in your computer"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":". Fork this repo, and clone the fork to your computer"},{"lineNumber":38,"author":{"gitID":"-"},"content":". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"},{"lineNumber":39,"author":{"gitID":"-"},"content":". Set up the correct JDK version for Gradle"},{"lineNumber":40,"author":{"gitID":"-"},"content":".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"},{"lineNumber":41,"author":{"gitID":"-"},"content":".. Click `New...` and find the directory of the JDK"},{"lineNumber":42,"author":{"gitID":"-"},"content":". Click `Import Project`"},{"lineNumber":43,"author":{"gitID":"-"},"content":". Locate the `build.gradle` file and select it. Click `OK`"},{"lineNumber":44,"author":{"gitID":"-"},"content":". Click `Open as Project`"},{"lineNumber":45,"author":{"gitID":"-"},"content":". Click `OK` to accept the default settings"},{"lineNumber":46,"author":{"gitID":"-"},"content":". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"},{"lineNumber":47,"author":{"gitID":"-"},"content":"This will generate all resources required by the application and tests."},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Verifying the setup"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":". Run the `seedu.address.MainApp` and try a few commands"},{"lineNumber":52,"author":{"gitID":"-"},"content":". \u003c\u003cTesting,Run the tests\u003e\u003e to ensure they all pass."},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configurations to do before writing code"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Configuring the coding style"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"This project follows https://github.com/oss-generic/process/blob/master/docs/CodingStandards.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"},{"lineNumber":61,"author":{"gitID":"-"},"content":". Select `Editor` \u003e `Code Style` \u003e `Java`"},{"lineNumber":62,"author":{"gitID":"-"},"content":". Click on the `Imports` tab to set the order"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"},{"lineNumber":65,"author":{"gitID":"-"},"content":"* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance as you write code."},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Updating documentation to match your fork"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"After forking the repo, links in the documentation will still point to the `se-edu/InternshipBook-level4` repo. If you plan to develop this as a separate product (i.e. instead of contributing to the `se-edu/InternshipBook-level4`) , you should replace the URL in the variable `repoURL` in `DeveloperGuide.adoc` and `UserGuide.adoc` with the URL of your fork."},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Setting up CI"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"Set up Travis to perform Continuous Integration (CI) for your fork. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"After setting up Travis, you can optionally set up coverage reporting for your team fork (see \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e)."},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":80,"author":{"gitID":"-"},"content":"Coverage reporting could be useful for a team repository that hosts the final version but it is not that useful for your personal fork."},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"Optionally, you can set up AppVeyor as a second CI (see \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":85,"author":{"gitID":"-"},"content":"Having both Travis and AppVeyor ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Getting started with coding"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"When you are ready to start coding,"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"1. Get some sense of the overall design by reading \u003c\u003cDesign-Architecture\u003e\u003e."},{"lineNumber":92,"author":{"gitID":"-"},"content":"2. Take a look at \u003c\u003cGetStartedProgramming\u003e\u003e."},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"\u003d\u003d Design"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"[[Design-Architecture]]"},{"lineNumber":97,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Architecture"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":".Architecture Diagram"},{"lineNumber":100,"author":{"gitID":"-"},"content":"image::Architecture.png[width\u003d\"600\"]"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"The *_Architecture Diagram_* given above explains the high-level design of the App. Given below is a quick overview of each component."},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":105,"author":{"gitID":"-"},"content":"The `.pptx` files used to create diagrams in this document can be found in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"* At app launch: Initializes the components in the correct sequence, and connects them up with each other."},{"lineNumber":110,"author":{"gitID":"-"},"content":"* At shut down: Shuts down the components and invokes cleanup method where necessary."},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"\u003c\u003cDesign-Commons,*`Commons`*\u003e\u003e represents a collection of classes used by multiple other components. Two of those classes play important roles at the architecture level."},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events (i.e. a form of _Event Driven_ design)"},{"lineNumber":115,"author":{"gitID":"-"},"content":"* `LogsCenter` : Used by many classes to write log messages to the App\u0027s log file."},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"The rest of the App consists of four components."},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Ui,*`UI`*\u003e\u003e: The UI of the App."},{"lineNumber":120,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Logic,*`Logic`*\u003e\u003e: The command executor."},{"lineNumber":121,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Model,*`Model`*\u003e\u003e: Holds the data of the App in-memory."},{"lineNumber":122,"author":{"gitID":"-"},"content":"* \u003c\u003cDesign-Storage,*`Storage`*\u003e\u003e: Reads data from, and writes data to, the hard disk."},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"Each of the four components"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"* Defines its _API_ in an `interface` with the same name as the Component."},{"lineNumber":127,"author":{"gitID":"-"},"content":"* Exposes its functionality using a `{Component Name}Manager` class."},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"For example, the `Logic` component (see the class diagram given below) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":".Class Diagram of the Logic Component"},{"lineNumber":132,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":135,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Events-Driven nature of the design"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"-"},"content":"The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 1)"},{"lineNumber":140,"author":{"gitID":"-"},"content":"image::SDforDeletePerson.png[width\u003d\"800\"]"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"Note how the `Model` simply raises a `InternshipBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":".Component interactions for `delete 1` command (part 2)"},{"lineNumber":148,"author":{"gitID":"-"},"content":"image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":151,"author":{"gitID":"-"},"content":"Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This is an example of how this Event Driven approach helps us reduce direct coupling between components."},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"The sections below give more details of each component."},{"lineNumber":154,"author":{"gitID":"-"},"content":""},{"lineNumber":155,"author":{"gitID":"-"},"content":"[[Design-Ui]]"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":"// tag::ui[]"},{"lineNumber":157,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d UI component"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":".Structure of the UI Component"},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":"image::UiClassDiagramv1.5.png[width\u003d\"800\"]"},{"lineNumber":161,"author":{"gitID":"-"},"content":""},{"lineNumber":162,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"},{"lineNumber":163,"author":{"gitID":"-"},"content":""},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":"The UI consists of a `MainWindow` that is made up of parts e.g.`CommandBox`, `BrowserPanel`, `ChatBotListPanel`, `InternshipListPanel`, `HelpWindow` and `StatusBarFooter`."},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"All these, including the `MainWindow`, inherit from the abstract `UiPart` class."},{"lineNumber":167,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"The `ChatBotPanel` displays the full message thread between Jobbi and the end user in a JavaFX list view . Each `ChatBotCard` is a single message either from Jobbi or the user. Messages will alternate between Jobbi and user, which means that for every user command entered, Jobbi will respond to it."},{"lineNumber":169,"author":{"gitID":"wyinkok"},"content":"// end::ui[]"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"The `UI` component,"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"* Executes user commands using the `Logic` component."},{"lineNumber":176,"author":{"gitID":"-"},"content":"* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."},{"lineNumber":177,"author":{"gitID":"-"},"content":"* Responds to events raised from various parts of the App and updates the UI accordingly."},{"lineNumber":178,"author":{"gitID":"-"},"content":""},{"lineNumber":179,"author":{"gitID":"-"},"content":"[[Design-Logic]]"},{"lineNumber":180,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logic component"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"[[fig-LogicClassDiagram]]"},{"lineNumber":183,"author":{"gitID":"-"},"content":".Structure of the Logic Component"},{"lineNumber":184,"author":{"gitID":"-"},"content":"image::LogicClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":".Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in \u003c\u003cfig-LogicClassDiagram\u003e\u003e"},{"lineNumber":187,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"*API* :"},{"lineNumber":190,"author":{"gitID":"-"},"content":"link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"wyinkok"},"content":".  `Logic` uses the `InternshipBookParser` class to parse the user command."},{"lineNumber":193,"author":{"gitID":"-"},"content":".  This results in a `Command` object which is executed by the `LogicManager`."},{"lineNumber":194,"author":{"gitID":"TanCiKang"},"content":".  The command execution can affect the `Model` (e.g. adding a internship) and/or raise events."},{"lineNumber":195,"author":{"gitID":"-"},"content":".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `Ui`."},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":""},{"lineNumber":198,"author":{"gitID":"-"},"content":"[[Design-Model]]"},{"lineNumber":199,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Model component"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":".Structure of the Model Component"},{"lineNumber":202,"author":{"gitID":"TanCiKang"},"content":"image::ModelComponentClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"},{"lineNumber":205,"author":{"gitID":"-"},"content":""},{"lineNumber":206,"author":{"gitID":"-"},"content":"The `Model`,"},{"lineNumber":207,"author":{"gitID":"-"},"content":""},{"lineNumber":208,"author":{"gitID":"-"},"content":"* stores a `UserPref` object that represents the user\u0027s preferences."},{"lineNumber":209,"author":{"gitID":"TanCiKang"},"content":"* stores the Internship Book data."},{"lineNumber":210,"author":{"gitID":"TanCiKang"},"content":"* exposes an unmodifiable `ObservableList\u003cInternship\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."},{"lineNumber":211,"author":{"gitID":"-"},"content":"* does not depend on any of the other three components."},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"[[Design-Storage]]"},{"lineNumber":214,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Storage component"},{"lineNumber":215,"author":{"gitID":"-"},"content":""},{"lineNumber":216,"author":{"gitID":"-"},"content":".Structure of the Storage Component"},{"lineNumber":217,"author":{"gitID":"-"},"content":"image::StorageClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":218,"author":{"gitID":"-"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"The `Storage` component,"},{"lineNumber":222,"author":{"gitID":"-"},"content":""},{"lineNumber":223,"author":{"gitID":"-"},"content":"* can save `UserPref` objects in json format and read it back."},{"lineNumber":224,"author":{"gitID":"TanCiKang"},"content":"* can save the Internship Book data in xml format and read it back."},{"lineNumber":225,"author":{"gitID":"-"},"content":""},{"lineNumber":226,"author":{"gitID":"-"},"content":"[[Design-Commons]]"},{"lineNumber":227,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Common classes"},{"lineNumber":228,"author":{"gitID":"-"},"content":""},{"lineNumber":229,"author":{"gitID":"wyinkok"},"content":"Classes used by multiple components are in the `seedu.InternshipBook.commons` package."},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"\u003d\u003d Implementation"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"This section describes some noteworthy details on how certain features are implemented."},{"lineNumber":234,"author":{"gitID":"-"},"content":""},{"lineNumber":235,"author":{"gitID":"-"},"content":"// tag::filter[]"},{"lineNumber":236,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filter Feature"},{"lineNumber":237,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Implementation"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"The search and filter command are two complementary features of the JobbiBot."},{"lineNumber":240,"author":{"gitID":"-"},"content":""},{"lineNumber":241,"author":{"gitID":"-"},"content":"The search command takes in one or more keywords and returns all internships that contains *ANY* of the keyword(s)."},{"lineNumber":242,"author":{"gitID":"-"},"content":""},{"lineNumber":243,"author":{"gitID":"-"},"content":"The filter command takes in one or more keywords and returns all internships that contains *ALL* of the keyword(s) from the last searched internship list or the full internship list if the users has not used the search command feature."},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":""},{"lineNumber":246,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":247,"author":{"gitID":"-"},"content":""},{"lineNumber":248,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Old Implementation of `Filter Command`"},{"lineNumber":249,"author":{"gitID":"-"},"content":""},{"lineNumber":250,"author":{"gitID":"-"},"content":"* Saved the list searched keyword argument(s) into a List\u003cString\u003e and add these arguments into the filter command arguments."},{"lineNumber":251,"author":{"gitID":"-"},"content":""},{"lineNumber":252,"author":{"gitID":"-"},"content":"** Example: `search marketing`, then `filter singapore` is essentially `filter marketing singapore` since filter only returns arguments that contains all the given keywords"},{"lineNumber":253,"author":{"gitID":"-"},"content":"** Rationale 1: Provides two unique function, one to union find all the keyword arguments, whereas the other is a inner join / intersect find of all the keyword arguments."},{"lineNumber":254,"author":{"gitID":"-"},"content":"** Rationale 2: More intuitive for the user to only key in `filter singapore` to get `filter singapore marketing` results after he/she have `search marketing`"},{"lineNumber":255,"author":{"gitID":"-"},"content":"** Pros: Easy to implement, only need to create a List\u003cString\u003e to store the last searched arguments and add them to the filter command arguments when filter commmand is executed"},{"lineNumber":256,"author":{"gitID":"-"},"content":"** Cons: Fatal design error in the following example: `search marketing analytics`, then `filter singapore` will only return results that contain marketing analytics and singapore."},{"lineNumber":257,"author":{"gitID":"-"},"content":"Whereas the desired output should be internships that either contain marketing singapore or analytics singapore. It was not feasible/easy to change the filter command to produce this desired outcome"},{"lineNumber":258,"author":{"gitID":"-"},"content":""},{"lineNumber":259,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Alternative Implementation \u0027Filter Command\u0027"},{"lineNumber":260,"author":{"gitID":"-"},"content":""},{"lineNumber":261,"author":{"gitID":"-"},"content":"* Alternative implementation to solve the above problem was to add a tag called CurrentList whatever is being currently searched."},{"lineNumber":262,"author":{"gitID":"-"},"content":"Regardless of how many search arguments were given in the initial search command, the list will all have the CurrentList tag which allows for easy filtering"},{"lineNumber":263,"author":{"gitID":"-"},"content":"as we can simply add CurrentList tag to the filter keywords."},{"lineNumber":264,"author":{"gitID":"-"},"content":""},{"lineNumber":265,"author":{"gitID":"-"},"content":"** Example: `Search marketing analytics data engineering` followed by a `filter singapore` will result in `filter singapore CurrentList`"},{"lineNumber":266,"author":{"gitID":"-"},"content":"which returns all internships that contains (marketing or analytics or data or engineering) and singapore."},{"lineNumber":267,"author":{"gitID":"-"},"content":"** Pros: Make use of existing Tag Feature. Supposedly easier to implement than changing the model component to save the last searched internship list somewhere and apply filter on it."},{"lineNumber":268,"author":{"gitID":"-"},"content":"** Cons: Will be distracting as the CurrentList tag is applied to the entire list"},{"lineNumber":269,"author":{"gitID":"-"},"content":"** Cons: Was harder to implement than expected because the tag had to be cleared"},{"lineNumber":270,"author":{"gitID":"-"},"content":"** Note: This add tag feature (done by Ci Kang) is now used to distinguish between search keywords."},{"lineNumber":271,"author":{"gitID":"-"},"content":"E.g `search marketing analytics` will display marketing tag for internship that contain marketing and display analytics tag for internship that contains analytics."},{"lineNumber":272,"author":{"gitID":"-"},"content":""},{"lineNumber":273,"author":{"gitID":"-"},"content":""},{"lineNumber":274,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Current Implementation \u0027Filter Command\u0027"},{"lineNumber":275,"author":{"gitID":"-"},"content":"* Current implementation makes use of the Java FXCollections filteredList."},{"lineNumber":276,"author":{"gitID":"-"},"content":"We created a separate FilteredList\u003cInternship\u003e called SearchedInternshipList and used it together with the existing FilteredList\u003cInternship\u003e FilteredIntership."},{"lineNumber":277,"author":{"gitID":"wyinkok"},"content":"Thus we have an InternshipBook , a filteredList (called searchedInternships) which wraps around the InternshipBook, and a filteredList (called filteredInternships) which wraps around the searchedInternship. See code snippet below"},{"lineNumber":278,"author":{"gitID":"-"},"content":""},{"lineNumber":279,"author":{"gitID":"-"},"content":"----"},{"lineNumber":280,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":281,"author":{"gitID":"-"},"content":"\t..."},{"lineNumber":282,"author":{"gitID":"wyinkok"},"content":"    private final InternshipBook jobbiBot;"},{"lineNumber":283,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cInternship\u003e searchedInternships;"},{"lineNumber":284,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cInternship\u003e filteredInternships;"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    ..."},{"lineNumber":286,"author":{"gitID":"-"},"content":""},{"lineNumber":287,"author":{"gitID":"wyinkok"},"content":"    public ModelManager(ReadOnlyInternshipBook jobbiBot, UserPrefs userPrefs) {"},{"lineNumber":288,"author":{"gitID":"-"},"content":"    \t...."},{"lineNumber":289,"author":{"gitID":"-"},"content":"    \t...."},{"lineNumber":290,"author":{"gitID":"wyinkok"},"content":"        this.jobbiBot \u003d new InternshipBook(jobbiBot);"},{"lineNumber":291,"author":{"gitID":"-"},"content":"        searchedInternships \u003d new FilteredList\u003c\u003e()"},{"lineNumber":292,"author":{"gitID":"-"},"content":"        filteredInternships \u003d new FilteredList\u003c\u003e(searchedInternships);"},{"lineNumber":293,"author":{"gitID":"-"},"content":"        ..."},{"lineNumber":294,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":295,"author":{"gitID":"-"},"content":""},{"lineNumber":296,"author":{"gitID":"-"},"content":"----"},{"lineNumber":297,"author":{"gitID":"-"},"content":""},{"lineNumber":298,"author":{"gitID":"wyinkok"},"content":"Due to the java wrapper functionality (in the FilteredList\u003cT\u003e), any changes in InternshipBook is propagated down to searchedInternship and then to filteredInternship. This allows us to maintain two different list of internships according to whatever keyword arguments (predicate) have been applied to it."},{"lineNumber":299,"author":{"gitID":"-"},"content":""},{"lineNumber":300,"author":{"gitID":"-"},"content":"Additional helper methods were then created to differentiate between updating of the searchedInternship and filteredInternship. See code snippet 2 below"},{"lineNumber":301,"author":{"gitID":"-"},"content":""},{"lineNumber":302,"author":{"gitID":"-"},"content":""},{"lineNumber":303,"author":{"gitID":"-"},"content":"\t// For Filter function"},{"lineNumber":304,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":305,"author":{"gitID":"-"},"content":"    public void updateFilteredInternshipList(Predicate\u003cInternship\u003e predicate) {"},{"lineNumber":306,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":307,"author":{"gitID":"-"},"content":"        filteredInternships.setPredicate(predicate);"},{"lineNumber":308,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":309,"author":{"gitID":"-"},"content":""},{"lineNumber":310,"author":{"gitID":"-"},"content":"    // For Search Function"},{"lineNumber":311,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":312,"author":{"gitID":"-"},"content":"    public void updateSearchedInternshipList(Predicate\u003cInternship\u003e predicate) {"},{"lineNumber":313,"author":{"gitID":"-"},"content":"        requireNonNull(predicate);"},{"lineNumber":314,"author":{"gitID":"-"},"content":"        searchedInternships.setPredicate(predicate);"},{"lineNumber":315,"author":{"gitID":"-"},"content":"        filteredInternships.setPredicate(predicate);"},{"lineNumber":316,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":317,"author":{"gitID":"-"},"content":"---"},{"lineNumber":318,"author":{"gitID":"-"},"content":""},{"lineNumber":319,"author":{"gitID":"-"},"content":"With this, the search and filter function can now work as intended. `search marketing analytics` and `filter singapore` will return results containing (marketing or analytics) and singapore"},{"lineNumber":320,"author":{"gitID":"-"},"content":""},{"lineNumber":321,"author":{"gitID":"-"},"content":"See Diagram below: \u003cInsert Diagram to show how the propagation works here\u003e"},{"lineNumber":322,"author":{"gitID":"-"},"content":""},{"lineNumber":323,"author":{"gitID":"-"},"content":"** Pros: Design feature solved in relatively \"easy\" way without having to change the existing code significantly"},{"lineNumber":324,"author":{"gitID":"-"},"content":"** Cons: Was harder to implement as it required knowledge of how the model interacts and worked as well as how the filteredList Java FXCollection worked."},{"lineNumber":325,"author":{"gitID":"-"},"content":""},{"lineNumber":326,"author":{"gitID":"-"},"content":""},{"lineNumber":327,"author":{"gitID":"-"},"content":"// end::filter[]"},{"lineNumber":328,"author":{"gitID":"-"},"content":""},{"lineNumber":329,"author":{"gitID":"wyinkok"},"content":"// tag::chatbot[]"},{"lineNumber":330,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Chatbot Feature"},{"lineNumber":331,"author":{"gitID":"wyinkok"},"content":"The Chatbot is the key UI feature of this application. Through the Chatbot, JobbiBot, students will receive guidance"},{"lineNumber":332,"author":{"gitID":"wyinkok"},"content":"and step-by-step prompts on how to narrow down their internship search. They are able to communicate with JobbiBot using the CLI."},{"lineNumber":333,"author":{"gitID":"wyinkok"},"content":"This is an important feature for our target users because they may not always know how to begin their search or what to look for."},{"lineNumber":334,"author":{"gitID":"-"},"content":""},{"lineNumber":335,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d\u003d Current (Main) Implementation"},{"lineNumber":336,"author":{"gitID":"wyinkok"},"content":"Each message is displayed within a ListCell, otherwise named as a `ChatBotCard` in JobbiBot. A `ChatBotCard` is made up of a JavaFX HBox class that consists of a Label class."},{"lineNumber":337,"author":{"gitID":"wyinkok"},"content":"The Label is used to either display a Jobbi message or an user command input. This mechanism inherits from UiPart and is executed by the UiManager."},{"lineNumber":338,"author":{"gitID":"-"},"content":""},{"lineNumber":339,"author":{"gitID":"wyinkok"},"content":"When a new event is raised, typically when a user keys in a command, there are three main methods that handle Jobbi and user responses in order to render the conversation between Jobbi and the user on the ListView."},{"lineNumber":340,"author":{"gitID":"-"},"content":""},{"lineNumber":341,"author":{"gitID":"wyinkok"},"content":"The first method to handle each user input in the command box is `handleUserResponse`."},{"lineNumber":342,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":343,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cString\u003e handleUserResponse(ObservableList\u003cString\u003e listToUpdateWithUserResponse) {"},{"lineNumber":344,"author":{"gitID":"wyinkok"},"content":"        ..."},{"lineNumber":345,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":346,"author":{"gitID":"wyinkok"},"content":"        // Checks if user has typed the `start` command and adds the current element in the history snapshot list to the ObservableList\u003cString\u003e"},{"lineNumber":347,"author":{"gitID":"wyinkok"},"content":"        if (historySnapshot.hasElement(\"start\")) {"},{"lineNumber":348,"author":{"gitID":"wyinkok"},"content":"            listToUpdateWithUserResponse.add(\"USER:   \" + historySnapshot.current());"},{"lineNumber":349,"author":{"gitID":"-"},"content":""},{"lineNumber":350,"author":{"gitID":"wyinkok"},"content":"        // ... Checks if user has restarted conversation if Jobbi ..."},{"lineNumber":351,"author":{"gitID":"-"},"content":""},{"lineNumber":352,"author":{"gitID":"wyinkok"},"content":"        // Returns the updated list which is used in the `buildConversation` method to render the updated ListView"},{"lineNumber":353,"author":{"gitID":"wyinkok"},"content":"        return listToUpdateWithUserResponse;"},{"lineNumber":354,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":355,"author":{"gitID":"-"},"content":"----"},{"lineNumber":356,"author":{"gitID":"wyinkok"},"content":"The second method to handle each Jobbi\u0027s response is `handleJobbiResponse`."},{"lineNumber":357,"author":{"gitID":"-"},"content":""},{"lineNumber":358,"author":{"gitID":"-"},"content":"----"},{"lineNumber":359,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cString\u003e handleJobbiResponse(ObservableList\u003cString\u003e listToUpdateWithJobbiResponse,"},{"lineNumber":360,"author":{"gitID":"wyinkok"},"content":"                                                      String message) {"},{"lineNumber":361,"author":{"gitID":"wyinkok"},"content":"        ..."},{"lineNumber":362,"author":{"gitID":"wyinkok"},"content":"        // Checks if the user has typed in `start` command to initiate conversation and add the message returned from the EventBus"},{"lineNumber":363,"author":{"gitID":"wyinkok"},"content":"        if (historySnapshot.hasElement(\"start\")) {"},{"lineNumber":364,"author":{"gitID":"wyinkok"},"content":"            listToUpdateWithJobbiResponse.add(\"JOBBI:  \" + message);"},{"lineNumber":365,"author":{"gitID":"-"},"content":""},{"lineNumber":366,"author":{"gitID":"wyinkok"},"content":"        // ... Checks if user has restarted conversation if Jobbi ..."},{"lineNumber":367,"author":{"gitID":"-"},"content":""},{"lineNumber":368,"author":{"gitID":"wyinkok"},"content":"          // Returns the updated list which is used in the `buildConversation` method to render the updated ListView"},{"lineNumber":369,"author":{"gitID":"wyinkok"},"content":"        return listToUpdateWithJobbiResponse;"},{"lineNumber":370,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":371,"author":{"gitID":"-"},"content":"----"},{"lineNumber":372,"author":{"gitID":"-"},"content":""},{"lineNumber":373,"author":{"gitID":"wyinkok"},"content":"Finally, the last method takes an ObservableList of strings which has been updated with the both latest Jobbi and user response to an event"},{"lineNumber":374,"author":{"gitID":"wyinkok"},"content":"and renders a new ListView of the message thread."},{"lineNumber":375,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":376,"author":{"gitID":"wyinkok"},"content":"    public void buildConversation(ObservableList\u003cString\u003e listToBuild) {"},{"lineNumber":377,"author":{"gitID":"-"},"content":""},{"lineNumber":378,"author":{"gitID":"wyinkok"},"content":"        // Maps each message in the updated ObservableList\u003cString\u003e to a ChatBotCard"},{"lineNumber":379,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cChatBotCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":380,"author":{"gitID":"wyinkok"},"content":"                updatedMessages, (msg) -\u003e new ChatBotCard(msg));"},{"lineNumber":381,"author":{"gitID":"-"},"content":""},{"lineNumber":382,"author":{"gitID":"wyinkok"},"content":"        // ... Recreates the ListView with the new user input ..."},{"lineNumber":383,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":384,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":385,"author":{"gitID":"-"},"content":""},{"lineNumber":386,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":387,"author":{"gitID":"wyinkok"},"content":"A JavaFX ListView class was specifically chosen because it allows for the vertical display of items, such a message thread."},{"lineNumber":388,"author":{"gitID":"wyinkok"},"content":"A ListView instance is buildable with many ListCell objects so a message thread between Jobbi and user can grow extensively."},{"lineNumber":389,"author":{"gitID":"wyinkok"},"content":"It also enables scrolling so that the user is able to scroll up and down to view his or her chat history."},{"lineNumber":390,"author":{"gitID":"-"},"content":""},{"lineNumber":391,"author":{"gitID":"wyinkok"},"content":"However, two main aspects of the ListView class was altered so that it resembles a message thread:"},{"lineNumber":392,"author":{"gitID":"-"},"content":""},{"lineNumber":393,"author":{"gitID":"wyinkok"},"content":"* The ability to select a list cell was disabled since users should not be able to to select individual messages."},{"lineNumber":394,"author":{"gitID":"wyinkok"},"content":"* Auto-scrolling to the latest message was added so that users will always see the latest message on the ListView first."},{"lineNumber":395,"author":{"gitID":"-"},"content":""},{"lineNumber":396,"author":{"gitID":"wyinkok"},"content":"// end::chatbot[]"},{"lineNumber":397,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":398,"author":{"gitID":"wyinkok"},"content":"// tag::saveunsave[]"},{"lineNumber":399,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Save/Unsave Feature"},{"lineNumber":400,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":401,"author":{"gitID":"-"},"content":""},{"lineNumber":402,"author":{"gitID":"wyinkok"},"content":"The save/unsave mechanism is facilitated by the addition of a `saved` tag or removal of the `saved` tag"},{"lineNumber":403,"author":{"gitID":"wyinkok"},"content":"respectively. Inspired by the Instagram saved feature, it allows our users to personally curate specific"},{"lineNumber":404,"author":{"gitID":"wyinkok"},"content":"internships that they would like to save for a quick reference in the future as opposed to re-searching for"},{"lineNumber":405,"author":{"gitID":"wyinkok"},"content":"a particular internship again."},{"lineNumber":406,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":407,"author":{"gitID":"wyinkok"},"content":"However, the special part of this feature is that users do not add or remove the `saved` tags in the CLI."},{"lineNumber":408,"author":{"gitID":"wyinkok"},"content":"Instead, they simply type in the command `save` or `unsave` followed by an index number and the command internally"},{"lineNumber":409,"author":{"gitID":"wyinkok"},"content":"adds a new \"saved\" tag to the internship or remove the tag. This mechanism inherits from `UndoableCommand` and is"},{"lineNumber":410,"author":{"gitID":"wyinkok"},"content":"executed by the `LogicManager`."},{"lineNumber":411,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":412,"author":{"gitID":"wyinkok"},"content":"To achieve the internal addition of a saved tag, we added an `addSavedTagToInternship` method"},{"lineNumber":413,"author":{"gitID":"wyinkok"},"content":"within the SaveCommand object. This method is self-invocated by the object\u0027s other methods, such as `preprocessUndoableCommand`."},{"lineNumber":414,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":415,"author":{"gitID":"wyinkok"},"content":"private Internship addSavedTagToInternship(Internship internship) throws CommandException {"},{"lineNumber":416,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":417,"author":{"gitID":"wyinkok"},"content":"        //Creates a UniqueTagList of the specific internship\u0027s tags only"},{"lineNumber":418,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToSave.getTags());"},{"lineNumber":419,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":420,"author":{"gitID":"wyinkok"},"content":"        //Adds a \u0027saved\u0027 tag only to internships that do not already possess the \u0027saved\u0027 tag or else an exception is thrown"},{"lineNumber":421,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":422,"author":{"gitID":"wyinkok"},"content":"            personTags.add(new Tag(SAVED_TAG));"},{"lineNumber":423,"author":{"gitID":"wyinkok"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":424,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":425,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":426,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":427,"author":{"gitID":"wyinkok"},"content":"        // ... rebuilds the updated list of tags ..."},{"lineNumber":428,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":429,"author":{"gitID":"wyinkok"},"content":"        // returns an internship with all the same information except for an additional \"saved\" tag"},{"lineNumber":430,"author":{"gitID":"wyinkok"},"content":"        return new Internship("},{"lineNumber":431,"author":{"gitID":"wyinkok"},"content":"                internship.getName(), internship.getPhone(), internship.getEmail(), internship.getAddress(), correctTagReferences);"},{"lineNumber":432,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":433,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":434,"author":{"gitID":"wyinkok"},"content":"The execution of this method in the `SaveCommand` object affects"},{"lineNumber":435,"author":{"gitID":"wyinkok"},"content":"the `Model` and `UI` by adding a visible `saved` tag to a specific internship. The result of the `SaveCommand`"},{"lineNumber":436,"author":{"gitID":"wyinkok"},"content":"execution is encapsulated as a `CommandResult` object which is passed back to UI."},{"lineNumber":437,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":438,"author":{"gitID":"wyinkok"},"content":"Below is a Sequence Diagram that demonstrates the interaction within the `Logic` component for the"},{"lineNumber":439,"author":{"gitID":"wyinkok"},"content":"`execute(\"saved 1\")`."},{"lineNumber":440,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":441,"author":{"gitID":"wyinkok"},"content":"image::SaveCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":442,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":443,"author":{"gitID":"wyinkok"},"content":"Similarly, to achieve the internal removal of a saved tag, we added a `removeSavedTagToInternship` method"},{"lineNumber":444,"author":{"gitID":"wyinkok"},"content":"within the UnsaveCommand object. The implementation of this method and its concept is exactly the opposite of"},{"lineNumber":445,"author":{"gitID":"wyinkok"},"content":"the SaveCommand since the `saved` tag is being removed."},{"lineNumber":446,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":447,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":448,"author":{"gitID":"wyinkok"},"content":"    private Internship removeSavedTagToInternship(Internship internship) {"},{"lineNumber":449,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":450,"author":{"gitID":"wyinkok"},"content":"        //Creates a UniqueTagList of the specific internship\u0027s tags only"},{"lineNumber":451,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToUnsave.getTags());"},{"lineNumber":452,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":453,"author":{"gitID":"wyinkok"},"content":"        //Checks for an existing \"saved\" tag and removes it from the UniqueTagList"},{"lineNumber":454,"author":{"gitID":"wyinkok"},"content":"        internshipTags.delete(new Tag(SAVED_TAG));"},{"lineNumber":455,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":456,"author":{"gitID":"wyinkok"},"content":"        // ... rebuilds the new list of tags and returns same person object without \"saved\" tag  ..."},{"lineNumber":457,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":458,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":459,"author":{"gitID":"wyinkok"},"content":"----"},{"lineNumber":460,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":461,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":462,"author":{"gitID":"-"},"content":""},{"lineNumber":463,"author":{"gitID":"wyinkok"},"content":"With the `saved` tag, users are able to identify the internships they have saved in their personal collection in the `InternshipCardPanel`."},{"lineNumber":464,"author":{"gitID":"wyinkok"},"content":"When users want to remove the internship from their collection, they can type the `unsave` command to remove the tag."},{"lineNumber":465,"author":{"gitID":"wyinkok"},"content":"To view the entire collection, they can type `find saved` or `filter saved` into the CLI that basically searches for all the"},{"lineNumber":466,"author":{"gitID":"wyinkok"},"content":"internships with \"saved\" tags and displays the filtered list."},{"lineNumber":467,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":468,"author":{"gitID":"wyinkok"},"content":"We chose to use the addition and removal of tags for two main reasons:"},{"lineNumber":469,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":470,"author":{"gitID":"wyinkok"},"content":"* It is visible to the user which internship has been saved or unsaved."},{"lineNumber":471,"author":{"gitID":"wyinkok"},"content":"* It is more straightforward in terms of implementation to do a search by a specific tag to display the Saved Collection."},{"lineNumber":472,"author":{"gitID":"wyinkok"},"content":"* Users are able to further narrow down on their search from the Saved Collection. For example, `find saved business` will return a filtered list of internships"},{"lineNumber":473,"author":{"gitID":"wyinkok"},"content":"in the Saved Collection that are related to the business industry."},{"lineNumber":474,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":475,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d\u003d\u003d Alternative Solution 1: Readapt the existing Implementation of the `edit` Command"},{"lineNumber":476,"author":{"gitID":"wyinkok"},"content":"The `edit` command allowed users to edit the tags of a specific existing internship. We could have potentially used it to add the `saved` tag to specific internships"},{"lineNumber":477,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":478,"author":{"gitID":"wyinkok"},"content":"*** Pros: Much simpler implementation since the `edit` command has been provided by the Address Book 4."},{"lineNumber":479,"author":{"gitID":"wyinkok"},"content":"*** Cons 1: Editing tags with the `edit` command erase previous tags from the internship but we want to add the `saved` tag to the existing tags."},{"lineNumber":480,"author":{"gitID":"wyinkok"},"content":"*** Cons 2: The command line input is relatively less user-friendly. For example, the user had to input `edit 1 t/saved` to add `saved` tag to the first internship of the filtered list."},{"lineNumber":481,"author":{"gitID":"wyinkok"},"content":"On the other hand, the `save` command only requires the user to type in `save 1` for the same outcome."},{"lineNumber":482,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":483,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d\u003d\u003d Alternative Solution 2: Create an additional model"},{"lineNumber":484,"author":{"gitID":"wyinkok"},"content":"Another idea was to create separate Internship Book Model and its own storage for the Saved Collections"},{"lineNumber":485,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":486,"author":{"gitID":"wyinkok"},"content":"*** Pros: Able to save in hard disk storage"},{"lineNumber":487,"author":{"gitID":"wyinkok"},"content":"*** Cons: May have performance issues in terms of memory usage and may have to significantly change the architecture"},{"lineNumber":488,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":489,"author":{"gitID":"wyinkok"},"content":"// end::saveunsave[]"},{"lineNumber":490,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":491,"author":{"gitID":"-"},"content":""},{"lineNumber":492,"author":{"gitID":"TanCiKang"},"content":"// tag::findwithfeatures[]"},{"lineNumber":493,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":494,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Find Command with Adding Tag Feature"},{"lineNumber":495,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":496,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d\u003d Rationale"},{"lineNumber":497,"author":{"gitID":"TanCiKang"},"content":"As the current find command work like a union search, users are able to key in multiple keywords at one go and JobbiBot will show"},{"lineNumber":498,"author":{"gitID":"TanCiKang"},"content":"all the internships that matches at least one of the keywords. However, users will not be able to differentiate which"},{"lineNumber":499,"author":{"gitID":"TanCiKang"},"content":"internships matches which keywords they have keyed in. As such this new feature enables them to have a clearer picture of"},{"lineNumber":500,"author":{"gitID":"TanCiKang"},"content":"which internship suits them more and enable them to further filter from the list."},{"lineNumber":501,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":502,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":503,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":504,"author":{"gitID":"TanCiKang"},"content":"The add tag feature is implemented as part of the find command. However, as models will be change due to the addition of tags,"},{"lineNumber":505,"author":{"gitID":"TanCiKang"},"content":"some codes are implemented within ModelManager."},{"lineNumber":506,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":507,"author":{"gitID":"TanCiKang"},"content":"image::FindCommandSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":508,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":509,"author":{"gitID":"TanCiKang"},"content":"As it can be seen from the diagram, `Logic` uses the `InternshipBookParser` class to parse the user command."},{"lineNumber":510,"author":{"gitID":"TanCiKang"},"content":"After which, `FindCommandParser` is created and use to parse the keyword. The keyword is then set in `ModelManager` via the"},{"lineNumber":511,"author":{"gitID":"TanCiKang"},"content":"setKeywords() method."},{"lineNumber":512,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":513,"author":{"gitID":"TanCiKang"},"content":"In the second phase, the command is being executed in `FindCommand`. The first updateSearchedInternshipList() update the"},{"lineNumber":514,"author":{"gitID":"TanCiKang"},"content":"searchedInternship with all the internships available and remove all tags from them apart from `saved` tags. Following which"},{"lineNumber":515,"author":{"gitID":"TanCiKang"},"content":"the second updateSearchedInternshipList() update the searchedInternshipList with the internships that matches the keywords"},{"lineNumber":516,"author":{"gitID":"TanCiKang"},"content":"use as the argument in `FindCommand`. Those keywords are then added to the respective internships that matches it through the"},{"lineNumber":517,"author":{"gitID":"TanCiKang"},"content":"addTagsToFilteredList(). `FindCommand` then execute getCommandResult() and return the result of the command execution encapsulated"},{"lineNumber":518,"author":{"gitID":"TanCiKang"},"content":"as a `CommandResult` object and returns it to the `LogicManager` and subsequently to the UI and displayed to the user."},{"lineNumber":519,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":520,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":521,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":522,"author":{"gitID":"TanCiKang"},"content":"Initial: Adding the addition and removal of tags from internship method under `FindCommand` since it is ultimately used when executing FindCommand."},{"lineNumber":523,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":524,"author":{"gitID":"TanCiKang"},"content":"Refinement: Since the addition and removal of tags to internship involves modifying of internship, these methods are added to the"},{"lineNumber":525,"author":{"gitID":"TanCiKang"},"content":"internship class as shown below. An additional check for `saved` tag was added as well as from the users perspective, they would"},{"lineNumber":526,"author":{"gitID":"TanCiKang"},"content":"want to search for other internship while keeping those that are searched before with the `saved` tag."},{"lineNumber":527,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":528,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":529,"author":{"gitID":"-"},"content":"    public Internship removeTagsFromInternship() {"},{"lineNumber":530,"author":{"gitID":"-"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(getTags());"},{"lineNumber":531,"author":{"gitID":"-"},"content":""},{"lineNumber":532,"author":{"gitID":"-"},"content":"        for (Tag tagToBeRemoved : tags) {"},{"lineNumber":533,"author":{"gitID":"TanCiKang"},"content":"            if (!tagToBeRemoved.toString().equals(SAVED_TAG_NAME)) {"},{"lineNumber":534,"author":{"gitID":"TanCiKang"},"content":"                try {"},{"lineNumber":535,"author":{"gitID":"TanCiKang"},"content":"                    internshipTags.delete(tagToBeRemoved);"},{"lineNumber":536,"author":{"gitID":"TanCiKang"},"content":"                } catch (TagNotFoundException e) {"},{"lineNumber":537,"author":{"gitID":"-"},"content":"                    assert false;"},{"lineNumber":538,"author":{"gitID":"-"},"content":"                    throw new AssertionError(\"Impossible! Should not have TagNotFoundException\");"},{"lineNumber":539,"author":{"gitID":"-"},"content":"                }"},{"lineNumber":540,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":541,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":542,"author":{"gitID":"TanCiKang"},"content":"        ..."},{"lineNumber":543,"author":{"gitID":"TanCiKang"},"content":"        ..."},{"lineNumber":544,"author":{"gitID":"TanCiKang"},"content":"        return new Internship(getName(), getSalary(), getEmail(), getAddress(),"},{"lineNumber":545,"author":{"gitID":"-"},"content":"                getIndustry(), getRegion(), getRole(), correctTagReferences);"},{"lineNumber":546,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":547,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":548,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":549,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":550,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":551,"author":{"gitID":"-"},"content":"    public Internship addTagsToInternship(String keyword) {"},{"lineNumber":552,"author":{"gitID":"-"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(getTags());"},{"lineNumber":553,"author":{"gitID":"-"},"content":""},{"lineNumber":554,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":555,"author":{"gitID":"-"},"content":"            internshipTags.add(new Tag(keyword));"},{"lineNumber":556,"author":{"gitID":"wyinkok"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":557,"author":{"gitID":"TanCiKang"},"content":"            throw new AssertionError(\"Operation would result in duplicate tags\");"},{"lineNumber":558,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":559,"author":{"gitID":"TanCiKang"},"content":"        ..."},{"lineNumber":560,"author":{"gitID":"TanCiKang"},"content":"        ..."},{"lineNumber":561,"author":{"gitID":"TanCiKang"},"content":"        return new Internship(     getName(), getSalary(), getEmail(), getAddress(),"},{"lineNumber":562,"author":{"gitID":"-"},"content":"                getIndustry(), getRegion(), getRole(), correctTagReferences);"},{"lineNumber":563,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":564,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":565,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":566,"author":{"gitID":"TanCiKang"},"content":"Implementation of the codes"},{"lineNumber":567,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":568,"author":{"gitID":"TanCiKang"},"content":"Initial: To implement the addTagsToFilteredList method, a double for loop was used to loop through both keywords and internships"},{"lineNumber":569,"author":{"gitID":"TanCiKang"},"content":"in order to find the match and proceed with the addition of tags to the internship."},{"lineNumber":570,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":571,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":572,"author":{"gitID":"TanCiKang"},"content":"    public static void addTagsToFilteredList (List\u003cString\u003e filterKeywords,"},{"lineNumber":573,"author":{"gitID":"TanCiKang"},"content":"                                              ObservableList\u003cInternship\u003e filteredInternships, Model model)"},{"lineNumber":574,"author":{"gitID":"TanCiKang"},"content":"            throws CommandException {"},{"lineNumber":575,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":576,"author":{"gitID":"TanCiKang"},"content":"        for (String keywords : filterKeywords) {"},{"lineNumber":577,"author":{"gitID":"TanCiKang"},"content":"            for (Internship filteredInternship : filteredInternships) {"},{"lineNumber":578,"author":{"gitID":"TanCiKang"},"content":"                if (StringUtil.containsWordIgnoreCase(filteredInternship.toString(), keywords)) {"},{"lineNumber":579,"author":{"gitID":"TanCiKang"},"content":"                    try {"},{"lineNumber":580,"author":{"gitID":"TanCiKang"},"content":"                        model.updateInternship(filteredInternship,"},{"lineNumber":581,"author":{"gitID":"TanCiKang"},"content":"                                addTagsToInternshipWithMatch(keywords, filteredInternship));"},{"lineNumber":582,"author":{"gitID":"TanCiKang"},"content":"                    } catch (DuplicateInternshipException e) {"},{"lineNumber":583,"author":{"gitID":"TanCiKang"},"content":"                        throw new CommandException(MESSAGE_DUPLICATE_INTERNSHIP);"},{"lineNumber":584,"author":{"gitID":"TanCiKang"},"content":"                    } catch (InternshipNotFoundException e) {"},{"lineNumber":585,"author":{"gitID":"TanCiKang"},"content":"                        throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":586,"author":{"gitID":"TanCiKang"},"content":"                    }"},{"lineNumber":587,"author":{"gitID":"TanCiKang"},"content":"                }"},{"lineNumber":588,"author":{"gitID":"TanCiKang"},"content":"            }"},{"lineNumber":589,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":590,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":591,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":592,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":593,"author":{"gitID":"TanCiKang"},"content":"Code Refinement: However, there were SRP violation there as the method was used to find internship that is matching the keyword,"},{"lineNumber":594,"author":{"gitID":"TanCiKang"},"content":"add the keyword tag and also update the internship. Furthermore, the code was deeply nested as well. As such, concept of abstraction"},{"lineNumber":595,"author":{"gitID":"TanCiKang"},"content":"was used to separate the functions into individual methods as shown below."},{"lineNumber":596,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":597,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":598,"author":{"gitID":"TanCiKang"},"content":"        model.removeTagsFromAllInternshipList();"},{"lineNumber":599,"author":{"gitID":"TanCiKang"},"content":"        model.updateSearchedInternshipList(predicate);"},{"lineNumber":600,"author":{"gitID":"TanCiKang"},"content":"        model.addTagsToFilteredList();"},{"lineNumber":601,"author":{"gitID":"TanCiKang"},"content":"        return getCommandResult();"},{"lineNumber":602,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":603,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":604,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":605,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d\u003d Additional Enhancement"},{"lineNumber":606,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":607,"author":{"gitID":"TanCiKang"},"content":"From the users perspective, they might want to find again if the result was not up to their satisfaction."},{"lineNumber":608,"author":{"gitID":"TanCiKang"},"content":"As such, the implementation was designed in such a way that subsequent find will reset the tags from the internship."},{"lineNumber":609,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":610,"author":{"gitID":"TanCiKang"},"content":"Since List command is used to show the entire list in the display, a feature is added to it such that all the tags are removed from the internships"},{"lineNumber":611,"author":{"gitID":"TanCiKang"},"content":"to allow the user to see the entire internship list."},{"lineNumber":612,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":613,"author":{"gitID":"TanCiKang"},"content":"    public void removeTagsFromFilteredList() {"},{"lineNumber":614,"author":{"gitID":"TanCiKang"},"content":"        for (Internship internship : getFilteredInternshipList()) {"},{"lineNumber":615,"author":{"gitID":"TanCiKang"},"content":"            try {"},{"lineNumber":616,"author":{"gitID":"TanCiKang"},"content":"                updateInternship(internship, internship.removeTagsFromInternship());"},{"lineNumber":617,"author":{"gitID":"TanCiKang"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":618,"author":{"gitID":"TanCiKang"},"content":"                throw new AssertionError(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":619,"author":{"gitID":"TanCiKang"},"content":"            } catch (InternshipNotFoundException e) {"},{"lineNumber":620,"author":{"gitID":"TanCiKang"},"content":"                throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":621,"author":{"gitID":"TanCiKang"},"content":"            }"},{"lineNumber":622,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":623,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":624,"author":{"gitID":"TanCiKang"},"content":"----"},{"lineNumber":625,"author":{"gitID":"TanCiKang"},"content":"Rather than throwing exception, assertion is used instead because users do not key in the value but instead, downloads"},{"lineNumber":626,"author":{"gitID":"TanCiKang"},"content":"the internship book and insert it into the program. As such, there should not be any duplicate internship. Any duplicate internships"},{"lineNumber":627,"author":{"gitID":"TanCiKang"},"content":"will result in the program malfunctioning and no internship being listed on the left panel."},{"lineNumber":628,"author":{"gitID":"TanCiKang"},"content":"// end::findwithfeatures[]"},{"lineNumber":629,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":630,"author":{"gitID":"-"},"content":"// tag::undoredo[]"},{"lineNumber":631,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Undo/Redo feature"},{"lineNumber":632,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Current Implementation"},{"lineNumber":633,"author":{"gitID":"-"},"content":""},{"lineNumber":634,"author":{"gitID":"-"},"content":"The undo/redo mechanism is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."},{"lineNumber":635,"author":{"gitID":"-"},"content":""},{"lineNumber":636,"author":{"gitID":"-"},"content":"`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"},{"lineNumber":637,"author":{"gitID":"-"},"content":""},{"lineNumber":638,"author":{"gitID":"-"},"content":"image::LogicCommandClassDiagram.png[width\u003d\"800\"]"},{"lineNumber":639,"author":{"gitID":"-"},"content":""},{"lineNumber":640,"author":{"gitID":"-"},"content":"As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. Note that this technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."},{"lineNumber":641,"author":{"gitID":"-"},"content":""},{"lineNumber":642,"author":{"gitID":"-"},"content":"Commands that are not undoable are implemented this way:"},{"lineNumber":643,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":644,"author":{"gitID":"-"},"content":"----"},{"lineNumber":645,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":646,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":647,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":648,"author":{"gitID":"-"},"content":"        // ... list logic ..."},{"lineNumber":649,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":650,"author":{"gitID":"-"},"content":"}"},{"lineNumber":651,"author":{"gitID":"-"},"content":"----"},{"lineNumber":652,"author":{"gitID":"-"},"content":""},{"lineNumber":653,"author":{"gitID":"-"},"content":"With the extra layer, the commands that are undoable are implemented this way:"},{"lineNumber":654,"author":{"gitID":"-"},"content":"[source,java]"},{"lineNumber":655,"author":{"gitID":"-"},"content":"----"},{"lineNumber":656,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":657,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":658,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":659,"author":{"gitID":"-"},"content":"        // ... undo logic ..."},{"lineNumber":660,"author":{"gitID":"-"},"content":""},{"lineNumber":661,"author":{"gitID":"-"},"content":"        executeUndoableCommand();"},{"lineNumber":662,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":663,"author":{"gitID":"-"},"content":"}"},{"lineNumber":664,"author":{"gitID":"-"},"content":""},{"lineNumber":665,"author":{"gitID":"-"},"content":"public class DeleteCommand extends UndoableCommand {"},{"lineNumber":666,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":667,"author":{"gitID":"-"},"content":"    public CommandResult executeUndoableCommand() {"},{"lineNumber":668,"author":{"gitID":"-"},"content":"        // ... delete logic ..."},{"lineNumber":669,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":670,"author":{"gitID":"-"},"content":"}"},{"lineNumber":671,"author":{"gitID":"-"},"content":"----"},{"lineNumber":672,"author":{"gitID":"-"},"content":""},{"lineNumber":673,"author":{"gitID":"-"},"content":"Suppose that the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."},{"lineNumber":674,"author":{"gitID":"-"},"content":""},{"lineNumber":675,"author":{"gitID":"TanCiKang"},"content":"The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th internship in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."},{"lineNumber":676,"author":{"gitID":"-"},"content":""},{"lineNumber":677,"author":{"gitID":"-"},"content":"image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":678,"author":{"gitID":"-"},"content":""},{"lineNumber":679,"author":{"gitID":"TanCiKang"},"content":"As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new internship."},{"lineNumber":680,"author":{"gitID":"-"},"content":""},{"lineNumber":681,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":682,"author":{"gitID":"-"},"content":""},{"lineNumber":683,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":684,"author":{"gitID":"-"},"content":"If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."},{"lineNumber":685,"author":{"gitID":"-"},"content":""},{"lineNumber":686,"author":{"gitID":"TanCiKang"},"content":"The user now decides that adding the internship was a mistake, and decides to undo that action using `undo`."},{"lineNumber":687,"author":{"gitID":"-"},"content":""},{"lineNumber":688,"author":{"gitID":"-"},"content":"We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."},{"lineNumber":689,"author":{"gitID":"-"},"content":""},{"lineNumber":690,"author":{"gitID":"-"},"content":"image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"},{"lineNumber":691,"author":{"gitID":"-"},"content":""},{"lineNumber":692,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":693,"author":{"gitID":"-"},"content":"If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."},{"lineNumber":694,"author":{"gitID":"-"},"content":""},{"lineNumber":695,"author":{"gitID":"-"},"content":"The following sequence diagram shows how the undo operation works:"},{"lineNumber":696,"author":{"gitID":"-"},"content":""},{"lineNumber":697,"author":{"gitID":"-"},"content":"image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"},{"lineNumber":698,"author":{"gitID":"-"},"content":""},{"lineNumber":699,"author":{"gitID":"-"},"content":"The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."},{"lineNumber":700,"author":{"gitID":"-"},"content":""},{"lineNumber":701,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":702,"author":{"gitID":"-"},"content":"If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."},{"lineNumber":703,"author":{"gitID":"-"},"content":""},{"lineNumber":704,"author":{"gitID":"-"},"content":"The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."},{"lineNumber":705,"author":{"gitID":"-"},"content":""},{"lineNumber":706,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":707,"author":{"gitID":"-"},"content":""},{"lineNumber":708,"author":{"gitID":"-"},"content":"Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"},{"lineNumber":709,"author":{"gitID":"-"},"content":""},{"lineNumber":710,"author":{"gitID":"-"},"content":"image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"},{"lineNumber":711,"author":{"gitID":"-"},"content":""},{"lineNumber":712,"author":{"gitID":"-"},"content":"The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"},{"lineNumber":713,"author":{"gitID":"-"},"content":""},{"lineNumber":714,"author":{"gitID":"-"},"content":"image::UndoRedoActivityDiagram.png[width\u003d\"650\"]"},{"lineNumber":715,"author":{"gitID":"-"},"content":""},{"lineNumber":716,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d Design Considerations"},{"lineNumber":717,"author":{"gitID":"-"},"content":""},{"lineNumber":718,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Implementation of `UndoableCommand`"},{"lineNumber":719,"author":{"gitID":"-"},"content":""},{"lineNumber":720,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()`"},{"lineNumber":721,"author":{"gitID":"-"},"content":"** Pros: We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` do not have to know that `executeUndoableCommand()` exist."},{"lineNumber":722,"author":{"gitID":"-"},"content":"** Cons: Hard for new developers to understand the template pattern."},{"lineNumber":723,"author":{"gitID":"-"},"content":"* **Alternative 2:** Just override `execute()`"},{"lineNumber":724,"author":{"gitID":"-"},"content":"** Pros: Does not involve the template pattern, easier for new developers to understand."},{"lineNumber":725,"author":{"gitID":"-"},"content":"** Cons: Classes that inherit from `UndoableCommand` must remember to call `super.execute()`, or lose the ability to undo/redo."},{"lineNumber":726,"author":{"gitID":"-"},"content":""},{"lineNumber":727,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: How undo \u0026 redo executes"},{"lineNumber":728,"author":{"gitID":"-"},"content":""},{"lineNumber":729,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Saves the entire address book."},{"lineNumber":730,"author":{"gitID":"-"},"content":"** Pros: Easy to implement."},{"lineNumber":731,"author":{"gitID":"-"},"content":"** Cons: May have performance issues in terms of memory usage."},{"lineNumber":732,"author":{"gitID":"-"},"content":"* **Alternative 2:** Individual command knows how to undo/redo by itself."},{"lineNumber":733,"author":{"gitID":"TanCiKang"},"content":"** Pros: Will use less memory (e.g. for `delete`, just save the internship being deleted)."},{"lineNumber":734,"author":{"gitID":"-"},"content":"** Cons: We must ensure that the implementation of each individual command are correct."},{"lineNumber":735,"author":{"gitID":"-"},"content":""},{"lineNumber":736,"author":{"gitID":"-"},"content":""},{"lineNumber":737,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Type of commands that can be undone/redone"},{"lineNumber":738,"author":{"gitID":"-"},"content":""},{"lineNumber":739,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`)."},{"lineNumber":740,"author":{"gitID":"-"},"content":"** Pros: We only revert changes that are hard to change back (the view can easily be re-modified as no data are * lost)."},{"lineNumber":741,"author":{"gitID":"-"},"content":"** Cons: User might think that undo also applies when the list is modified (undoing filtering for example), * only to realize that it does not do that, after executing `undo`."},{"lineNumber":742,"author":{"gitID":"-"},"content":"* **Alternative 2:** Include all commands."},{"lineNumber":743,"author":{"gitID":"-"},"content":"** Pros: Might be more intuitive for the user."},{"lineNumber":744,"author":{"gitID":"-"},"content":"** Cons: User have no way of skipping such commands if he or she just want to reset the state of the address * book and not the view."},{"lineNumber":745,"author":{"gitID":"wyinkok"},"content":"**Additional Info:** See our discussion  https://github.com/se-edu/InternshipBook-level4/issues/390#issuecomment-298936672[here]."},{"lineNumber":746,"author":{"gitID":"-"},"content":""},{"lineNumber":747,"author":{"gitID":"-"},"content":""},{"lineNumber":748,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d\u003d\u003d Aspect: Data structure to support the undo/redo commands"},{"lineNumber":749,"author":{"gitID":"-"},"content":""},{"lineNumber":750,"author":{"gitID":"-"},"content":"* **Alternative 1 (current choice):** Use separate stack for undo and redo"},{"lineNumber":751,"author":{"gitID":"-"},"content":"** Pros: Easy to understand for new Computer Science student undergraduates to understand, who are likely to be * the new incoming developers of our project."},{"lineNumber":752,"author":{"gitID":"-"},"content":"** Cons: Logic is duplicated twice. For example, when a new command is executed, we must remember to update * both `HistoryManager` and `UndoRedoStack`."},{"lineNumber":753,"author":{"gitID":"-"},"content":"* **Alternative 2:** Use `HistoryManager` for undo/redo"},{"lineNumber":754,"author":{"gitID":"-"},"content":"** Pros: We do not need to maintain a separate stack, and just reuse what is already in the codebase."},{"lineNumber":755,"author":{"gitID":"-"},"content":"** Cons: Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two * different things."},{"lineNumber":756,"author":{"gitID":"-"},"content":"// end::undoredo[]"},{"lineNumber":757,"author":{"gitID":"-"},"content":""},{"lineNumber":758,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Logging"},{"lineNumber":759,"author":{"gitID":"-"},"content":""},{"lineNumber":760,"author":{"gitID":"-"},"content":"We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."},{"lineNumber":761,"author":{"gitID":"-"},"content":""},{"lineNumber":762,"author":{"gitID":"-"},"content":"* The logging level can be controlled using the `logLevel` setting in the configuration file (See \u003c\u003cImplementation-Configuration\u003e\u003e)"},{"lineNumber":763,"author":{"gitID":"-"},"content":"* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"},{"lineNumber":764,"author":{"gitID":"-"},"content":"* Currently log messages are output through: `Console` and to a `.log` file."},{"lineNumber":765,"author":{"gitID":"-"},"content":""},{"lineNumber":766,"author":{"gitID":"-"},"content":"*Logging Levels*"},{"lineNumber":767,"author":{"gitID":"-"},"content":""},{"lineNumber":768,"author":{"gitID":"-"},"content":"* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"},{"lineNumber":769,"author":{"gitID":"-"},"content":"* `WARNING` : Can continue, but with caution"},{"lineNumber":770,"author":{"gitID":"-"},"content":"* `INFO` : Information showing the noteworthy actions by the App"},{"lineNumber":771,"author":{"gitID":"-"},"content":"* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"},{"lineNumber":772,"author":{"gitID":"-"},"content":""},{"lineNumber":773,"author":{"gitID":"-"},"content":"[[Implementation-Configuration]]"},{"lineNumber":774,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Configuration"},{"lineNumber":775,"author":{"gitID":"-"},"content":""},{"lineNumber":776,"author":{"gitID":"-"},"content":"Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."},{"lineNumber":777,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":778,"author":{"gitID":"-"},"content":"\u003d\u003d Documentation"},{"lineNumber":779,"author":{"gitID":"-"},"content":""},{"lineNumber":780,"author":{"gitID":"-"},"content":"We use asciidoc for writing documentation."},{"lineNumber":781,"author":{"gitID":"-"},"content":""},{"lineNumber":782,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":783,"author":{"gitID":"-"},"content":"We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."},{"lineNumber":784,"author":{"gitID":"-"},"content":""},{"lineNumber":785,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Editing Documentation"},{"lineNumber":786,"author":{"gitID":"-"},"content":""},{"lineNumber":787,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."},{"lineNumber":788,"author":{"gitID":"-"},"content":"Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."},{"lineNumber":789,"author":{"gitID":"-"},"content":""},{"lineNumber":790,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Publishing Documentation"},{"lineNumber":791,"author":{"gitID":"-"},"content":""},{"lineNumber":792,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."},{"lineNumber":793,"author":{"gitID":"-"},"content":""},{"lineNumber":794,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Converting Documentation to PDF format"},{"lineNumber":795,"author":{"gitID":"-"},"content":""},{"lineNumber":796,"author":{"gitID":"-"},"content":"We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."},{"lineNumber":797,"author":{"gitID":"-"},"content":""},{"lineNumber":798,"author":{"gitID":"-"},"content":"Here are the steps to convert the project documentation files to PDF format."},{"lineNumber":799,"author":{"gitID":"-"},"content":""},{"lineNumber":800,"author":{"gitID":"-"},"content":".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."},{"lineNumber":801,"author":{"gitID":"-"},"content":".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."},{"lineNumber":802,"author":{"gitID":"-"},"content":".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."},{"lineNumber":803,"author":{"gitID":"-"},"content":".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."},{"lineNumber":804,"author":{"gitID":"-"},"content":""},{"lineNumber":805,"author":{"gitID":"-"},"content":".Saving documentation as PDF files in Chrome"},{"lineNumber":806,"author":{"gitID":"-"},"content":"image::chrome_save_as_pdf.png[width\u003d\"300\"]"},{"lineNumber":807,"author":{"gitID":"-"},"content":""},{"lineNumber":808,"author":{"gitID":"-"},"content":"[[Testing]]"},{"lineNumber":809,"author":{"gitID":"-"},"content":"\u003d\u003d Testing"},{"lineNumber":810,"author":{"gitID":"-"},"content":""},{"lineNumber":811,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Running Tests"},{"lineNumber":812,"author":{"gitID":"-"},"content":""},{"lineNumber":813,"author":{"gitID":"-"},"content":"There are three ways to run tests."},{"lineNumber":814,"author":{"gitID":"-"},"content":""},{"lineNumber":815,"author":{"gitID":"-"},"content":"[TIP]"},{"lineNumber":816,"author":{"gitID":"-"},"content":"The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."},{"lineNumber":817,"author":{"gitID":"-"},"content":""},{"lineNumber":818,"author":{"gitID":"-"},"content":"*Method 1: Using IntelliJ JUnit test runner*"},{"lineNumber":819,"author":{"gitID":"-"},"content":""},{"lineNumber":820,"author":{"gitID":"-"},"content":"* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"},{"lineNumber":821,"author":{"gitID":"-"},"content":"* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"},{"lineNumber":822,"author":{"gitID":"-"},"content":""},{"lineNumber":823,"author":{"gitID":"-"},"content":"*Method 2: Using Gradle*"},{"lineNumber":824,"author":{"gitID":"-"},"content":""},{"lineNumber":825,"author":{"gitID":"-"},"content":"* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"},{"lineNumber":826,"author":{"gitID":"-"},"content":""},{"lineNumber":827,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":828,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."},{"lineNumber":829,"author":{"gitID":"-"},"content":""},{"lineNumber":830,"author":{"gitID":"-"},"content":"*Method 3: Using Gradle (headless)*"},{"lineNumber":831,"author":{"gitID":"-"},"content":""},{"lineNumber":832,"author":{"gitID":"-"},"content":"Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."},{"lineNumber":833,"author":{"gitID":"-"},"content":""},{"lineNumber":834,"author":{"gitID":"-"},"content":"To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"},{"lineNumber":835,"author":{"gitID":"-"},"content":""},{"lineNumber":836,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Types of tests"},{"lineNumber":837,"author":{"gitID":"-"},"content":""},{"lineNumber":838,"author":{"gitID":"-"},"content":"We have two types of tests:"},{"lineNumber":839,"author":{"gitID":"-"},"content":""},{"lineNumber":840,"author":{"gitID":"-"},"content":".  *GUI Tests* - These are tests involving the GUI. They include,"},{"lineNumber":841,"author":{"gitID":"-"},"content":".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."},{"lineNumber":842,"author":{"gitID":"-"},"content":".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."},{"lineNumber":843,"author":{"gitID":"-"},"content":".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"},{"lineNumber":844,"author":{"gitID":"-"},"content":"..  _Unit tests_ targeting the lowest level methods/classes. +"},{"lineNumber":845,"author":{"gitID":"-"},"content":"e.g. `seedu.address.commons.StringUtilTest`"},{"lineNumber":846,"author":{"gitID":"-"},"content":"..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"},{"lineNumber":847,"author":{"gitID":"-"},"content":"e.g. `seedu.address.storage.StorageManagerTest`"},{"lineNumber":848,"author":{"gitID":"-"},"content":"..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"},{"lineNumber":849,"author":{"gitID":"-"},"content":"e.g. `seedu.address.logic.LogicManagerTest`"},{"lineNumber":850,"author":{"gitID":"-"},"content":""},{"lineNumber":851,"author":{"gitID":"-"},"content":""},{"lineNumber":852,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Troubleshooting Testing"},{"lineNumber":853,"author":{"gitID":"-"},"content":"**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"},{"lineNumber":854,"author":{"gitID":"-"},"content":""},{"lineNumber":855,"author":{"gitID":"-"},"content":"* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."},{"lineNumber":856,"author":{"gitID":"-"},"content":"* Solution: Execute Gradle task `processResources`."},{"lineNumber":857,"author":{"gitID":"-"},"content":""},{"lineNumber":858,"author":{"gitID":"-"},"content":"\u003d\u003d Dev Ops"},{"lineNumber":859,"author":{"gitID":"-"},"content":""},{"lineNumber":860,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Build Automation"},{"lineNumber":861,"author":{"gitID":"-"},"content":""},{"lineNumber":862,"author":{"gitID":"-"},"content":"See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."},{"lineNumber":863,"author":{"gitID":"-"},"content":""},{"lineNumber":864,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Continuous Integration"},{"lineNumber":865,"author":{"gitID":"-"},"content":""},{"lineNumber":866,"author":{"gitID":"-"},"content":"We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."},{"lineNumber":867,"author":{"gitID":"-"},"content":""},{"lineNumber":868,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Coverage Reporting"},{"lineNumber":869,"author":{"gitID":"-"},"content":""},{"lineNumber":870,"author":{"gitID":"-"},"content":"We use https://coveralls.io/[Coveralls] to track the code coverage of our projects. See \u003c\u003cUsingCoveralls#, UsingCoveralls.adoc\u003e\u003e for more details."},{"lineNumber":871,"author":{"gitID":"-"},"content":""},{"lineNumber":872,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Documentation Previews"},{"lineNumber":873,"author":{"gitID":"-"},"content":"When a pull request has changes to asciidoc files, you can use https://www.netlify.com/[Netlify] to see a preview of how the HTML version of those asciidoc files will look like when the pull request is merged. See \u003c\u003cUsingNetlify#, UsingNetlify.adoc\u003e\u003e for more details."},{"lineNumber":874,"author":{"gitID":"-"},"content":""},{"lineNumber":875,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Making a Release"},{"lineNumber":876,"author":{"gitID":"-"},"content":""},{"lineNumber":877,"author":{"gitID":"-"},"content":"Here are the steps to create a new release."},{"lineNumber":878,"author":{"gitID":"-"},"content":""},{"lineNumber":879,"author":{"gitID":"-"},"content":".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."},{"lineNumber":880,"author":{"gitID":"-"},"content":".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."},{"lineNumber":881,"author":{"gitID":"-"},"content":".  Tag the repo with the version number. e.g. `v0.1`"},{"lineNumber":882,"author":{"gitID":"-"},"content":".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."},{"lineNumber":883,"author":{"gitID":"-"},"content":""},{"lineNumber":884,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Managing Dependencies"},{"lineNumber":885,"author":{"gitID":"-"},"content":""},{"lineNumber":886,"author":{"gitID":"-"},"content":"A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"},{"lineNumber":887,"author":{"gitID":"-"},"content":"a. Include those libraries in the repo (this bloats the repo size) +"},{"lineNumber":888,"author":{"gitID":"-"},"content":"b. Require developers to download those libraries manually (this creates extra work for developers)"},{"lineNumber":889,"author":{"gitID":"-"},"content":""},{"lineNumber":890,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":891,"author":{"gitID":"-"},"content":"\u003d\u003d Product Scope"},{"lineNumber":892,"author":{"gitID":"-"},"content":""},{"lineNumber":893,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Features Contribution"},{"lineNumber":894,"author":{"gitID":"-"},"content":""},{"lineNumber":895,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c15%,\u003c50%\",options\u003d\"header\",]"},{"lineNumber":896,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":897,"author":{"gitID":"-"},"content":"|Contributor |Feature | Major/Minor | Remarks"},{"lineNumber":898,"author":{"gitID":"-"},"content":"| Colin | Sorting/Filtering| Major | Designed and implemented a complete set of sorting/filtering/searching commands. Searching implemented by TanCiKang"},{"lineNumber":899,"author":{"gitID":"-"},"content":""},{"lineNumber":900,"author":{"gitID":"-"},"content":"| Colin | Model Enhancement | Minor | Modify list view to work with new commands. Allow filtering / sorting from existing list instead of new list"},{"lineNumber":901,"author":{"gitID":"-"},"content":""},{"lineNumber":902,"author":{"gitID":"TanCiKang"},"content":"| Ci Kang | Enhance Find Command | Major | Add tags to internship that matches keywords in find command and enable find command to search for multiple attributes"},{"lineNumber":903,"author":{"gitID":"-"},"content":""},{"lineNumber":904,"author":{"gitID":"TanCiKang"},"content":"| Ci Kang | Preview and Enhance view | Minor | Show preview of the important attributes of the internship on the left panel and full details on the right panel"},{"lineNumber":905,"author":{"gitID":"-"},"content":""},{"lineNumber":906,"author":{"gitID":"wyinkok"},"content":"| Wyin | GUI Revamp | Major | Revamp UI to incorporate a Chatbot in the CLI"},{"lineNumber":907,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":908,"author":{"gitID":"wyinkok"},"content":"| Wyin | Save and Unsave Command | Minor | Enable user to add and remove \"saved\" tags for specific internships into a Saved Collection"},{"lineNumber":909,"author":{"gitID":"-"},"content":""},{"lineNumber":910,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":911,"author":{"gitID":"-"},"content":""},{"lineNumber":912,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Target user profile"},{"lineNumber":913,"author":{"gitID":"-"},"content":""},{"lineNumber":914,"author":{"gitID":"wyinkok"},"content":"* are university students looking for internships"},{"lineNumber":915,"author":{"gitID":"wyinkok"},"content":"* but not sure how to start or what to look for"},{"lineNumber":916,"author":{"gitID":"wyinkok"},"content":"* prefers to an interactive application to source for internships rather than a normal and static web application"},{"lineNumber":917,"author":{"gitID":"wyinkok"},"content":"* wants to narrow down the list of internships with guidance"},{"lineNumber":918,"author":{"gitID":"-"},"content":"* prefers typing rather than clicking on internship portals"},{"lineNumber":919,"author":{"gitID":"-"},"content":"* can type fast"},{"lineNumber":920,"author":{"gitID":"-"},"content":"* is reasonably comfortable using CLI apps"},{"lineNumber":921,"author":{"gitID":"-"},"content":""},{"lineNumber":922,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Value proposition"},{"lineNumber":923,"author":{"gitID":"wyinkok"},"content":"* A guided and interactive way to find jobs and internships"},{"lineNumber":924,"author":{"gitID":"-"},"content":""},{"lineNumber":925,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":926,"author":{"gitID":"-"},"content":"\u003d\u003d User Stories"},{"lineNumber":927,"author":{"gitID":"-"},"content":""},{"lineNumber":928,"author":{"gitID":"-"},"content":"Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"},{"lineNumber":929,"author":{"gitID":"-"},"content":""},{"lineNumber":930,"author":{"gitID":"-"},"content":"[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"},{"lineNumber":931,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":932,"author":{"gitID":"-"},"content":"|Priority |As a ... |I want to ... |So that I can..."},{"lineNumber":933,"author":{"gitID":"wyinkok"},"content":"|`* * *` | experienced student | filter internship by details (industries/role/location/salary) |narrow down on the list of internship to apply for efficiently"},{"lineNumber":934,"author":{"gitID":"-"},"content":""},{"lineNumber":935,"author":{"gitID":"wyinkok"},"content":"|`* * *` | student | be able view a sorted list of internship (sorted according to my preferences) | know which internship to focus on"},{"lineNumber":936,"author":{"gitID":"-"},"content":""},{"lineNumber":937,"author":{"gitID":"wyinkok"},"content":"|`* * *` | tech-savvy student | have a user-friendly and clean application interface | use the app easily to communicate my preferences and needs"},{"lineNumber":938,"author":{"gitID":"-"},"content":""},{"lineNumber":939,"author":{"gitID":"wyinkok"},"content":"|`* * *` | tech-savvy student | have an interactive interface to source for internships | have a more engaging and personal experience when searching for development opportunities"},{"lineNumber":940,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":941,"author":{"gitID":"wyinkok"},"content":"|`* * *` | student | given a list of potential industries, jobs, skills and related information | better informed of the available options I can explore"},{"lineNumber":942,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":943,"author":{"gitID":"wyinkok"},"content":"|`* * *` | lazy student | save specific internships I am interested it and access it anytime | further narrow down on my interested internships conveniently"},{"lineNumber":944,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":945,"author":{"gitID":"wyinkok"},"content":"|`* *`| organised student | split up my saved internships into personalised collections | categorise and organise my interested internship in various folders"},{"lineNumber":946,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":947,"author":{"gitID":"wyinkok"},"content":"|`* *` | new student  | input my relevant skill sets/interests | explore internships that are suitable and interesting for me"},{"lineNumber":948,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":949,"author":{"gitID":"wyinkok"},"content":"|`* *` | curious student | given data analysis about successful internships and job search within a faculty or in a given year | overview of the job prospects in that year and understand the market competitiveness"},{"lineNumber":950,"author":{"gitID":"-"},"content":""},{"lineNumber":951,"author":{"gitID":"-"},"content":"|`* *` |lazy student | be able to upload my files / details somewhere | reuse these information for my applications"},{"lineNumber":952,"author":{"gitID":"-"},"content":""},{"lineNumber":953,"author":{"gitID":"-"},"content":"|`* *` |lazy student | track the internships I have search and applied for | better keep track of them"},{"lineNumber":954,"author":{"gitID":"-"},"content":""},{"lineNumber":955,"author":{"gitID":"-"},"content":"|`*` | student | know when companies will reply me | know whether I am rejected or not"},{"lineNumber":956,"author":{"gitID":"-"},"content":""},{"lineNumber":957,"author":{"gitID":"-"},"content":"|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":958,"author":{"gitID":"-"},"content":""},{"lineNumber":959,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":960,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":961,"author":{"gitID":"-"},"content":"\u003d\u003d Use Cases"},{"lineNumber":962,"author":{"gitID":"-"},"content":""},{"lineNumber":963,"author":{"gitID":"wyinkok"},"content":"(For all use cases below, the *System* is the `JobbiBot` and the *Actor* is the `user`, unless specified otherwise)"},{"lineNumber":964,"author":{"gitID":"wyinkok"},"content":"[discrete]"},{"lineNumber":965,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Use case: Start conversation with Jobbi"},{"lineNumber":966,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":967,"author":{"gitID":"wyinkok"},"content":"*MSS*"},{"lineNumber":968,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":969,"author":{"gitID":"wyinkok"},"content":"1.  User requests to start conversation with JobbiBot"},{"lineNumber":970,"author":{"gitID":"wyinkok"},"content":"2.  JobbiBot replies with the next prompt to indicate conversation has started"},{"lineNumber":971,"author":{"gitID":"-"},"content":"+"},{"lineNumber":972,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":973,"author":{"gitID":"-"},"content":""},{"lineNumber":974,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":975,"author":{"gitID":"-"},"content":""},{"lineNumber":976,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":977,"author":{"gitID":"wyinkok"},"content":"* 2a. User requests to start conversation again after the conversation has begun."},{"lineNumber":978,"author":{"gitID":"wyinkok"},"content":"+"},{"lineNumber":979,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":980,"author":{"gitID":"wyinkok"},"content":"** 2a1. JobbiBot shows an error message."},{"lineNumber":981,"author":{"gitID":"wyinkok"},"content":"** Use case resumes at step 2."},{"lineNumber":982,"author":{"gitID":"-"},"content":""},{"lineNumber":983,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":984,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Use case: Save internship"},{"lineNumber":985,"author":{"gitID":"-"},"content":""},{"lineNumber":986,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":987,"author":{"gitID":"-"},"content":""},{"lineNumber":988,"author":{"gitID":"TanCiKang"},"content":"1.  User requests to list internships"},{"lineNumber":989,"author":{"gitID":"wyinkok"},"content":"2.  JobbiBot shows a list of all the internships"},{"lineNumber":990,"author":{"gitID":"wyinkok"},"content":"3.  User requests to save a specific internship in the list"},{"lineNumber":991,"author":{"gitID":"wyinkok"},"content":"4.  JobbiBot saves the internship"},{"lineNumber":992,"author":{"gitID":"-"},"content":"+"},{"lineNumber":993,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":994,"author":{"gitID":"-"},"content":""},{"lineNumber":995,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":996,"author":{"gitID":"-"},"content":""},{"lineNumber":997,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":998,"author":{"gitID":"-"},"content":"* 2a. The list is empty."},{"lineNumber":999,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1000,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":1001,"author":{"gitID":"wyinkok"},"content":"** Use case ends."},{"lineNumber":1002,"author":{"gitID":"-"},"content":""},{"lineNumber":1003,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1004,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1005,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1006,"author":{"gitID":"wyinkok"},"content":"** 3a1. JobbiBot shows an error message."},{"lineNumber":1007,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1008,"author":{"gitID":"wyinkok"},"content":"** Use case resumes at step 2."},{"lineNumber":1009,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":1010,"author":{"gitID":"wyinkok"},"content":"* 4a. Users saves an internship that has been saved"},{"lineNumber":1011,"author":{"gitID":"wyinkok"},"content":"+"},{"lineNumber":1012,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":1013,"author":{"gitID":"wyinkok"},"content":"** 4a1. JobbiBot shows an error message"},{"lineNumber":1014,"author":{"gitID":"wyinkok"},"content":"** Use case resumes at step 2."},{"lineNumber":1015,"author":{"gitID":"-"},"content":""},{"lineNumber":1016,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1017,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Use case: Unsave internship"},{"lineNumber":1018,"author":{"gitID":"-"},"content":""},{"lineNumber":1019,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1020,"author":{"gitID":"-"},"content":""},{"lineNumber":1021,"author":{"gitID":"wyinkok"},"content":"1.  User requests to list the Saved Collection"},{"lineNumber":1022,"author":{"gitID":"wyinkok"},"content":"2.  JobbiBot shows a list of the Saved Collection"},{"lineNumber":1023,"author":{"gitID":"wyinkok"},"content":"3.  User requests to remove a specific internship from the Saved Collection"},{"lineNumber":1024,"author":{"gitID":"wyinkok"},"content":"4.  JobbiBot removes the internship from the Saved Collection"},{"lineNumber":1025,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1026,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1027,"author":{"gitID":"-"},"content":""},{"lineNumber":1028,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1029,"author":{"gitID":"-"},"content":""},{"lineNumber":1030,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1031,"author":{"gitID":"wyinkok"},"content":"* 2a. The Saved Collection is empty."},{"lineNumber":1032,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1033,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1034,"author":{"gitID":"wyinkok"},"content":"** Use case ends."},{"lineNumber":1035,"author":{"gitID":"-"},"content":""},{"lineNumber":1036,"author":{"gitID":"-"},"content":"* 3a. The given index is invalid."},{"lineNumber":1037,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1038,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1039,"author":{"gitID":"wyinkok"},"content":"** 3a1. JobbiBot shows an error message."},{"lineNumber":1040,"author":{"gitID":"wyinkok"},"content":"+"},{"lineNumber":1041,"author":{"gitID":"wyinkok"},"content":"** Use case resumes at step 2."},{"lineNumber":1042,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":1043,"author":{"gitID":"wyinkok"},"content":"* 4a. Users removes an internship that has been removed"},{"lineNumber":1044,"author":{"gitID":"wyinkok"},"content":"+"},{"lineNumber":1045,"author":{"gitID":"wyinkok"},"content":"[none]"},{"lineNumber":1046,"author":{"gitID":"wyinkok"},"content":"** 4a1. JobbiBot shows an error message"},{"lineNumber":1047,"author":{"gitID":"wyinkok"},"content":"** Use case resumes at step 2."},{"lineNumber":1048,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1049,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1050,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1051,"author":{"gitID":"TanCiKang"},"content":"// tag::usecase1[]"},{"lineNumber":1052,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1053,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d Use case: Finding Internship"},{"lineNumber":1054,"author":{"gitID":"-"},"content":""},{"lineNumber":1055,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1056,"author":{"gitID":"-"},"content":""},{"lineNumber":1057,"author":{"gitID":"TanCiKang"},"content":"1. User keys in a list of keywords to search  for internship by"},{"lineNumber":1058,"author":{"gitID":"-"},"content":"2. JobbiBot returns user the list of internships which contains the keywords"},{"lineNumber":1059,"author":{"gitID":"-"},"content":"3. User can choose to re-search again if not satisfied"},{"lineNumber":1060,"author":{"gitID":"-"},"content":""},{"lineNumber":1061,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1062,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1063,"author":{"gitID":"-"},"content":""},{"lineNumber":1064,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1065,"author":{"gitID":"-"},"content":""},{"lineNumber":1066,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1067,"author":{"gitID":"-"},"content":"* 2a. JobbiBot returns no found internships"},{"lineNumber":1068,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1069,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1070,"author":{"gitID":"-"},"content":"** 2a1. JobbiBot will recommend user to re-search using other keywords"},{"lineNumber":1071,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1072,"author":{"gitID":"-"},"content":"Use case resumes at step 3."},{"lineNumber":1073,"author":{"gitID":"-"},"content":""},{"lineNumber":1074,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1075,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Filtering Internship"},{"lineNumber":1076,"author":{"gitID":"-"},"content":""},{"lineNumber":1077,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1078,"author":{"gitID":"-"},"content":""},{"lineNumber":1079,"author":{"gitID":"-"},"content":"1. User keys in a list of keywords to filter the currently searched internship list (from the finding internship use case above)"},{"lineNumber":1080,"author":{"gitID":"-"},"content":"2. JobbiBot returns user the list of internships which contains all the keywords entered from the searched list"},{"lineNumber":1081,"author":{"gitID":"-"},"content":"3. User can choose to re-filter in another set of keywords to narrow the searched internship list (from the finding internship use case)"},{"lineNumber":1082,"author":{"gitID":"-"},"content":""},{"lineNumber":1083,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1084,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1085,"author":{"gitID":"-"},"content":""},{"lineNumber":1086,"author":{"gitID":"-"},"content":"*Extensions*"},{"lineNumber":1087,"author":{"gitID":"-"},"content":""},{"lineNumber":1088,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1089,"author":{"gitID":"-"},"content":"* 2a. JobbiBot returns no found internships"},{"lineNumber":1090,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1091,"author":{"gitID":"-"},"content":"[none]"},{"lineNumber":1092,"author":{"gitID":"-"},"content":"** 2a1. JobbiBot will recommend user to re-filter using other keywords"},{"lineNumber":1093,"author":{"gitID":"-"},"content":"** 2a2. User can also use undo function to return back to last searched or filtered internship list"},{"lineNumber":1094,"author":{"gitID":"-"},"content":""},{"lineNumber":1095,"author":{"gitID":"TanCiKang"},"content":"// end::usecase1[]"},{"lineNumber":1096,"author":{"gitID":"-"},"content":""},{"lineNumber":1097,"author":{"gitID":"-"},"content":"[discrete]"},{"lineNumber":1098,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Use case: Sorting Internship"},{"lineNumber":1099,"author":{"gitID":"-"},"content":""},{"lineNumber":1100,"author":{"gitID":"-"},"content":"*MSS*"},{"lineNumber":1101,"author":{"gitID":"-"},"content":""},{"lineNumber":1102,"author":{"gitID":"-"},"content":"1. User keys in keywords to sort the currently searched or filtered internship list by"},{"lineNumber":1103,"author":{"gitID":"-"},"content":"2. JobbiBot returns user the list of internships sorted according to the keyword matching the internship attributes (e.g name, industry, role)."},{"lineNumber":1104,"author":{"gitID":"-"},"content":"3. User can choose to sort up to three keyword attributes"},{"lineNumber":1105,"author":{"gitID":"-"},"content":"4. JobbiBot will sort the internship by the first keyword attribute, followed by the next two keyword attribute"},{"lineNumber":1106,"author":{"gitID":"-"},"content":""},{"lineNumber":1107,"author":{"gitID":"-"},"content":"+"},{"lineNumber":1108,"author":{"gitID":"-"},"content":"Use case ends."},{"lineNumber":1109,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1110,"author":{"gitID":"TanCiKang"},"content":"// tag::nonfunctionalrequirements[]"},{"lineNumber":1111,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1112,"author":{"gitID":"-"},"content":"\u003d\u003d Non Functional Requirements"},{"lineNumber":1113,"author":{"gitID":"-"},"content":""},{"lineNumber":1114,"author":{"gitID":"-"},"content":".  Should work on any \u003c\u003cmainstream-os,mainstream OS\u003e\u003e as long as it has Java `1.8.0_60` or higher installed."},{"lineNumber":1115,"author":{"gitID":"TanCiKang"},"content":".  Should be able to hold up to 1000 internships without a noticeable sluggishness in performance for typical usage."},{"lineNumber":1116,"author":{"gitID":"-"},"content":".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."},{"lineNumber":1117,"author":{"gitID":"-"},"content":".  Should respond to commands within 5 seconds."},{"lineNumber":1118,"author":{"gitID":"-"},"content":".  Should be usable by a novice who is using the system for the first time."},{"lineNumber":1119,"author":{"gitID":"-"},"content":".  A user looking for internship should not need to key in more than 19 commands."},{"lineNumber":1120,"author":{"gitID":"-"},"content":".  An expert or regular user should be able to have the alternative to use command line instead of the chat bot."},{"lineNumber":1121,"author":{"gitID":"-"},"content":".  Should have a clean and easy to use interface."},{"lineNumber":1122,"author":{"gitID":"-"},"content":".  Should be designed for a British-English speaking user."},{"lineNumber":1123,"author":{"gitID":"-"},"content":".  Should be current and up to date (i.e. companies recruitment status)."},{"lineNumber":1124,"author":{"gitID":"TanCiKang"},"content":"// end::nonfunctionalrequirements[]"},{"lineNumber":1125,"author":{"gitID":"-"},"content":""},{"lineNumber":1126,"author":{"gitID":"wyinkok"},"content":"// tag::glossary[]"},{"lineNumber":1127,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1128,"author":{"gitID":"-"},"content":"\u003d\u003d Glossary"},{"lineNumber":1129,"author":{"gitID":"-"},"content":""},{"lineNumber":1130,"author":{"gitID":"wyinkok"},"content":"[[chatbot]] Chat Bot::"},{"lineNumber":1131,"author":{"gitID":"TanCiKang"},"content":"A computer program that stimulates a human conversation by communicating with a real internship."},{"lineNumber":1132,"author":{"gitID":"wyinkok"},"content":"In this project, our chat bot will guide the user to find his ideal internships."},{"lineNumber":1133,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1134,"author":{"gitID":"-"},"content":"[[mainstream-os]] Mainstream OS::"},{"lineNumber":1135,"author":{"gitID":"-"},"content":"Windows, Linux, Unix, OS-X"},{"lineNumber":1136,"author":{"gitID":"-"},"content":""},{"lineNumber":1137,"author":{"gitID":"wyinkok"},"content":"// end::glossary[]"},{"lineNumber":1138,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1139,"author":{"gitID":"wyinkok"},"content":"// tag::productsurvey[]"},{"lineNumber":1140,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1141,"author":{"gitID":"-"},"content":"\u003d\u003d ProductSurvey"},{"lineNumber":1142,"author":{"gitID":"-"},"content":""},{"lineNumber":1143,"author":{"gitID":"wyinkok"},"content":"*Symplicity*"},{"lineNumber":1144,"author":{"gitID":"-"},"content":""},{"lineNumber":1145,"author":{"gitID":"wyinkok"},"content":"Used by: National University of Singapore (NUS) and Yale-NUS College."},{"lineNumber":1146,"author":{"gitID":"-"},"content":""},{"lineNumber":1147,"author":{"gitID":"-"},"content":"Pros:"},{"lineNumber":1148,"author":{"gitID":"-"},"content":""},{"lineNumber":1149,"author":{"gitID":"wyinkok"},"content":"* Provides a list of potential internships, research opportunities, full-time job applications,"},{"lineNumber":1150,"author":{"gitID":"wyinkok"},"content":"on-campus jobs for students"},{"lineNumber":1151,"author":{"gitID":"TanCiKang"},"content":"* Ability to filter according to job type, company, region, etc."},{"lineNumber":1152,"author":{"gitID":"wyinkok"},"content":"* Ability to apply for an opportunity via the platform"},{"lineNumber":1153,"author":{"gitID":"-"},"content":""},{"lineNumber":1154,"author":{"gitID":"-"},"content":"Cons:"},{"lineNumber":1155,"author":{"gitID":"-"},"content":""},{"lineNumber":1156,"author":{"gitID":"wyinkok"},"content":"* Does not have a chat bot that interacts and guides its end users so users have to browse through extensively"},{"lineNumber":1157,"author":{"gitID":"wyinkok"},"content":"to find their ideal internships on their own."},{"lineNumber":1158,"author":{"gitID":"wyinkok"},"content":"// end::productsurvey[]"},{"lineNumber":1159,"author":{"gitID":"-"},"content":"[appendix]"},{"lineNumber":1160,"author":{"gitID":"-"},"content":"\u003d\u003d Instructions for Manual Testing"},{"lineNumber":1161,"author":{"gitID":"-"},"content":""},{"lineNumber":1162,"author":{"gitID":"-"},"content":"Given below are instructions to test the app manually."},{"lineNumber":1163,"author":{"gitID":"-"},"content":""},{"lineNumber":1164,"author":{"gitID":"-"},"content":"[NOTE]"},{"lineNumber":1165,"author":{"gitID":"-"},"content":"These instructions only provide a starting point for testers to work on; testers are expected to do more _exploratory_ testing."},{"lineNumber":1166,"author":{"gitID":"-"},"content":""},{"lineNumber":1167,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Launch and Shutdown"},{"lineNumber":1168,"author":{"gitID":"-"},"content":""},{"lineNumber":1169,"author":{"gitID":"-"},"content":". Initial launch"},{"lineNumber":1170,"author":{"gitID":"-"},"content":""},{"lineNumber":1171,"author":{"gitID":"-"},"content":".. Download the jar file and copy into an empty folder"},{"lineNumber":1172,"author":{"gitID":"-"},"content":".. Double-click the jar file +"},{"lineNumber":1173,"author":{"gitID":"-"},"content":"   Expected: Shows the GUI with a set of sample contacts. The window size may not be optimum."},{"lineNumber":1174,"author":{"gitID":"-"},"content":""},{"lineNumber":1175,"author":{"gitID":"-"},"content":". Saving window preferences"},{"lineNumber":1176,"author":{"gitID":"-"},"content":""},{"lineNumber":1177,"author":{"gitID":"TanCiKang"},"content":".. Resize the window to an optimum size. Move the window to a different region. Close the window."},{"lineNumber":1178,"author":{"gitID":"-"},"content":".. Re-launch the app by double-clicking the jar file. +"},{"lineNumber":1179,"author":{"gitID":"TanCiKang"},"content":"   Expected: The most recent window size and region is retained."},{"lineNumber":1180,"author":{"gitID":"-"},"content":""},{"lineNumber":1181,"author":{"gitID":"wyinkok"},"content":"// tag::startmanualtestwyin[]"},{"lineNumber":1182,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Starting a conversation with JobbiBot"},{"lineNumber":1183,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1184,"author":{"gitID":"wyinkok"},"content":"Starting a conversation with JobbiBot when the application is launched ."},{"lineNumber":1185,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1186,"author":{"gitID":"wyinkok"},"content":".. Test case: `start` +"},{"lineNumber":1187,"author":{"gitID":"wyinkok"},"content":"    Expected: JobbiBot prints a response message in the message thread that prompts the user to find preferred industries and roles."},{"lineNumber":1188,"author":{"gitID":"wyinkok"},"content":".. Test case: `start x` (where x is an integer, alphabet or non alphanumerical character) +"},{"lineNumber":1189,"author":{"gitID":"wyinkok"},"content":"    Expected: Conversation not started. Error details shown in the message thread."},{"lineNumber":1190,"author":{"gitID":"wyinkok"},"content":".. Test case: Subsequent `start` commands after entering the initial `start` commands +"},{"lineNumber":1191,"author":{"gitID":"wyinkok"},"content":"    Expected: JobbiBot says that the conversation has already started and subsequent `start` commands has no effect on initiating the conversation again."},{"lineNumber":1192,"author":{"gitID":"wyinkok"},"content":"// end::startmanualtestwyin[]"},{"lineNumber":1193,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Clearing a previous conversation with JobbiBot"},{"lineNumber":1194,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1195,"author":{"gitID":"wyinkok"},"content":"Restarting a conversation with JobbiBot after typing more than 4 commands in the CLI."},{"lineNumber":1196,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1197,"author":{"gitID":"wyinkok"},"content":".. Test case: `new x` (where x is an integer, alphabet or non alphanumerical character) +"},{"lineNumber":1198,"author":{"gitID":"wyinkok"},"content":"    Expected: Previous conversation is not cleared. Error details shown in the message thread."},{"lineNumber":1199,"author":{"gitID":"wyinkok"},"content":".. Test case: `new` +"},{"lineNumber":1200,"author":{"gitID":"wyinkok"},"content":"    Expected: Clears entire previous message thread and user only sees the JobbiBot welcome message left."},{"lineNumber":1201,"author":{"gitID":"wyinkok"},"content":".. Test case: `list` +"},{"lineNumber":1202,"author":{"gitID":"wyinkok"},"content":"    Expected: Error detail is shown in the message thread. JobbiBot prompts the user to type the `start` command to restart the conversation."},{"lineNumber":1203,"author":{"gitID":"-"},"content":""},{"lineNumber":1204,"author":{"gitID":"wyinkok"},"content":"// tag::savemanualtestwyin[]"},{"lineNumber":1205,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Saving an internship to Saved Collection"},{"lineNumber":1206,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1207,"author":{"gitID":"wyinkok"},"content":". Saving an internship while all internships are listed."},{"lineNumber":1208,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1209,"author":{"gitID":"wyinkok"},"content":".. Prerequisites: List all internships using the `list` command. Multiple internships in the list."},{"lineNumber":1210,"author":{"gitID":"wyinkok"},"content":".. Test case: `save 1` +"},{"lineNumber":1211,"author":{"gitID":"wyinkok"},"content":"   Expected: First internship is saved from the list as visible from the `saved` tag added to the internship. Details of the successful saved internship are shown as a JobbiBot response in the message thread."},{"lineNumber":1212,"author":{"gitID":"wyinkok"},"content":".. Test case: `save 1` to save the same internship from the same list again +"},{"lineNumber":1213,"author":{"gitID":"wyinkok"},"content":"    Expected: Internship cannot be saved twice. Error details shown in the message thread."},{"lineNumber":1214,"author":{"gitID":"wyinkok"},"content":".. Test case: `save 0` +"},{"lineNumber":1215,"author":{"gitID":"wyinkok"},"content":"   Expected: No internship is saved. Error details shown in the message thread."},{"lineNumber":1216,"author":{"gitID":"wyinkok"},"content":".. Test case: `save -2` +"},{"lineNumber":1217,"author":{"gitID":"wyinkok"},"content":"  Expected: No internship is saved. Error details shown in the message thread."},{"lineNumber":1218,"author":{"gitID":"wyinkok"},"content":".. Other incorrect save commands to try: `save`, `save x` or `x save` (where x is larger than the list size or x is not an alphanumerical character"},{"lineNumber":1219,"author":{"gitID":"wyinkok"},"content":" or x is a mathematical expression that evaluates to an positive integer),  +"},{"lineNumber":1220,"author":{"gitID":"wyinkok"},"content":"   Expected: No internship is saved. Error details shown in the message thread."},{"lineNumber":1221,"author":{"gitID":"wyinkok"},"content":"// end::savemanualtestwyin[]"},{"lineNumber":1222,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1223,"author":{"gitID":"wyinkok"},"content":"\u003d\u003d\u003d Removing an internship to Saved Collection"},{"lineNumber":1224,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1225,"author":{"gitID":"wyinkok"},"content":". Removing an internship while all internships are listed."},{"lineNumber":1226,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1227,"author":{"gitID":"wyinkok"},"content":".. Prerequisites: List all internships from the Saved Internship Collection using the `find saved` or `filter saved` command. Multiple internships in the Saved Collection."},{"lineNumber":1228,"author":{"gitID":"wyinkok"},"content":".. Test case: `unsave 1` +"},{"lineNumber":1229,"author":{"gitID":"wyinkok"},"content":"   Expected: First internship is removed from the Saved Collection as visible from the `saved` tag being removed from the internship and the internship is removed from the Saved Collection. Details of the successful removal are shown as a JobbiBot response in the message thread."},{"lineNumber":1230,"author":{"gitID":"wyinkok"},"content":".. Test case: `unsave 0` +"},{"lineNumber":1231,"author":{"gitID":"wyinkok"},"content":"   Expected: No internship is removed from Saved Collection. Error details shown in the message thread."},{"lineNumber":1232,"author":{"gitID":"wyinkok"},"content":".. Test case: `save -2` +"},{"lineNumber":1233,"author":{"gitID":"wyinkok"},"content":"  Expected: No internship is removed from Saved Collection. Error details shown in the message thread."},{"lineNumber":1234,"author":{"gitID":"wyinkok"},"content":".. Other incorrect save commands to try: `unsave`, `unsave x` or `x unsave` (where x is larger than the list size or x is not an alphanumerical character"},{"lineNumber":1235,"author":{"gitID":"wyinkok"},"content":" or x is a mathematical expression that evaluates to an positive integer),  +"},{"lineNumber":1236,"author":{"gitID":"wyinkok"},"content":"   Expected: No internship is removed from Saved Collection. Error details shown in the message thread."},{"lineNumber":1237,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1238,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1239,"author":{"gitID":"-"},"content":""},{"lineNumber":1240,"author":{"gitID":"TanCiKang"},"content":"// tag::manualtestcikang[]"},{"lineNumber":1241,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1242,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d Finding an internship"},{"lineNumber":1243,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1244,"author":{"gitID":"TanCiKang"},"content":". Find internships using keyword/s"},{"lineNumber":1245,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1246,"author":{"gitID":"TanCiKang"},"content":".. Prerequisites: Nil"},{"lineNumber":1247,"author":{"gitID":"TanCiKang"},"content":".. Test case: `find KEYWORD` +"},{"lineNumber":1248,"author":{"gitID":"TanCiKang"},"content":"   Expected: Internships matching the keyword are all listed on the left panel. Keywords matching the internship are added as tags to the internships."},{"lineNumber":1249,"author":{"gitID":"TanCiKang"},"content":".. Test case: `find KEYWORD1 KEYWORD2` +"},{"lineNumber":1250,"author":{"gitID":"TanCiKang"},"content":"   Expected: Searched internship list on the left is replaced with the new list matching KEYWORD1 and/or KEYWORD2."},{"lineNumber":1251,"author":{"gitID":"TanCiKang"},"content":".. Test case: `find ` +"},{"lineNumber":1252,"author":{"gitID":"TanCiKang"},"content":"   Expected: Invalid command format. Error details shown in the message thread."},{"lineNumber":1253,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1254,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d Finding saved internships"},{"lineNumber":1255,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1256,"author":{"gitID":"TanCiKang"},"content":". Find saved internships"},{"lineNumber":1257,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1258,"author":{"gitID":"TanCiKang"},"content":".. Prerequisites: Have saved at least one internship with the save command."},{"lineNumber":1259,"author":{"gitID":"TanCiKang"},"content":".. Test case: `find saved` +"},{"lineNumber":1260,"author":{"gitID":"TanCiKang"},"content":"   Expected: Saved Internships matching are all listed on the left panel."},{"lineNumber":1261,"author":{"gitID":"TanCiKang"},"content":".. Test case: `find KEYWORD1 saved` +"},{"lineNumber":1262,"author":{"gitID":"TanCiKang"},"content":"   Expected: Internships matching keyword1 and/or saved are showed, internships matching keyword1 have keyword tags added."},{"lineNumber":1263,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1264,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d List internships"},{"lineNumber":1265,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1266,"author":{"gitID":"TanCiKang"},"content":". List internships"},{"lineNumber":1267,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1268,"author":{"gitID":"TanCiKang"},"content":".. Prerequisites: Have saved at least one internship, have executed find command such that the list on the left panel is not the full list."},{"lineNumber":1269,"author":{"gitID":"TanCiKang"},"content":".. Test case: `list` +"},{"lineNumber":1270,"author":{"gitID":"TanCiKang"},"content":"   Expected: Left panel display full internships, keyword tags attached during find command are removed."},{"lineNumber":1271,"author":{"gitID":"TanCiKang"},"content":".. Test case: `list KEYWORD` +"},{"lineNumber":1272,"author":{"gitID":"TanCiKang"},"content":"   Expected: Invalid command format. Error details shown in the message thread."},{"lineNumber":1273,"author":{"gitID":"TanCiKang"},"content":".. Other incorrect list commands to try: `list 0`, `list 1` or `list abc` +"},{"lineNumber":1274,"author":{"gitID":"wyinkok"},"content":"   Expected: Similar to previous."},{"lineNumber":1275,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":1276,"author":{"gitID":"TanCiKang"},"content":"\u003d\u003d\u003d Select internship"},{"lineNumber":1277,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1278,"author":{"gitID":"TanCiKang"},"content":"   . Select internship"},{"lineNumber":1279,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1280,"author":{"gitID":"TanCiKang"},"content":"   .. Prerequisites: Have saved at least one internship available in the left panel."},{"lineNumber":1281,"author":{"gitID":"TanCiKang"},"content":"   .. Test case: `select 1` +"},{"lineNumber":1282,"author":{"gitID":"TanCiKang"},"content":"      Expected: Right panel display full details of internship from internsg."},{"lineNumber":1283,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1284,"author":{"gitID":"TanCiKang"},"content":"// end::manualtestcikang[]"},{"lineNumber":1285,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":1286,"author":{"gitID":"-"},"content":""},{"lineNumber":1287,"author":{"gitID":"-"},"content":"// tag::manualtestcolin[]"},{"lineNumber":1288,"author":{"gitID":"-"},"content":""},{"lineNumber":1289,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Filtering the JobbiBot Internship List"},{"lineNumber":1290,"author":{"gitID":"-"},"content":""},{"lineNumber":1291,"author":{"gitID":"-"},"content":". Should only apply filter to the current searched(find command) list. Use `list command` before the start of each test case"},{"lineNumber":1292,"author":{"gitID":"-"},"content":""},{"lineNumber":1293,"author":{"gitID":"-"},"content":".. Test case: `filter business` +"},{"lineNumber":1294,"author":{"gitID":"-"},"content":"    Expected: JobbiBot returns all internship containing \u0027business\u0027 in the current internship list. There should be no tags unlike the case of find command"},{"lineNumber":1295,"author":{"gitID":"-"},"content":""},{"lineNumber":1296,"author":{"gitID":"-"},"content":".. Test case: `filter business development` +"},{"lineNumber":1297,"author":{"gitID":"-"},"content":"    Expected: JobbiBot returns all internship containing the keywords \u0027business\u0027 and \u0027development\u0027 in the current internship list. There should be no tags unlike the case of find command"},{"lineNumber":1298,"author":{"gitID":"-"},"content":""},{"lineNumber":1299,"author":{"gitID":"-"},"content":".. Test case: `find google` then `filter development` +"},{"lineNumber":1300,"author":{"gitID":"-"},"content":"    Expected: JobbiBot returns no internship found as there is no internships that contains \u0027google\u0027 and \u0027development\u0027."},{"lineNumber":1301,"author":{"gitID":"-"},"content":""},{"lineNumber":1302,"author":{"gitID":"-"},"content":".. Test case: `find google business` then `filter development` +"},{"lineNumber":1303,"author":{"gitID":"-"},"content":"    Expected: JobbiBot returns only the internship containing both \u0027business\u0027 and \u0027development\u0027 as there are internship that contains both \u0027google\u0027 and \u0027development\u0027. There should be a `business` tag on the internship shown."},{"lineNumber":1304,"author":{"gitID":"-"},"content":""},{"lineNumber":1305,"author":{"gitID":"-"},"content":".. Test case: `find google` then `list` then `filter development` +"},{"lineNumber":1306,"author":{"gitID":"-"},"content":"    Expected: Jobbibot return all internships containing \u0027development\u0027 as list command resets the searched list that the filter command works on. No searched tags on the internship."},{"lineNumber":1307,"author":{"gitID":"-"},"content":""},{"lineNumber":1308,"author":{"gitID":"-"},"content":".. Test case: `filter business` then `filter development` +"},{"lineNumber":1309,"author":{"gitID":"-"},"content":"    Expected: JobbiBot returns all internship that contains development. Filtering only works on last searched or default list (cannot filter from a filtered list). No searched tags on the internships."},{"lineNumber":1310,"author":{"gitID":"-"},"content":""},{"lineNumber":1311,"author":{"gitID":"-"},"content":""},{"lineNumber":1312,"author":{"gitID":"-"},"content":"\u003d\u003d\u003d Sorting the JobbiBot Internship List"},{"lineNumber":1313,"author":{"gitID":"-"},"content":""},{"lineNumber":1314,"author":{"gitID":"-"},"content":". Should sort according to keyword(s) entered +"},{"lineNumber":1315,"author":{"gitID":"-"},"content":"Valid keyword attributes are: `name` `role` `region` `salary` `industry` , and  `-name` `-role` `-region` `-salary` `-industry` +"},{"lineNumber":1316,"author":{"gitID":"-"},"content":"Attributes are sorted from A-Z by default (case insensitive). Salary is sorted from highest to lowest by default. +"},{"lineNumber":1317,"author":{"gitID":"-"},"content":"Keyword attribute with \u0027-\u0027 are sorted in reverse order. +"},{"lineNumber":1318,"author":{"gitID":"-"},"content":""},{"lineNumber":1319,"author":{"gitID":"-"},"content":".. Test case: `sort [keyword]` +"},{"lineNumber":1320,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should return a list of internship sorted according to that keyword, sorted from A-Z (case insensitive)"},{"lineNumber":1321,"author":{"gitID":"-"},"content":""},{"lineNumber":1322,"author":{"gitID":"-"},"content":".. Test case: `sort salary` +"},{"lineNumber":1323,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should return a list of internship sorted according by salary from highest to lowest"},{"lineNumber":1324,"author":{"gitID":"-"},"content":""},{"lineNumber":1325,"author":{"gitID":"-"},"content":".. Test case: `sort -salary` +"},{"lineNumber":1326,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should return a list of internship sorted according by salary from lowest to highest"},{"lineNumber":1327,"author":{"gitID":"-"},"content":""},{"lineNumber":1328,"author":{"gitID":"-"},"content":".. Test case: `sort [-keyword]` +"},{"lineNumber":1329,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should return a list of internship sorted according to that keyword, sorted from Z-A (case insensitive)"},{"lineNumber":1330,"author":{"gitID":"-"},"content":""},{"lineNumber":1331,"author":{"gitID":"-"},"content":".. Test case: `sort [keyword1] [keyword2] [keyword3]` +"},{"lineNumber":1332,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should return a list of internship sorted according to that keyword1 first, and if there is a tie, keyword2, and if there is a tie again, keyword3"},{"lineNumber":1333,"author":{"gitID":"-"},"content":""},{"lineNumber":1334,"author":{"gitID":"-"},"content":".. Test case: `sort [keyword1] [keyword2] [keyword3] [moreKeyword]` +"},{"lineNumber":1335,"author":{"gitID":"-"},"content":"    Expected: Jobbibot should only sort according to the first three keywords. Subsequent arguments are ignored."},{"lineNumber":1336,"author":{"gitID":"-"},"content":""},{"lineNumber":1337,"author":{"gitID":"-"},"content":". Should should only show internships from the current searched/filtered list. Use `list command` before the start of each test case"},{"lineNumber":1338,"author":{"gitID":"-"},"content":""},{"lineNumber":1339,"author":{"gitID":"-"},"content":".. Test case: `sort role` +"},{"lineNumber":1340,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should show a list of ALL internships, sorted by role from A-Z (case insensitive)."},{"lineNumber":1341,"author":{"gitID":"-"},"content":""},{"lineNumber":1342,"author":{"gitID":"-"},"content":".. Test case: `find business` then `sort role` +"},{"lineNumber":1343,"author":{"gitID":"-"},"content":"    Expected: JobbiBot should show a list of internships that contains business, sorted by role from A-Z (case insensitive)."},{"lineNumber":1344,"author":{"gitID":"-"},"content":""},{"lineNumber":1345,"author":{"gitID":"-"},"content":".. Test case: `find business` then `filter seragoon` then `sort role` +"},{"lineNumber":1346,"author":{"gitID":"-"},"content":"        Expected: JobbiBot should show a list of internships that contains both business and serangoon, sorted by role from A-Z (case insensitive)."},{"lineNumber":1347,"author":{"gitID":"-"},"content":""},{"lineNumber":1348,"author":{"gitID":"-"},"content":"// end::manualtestcolin[]"},{"lineNumber":1349,"author":{"gitID":"-"},"content":""},{"lineNumber":1350,"author":{"gitID":"-"},"content":""}],"authorContributionMap":{"niloc94":1,"wyinkok":299,"TanCiKang":187,"-":863}},{"path":"src/test/java/systemtests/SaveCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.SaveCommand.MESSAGE_SAVED_INTERNSHIP_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getInternship;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getSecondLastIndex;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.KEYWORD_MATCHING_AUDIT;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.SaveCommand;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.SavedInternshipBuilder;"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"public class SaveCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"    private static final String MESSAGE_INVALID_SAVE_COMMAND_FORMAT \u003d"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE);"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public void save() throws CommandException {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        /* ----------------- Performing save operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        /* Case: save the first internship in the list, command with leading spaces and trailing spaces -\u003e saved */"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        Model expectedmodel \u003d getModel();"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        Index firstIndex \u003d INDEX_FIRST_INTERNSHIP;"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"        String command \u003d \"     \" + SaveCommand.COMMAND_WORD + \"      \" + firstIndex.getOneBased() + \"       \";"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        Internship editedInternship \u003d addSavedTagToInternship(expectedmodel, firstIndex);"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, firstIndex, editedInternship);"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"        /* Case: save the last internship in the list -\u003e saved */"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"        Model modelBeforeSavingLast \u003d getModel();"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        Index lastInternshipIndex \u003d getLastIndex(modelBeforeSavingLast);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(lastInternshipIndex);"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        /* Case: undo saving the last internship in the list -\u003e last internship restored */"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, modelBeforeSavingLast, expectedResultMessage);"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        /* Case: redo saving the last internship in the list -\u003e last internship saved again */"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        addSavedTagToInternship(modelBeforeSavingLast, lastInternshipIndex);"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, modelBeforeSavingLast, expectedResultMessage);"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        /* Case: save the middle internship in the list -\u003e saved */"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        Index middleInternshipIndex \u003d getMidIndex(getModel());"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(middleInternshipIndex);"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        /* ------------------ Performing save operation while a filtered list is being shown ---------------------- */"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        /* Case: filtered internship list, save index within bounds of internship book and internship list -\u003e save */"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        showInternshipsWithName(KEYWORD_MATCHING_AUDIT);"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"        Index index \u003d INDEX_FIRST_INTERNSHIP;"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredInternshipList().size());"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"                .addTag(getModel().getFilteredInternshipList().get(index.getZeroBased()));"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, index, internshipWithSavedTag);"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"        /* Case: filtered internship list,"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"         * save index within bounds of internship book but out of bounds of internship list -\u003e rejected"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"         */"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        showInternshipsWithName(KEYWORD_MATCHING_AUDIT);"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        int invalidIndex \u003d getModel().getJobbiBot().getInternshipList().size();"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        /* --------------------- Performing save operation while a internship card is selected --------------------- */"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":"        /* Case: save the selected internship"},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"                    -\u003e internship list panel selects the internship before the saved internship */"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        showAllInternships();"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        Index selectedIndex \u003d getSecondLastIndex(expectedModel);"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased());"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"        selectInternship(selectedIndex);"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"        Internship newEditedInternship \u003d addSavedTagToInternship(expectedModel, selectedIndex);"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_SAVED_INTERNSHIP_SUCCESS, newEditedInternship);"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"        /* --------------------------------- Performing invalid save operation ------------------------------------ */"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SAVE_COMMAND_FORMAT);"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SAVE_COMMAND_FORMAT);"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid non alphanumerical index (!) -\u003e rejected */"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" !\";"},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_SAVE_COMMAND_FORMAT);"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"                getModel().getJobbiBot().getInternshipList().size() + 1);"},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"        command \u003d SaveCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(SaveCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_SAVE_COMMAND_FORMAT);"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(SaveCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_SAVE_COMMAND_FORMAT);"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"     * Update the {@code Internship} at the specified {@code index} in {@code model}\u0027s internship book."},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"     * @return the internship with a \"saved\" tag"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"    private Internship addSavedTagToInternship(Model model, Index index) throws CommandException {"},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"        Internship targetInternship \u003d getInternship(model, index);"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"        Internship editedInternship \u003d new SavedInternshipBuilder().addTag(targetInternship);"},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":"            model.updateInternship(targetInternship, editedInternship);"},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"        } catch (InternshipNotFoundException pnfe) {"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"targetInternship is retrieved from model.\");"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"editedInternship is a duplicate in expectedModel.\");"},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"        return editedInternship;"},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"wyinkok"},"content":"     * Saves the internship at {@code toSave} by creating a default {@code SaveCommand} using {@code toSave} and"},{"lineNumber":147,"author":{"gitID":"wyinkok"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":148,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"wyinkok"},"content":"     * @see SaveCommandSystemTest#assertCommandSuccess(String, Index, Internship)"},{"lineNumber":150,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(Index toSave) throws CommandException {"},{"lineNumber":152,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":153,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d addSavedTagToInternship(expectedModel, toSave);"},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_SAVED_INTERNSHIP_SUCCESS, internshipWithSavedTag);"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess("},{"lineNumber":157,"author":{"gitID":"wyinkok"},"content":"                SaveCommand.COMMAND_WORD + \" \" + toSave.getOneBased(), expectedModel, expectedResultMessage);"},{"lineNumber":158,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":163,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":"     * @see SaveCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Index toSave, Internship savedInternship) {"},{"lineNumber":167,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, toSave, savedInternship, null);"},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":170,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":171,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that chat bot panel displays the success message of executing {@code SaveCommand}.\u003cbr\u003e"},{"lineNumber":173,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that the model related components are updated to reflect the internship at index {@code toSave} being"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"     * updated to values specified {@code savedInternship}.\u003cbr\u003e"},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":176,"author":{"gitID":"wyinkok"},"content":"     * @param toSave the index of the current model\u0027s filtered list."},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"     * @see SaveCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Index toSave, Internship savedInternship,"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"            expectedModel.updateInternship("},{"lineNumber":184,"author":{"gitID":"wyinkok"},"content":"                    expectedModel.getFilteredInternshipList().get(toSave.getZeroBased()), savedInternship);"},{"lineNumber":185,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException | InternshipNotFoundException e) {"},{"lineNumber":186,"author":{"gitID":"wyinkok"},"content":"            throw new IllegalArgumentException("},{"lineNumber":187,"author":{"gitID":"wyinkok"},"content":"                    \"editedInternship is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":188,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":189,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":190,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":191,"author":{"gitID":"wyinkok"},"content":"                String.format(SaveCommand.MESSAGE_SAVED_INTERNSHIP_SUCCESS, savedInternship),"},{"lineNumber":192,"author":{"gitID":"wyinkok"},"content":"                    expectedSelectedCardIndex);"},{"lineNumber":193,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":195,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":196,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":197,"author":{"gitID":"wyinkok"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":198,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":199,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":200,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":201,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":203,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":204,"author":{"gitID":"wyinkok"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":205,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":206,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that the chat bot panel displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":207,"author":{"gitID":"wyinkok"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":208,"author":{"gitID":"wyinkok"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":209,"author":{"gitID":"wyinkok"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":210,"author":{"gitID":"wyinkok"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":211,"author":{"gitID":"wyinkok"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":212,"author":{"gitID":"wyinkok"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":213,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":214,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":215,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":216,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":217,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":219,"author":{"gitID":"wyinkok"},"content":"        executeCommand(command);"},{"lineNumber":220,"author":{"gitID":"wyinkok"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":221,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateFilteredInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":222,"author":{"gitID":"wyinkok"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":223,"author":{"gitID":"wyinkok"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":224,"author":{"gitID":"wyinkok"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":225,"author":{"gitID":"wyinkok"},"content":"        } else {"},{"lineNumber":226,"author":{"gitID":"wyinkok"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":227,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":228,"author":{"gitID":"wyinkok"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":229,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":231,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"wyinkok"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":233,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that chat bot panel displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":235,"author":{"gitID":"wyinkok"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":236,"author":{"gitID":"wyinkok"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":237,"author":{"gitID":"wyinkok"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":238,"author":{"gitID":"wyinkok"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":239,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":240,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":241,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":242,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":243,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":244,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":245,"author":{"gitID":"wyinkok"},"content":"        executeCommand(command);"},{"lineNumber":246,"author":{"gitID":"wyinkok"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":247,"author":{"gitID":"wyinkok"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":248,"author":{"gitID":"wyinkok"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":249,"author":{"gitID":"wyinkok"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":250,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":251,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":251}},{"path":"src/test/java/systemtests/ErrorDialogGuiTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postLater;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiManager.FILE_OPS_ERROR_DIALOG_STAGE_TITLE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import guitests.guihandles.AlertDialogHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"public class ErrorDialogGuiTest extends JobbiBotSystemTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final IOException IO_EXCEPTION_STUB \u003d new IOException(\"Stub\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void showErrorDialogs() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        postLater(new DataSavingExceptionEvent(IO_EXCEPTION_STUB));"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        guiRobot.waitForEvent(() -\u003e guiRobot.isWindowShown(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        AlertDialogHandle alertDialog \u003d new AlertDialogHandle(guiRobot.getStage(FILE_OPS_ERROR_DIALOG_STAGE_TITLE));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, alertDialog.getHeaderText());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE + \":\\n\" + IO_EXCEPTION_STUB.toString(),"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                alertDialog.getContentText());"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":33}},{"path":"src/test/java/systemtests/SortCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INTERNSHIPS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN4;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN5;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.getTypicalInternshipForSorting;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.SortCommandParser;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TypicalInternshipsForSorting;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"public class SortCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipForSorting(), new UserPrefs());"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"     * Returns the data with saved tags to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"    protected JobbiBot getInitialData() {"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        return TypicalInternshipsForSorting.getTypicalInternshipForSorting();"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"    /* -------------------------Sorting on an unfiltered list ------------------------------------------------- */"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"    public void sort_unsearched_unfiltered()  {"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        /* Case: Sort with one argument, command with leading spaces and trailing spaces */"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"        String command \u003d \"   \" + SortCommand.COMMAND_WORD + \" \" + \"-salary\" + \"  \";"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setSortedList(model, Arrays.asList(\"-salary\"));"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, model);"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"        /* Case: Sort with mixed case keywords */"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" sAlary\";"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setSortedList(model, Arrays.asList(\"salary\"));"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, model);"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":"        /* Case: Sort with mixed case command word */"},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        command \u003d \"sORT\" + \" -salary\";"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setSortedList(model, Arrays.asList(\"-salary\"));"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, model);"},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        /* Case: Sort, keyword contains substring of valid argument  */"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" salaries\";"},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":"        /* Case: Sort, keyword is substring of valid argument */"},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"        command \u003d SortCommand.COMMAND_WORD + \" sal\";"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"        /* Case: undo previous filter command -\u003e failure */"},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        /* Case: redo previous filter command -\u003e failure */"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":"    /* -------------------------Sorting on a searched list ------------------------------------------------------- */"},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"    public void sort_searched_unfiltered() throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"        /* Initialize a searched list */"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"        initializeSearchedList();"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":"        /* Test Cases same as unsearched and unfiltered */"},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":"        sort_unsearched_unfiltered();"},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":"    /* -------------------------Sorting on a filtered list ------------------------------------------------------- */"},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":"    public void sort_searched_filtered() throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"        /* Initialize a searched and filtered list */"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":"        initializeSearchedList();"},{"lineNumber":101,"author":{"gitID":"niloc94"},"content":"        String command \u003d FilterCommand.COMMAND_WORD + \" \" + \"IndustryA\";"},{"lineNumber":102,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(model, IN1, IN4, IN5);"},{"lineNumber":103,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, model);"},{"lineNumber":104,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":105,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":106,"author":{"gitID":"niloc94"},"content":"        /* Test Cases same as unsearched and unfiltered */"},{"lineNumber":107,"author":{"gitID":"niloc94"},"content":"        sort_unsearched_unfiltered();"},{"lineNumber":108,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":110,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":111,"author":{"gitID":"niloc94"},"content":"    /* --------------------------------------- Helper Methods ----------------------------------------------------- */"},{"lineNumber":112,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":113,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"niloc94"},"content":"     * Helper method to initialize a searched list"},{"lineNumber":115,"author":{"gitID":"niloc94"},"content":"     *"},{"lineNumber":116,"author":{"gitID":"niloc94"},"content":"     * @throws DuplicateInternshipException"},{"lineNumber":117,"author":{"gitID":"niloc94"},"content":"     * @throws InternshipNotFoundException"},{"lineNumber":118,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"niloc94"},"content":"    private void initializeSearchedList() throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":120,"author":{"gitID":"niloc94"},"content":"        String command \u003d FindCommand.COMMAND_WORD + \" \" + \"IndustryA IndustryB\";"},{"lineNumber":121,"author":{"gitID":"niloc94"},"content":"        model.updateInternship(IN1, IN1.addTagsToInternship(\"IndustryA\"));"},{"lineNumber":122,"author":{"gitID":"niloc94"},"content":"        model.updateInternship(IN4, IN4.addTagsToInternship(\"IndustryA\"));"},{"lineNumber":123,"author":{"gitID":"niloc94"},"content":"        model.updateInternship(IN5, IN5.addTagsToInternship(\"IndustryA\"));"},{"lineNumber":124,"author":{"gitID":"niloc94"},"content":"        model.updateInternship(IN2, IN2.addTagsToInternship(\"IndustryB\"));"},{"lineNumber":125,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setSearchedList(model, IN1, IN2, IN4, IN5);"},{"lineNumber":126,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, model);"},{"lineNumber":127,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":128,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":129,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":130,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":131,"author":{"gitID":"niloc94"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":132,"author":{"gitID":"niloc94"},"content":"     * box displays {@code Messages#MESSAGE_INTERNSHIPS_LISTED_OVERVIEW} with the number of internship in the filtered"},{"lineNumber":133,"author":{"gitID":"niloc94"},"content":"     * list, and the model related components equal to {@code expectedModel}."},{"lineNumber":134,"author":{"gitID":"niloc94"},"content":"     * These verifications are done by"},{"lineNumber":135,"author":{"gitID":"niloc94"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":136,"author":{"gitID":"niloc94"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":137,"author":{"gitID":"niloc94"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":138,"author":{"gitID":"niloc94"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":139,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"niloc94"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":141,"author":{"gitID":"niloc94"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":142,"author":{"gitID":"niloc94"},"content":"                MESSAGE_INTERNSHIPS_LISTED_OVERVIEW, expectedModel.getFilteredInternshipList().size());"},{"lineNumber":143,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":144,"author":{"gitID":"niloc94"},"content":"        executeCommand(command);"},{"lineNumber":145,"author":{"gitID":"niloc94"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":146,"author":{"gitID":"niloc94"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":147,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":149,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":150,"author":{"gitID":"niloc94"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":151,"author":{"gitID":"niloc94"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":152,"author":{"gitID":"niloc94"},"content":"     * These verifications are done by"},{"lineNumber":153,"author":{"gitID":"niloc94"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":154,"author":{"gitID":"niloc94"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":155,"author":{"gitID":"niloc94"},"content":"     * error style."},{"lineNumber":156,"author":{"gitID":"niloc94"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":157,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":158,"author":{"gitID":"niloc94"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":159,"author":{"gitID":"niloc94"},"content":"        executeCommand(command);"},{"lineNumber":160,"author":{"gitID":"niloc94"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, model);"},{"lineNumber":161,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":162,"author":{"gitID":"niloc94"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":163,"author":{"gitID":"niloc94"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":164,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":165,"author":{"gitID":"niloc94"},"content":"}"},{"lineNumber":166,"author":{"gitID":"niloc94"},"content":""}],"authorContributionMap":{"niloc94":139,"-":24,"TanCiKang":3}},{"path":"src/test/java/seedu/address/ui/GuiUnitTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.NodeNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.UiPartRule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * A GUI unit test class for JobbiBot."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class GuiUnitTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final UiPartRule uiPartRule \u003d new UiPartRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    protected final GuiRobot guiRobot \u003d new GuiRobot();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void tearDown() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Retrieves the {@code query} node owned by the {@code rootNode}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @param query name of the CSS selector of the node to retrieve."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws NodeNotFoundException if no such node exists."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    protected \u003cT extends Node\u003e T getChildNode(Node rootNode, String query) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        Optional\u003cT\u003e node \u003d guiRobot.from(rootNode).lookup(query).tryQuery();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        return node.orElseThrow(NodeNotFoundException::new);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":37}},{"path":"src/test/java/seedu/address/ui/InternshipListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternships;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysInternship;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardEquals;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipCardHandle;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipListPanelHandle;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"public class InternshipListPanelTest extends GuiUnitTest {"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    private static final ObservableList\u003cInternship\u003e TYPICAL_INTERNSHIPS \u003d"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"            FXCollections.observableList(getTypicalInternships());"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"    private static final JumpToListRequestEvent JUMP_TO_SECOND_EVENT \u003d"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"            new JumpToListRequestEvent(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    private InternshipListPanelHandle internshipListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        InternshipListPanel internshipListPanel \u003d new InternshipListPanel(TYPICAL_INTERNSHIPS);"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(internshipListPanel);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        internshipListPanelHandle \u003d new InternshipListPanelHandle(getChildNode(internshipListPanel.getRoot(),"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"                InternshipListPanelHandle.INTERNSHIP_LIST_VIEW_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"        for (int i \u003d 0; i \u003c TYPICAL_INTERNSHIPS.size(); i++) {"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"            internshipListPanelHandle.navigateToCard(TYPICAL_INTERNSHIPS.get(i));"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"            Internship expectedInternship \u003d TYPICAL_INTERNSHIPS.get(i);"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"            InternshipCardHandle actualCard \u003d internshipListPanelHandle.getInternshipCardHandle(i);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"            assertCardDisplaysInternship(expectedInternship, actualCard);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            assertEquals(Integer.toString(i + 1) + \". \", actualCard.getId());"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void handleJumpToListRequestEvent() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        postNow(JUMP_TO_SECOND_EVENT);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        InternshipCardHandle expectedCard \u003d internshipListPanelHandle"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"            .getInternshipCardHandle(INDEX_SECOND_INTERNSHIP.getZeroBased());"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        InternshipCardHandle selectedCard \u003d internshipListPanelHandle.getHandleToSelectedCard();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCardEquals(expectedCard, selectedCard);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":11,"-":36,"TanCiKang":13}},{"path":"src/test/java/seedu/address/ui/InternshipCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysInternship;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipCardHandle;"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.InternshipBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class InternshipCardTest extends GuiUnitTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        // no tags"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"        Internship internshipWithNoTags \u003d new InternshipBuilder().withTags(new String[0]).build();"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"        InternshipCard internshipCard \u003d new InternshipCard(internshipWithNoTags, 1);"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(internshipCard);"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"        assertCardDisplay(internshipCard, internshipWithNoTags, 1);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"        // with tags"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        Internship internshipWithTags \u003d new InternshipBuilder().build();"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"        internshipCard \u003d new InternshipCard(internshipWithTags, 2);"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(internshipCard);"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"        assertCardDisplay(internshipCard, internshipWithTags, 2);"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"        Internship internship \u003d new InternshipBuilder().build();"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        InternshipCard personCard \u003d new InternshipCard(internship, 0);"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        // same internship, same index -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"        InternshipCard copy \u003d new InternshipCard(internship, 0);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(copy));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertTrue(personCard.equals(personCard));"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(null));"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(personCard.equals(0));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"        // different internship, same index -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"        Internship differentInternship \u003d new InternshipBuilder().withName(\"differentName\").build();"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(personCard.equals(new InternshipCard(differentInternship, 0)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"        // same internship, different index -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(personCard.equals(new InternshipCard(internship, 1)));"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that {@code internshipCard} displays the details of {@code expectedInternship} correctly and matches"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     * {@code expectedId}."},{"lineNumber":60,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"    private void assertCardDisplay(InternshipCard personCard, Internship expectedInternship, int expectedId) {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        InternshipCardHandle internshipCardHandle \u003d new InternshipCardHandle(personCard.getRoot());"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // verify id is displayed correctly"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        assertEquals(Integer.toString(expectedId) + \". \", internshipCardHandle.getId());"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"        // verify internship details are displayed correctly"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"        assertCardDisplaysInternship(expectedInternship, internshipCardHandle);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":6,"-":44,"TanCiKang":22}},{"path":"src/test/java/seedu/address/ui/ChatBotCardTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.ChatBotCardHandle;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.testutil.GuiTestAssert;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"public class ChatBotCardTest extends GuiUnitTest {"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"    private static final String JOBBI_WELCOME_MESSAGE \u003d \"Hello there, I am Jobbi! \""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"            + \"I am here to help you find your ideal internship today. Type \u0027start\u0027 to begin your search.\";"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    public void display() {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"        // non undoable command (user input)"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"        String listCommand \u003d \"list\";"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"        ChatBotCard chatBotCard \u003d new ChatBotCard(\"list\");"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotCard);"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplay(chatBotCard, listCommand);"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        // undoable command (user input)"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"        String saveCommand \u003d \"save 1\";"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        ChatBotCard chatBotCardForUndoableCommand \u003d new ChatBotCard(\"save 1\");"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotCardForUndoableCommand);"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplay(chatBotCardForUndoableCommand, saveCommand);"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        // select command (user input)"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        String selectCommand \u003d \"select 1\";"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        ChatBotCard chatBotCardForSelectCommand \u003d new ChatBotCard(\"select 1\");"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotCardForSelectCommand);"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplay(chatBotCardForSelectCommand, selectCommand);"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        // command with typo error (user input)"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        String errorCommand \u003d \"sdekhgfajf 1\";"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        ChatBotCard chatBotCardForErrorCommand \u003d new ChatBotCard(\"sdekhgfajf 1\");"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotCardForErrorCommand);"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplay(chatBotCardForErrorCommand, errorCommand);"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        // checks if Jobbi\u0027s Welcome Message is displayed on the ChatBotCard"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        ChatBotCard chatBotCardForWelcomeMessage \u003d new ChatBotCard(JOBBI_WELCOME_MESSAGE);"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotCardForWelcomeMessage);"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplay(chatBotCardForWelcomeMessage, JOBBI_WELCOME_MESSAGE);"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"     * Asserts that {@code personCard} displays the details of {@code expectedInternship} correctly and matches"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"     * {@code expectedId}."},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    private void assertCardDisplay(ChatBotCard chatBotCard, String expectedUserInput) {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        ChatBotCardHandle chatBotCardHandle \u003d new ChatBotCardHandle(chatBotCard.getRoot());"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        // verify internship details are displayed correctly"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        GuiTestAssert.assertCardDisplaysMessage(expectedUserInput, chatBotCardHandle);"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":58}},{"path":"src/test/java/systemtests/UnsaveCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package systemtests;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static junit.framework.TestCase.assertTrue;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.UnsaveCommand.MESSAGE_UNSAVED_INTERNSHIP_SUCCESS;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getInternship;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getLastIndex;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getMidIndex;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TestUtil.getSecondLastIndex;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternshipsWithSavedTag.KEYWORD_MATCHING_SAFETY;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UnsaveCommand;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.TypicalInternshipsWithSavedTag;"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.UnsavedInternshipBuilder;"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"public class UnsaveCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    private static final String MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT \u003d"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, UnsaveCommand.MESSAGE_USAGE);"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"     * Returns the data with saved tags to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    protected JobbiBot getInitialData() {"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        return TypicalInternshipsWithSavedTag.getTypicalInternshipBookWithSavedTag();"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    public void unsave() throws CommandException {"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"        /* ----------------- Performing save operation while an unfiltered list is being shown -------------------- */"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        /* Case: remove the saved first internship in the list,"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"            command with leading spaces and trailing spaces -\u003e saved */"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        Model model \u003d getModel();"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        Index firstindex \u003d INDEX_FIRST_INTERNSHIP;"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        String command \u003d \"     \" + UnsaveCommand.COMMAND_WORD + \"      \" + firstindex.getOneBased() + \"       \";"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        Internship editedInternship \u003d removeSavedTagToInternship(model, firstindex);"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, firstindex, editedInternship);"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        /* Case: save the last internship in the list -\u003e saved */"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        Model modelBeforeSavingLast \u003d getModel();"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"        Index lastInternshipIndex \u003d getLastIndex(modelBeforeSavingLast);"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(lastInternshipIndex);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        /* Case: undo saving the last internship in the list -\u003e last internship restored */"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, modelBeforeSavingLast, expectedResultMessage);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        /* Case: redo saving the last internship in the list -\u003e last internship saved again */"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"        removeSavedTagToInternship(modelBeforeSavingLast, lastInternshipIndex);"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, modelBeforeSavingLast, expectedResultMessage);"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        /* Case: unsave the middle internship in the list -\u003e unsaved */"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"        Index middleInternshipIndex \u003d getMidIndex(getModel());"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(middleInternshipIndex);"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        /* ------------------ Performing save operation while a filtered list is being shown ---------------------- */"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        /* Case: filtered internship list, unsave index within bounds of internship book and internship list"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"         * -\u003e unsave */"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"        showInternshipsWithName(KEYWORD_MATCHING_SAFETY);"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"        Index index \u003d INDEX_FIRST_INTERNSHIP;"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"        assertTrue(index.getZeroBased() \u003c getModel().getFilteredInternshipList().size());"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" \" + index.getOneBased();"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        Internship personWithoutSavedTag \u003d new UnsavedInternshipBuilder()"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":"                                                .removeTag(getModel().getFilteredInternshipList()"},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"                                                        .get(index.getZeroBased()));"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, index, personWithoutSavedTag);"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        /* Case: filtered internship list,"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"         * unsave index within bounds of internship book but out of bounds of internship list -\u003e rejected"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"         */"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"        showInternshipsWithName(KEYWORD_MATCHING_SAFETY);"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"        int invalidIndex \u003d getModel().getJobbiBot().getInternshipList().size();"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" \" + invalidIndex;"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"        /* --------------------- Performing unsave operation while a internship card is selected ------------------- */"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"        /* Case: unsave the selected internship"},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"                      -\u003e internship list panel selects the internship before the unsaved internship */"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"        showAllInternships();"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"        Index selectedIndex \u003d getSecondLastIndex(expectedModel);"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased());"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"        selectInternship(selectedIndex);"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"        Internship nextEditedInternship \u003d removeSavedTagToInternship(expectedModel, selectedIndex);"},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"        expectedResultMessage \u003d String.format(MESSAGE_UNSAVED_INTERNSHIP_SUCCESS, nextEditedInternship);"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"        /* --------------------------------- Performing invalid unsave operation ---------------------------------- */"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (0) -\u003e rejected */"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" 0\";"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT);"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (-1) -\u003e rejected */"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" -1\";"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT);"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid nonalphanumerical index (!) -\u003e rejected */"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" !\";"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT);"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid index (size + 1) -\u003e rejected */"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased("},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"                getModel().getJobbiBot().getInternshipList().size() + 1);"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"        command \u003d UnsaveCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(command, MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid arguments (alphabets) -\u003e rejected */"},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(UnsaveCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT);"},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"        /* Case: invalid arguments (extra argument) -\u003e rejected */"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(UnsaveCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_UNSAVE_COMMAND_FORMAT);"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"     * Removes the \"saved\" tag from the {@code Internship} at the specified {@code index}"},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"     * in {@code model}\u0027s internship book."},{"lineNumber":144,"author":{"gitID":"wyinkok"},"content":"     * @return the internship without a \"saved\" tag"},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"wyinkok"},"content":"    private Internship removeSavedTagToInternship(Model model, Index index) throws CommandException {"},{"lineNumber":147,"author":{"gitID":"wyinkok"},"content":"        Internship targetInternship \u003d getInternship(model, index);"},{"lineNumber":148,"author":{"gitID":"wyinkok"},"content":"        Internship unsavedInternship \u003d new UnsavedInternshipBuilder().removeTag(targetInternship);"},{"lineNumber":149,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":150,"author":{"gitID":"wyinkok"},"content":"            model.updateInternship(targetInternship, unsavedInternship);"},{"lineNumber":151,"author":{"gitID":"wyinkok"},"content":"        } catch (InternshipNotFoundException pnfe) {"},{"lineNumber":152,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"targetInternship is retrieved from model.\");"},{"lineNumber":153,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"unsavedInternship is a duplicate in expectedModel.\");"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":"        return unsavedInternship;"},{"lineNumber":157,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":159,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":"     * Removes the saved internship from Saved Collection at {@code toUnsave} by creating"},{"lineNumber":161,"author":{"gitID":"wyinkok"},"content":"     * a default {@code UnsaveCommand} using {@code toUnsave} and"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."},{"lineNumber":163,"author":{"gitID":"wyinkok"},"content":"     * @see UnsaveCommandSystemTest#assertCommandSuccess(String, Index, Internship)"},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(Index toUnsave) throws CommandException {"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":167,"author":{"gitID":"wyinkok"},"content":"        Internship unsavedInternship \u003d removeSavedTagToInternship(expectedModel, toUnsave);"},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"        String expectedResultMessage \u003d String.format(MESSAGE_UNSAVED_INTERNSHIP_SUCCESS, unsavedInternship);"},{"lineNumber":169,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":170,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess("},{"lineNumber":171,"author":{"gitID":"wyinkok"},"content":"                UnsaveCommand.COMMAND_WORD + \" \" + toUnsave.getOneBased(), expectedModel,"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"                expectedResultMessage);"},{"lineNumber":173,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":176,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"     * @see UnsaveCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Index toUnsave, Internship editedInternship) {"},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, toUnsave, editedInternship, null);"},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":184,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":185,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":186,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":187,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"},{"lineNumber":188,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that chat bot panel displays the success message of executing {@code UnsaveCommand}.\u003cbr\u003e"},{"lineNumber":189,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that the model related components are updated to reflect the internship at index {@code toUnsave}"},{"lineNumber":190,"author":{"gitID":"wyinkok"},"content":"     * being updated to values specified {@code unsavedInternship}.\u003cbr\u003e"},{"lineNumber":191,"author":{"gitID":"wyinkok"},"content":"     * @param toUnsave the index of the current model\u0027s filtered list."},{"lineNumber":192,"author":{"gitID":"wyinkok"},"content":"     * @see UnsaveCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"},{"lineNumber":193,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":194,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Index toUnsave, Internship unsavedInternship,"},{"lineNumber":195,"author":{"gitID":"wyinkok"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":196,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":197,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":198,"author":{"gitID":"wyinkok"},"content":"            expectedModel.updateInternship("},{"lineNumber":199,"author":{"gitID":"wyinkok"},"content":"                    expectedModel.getFilteredInternshipList().get(toUnsave.getZeroBased()), unsavedInternship);"},{"lineNumber":200,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException | InternshipNotFoundException e) {"},{"lineNumber":201,"author":{"gitID":"wyinkok"},"content":"            throw new IllegalArgumentException("},{"lineNumber":202,"author":{"gitID":"wyinkok"},"content":"                    \"unsavedInternship is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"},{"lineNumber":203,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":205,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel,"},{"lineNumber":206,"author":{"gitID":"wyinkok"},"content":"                String.format(UnsaveCommand.MESSAGE_UNSAVED_INTERNSHIP_SUCCESS, unsavedInternship),"},{"lineNumber":207,"author":{"gitID":"wyinkok"},"content":"                    expectedSelectedCardIndex);"},{"lineNumber":208,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":210,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"wyinkok"},"content":"     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"},{"lineNumber":212,"author":{"gitID":"wyinkok"},"content":"     * browser url and selected card remain unchanged."},{"lineNumber":213,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"},{"lineNumber":215,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"},{"lineNumber":216,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"wyinkok"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":220,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"},{"lineNumber":221,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that the chat bot panel displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":222,"author":{"gitID":"wyinkok"},"content":"     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"},{"lineNumber":223,"author":{"gitID":"wyinkok"},"content":"     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"},{"lineNumber":224,"author":{"gitID":"wyinkok"},"content":"     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"},{"lineNumber":225,"author":{"gitID":"wyinkok"},"content":"     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"},{"lineNumber":226,"author":{"gitID":"wyinkok"},"content":"     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"},{"lineNumber":227,"author":{"gitID":"wyinkok"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":228,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":229,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":230,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertSelectedCardChanged(Index)"},{"lineNumber":231,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":232,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"},{"lineNumber":233,"author":{"gitID":"wyinkok"},"content":"                                      Index expectedSelectedCardIndex) {"},{"lineNumber":234,"author":{"gitID":"wyinkok"},"content":"        executeCommand(command);"},{"lineNumber":235,"author":{"gitID":"wyinkok"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":236,"author":{"gitID":"wyinkok"},"content":"        if (expectedSelectedCardIndex !\u003d null) {"},{"lineNumber":237,"author":{"gitID":"wyinkok"},"content":"            assertSelectedCardChanged(expectedSelectedCardIndex);"},{"lineNumber":238,"author":{"gitID":"wyinkok"},"content":"        } else {"},{"lineNumber":239,"author":{"gitID":"wyinkok"},"content":"            assertSelectedCardUnchanged();"},{"lineNumber":240,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":241,"author":{"gitID":"wyinkok"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":242,"author":{"gitID":"wyinkok"},"content":"        assertStatusBarUnchangedExceptSyncStatus();"},{"lineNumber":243,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":245,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"wyinkok"},"content":"     * Executes {@code command} and in addition,\u003cbr\u003e"},{"lineNumber":247,"author":{"gitID":"wyinkok"},"content":"     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"},{"lineNumber":248,"author":{"gitID":"wyinkok"},"content":"     * 2. Asserts that chat bot panel displays {@code expectedResultMessage}.\u003cbr\u003e"},{"lineNumber":249,"author":{"gitID":"wyinkok"},"content":"     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"},{"lineNumber":250,"author":{"gitID":"wyinkok"},"content":"     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"},{"lineNumber":251,"author":{"gitID":"wyinkok"},"content":"     * 5. Asserts that the command box has the error style.\u003cbr\u003e"},{"lineNumber":252,"author":{"gitID":"wyinkok"},"content":"     * Verifications 1 to 3 are performed by"},{"lineNumber":253,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":254,"author":{"gitID":"wyinkok"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":255,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":256,"author":{"gitID":"wyinkok"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":257,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":258,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":259,"author":{"gitID":"wyinkok"},"content":"        executeCommand(command);"},{"lineNumber":260,"author":{"gitID":"wyinkok"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":261,"author":{"gitID":"wyinkok"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":262,"author":{"gitID":"wyinkok"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":263,"author":{"gitID":"wyinkok"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":264,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":265}},{"path":"src/test/java/systemtests/JobbiBotSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.net.MalformedURLException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.After;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import org.junit.ClassRule;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.ChatBotListPanelHandle;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipListPanelHandle;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainMenuHandle;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import guitests.guihandles.MainWindowHandle;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.TestApp;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.TypicalInternships;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"import seedu.address.ui.BrowserPanel;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"import seedu.address.ui.CommandBox;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":" * A system test class for JobbiBot, which provides access to handles of GUI components and helper methods"},{"lineNumber":46,"author":{"gitID":"-"},"content":" * for test verification."},{"lineNumber":47,"author":{"gitID":"-"},"content":" */"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"public abstract class JobbiBotSystemTest {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @ClassRule"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public static ClockRule clockRule \u003d new ClockRule();"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    private MainWindowHandle mainWindowHandle;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private TestApp testApp;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private SystemTestSetupHelper setupHelper;"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public static void setupBeforeClass() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        SystemTestSetupHelper.initialize();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setupHelper \u003d new SystemTestSetupHelper();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        testApp \u003d setupHelper.setupApplication(this::getInitialData, getDataFileLocation());"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        assertApplicationStartingStateIsCorrect();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @After"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void tearDown() throws Exception {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setupHelper.tearDownStage();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        EventsCenter.clearSubscribers();"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Returns the data to be loaded into the file in {@link #getDataFileLocation()}."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"    protected JobbiBot getInitialData() {"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        return TypicalInternships.getTypicalInternshipBook();"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"-"},"content":"     * Returns the directory of the data file."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    protected String getDataFileLocation() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        return TestApp.SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    public MainWindowHandle getMainWindowHandle() {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        return mainWindowHandle;"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getCommandBox();"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"    public InternshipListPanelHandle getInternshipListPanel() {"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"        return mainWindowHandle.getInternshipListPanel();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"    public ChatBotListPanelHandle getChatBotListPanel() {"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"        return mainWindowHandle.getChatBotListPanel();"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getMainMenu();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getBrowserPanel();"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return mainWindowHandle.getStatusBarFooter();"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * Executes {@code command} in the application\u0027s {@code CommandBox}."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     * Method returns after UI components have been updated."},{"lineNumber":127,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"-"},"content":"    protected void executeCommand(String command) {"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        rememberStates();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        // after each command is predictable and also different from the previous command."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        clockRule.setInjectedClockToCurrentTime();"},{"lineNumber":133,"author":{"gitID":"-"},"content":""},{"lineNumber":134,"author":{"gitID":"-"},"content":"        mainWindowHandle.getCommandBox().run(command);"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(getBrowserPanel());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"     * Displays all internships in the internship book."},{"lineNumber":141,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"    protected void showAllInternships() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        executeCommand(ListCommand.COMMAND_WORD);"},{"lineNumber":144,"author":{"gitID":"wyinkok"},"content":"        assertEquals(getModel().getJobbiBot().getInternshipList().size(),"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"                getModel().getFilteredInternshipList().size());"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":"     * Displays all internships with any parts of their names matching {@code keyword} (case-insensitive)."},{"lineNumber":150,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"    protected void showInternshipsWithName(String keyword) {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        executeCommand(FindCommand.COMMAND_WORD + \" \" + keyword);"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(getModel().getFilteredInternshipList().size()"},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"                \u003c getModel().getJobbiBot().getInternshipList().size());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"     * Selects the internship at {@code index} of the displayed list."},{"lineNumber":159,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"    protected void selectInternship(Index index) {"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"        assertEquals(index.getZeroBased(), getInternshipListPanel().getSelectedCardIndex());"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":166,"author":{"gitID":"-"},"content":"     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":"     * {@code expectedResultMessage}, the model and storage contains the same internship objects as"},{"lineNumber":168,"author":{"gitID":"TanCiKang"},"content":"     * {@code expectedModel} and the internship list panel displays the internships in the model correctly."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"},{"lineNumber":171,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        assertEquals(expectedCommandInput, getCommandBox().getInput());"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, getModel());"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"        assertEquals(expectedModel.getJobbiBot(), testApp.readStorageInternshipBook());"},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"        assertListMatching(getInternshipListPanel(), expectedModel.getFilteredInternshipList());"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":177,"author":{"gitID":"-"},"content":""},{"lineNumber":178,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"     * Calls {@code BrowserPanelHandle}, {@code InternshipListPanelHandle} and {@code StatusBarFooterHandle} to remember"},{"lineNumber":180,"author":{"gitID":"-"},"content":"     * their current state."},{"lineNumber":181,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    private void rememberStates() {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        getBrowserPanel().rememberUrl();"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSaveLocation();"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        statusBarFooterHandle.rememberSyncStatus();"},{"lineNumber":187,"author":{"gitID":"wyinkok"},"content":"        getInternshipListPanel().rememberSelectedInternshipCard();"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":191,"author":{"gitID":"-"},"content":"     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":"     * of the previously selected internship."},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardDeselected() {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":197,"author":{"gitID":"wyinkok"},"content":"        assertFalse(getInternshipListPanel().isAnyCardSelected());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":201,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that the browser\u0027s url is changed to display the details of the internship in the internship list panel"},{"lineNumber":202,"author":{"gitID":"TanCiKang"},"content":"     * at {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":204,"author":{"gitID":"TanCiKang"},"content":"     * @see InternshipListPanelHandle#isSelectedInternshipCardChanged()"},{"lineNumber":205,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":206,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"},{"lineNumber":207,"author":{"gitID":"wyinkok"},"content":"        String selectedCardUrl \u003d getInternshipListPanel().getHandleToSelectedCard().getUrl();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        URL expectedUrl;"},{"lineNumber":209,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":210,"author":{"gitID":"TanCiKang"},"content":"            expectedUrl \u003d"},{"lineNumber":211,"author":{"gitID":"TanCiKang"},"content":"                    new URL(BrowserPanel.SEARCH_PAGE_URL + selectedCardUrl);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        } catch (MalformedURLException mue) {"},{"lineNumber":213,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"URL expected to be valid.\");"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":215,"author":{"gitID":"-"},"content":"        assertEquals(expectedUrl, getBrowserPanel().getLoadedUrl());"},{"lineNumber":216,"author":{"gitID":"-"},"content":""},{"lineNumber":217,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedSelectedCardIndex.getZeroBased(),"},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":"                getInternshipListPanel().getSelectedCardIndex());"},{"lineNumber":219,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":220,"author":{"gitID":"-"},"content":""},{"lineNumber":221,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":222,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that the browser\u0027s url and the selected card in the internship list panel remain unchanged."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     * @see BrowserPanelHandle#isUrlChanged()"},{"lineNumber":224,"author":{"gitID":"TanCiKang"},"content":"     * @see InternshipListPanelHandle#isSelectedInternshipCardChanged()"},{"lineNumber":225,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    protected void assertSelectedCardUnchanged() {"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        assertFalse(getBrowserPanel().isUrlChanged());"},{"lineNumber":228,"author":{"gitID":"wyinkok"},"content":"        assertFalse(getInternshipListPanel().isSelectedInternshipCardChanged());"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":230,"author":{"gitID":"-"},"content":""},{"lineNumber":231,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":232,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the default style."},{"lineNumber":233,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":234,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsDefaultStyle() {"},{"lineNumber":235,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":237,"author":{"gitID":"-"},"content":""},{"lineNumber":238,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":239,"author":{"gitID":"-"},"content":"     * Asserts that the command box\u0027s shows the error style."},{"lineNumber":240,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":241,"author":{"gitID":"-"},"content":"    protected void assertCommandBoxShowsErrorStyle() {"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":""},{"lineNumber":245,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":246,"author":{"gitID":"-"},"content":"     * Asserts that the entire status bar remains the same."},{"lineNumber":247,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":248,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchanged() {"},{"lineNumber":249,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":250,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":251,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSyncStatusChanged());"},{"lineNumber":252,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":253,"author":{"gitID":"-"},"content":""},{"lineNumber":254,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":255,"author":{"gitID":"-"},"content":"     * Asserts that only the sync status in the status bar was changed to the timing of"},{"lineNumber":256,"author":{"gitID":"-"},"content":"     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."},{"lineNumber":257,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":258,"author":{"gitID":"-"},"content":"    protected void assertStatusBarUnchangedExceptSyncStatus() {"},{"lineNumber":259,"author":{"gitID":"-"},"content":"        StatusBarFooterHandle handle \u003d getStatusBarFooter();"},{"lineNumber":260,"author":{"gitID":"-"},"content":"        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"},{"lineNumber":261,"author":{"gitID":"-"},"content":"        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"},{"lineNumber":262,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, handle.getSyncStatus());"},{"lineNumber":263,"author":{"gitID":"-"},"content":"        assertFalse(handle.isSaveLocationChanged());"},{"lineNumber":264,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":265,"author":{"gitID":"-"},"content":""},{"lineNumber":266,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":267,"author":{"gitID":"-"},"content":"     * Asserts that the starting state of the application is correct."},{"lineNumber":268,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":269,"author":{"gitID":"-"},"content":"    private void assertApplicationStartingStateIsCorrect() {"},{"lineNumber":270,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":271,"author":{"gitID":"-"},"content":"            assertEquals(\"\", getCommandBox().getInput());"},{"lineNumber":272,"author":{"gitID":"wyinkok"},"content":"            assertListMatching(getInternshipListPanel(), getModel().getFilteredInternshipList());"},{"lineNumber":273,"author":{"gitID":"TanCiKang"},"content":"            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE),"},{"lineNumber":274,"author":{"gitID":"TanCiKang"},"content":"                    getBrowserPanel().getLoadedUrl());"},{"lineNumber":275,"author":{"gitID":"-"},"content":"            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"},{"lineNumber":276,"author":{"gitID":"-"},"content":"            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"},{"lineNumber":277,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":278,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Starting state is wrong.\", e);"},{"lineNumber":279,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":280,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":281,"author":{"gitID":"-"},"content":""},{"lineNumber":282,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":283,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the current model."},{"lineNumber":284,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":285,"author":{"gitID":"-"},"content":"    protected Model getModel() {"},{"lineNumber":286,"author":{"gitID":"-"},"content":"        return testApp.getModel();"},{"lineNumber":287,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":288,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":26,"-":241,"TanCiKang":21}},{"path":"src/test/java/seedu/address/ui/testutil/GuiTestAssert.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.ChatBotCardHandle;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipCardHandle;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.InternshipListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * A set of assertion methods useful for writing GUI tests."},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class GuiTestAssert {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    public static void assertCardEquals(InternshipCardHandle expectedCard, InternshipCardHandle actualCard) {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getId(), actualCard.getId());"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedCard.getIndustry(), actualCard.getIndustry());"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedCard.getSalary(), actualCard.getSalary());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getName(), actualCard.getName());"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedCard.getRole(), actualCard.getRole());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertEquals(expectedCard.getTags(), actualCard.getTags());"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedInternship}."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    public static void assertCardDisplaysInternship(Internship expectedInternship, InternshipCardHandle actualCard) {"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship.getName().fullName, actualCard.getName());"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship.getRole().value, actualCard.getRole());"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship.getSalary().value, actualCard.getSalary());"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship.getIndustry().value, actualCard.getIndustry());"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                actualCard.getTags());"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that the list in {@code internshipListPanelHandle} displays the details of {@code internships} correctly"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"     * and in the correct order."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"    public static void assertListMatching(InternshipListPanelHandle internshipListPanelHandle,"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"                                          Internship... internships) {"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"        for (int i \u003d 0; i \u003c internships.length; i++) {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"            assertCardDisplaysInternship(internships[i], internshipListPanelHandle.getInternshipCardHandle(i));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that the list in {@code internshipListPanelHandle} displays the details of {@code internships} correctly"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"     * and in the correct order."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    public static void assertListMatching(InternshipListPanelHandle internshipListPanelHandle,"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"                                          List\u003cInternship\u003e internships) {"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"        assertListMatching(internshipListPanelHandle, internships.toArray(new Internship[0]));"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"     * Asserts the size of the list in {@code internshipListPanelHandle} equals to {@code size}."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"    public static void assertListSize(InternshipListPanelHandle internshipListPanelHandle, int size) {"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        int numberOfPeople \u003d internshipListPanelHandle.getListSize();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(size, numberOfPeople);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"     * Asserts that {@code actualCard} displays the details of {@code expectedInternship}."},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    public static void assertCardDisplaysMessage(String expectedMessage, ChatBotCardHandle actualCard) {"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"        assertEquals(expectedMessage, actualCard.getMessages());"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":14,"-":40,"TanCiKang":23}},{"path":"src/test/java/seedu/address/ui/CommandBoxTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import guitests.guihandles.CommandBoxHandle;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCode;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"public class CommandBoxTest extends GuiUnitTest {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_SUCCEEDS \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String COMMAND_THAT_FAILS \u003d \"invalid command\";"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e defaultStyleOfCommandBox;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ArrayList\u003cString\u003e errorStyleOfCommandBox;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private CommandBoxHandle commandBoxHandle;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        commandBoxHandle \u003d new CommandBoxHandle(getChildNode(commandBox.getRoot(),"},{"lineNumber":35,"author":{"gitID":"-"},"content":"                CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(commandBox);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        defaultStyleOfCommandBox \u003d new ArrayList\u003c\u003e(commandBoxHandle.getStyleClass());"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox \u003d new ArrayList\u003c\u003e(defaultStyleOfCommandBox);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        errorStyleOfCommandBox.add(CommandBox.ERROR_STYLE_CLASS);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithSuccessfulCommand() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void commandBox_startingWithFailedCommand() {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // verify that style is changed correctly even after multiple consecutive failed commands"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertBehaviorForSuccessfulCommand();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertBehaviorForFailedCommand();"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void commandBox_handleKeyPress() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.ESCAPE);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.A);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithUp() {"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // two commands (latest command is failure)"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, COMMAND_THAT_FAILS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, thirdCommand);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void handleKeyPress_startingWithDown() {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        // empty history"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, \"\");"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // one command"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_SUCCEEDS);"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // two commands"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, COMMAND_THAT_FAILS);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // insert command in the middle of retrieving previous commands"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        guiRobot.push(KeyCode.UP);"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        String thirdCommand \u003d \"list\";"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(thirdCommand);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.DOWN, \"\");"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assertInputHistory(KeyCode.UP, thirdCommand);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":129,"author":{"gitID":"-"},"content":"     * Runs a command that fails, then verifies that \u003cbr\u003e"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     *      - the text remains \u003cbr\u003e"},{"lineNumber":131,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code errorStyleOfCommandBox}."},{"lineNumber":132,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    private void assertBehaviorForFailedCommand() {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_FAILS);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(COMMAND_THAT_FAILS, commandBoxHandle.getInput());"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assertEquals(errorStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"-"},"content":"     * Runs a command that succeeds, then verifies that \u003cbr\u003e"},{"lineNumber":141,"author":{"gitID":"-"},"content":"     *      - the text is cleared \u003cbr\u003e"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     *      - the command box\u0027s style is the same as {@code defaultStyleOfCommandBox}."},{"lineNumber":143,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    private void assertBehaviorForSuccessfulCommand() {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        commandBoxHandle.run(COMMAND_THAT_SUCCEEDS);"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertEquals(\"\", commandBoxHandle.getInput());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(defaultStyleOfCommandBox, commandBoxHandle.getStyleClass());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Pushes {@code keycode} and checks that the input in the {@code commandBox} equals to {@code expectedCommand}."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    private void assertInputHistory(KeyCode keycode, String expectedCommand) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        guiRobot.push(keycode);"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":"        assertEquals(expectedCommand, commandBoxHandle.getInput()); }"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":155}},{"path":"src/test/java/seedu/address/ui/testutil/UiPartRule.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.concurrent.TimeoutException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.testfx.api.FxToolkit;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.Parent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.Scene;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiPart;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Provides an isolated stage to test an individual {@code UiPart}."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class UiPartRule extends StageRule {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    private static final String[] CSS_FILES \u003d {\"view/ChatBotTheme.css\", \"view/Extensions.css\"};"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void setUiPart(final UiPart\u003c? extends Parent\u003e uiPart) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            FxToolkit.setupScene(() -\u003e {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"                Scene scene \u003d new Scene(uiPart.getRoot());"},{"lineNumber":21,"author":{"gitID":"-"},"content":"                scene.getStylesheets().setAll(CSS_FILES);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"                return scene;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            });"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            FxToolkit.showStage();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        } catch (TimeoutException te) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Timeout should not happen.\", te);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":28}},{"path":"src/test/java/seedu/address/ui/BrowserPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import guitests.guihandles.BrowserPanelHandle;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.InternshipPanelSelectionChangedEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class BrowserPanelTest extends GuiUnitTest {"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    private InternshipPanelSelectionChangedEvent selectionChangedEventStub;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private BrowserPanelHandle browserPanelHandle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        selectionChangedEventStub \u003d new InternshipPanelSelectionChangedEvent(new InternshipCard(ENGINEERING1, 0));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(browserPanel);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void display() throws Exception {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // default web page"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"        // associated web page of a internship"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        postNow(selectionChangedEventStub);"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        URL expectedInternshipUrl \u003d new URL(BrowserPanel.SEARCH_PAGE_URL"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                + ENGINEERING1.getUrl());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"        waitUntilBrowserLoaded(browserPanelHandle);"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternshipUrl, browserPanelHandle.getLoadedUrl());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":44,"TanCiKang":3}},{"path":"src/test/java/seedu/address/TestApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.function.Supplier;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.stage.Screen;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.storage.XmlSerializableJobbiBot;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import systemtests.ModelHelper;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * This class is meant to override some properties of MainApp so that it will be suited for"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * testing"},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class TestApp extends MainApp {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String SAVE_LOCATION_FOR_TESTING \u003d TestUtil.getFilePathInSandboxFolder(\"sampleData.xml\");"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final String APP_TITLE \u003d \"Test App\";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    protected static final String DEFAULT_PREF_FILE_LOCATION_FOR_TESTING \u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            TestUtil.getFilePathInSandboxFolder(\"pref_testing.json\");"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    protected static final String ADDRESS_BOOK_NAME \u003d \"Test\";"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    protected Supplier\u003cReadOnlyJobbiBot\u003e initialDataSupplier \u003d () -\u003e null;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    protected String saveFileLocation \u003d SAVE_LOCATION_FOR_TESTING;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    public TestApp() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    public TestApp(Supplier\u003cReadOnlyJobbiBot\u003e initialDataSupplier, String saveFileLocation) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.initialDataSupplier \u003d initialDataSupplier;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        this.saveFileLocation \u003d saveFileLocation;"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // If some initial local data has been provided, write those to the file"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (initialDataSupplier.get() !\u003d null) {"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"            createDataFileWithData(new XmlSerializableJobbiBot(this.initialDataSupplier.get()),"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    this.saveFileLocation);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        Config config \u003d super.initConfig(configFilePath);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        config.setAppTitle(APP_TITLE);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        config.setUserPrefsFilePath(DEFAULT_PREF_FILE_LOCATION_FOR_TESTING);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return config;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d super.initPrefs(storage);"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        double x \u003d Screen.getPrimary().getVisualBounds().getMinX();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        double y \u003d Screen.getPrimary().getVisualBounds().getMinY();"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        userPrefs.updateLastUsedGuiSetting(new GuiSettings(600.0, 600.0, (int) x, (int) y));"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        userPrefs.setInternshipBookFilePath(saveFileLocation);"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        userPrefs.setInternshipBookName(ADDRESS_BOOK_NAME);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the address book data stored inside the storage file."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"    public JobbiBot readStorageInternshipBook() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"            return new JobbiBot(storage.readInternshipBook().get());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        } catch (DataConversionException dce) {"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"Data is not in the JobbiBot format.\");"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Storage file cannot be found.\");"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the file path of the storage file."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    public String getStorageSaveLocation() {"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        return storage.getJobbiBotFilePath();"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":94,"author":{"gitID":"-"},"content":"     * Returns a defensive copy of the model."},{"lineNumber":95,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public Model getModel() {"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        Model copy \u003d new ModelManager((model.getJobbiBot()), new UserPrefs());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ModelHelper.setSearchedList(copy, model.getFilteredInternshipList());"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        return copy;"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"-"},"content":"     * Creates an XML file at the {@code filePath} with the {@code data}."},{"lineNumber":113,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    private \u003cT\u003e void createDataFileWithData(T data, String filePath) {"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            File saveFileForTesting \u003d new File(filePath);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            FileUtil.createIfMissing(saveFileForTesting);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"            XmlUtil.saveDataToFile(saveFileForTesting, data);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        } catch (Exception e) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":13,"-":110}},{"path":"src/test/java/seedu/address/ui/StatusBarFooterTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.EventsUtil.postNow;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.time.Instant;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.time.ZoneId;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.AfterClass;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.BeforeClass;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"import guitests.guihandles.StatusBarFooterHandle;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StatusBarFooterTest extends GuiUnitTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String RELATIVE_PATH \u003d \"./\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    private static final JobbiBotChangedEvent EVENT_STUB \u003d new JobbiBotChangedEvent(new JobbiBot());"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final Clock originalClock \u003d StatusBarFooter.getClock();"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private StatusBarFooterHandle statusBarFooterHandle;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @BeforeClass"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void setUpBeforeClass() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // inject fixed clock"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(injectedClock);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @AfterClass"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static void tearDownAfterClass() {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // restore original clock"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        StatusBarFooter.setClock(originalClock);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        uiPartRule.setUiPart(statusBarFooter);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void display() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        // initial state"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // after address book is updated"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        postNow(EVENT_STUB);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"},{"lineNumber":62,"author":{"gitID":"-"},"content":"                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()));"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * sync status matches that of {@code expectedSyncStatus}."},{"lineNumber":68,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":72}},{"path":"src/test/java/seedu/address/commons/core/ConfigTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertNotNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class ConfigTest {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public void toString_defaultObject_stringReturned() {"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"        String defaultConfigAsString \u003d \"App title : JobbiBot\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"                + \"Current log level : INFO\\n\""},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"                + \"Preference file Region : preferences.json\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        assertEquals(defaultConfigAsString, new Config().toString());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void equalsMethod() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Config defaultConfig \u003d new Config();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertNotNull(defaultConfig);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        assertTrue(defaultConfig.equals(defaultConfig));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":30,"TanCiKang":1}},{"path":"src/test/java/seedu/address/commons/core/index/IndexTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core.index;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class IndexTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void createOneBasedIndex() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        assertCreateOneBasedFailure(0);"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromOneBased(1).getOneBased());"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromOneBased(5).getOneBased());"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"        // convert from one-based index to zero-based index"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromOneBased(1).getZeroBased());"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertEquals(4, Index.fromOneBased(5).getZeroBased());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void createZeroBasedIndex() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid index"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertCreateZeroBasedFailure(-1);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // check equality using the same base"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // convert from zero-based index to one-based index"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(1, Index.fromZeroBased(0).getOneBased());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(6, Index.fromZeroBased(5).getOneBased());"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidZeroBasedIndex, true);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCreateFailure(invalidOneBasedIndex, false);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"            if (isZeroBased) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                Index.fromZeroBased(invalidIndex);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"                Index.fromOneBased(invalidIndex);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":67,"author":{"gitID":"-"},"content":"            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        } catch (IndexOutOfBoundsException ie) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            // expected behaviour"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"        final Index fifthInternshipIndex \u003d Index.fromOneBased(5);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(fifthInternshipIndex.equals(Index.fromOneBased(5)));"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(fifthInternshipIndex.equals(Index.fromZeroBased(4)));"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(fifthInternshipIndex.equals(fifthInternshipIndex));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(fifthInternshipIndex.equals(null));"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(fifthInternshipIndex.equals(5.0f));"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(fifthInternshipIndex.equals(Index.fromOneBased(1)));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":86,"TanCiKang":7}},{"path":"src/test/java/seedu/address/commons/util/XmlUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.storage.XmlAdaptedInternship;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.storage.XmlAdaptedTag;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.storage.XmlSerializableJobbiBot;"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.InternshipBuilder;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.JobbiBotBuilder;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.testutil.TestUtil;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"public class XmlUtilTest {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"src/test/data/XmlUtilTest/\");"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final File EMPTY_FILE \u003d new File(TEST_DATA_FOLDER + \"empty.xml\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final File MISSING_FILE \u003d new File(TEST_DATA_FOLDER + \"missing.xml\");"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    private static final File VALID_FILE \u003d new File(TEST_DATA_FOLDER + \"validInternshipBook.xml\");"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"    private static final File MISSING_INTERNSHIP_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"missingInternshipField.xml\");"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    private static final File INVALID_INTERNSHIP_FIELD_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidInternshipField.xml\");"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"    private static final File VALID_INTERNSHIP_FILE \u003d new File(TEST_DATA_FOLDER + \"validInternship.xml\");"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private static final File TEMP_FILE \u003d new File(TestUtil.getFilePathInSandboxFolder(\"tempInternshipBook.xml\"));"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_SALARY \u003d \"9482asf424\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"ABC Company\";"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_SALARY \u003d \"1000\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"ABC@example\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"4th street\";"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_INDUSTRY \u003d \"Engineering\";"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_REGION \u003d \"Geylang\";"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_ROLE \u003d \"Safety Officer\";"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d Collections.singletonList(new XmlAdaptedTag(\"saved\"));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        XmlUtil.getDataFromFile(null, JobbiBot.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public void getDataFromFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        XmlUtil.getDataFromFile(VALID_FILE, null);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void getDataFromFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        XmlUtil.getDataFromFile(MISSING_FILE, JobbiBot.class);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void getDataFromFile_emptyFile_dataFormatMismatchException() throws Exception {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        thrown.expect(JAXBException.class);"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        XmlUtil.getDataFromFile(EMPTY_FILE, JobbiBot.class);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void getDataFromFile_validFile_validResult() throws Exception {"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"        JobbiBot dataFromFile \u003d XmlUtil.getDataFromFile(VALID_FILE, XmlSerializableJobbiBot.class).toModelType();"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(9, dataFromFile.getInternshipList().size());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertEquals(0, dataFromFile.getTagList().size());"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"    public void xmlAdaptedInternshipFromFile_fileWithMissingInternshipField_validResult() throws Exception {"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship actualInternship \u003d XmlUtil.getDataFromFile("},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"                MISSING_INTERNSHIP_FIELD_FILE, XmlAdaptedInternshipWithRootElement.class);"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship expectedInternship \u003d new XmlAdaptedInternship("},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"                null, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY, VALID_REGION,"},{"lineNumber":87,"author":{"gitID":"TanCiKang"},"content":"                VALID_ROLE, VALID_TAGS);"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship, actualInternship);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"    public void xmlAdaptedInternshipFromFile_fileWithInvalidInternshipField_validResult() throws Exception {"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship actualInternship \u003d XmlUtil.getDataFromFile("},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"                INVALID_INTERNSHIP_FIELD_FILE, XmlAdaptedInternshipWithRootElement.class);"},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship expectedInternship \u003d new XmlAdaptedInternship("},{"lineNumber":96,"author":{"gitID":"TanCiKang"},"content":"                VALID_NAME, INVALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY, VALID_REGION, VALID_ROLE,"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"                VALID_TAGS);"},{"lineNumber":98,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship, actualInternship);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"    public void xmlAdaptedInternshipFromFile_fileWithValidInternship_validResult() throws Exception {"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship actualInternship \u003d XmlUtil.getDataFromFile("},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"                VALID_INTERNSHIP_FILE, XmlAdaptedInternshipWithRootElement.class);"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship expectedInternship \u003d new XmlAdaptedInternship("},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"                VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY, VALID_REGION, VALID_ROLE,"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"                VALID_TAGS);"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedInternship, actualInternship);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullFile_throwsNullPointerException() throws Exception {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"        XmlUtil.saveDataToFile(null, new JobbiBot());"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void saveDataToFile_nullClass_throwsNullPointerException() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(VALID_FILE, null);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public void saveDataToFile_missingFile_fileNotFoundException() throws Exception {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        thrown.expect(FileNotFoundException.class);"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"        XmlUtil.saveDataToFile(MISSING_FILE, new JobbiBot());"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    public void saveDataToFile_validFile_dataSaved() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        TEMP_FILE.createNewFile();"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot dataToWrite \u003d new XmlSerializableJobbiBot(new JobbiBot());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableJobbiBot.class);"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":136,"author":{"gitID":"-"},"content":""},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"        JobbiBotBuilder builder \u003d new JobbiBotBuilder(new JobbiBot());"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"        dataToWrite \u003d new XmlSerializableJobbiBot("},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":"                builder.withInternship(new InternshipBuilder().build()).withTag(\"Friends\").build());"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"        XmlUtil.saveDataToFile(TEMP_FILE, dataToWrite);"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"        dataFromFile \u003d XmlUtil.getDataFromFile(TEMP_FILE, XmlSerializableJobbiBot.class);"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assertEquals(dataToWrite, dataFromFile);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"-"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"     * Test class annotated with {@code XmlRootElement} to allow unmarshalling of .xml data to"},{"lineNumber":148,"author":{"gitID":"TanCiKang"},"content":"     * {@code XmlAdaptedInternship} objects."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"    @XmlRootElement(name \u003d \"internship\")"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"    private static class XmlAdaptedInternshipWithRootElement extends XmlAdaptedInternship {}"},{"lineNumber":152,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":16,"-":99,"TanCiKang":37}},{"path":"src/test/java/seedu/address/logic/LogicManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManagerTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private Model model \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private Logic logic \u003d new LogicManager(model);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void execute_invalidCommandFormat_throwsParseException() {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        String invalidCommand \u003d \"uicfhmowqewca\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(invalidCommand);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void execute_validCommand_success() {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String listCommand \u003d ListCommand.COMMAND_WORD;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, ListCommand.MESSAGE_SUCCESS, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertHistoryCorrect(listCommand);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public void getFilteredInternshipList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"        logic.getFilteredInternshipList().remove(0);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that no exceptions are thrown and that the result message is correct."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Also confirms that {@code expectedModel} is as specified."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    private void assertCommandSuccess(String inputCommand, String expectedMessage, Model expectedModel) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandBehavior(null, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a ParseException is thrown and that the result message is correct."},{"lineNumber":58,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":59,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    private void assertParseException(String inputCommand, String expectedMessage) {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, ParseException.class, expectedMessage);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that a CommandException is thrown and that the result message is correct."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private void assertCommandException(String inputCommand, String expectedMessage) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        assertCommandFailure(inputCommand, CommandException.class, expectedMessage);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the exception is thrown and that the result message is correct."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * @see #assertCommandBehavior(Class, String, String, Model)"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    private void assertCommandFailure(String inputCommand, Class\u003c?\u003e expectedException, String expectedMessage) {"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        assertCommandBehavior(expectedException, inputCommand, expectedMessage, expectedModel);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Executes the command, confirms that the result message is correct and that the expected exception is thrown,"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * and also confirms that the following two parts of the LogicManager object\u0027s state are as expected:\u003cbr\u003e"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     *      - the internal model manager data are same as those in the {@code expectedModel} \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *      - {@code expectedModel}\u0027s address book was saved to the storage file."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void assertCommandBehavior(Class\u003c?\u003e expectedException, String inputCommand,"},{"lineNumber":88,"author":{"gitID":"-"},"content":"                                           String expectedMessage, Model expectedModel) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(inputCommand);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, null);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (CommandException | ParseException e) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            assertEquals(expectedException, e.getClass());"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Asserts that the result display shows all the {@code expectedCommands} upon the execution of"},{"lineNumber":104,"author":{"gitID":"-"},"content":"     * {@code HistoryCommand}."},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    private void assertHistoryCorrect(String... expectedCommands) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            CommandResult result \u003d logic.execute(HistoryCommand.COMMAND_WORD);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            String expectedMessage \u003d String.format("},{"lineNumber":110,"author":{"gitID":"-"},"content":"                    HistoryCommand.MESSAGE_SUCCESS, String.join(\"\\n\", expectedCommands));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        } catch (ParseException | CommandException e) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Parsing and execution of HistoryCommand.COMMAND_WORD should succeed.\", e);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":113,"TanCiKang":2}},{"path":"src/test/java/seedu/address/logic/parser/FilterCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsAllKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FilterCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private FilterCommandParser parser \u003d new FilterCommandParser();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"-"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        FilterCommand expectedFilterCommand \u003d"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"                new FilterCommand(new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\")));"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFilterCommand);"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFilterCommand);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":33,"TanCiKang":2}},{"path":"src/test/java/seedu/address/logic/parser/SelectCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" * Test scope: similar to {@code SaveCommandParserTest}."},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" * @see SaveCommandParserTest"},{"lineNumber":15,"author":{"gitID":"-"},"content":" */"},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class SelectCommandParserTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private SelectCommandParser parser \u003d new SelectCommandParser();"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsSelectCommand() {"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"        assertParseSuccess(parser, \"1\", new SelectCommand(INDEX_FIRST_INTERNSHIP));"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":25,"TanCiKang":2}},{"path":"src/test/java/seedu/address/ui/ChatBotListPanelTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysMessage;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import org.junit.Before;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.ChatBotCardHandle;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import guitests.guihandles.ChatBotListPanelHandle;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"public class ChatBotListPanelTest extends GuiUnitTest {"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    private static final String EXPECTED_WELCOME_MESSAGE \u003d \"JOBBI:   \" + \"Hello there, I am Jobbi! \""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"            + \"I am here to help you find your ideal internship today. Type \u0027start\u0027 to begin your search.\";"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    private ChatBotListPanelHandle chatBotListPanelHandle;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"        Model model \u003d new ModelManager();"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"        Logic logic \u003d new LogicManager(model);"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        ChatBotPanel chatBotListPanel \u003d new ChatBotPanel(logic);"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        uiPartRule.setUiPart(chatBotListPanel);"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"        chatBotListPanelHandle \u003d new ChatBotListPanelHandle(getChildNode(chatBotListPanel.getRoot(),"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"                ChatBotListPanelHandle.CHAT_BOT_LIST_VIEW_ID));"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    public void display_welcomeMessage() {"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        ChatBotCardHandle actualCard \u003d chatBotListPanelHandle.getHandleToWelcomeMessage();"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        assertCardDisplaysMessage(EXPECTED_WELCOME_MESSAGE, actualCard);"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":39}},{"path":"src/test/java/seedu/address/logic/parser/InternshipBookParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RESTART_COMMAND;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import org.junit.FixMethodOrder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import org.junit.runners.MethodSorters;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.NewChatCommand;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.SaveCommand;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.StartCommand;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UnsaveCommand;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsAllKeywordsPredicate;"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"@FixMethodOrder(MethodSorters.NAME_ASCENDING)"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"public class InternshipBookParserTest {"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"    private final InternshipBookParser parser \u003d new InternshipBookParser();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void parseCommand_exit() throws Exception {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void parseCommand_find() throws Exception {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e uniqueKeywords \u003d new ArrayList\u003c\u003e(new HashSet\u003c\u003e(keywords));"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        FindCommand command \u003d (FindCommand) parser.parseCommand("},{"lineNumber":67,"author":{"gitID":"-"},"content":"                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        assertEquals(new FindCommand(new InternshipContainsKeywordsPredicate(uniqueKeywords)), command);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void parseCommand_filter() throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        FilterCommand command \u003d (FilterCommand) parser.parseCommand("},{"lineNumber":75,"author":{"gitID":"-"},"content":"                FilterCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        assertEquals(new FilterCommand(new InternshipContainsAllKeywordsPredicate(keywords)), command);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    public void parseCommand_sort() throws Exception {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        if (parser.getHasStarted() \u003d\u003d false) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            parser.parseCommand(StartCommand.COMMAND_WORD);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            parser.parseCommand(SortCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":86,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            assertEquals(SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE,"},{"lineNumber":89,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseCommand_help() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"-"},"content":"            parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":98,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":101,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    public void parseCommand_history() throws Exception {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"            parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public void parseCommand_list() throws Exception {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"            parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":122,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":125,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_startThenSelect() throws Exception {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        SelectCommand command \u003d (SelectCommand) parser.parseCommand("},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased());"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(new SelectCommand(INDEX_FIRST_INTERNSHIP), command);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_startThenRedoCommandWord_returnsRedoCommand() throws Exception {"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"            parser.parseCommand(RedoCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":144,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"},{"lineNumber":150,"author":{"gitID":"-"},"content":"        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            parser.parseCommand(UndoCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        } catch (ParseException pe) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":156,"author":{"gitID":"-"},"content":"                    pe.getMessage());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"-"},"content":""},{"lineNumber":160,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"\");"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"        thrown.expect(ParseException.class);"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        parser.parseCommand(\"unknownCommand\");"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":173,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":176,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_startThenSave() throws Exception {"},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"        SaveCommand command \u003d (SaveCommand) parser.parseCommand("},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"                SaveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased());"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"        assertEquals(new SaveCommand(INDEX_FIRST_INTERNSHIP), command);"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_start() throws Exception {"},{"lineNumber":184,"author":{"gitID":"wyinkok"},"content":"        parser.resetHasStarted();"},{"lineNumber":185,"author":{"gitID":"wyinkok"},"content":"        assertTrue(parser.parseCommand(StartCommand.COMMAND_WORD) instanceof StartCommand);"},{"lineNumber":186,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":187,"author":{"gitID":"wyinkok"},"content":"            parser.parseCommand(StartCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":188,"author":{"gitID":"wyinkok"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":189,"author":{"gitID":"wyinkok"},"content":"        } catch (ParseException pe) {"},{"lineNumber":190,"author":{"gitID":"wyinkok"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":191,"author":{"gitID":"wyinkok"},"content":"                    pe.getMessage());"},{"lineNumber":192,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":193,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":195,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":196,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_new() throws Exception {"},{"lineNumber":197,"author":{"gitID":"wyinkok"},"content":"        assertTrue(parser.parseCommand(NewChatCommand.COMMAND_WORD) instanceof NewChatCommand);"},{"lineNumber":198,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":199,"author":{"gitID":"wyinkok"},"content":"            parser.parseCommand(NewChatCommand.COMMAND_WORD + \" 3\");"},{"lineNumber":200,"author":{"gitID":"wyinkok"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":201,"author":{"gitID":"wyinkok"},"content":"        } catch (ParseException pe) {"},{"lineNumber":202,"author":{"gitID":"wyinkok"},"content":"            assertEquals(new String(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE)),"},{"lineNumber":203,"author":{"gitID":"wyinkok"},"content":"                    pe.getMessage());"},{"lineNumber":204,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":205,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":206,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":207,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":208,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_unsave() throws Exception {"},{"lineNumber":209,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand command \u003d (UnsaveCommand) parser.parseCommand("},{"lineNumber":210,"author":{"gitID":"wyinkok"},"content":"                UnsaveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased());"},{"lineNumber":211,"author":{"gitID":"wyinkok"},"content":"        assertEquals(new UnsaveCommand(INDEX_FIRST_INTERNSHIP), command);"},{"lineNumber":212,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":214,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":215,"author":{"gitID":"wyinkok"},"content":"    public void parseCommand_newThenUnsave() {"},{"lineNumber":216,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":217,"author":{"gitID":"wyinkok"},"content":"            parser.parseCommand(UnsaveCommand.COMMAND_WORD + \" \" + INDEX_FIRST_INTERNSHIP.getOneBased());"},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":"            fail(\"The expected ParseException was not thrown.\");"},{"lineNumber":219,"author":{"gitID":"wyinkok"},"content":"        } catch (ParseException pe) {"},{"lineNumber":220,"author":{"gitID":"wyinkok"},"content":"            assertEquals(MESSAGE_INVALID_RESTART_COMMAND, pe.getMessage());"},{"lineNumber":221,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":222,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":223,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":224,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":225,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":66,"-":154,"TanCiKang":5}},{"path":"src/test/java/seedu/address/logic/parser/FindCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class FindCommandParserTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private FindCommandParser parser \u003d new FindCommandParser();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void parse_validArgs_returnsFindCommand() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        List\u003cString\u003e keywords \u003d Arrays.asList(\"Alice\", \"Bob\");"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        ArrayList\u003cString\u003e uniqueKeywords \u003d new ArrayList\u003c\u003e(new HashSet\u003c\u003e(keywords));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        FindCommand expectedFindCommand \u003d"},{"lineNumber":32,"author":{"gitID":"-"},"content":"                new FindCommand(new InternshipContainsKeywordsPredicate(uniqueKeywords));"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \"Alice Bob\", expectedFindCommand);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertParseSuccess(parser, \" \\n Alice \\n \\t Bob  \\t\", expectedFindCommand);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":38,"TanCiKang":1}},{"path":"src/test/java/seedu/address/logic/parser/ParserUtilTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class ParserUtilTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_SALARY \u003d \"+651234\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_TAG \u003d \" \";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d \"Rachel Walker\";"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_SALARY \u003d \"123456\";"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    private static final String VALID_TAG_1 \u003d \"saved\";"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final String VALID_TAG_2 \u003d \"neighbour\";"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private static final String WHITESPACE \u003d \" \\t\\r\\n\";"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public final ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(\"10 a\");"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expectMessage(MESSAGE_INVALID_INDEX);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public void parseIndex_validInput_success() throws Exception {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        // No whitespaces"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(INDEX_FIRST_INTERNSHIP, ParserUtil.parseIndex(\"1\"));"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"        // Leading and trailing whitespaces"},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(INDEX_FIRST_INTERNSHIP, ParserUtil.parseIndex(\"  1  \"));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public void parseName_null_throwsNullPointerException() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((String) null));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseName((Optional\u003cString\u003e) null));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public void parseName_invalidValue_throwsIllegalValueException() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(INVALID_NAME));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseName(Optional.of(INVALID_NAME)));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithoutWhitespace_returnsName() throws Exception {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(VALID_NAME));"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(VALID_NAME)));"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    public void parseName_validValueWithWhitespace_returnsTrimmedName() throws Exception {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        String nameWithWhitespace \u003d WHITESPACE + VALID_NAME + WHITESPACE;"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        Name expectedName \u003d new Name(VALID_NAME);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        assertEquals(expectedName, ParserUtil.parseName(nameWithWhitespace));"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedName), ParserUtil.parseName(Optional.of(nameWithWhitespace)));"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"    public void parseSalary_null_throwsNullPointerException() {"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary((String) null));"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseSalary((Optional\u003cString\u003e) null));"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"    public void parseSalary_invalidValue_throwsIllegalValueException() {"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSalary(INVALID_SALARY));"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseSalary(Optional.of(INVALID_SALARY)));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"    public void parseSalary_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(ParserUtil.parseSalary(Optional.empty()).isPresent());"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":117,"author":{"gitID":"-"},"content":""},{"lineNumber":118,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"    public void parseSalary_validValueWithoutWhitespace_returnsSalary() throws Exception {"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"        Salary expectedSalary \u003d new Salary(VALID_SALARY);"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedSalary, ParserUtil.parseSalary(VALID_SALARY));"},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(Optional.of(expectedSalary), ParserUtil.parseSalary(Optional.of(VALID_SALARY)));"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":""},{"lineNumber":125,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"    public void parseSalary_validValueWithWhitespace_returnsTrimmedSalary() throws Exception {"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"        String salaryWithWhitespace \u003d WHITESPACE + VALID_SALARY + WHITESPACE;"},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"        Salary expectedSalary \u003d new Salary(VALID_SALARY);"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedSalary, ParserUtil.parseSalary(salaryWithWhitespace));"},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(Optional.of(expectedSalary), ParserUtil.parseSalary(Optional.of(salaryWithWhitespace)));"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    public void parseAddress_null_throwsNullPointerException() {"},{"lineNumber":135,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((String) null));"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseAddress((Optional\u003cString\u003e) null));"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public void parseAddress_invalidValue_throwsIllegalValueException() {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(INVALID_ADDRESS));"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS)));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":151,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithoutWhitespace_returnsAddress() throws Exception {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(VALID_ADDRESS));"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(VALID_ADDRESS)));"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":158,"author":{"gitID":"-"},"content":"    public void parseAddress_validValueWithWhitespace_returnsTrimmedAddress() throws Exception {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"        String addressWithWhitespace \u003d WHITESPACE + VALID_ADDRESS + WHITESPACE;"},{"lineNumber":160,"author":{"gitID":"-"},"content":"        Address expectedAddress \u003d new Address(VALID_ADDRESS);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        assertEquals(expectedAddress, ParserUtil.parseAddress(addressWithWhitespace));"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedAddress), ParserUtil.parseAddress(Optional.of(addressWithWhitespace)));"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":166,"author":{"gitID":"-"},"content":"    public void parseEmail_null_throwsNullPointerException() {"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((String) null));"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e ParserUtil.parseEmail((Optional\u003cString\u003e) null));"},{"lineNumber":169,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"-"},"content":""},{"lineNumber":171,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":172,"author":{"gitID":"-"},"content":"    public void parseEmail_invalidValue_throwsIllegalValueException() {"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(INVALID_EMAIL));"},{"lineNumber":174,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalValueException.class, () -\u003e ParserUtil.parseEmail(Optional.of(INVALID_EMAIL)));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"},{"lineNumber":180,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":181,"author":{"gitID":"-"},"content":""},{"lineNumber":182,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":183,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithoutWhitespace_returnsEmail() throws Exception {"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(VALID_EMAIL));"},{"lineNumber":186,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(VALID_EMAIL)));"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    public void parseEmail_validValueWithWhitespace_returnsTrimmedEmail() throws Exception {"},{"lineNumber":191,"author":{"gitID":"-"},"content":"        String emailWithWhitespace \u003d WHITESPACE + VALID_EMAIL + WHITESPACE;"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        Email expectedEmail \u003d new Email(VALID_EMAIL);"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        assertEquals(expectedEmail, ParserUtil.parseEmail(emailWithWhitespace));"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        assertEquals(Optional.of(expectedEmail), ParserUtil.parseEmail(Optional.of(emailWithWhitespace)));"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":196,"author":{"gitID":"-"},"content":""},{"lineNumber":197,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    public void parseTag_null_throwsNullPointerException() throws Exception {"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(null);"},{"lineNumber":201,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":202,"author":{"gitID":"-"},"content":""},{"lineNumber":203,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public void parseTag_invalidValue_throwsIllegalValueException() throws Exception {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        ParserUtil.parseTag(INVALID_TAG);"},{"lineNumber":207,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"-"},"content":""},{"lineNumber":209,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithoutWhitespace_returnsTag() throws Exception {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(VALID_TAG_1));"},{"lineNumber":213,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":214,"author":{"gitID":"-"},"content":""},{"lineNumber":215,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":216,"author":{"gitID":"-"},"content":"    public void parseTag_validValueWithWhitespace_returnsTrimmedTag() throws Exception {"},{"lineNumber":217,"author":{"gitID":"-"},"content":"        String tagWithWhitespace \u003d WHITESPACE + VALID_TAG_1 + WHITESPACE;"},{"lineNumber":218,"author":{"gitID":"-"},"content":"        Tag expectedTag \u003d new Tag(VALID_TAG_1);"},{"lineNumber":219,"author":{"gitID":"-"},"content":"        assertEquals(expectedTag, ParserUtil.parseTag(tagWithWhitespace));"},{"lineNumber":220,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":221,"author":{"gitID":"-"},"content":""},{"lineNumber":222,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":223,"author":{"gitID":"-"},"content":"    public void parseTags_null_throwsNullPointerException() throws Exception {"},{"lineNumber":224,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(null);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":227,"author":{"gitID":"-"},"content":""},{"lineNumber":228,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":229,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"},{"lineNumber":232,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":233,"author":{"gitID":"-"},"content":""},{"lineNumber":234,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":235,"author":{"gitID":"-"},"content":"    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"},{"lineNumber":236,"author":{"gitID":"-"},"content":"        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"},{"lineNumber":237,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":238,"author":{"gitID":"-"},"content":""},{"lineNumber":239,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":240,"author":{"gitID":"-"},"content":"    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"},{"lineNumber":243,"author":{"gitID":"-"},"content":""},{"lineNumber":244,"author":{"gitID":"-"},"content":"        assertEquals(expectedTagSet, actualTagSet);"},{"lineNumber":245,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":246,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":218,"TanCiKang":28}},{"path":"src/test/java/systemtests/FilterCommandSystemTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package systemtests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INTERNSHIPS_LISTED_OVERVIEW;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS1;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS4;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.DATASCIENCE;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING2;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING3;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.KEYWORD_MATCHING_AUDIT;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"public class FilterCommandSystemTest extends JobbiBotSystemTest {"},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"    public void filter() throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"        /* -------------------------Filtering on an unsearched list ------------------------------------------ */"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"        /* Case: filter multiple internships in internship book, command with leading spaces and trailing spaces"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"         * -\u003e 2 internships found"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"         */"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"        String command \u003d \"   \" + FilterCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_AUDIT + \"  \";"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, BUSINESS2, BUSINESS4);"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"        /* Case: repeat previous filter command where internship list is displaying the internships we are finding"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"         * -\u003e 2 internships found"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"         */"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_AUDIT;"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"        /* Case: filter internship where internship list is not displaying the internship we are finding -\u003e 1 internship"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"         * found"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"         */"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" Data\";"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        /* Case: filter internship with 1 repeated keyword entered -\u003e 1 internship found */"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" Data Data\";"},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with single keywords -\u003e 3 internships found */"},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" Engineering\";"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1, ENGINEERING2, ENGINEERING3);"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with multiple keywords -\u003e 1 internships found */"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" ST Engineering\";"},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1);"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with same 2 keywords in reverse order -\u003e 1 internships found */"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" Engineering ST\";"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1);"},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with 3 keywords one of which is repeated -\u003e 1 internships found */"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" Engineering ST ST\";"},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1);"},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with 1 non-matching keywords -\u003e 0 internships found */"},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" ST Engineering NonKeyWord\";"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from salary attribute -\u003e 1 internships found */"},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getSalary().value;"},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from name attribute -\u003e 1 internships found */"},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getName().fullName;"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":101,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":102,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":103,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":104,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from role attribute -\u003e 1 internships found */"},{"lineNumber":105,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getRole().value;"},{"lineNumber":106,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":107,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":108,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":109,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":110,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from address attribute -\u003e 0 internships found"},{"lineNumber":111,"author":{"gitID":"niloc94"},"content":"         * filter does not look through address string of internship"},{"lineNumber":112,"author":{"gitID":"niloc94"},"content":"         */"},{"lineNumber":113,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getAddress().value;"},{"lineNumber":114,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":115,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":116,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":117,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":118,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from email attribute -\u003e 0 internships found"},{"lineNumber":119,"author":{"gitID":"niloc94"},"content":"         * filter does not look through email string of internship"},{"lineNumber":120,"author":{"gitID":"niloc94"},"content":"         */"},{"lineNumber":121,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getEmail().value;"},{"lineNumber":122,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":123,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":124,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":125,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":126,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from tag attribute -\u003e 1 internships found */"},{"lineNumber":127,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + BUSINESS1.getTags().toString()"},{"lineNumber":128,"author":{"gitID":"niloc94"},"content":"                .replaceAll(\"[\\\\[+\\\\]+]\", \" \");"},{"lineNumber":129,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, BUSINESS1);"},{"lineNumber":130,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":131,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":132,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":133,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with keywords from role attribute -\u003e 1 internships found */"},{"lineNumber":134,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + DATASCIENCE.getIndustry().value;"},{"lineNumber":135,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":136,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":137,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":138,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":139,"author":{"gitID":"niloc94"},"content":"        /* Case: undo previous filter command -\u003e success */"},{"lineNumber":140,"author":{"gitID":"niloc94"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":141,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":142,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":143,"author":{"gitID":"niloc94"},"content":"        /* Case: redo previous filter command -\u003e success */"},{"lineNumber":144,"author":{"gitID":"niloc94"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":145,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":146,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":147,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with mixed case keywords -\u003e 1 internships found */"},{"lineNumber":148,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + \"DaTA\";"},{"lineNumber":149,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":150,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":151,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":152,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":153,"author":{"gitID":"niloc94"},"content":"        /* Case: filter with mixed case keywords -\u003e 1 internships found */"},{"lineNumber":154,"author":{"gitID":"niloc94"},"content":"        command \u003d \"fiLtEr\" + \" \" + \"Data\";"},{"lineNumber":155,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, DATASCIENCE);"},{"lineNumber":156,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":157,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":158,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":159,"author":{"gitID":"niloc94"},"content":"        /* Case: filter, keyword argument contains substring of internship attribute value -\u003e 0 internships found */"},{"lineNumber":160,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + \"DataEXTRA\";"},{"lineNumber":161,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":162,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":163,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":164,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":165,"author":{"gitID":"niloc94"},"content":"        /* Case: filter,  keyword argument is substring of internship attribute value \u003e 0 internships found */"},{"lineNumber":166,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + \"Dat\";"},{"lineNumber":167,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":168,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":169,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":170,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":171,"author":{"gitID":"niloc94"},"content":"        /* -------------------------Filtering on a searched list ---------------------------------------------------- */"},{"lineNumber":172,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":173,"author":{"gitID":"niloc94"},"content":"        /* Initialize Search List to limit filtering range */"},{"lineNumber":174,"author":{"gitID":"niloc94"},"content":"        command \u003d FindCommand.COMMAND_WORD + \" \" + \"Engineering\";"},{"lineNumber":175,"author":{"gitID":"niloc94"},"content":"        expectedModel.updateInternship(ENGINEERING1, ENGINEERING1.addTagsToInternship(\"Engineering\"));"},{"lineNumber":176,"author":{"gitID":"niloc94"},"content":"        expectedModel.updateInternship(ENGINEERING2, ENGINEERING2.addTagsToInternship(\"Engineering\"));"},{"lineNumber":177,"author":{"gitID":"niloc94"},"content":"        expectedModel.updateInternship(ENGINEERING3, ENGINEERING3.addTagsToInternship(\"Engineering\"));"},{"lineNumber":178,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setSearchedList(expectedModel, ENGINEERING1, ENGINEERING2, ENGINEERING3);"},{"lineNumber":179,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":180,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":181,"author":{"gitID":"niloc94"},"content":"        /* Case: Filter keyword that exists in full list but not searched list -\u003e 0 Internships found */"},{"lineNumber":182,"author":{"gitID":"niloc94"},"content":"        expectedModel \u003d getModel();"},{"lineNumber":183,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_AUDIT;"},{"lineNumber":184,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel);"},{"lineNumber":185,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":186,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":187,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":188,"author":{"gitID":"niloc94"},"content":"        /* Case: undo previous filter command -\u003e success */"},{"lineNumber":189,"author":{"gitID":"niloc94"},"content":"        command \u003d UndoCommand.COMMAND_WORD;"},{"lineNumber":190,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":191,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":192,"author":{"gitID":"niloc94"},"content":"        /* Case: redo previous filter command -\u003e success */"},{"lineNumber":193,"author":{"gitID":"niloc94"},"content":"        command \u003d RedoCommand.COMMAND_WORD;"},{"lineNumber":194,"author":{"gitID":"niloc94"},"content":"        assertCommandFailure(command, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":195,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":196,"author":{"gitID":"niloc94"},"content":"        /* Case: Filter keyword that exists in full list but not searched list -\u003e 1 Internships found */"},{"lineNumber":197,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + \"ST\";"},{"lineNumber":198,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1);"},{"lineNumber":199,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":200,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":201,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":202,"author":{"gitID":"niloc94"},"content":"        /* Case: Filter keyword that exists in full list but not searched list -\u003e 2 Internships found */"},{"lineNumber":203,"author":{"gitID":"niloc94"},"content":"        command \u003d FilterCommand.COMMAND_WORD + \" \" + \"Jurong\";"},{"lineNumber":204,"author":{"gitID":"niloc94"},"content":"        ModelHelper.setFilteredList(expectedModel, ENGINEERING1, ENGINEERING2);"},{"lineNumber":205,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedModel);"},{"lineNumber":206,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":207,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":208,"author":{"gitID":"niloc94"},"content":"    /* --------------------------------------- Helper Methods ----------------------------------------------------- */"},{"lineNumber":209,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":210,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"niloc94"},"content":"     * Executes {@code command} and verifies that the command box displays an empty string, the result display"},{"lineNumber":212,"author":{"gitID":"niloc94"},"content":"     * box displays {@code Messages#MESSAGE_INTERNSHIPS_LISTED_OVERVIEW} with the number of internship in the filtered"},{"lineNumber":213,"author":{"gitID":"niloc94"},"content":"     * list, and the model related components equal to {@code expectedModel}."},{"lineNumber":214,"author":{"gitID":"niloc94"},"content":"     * These verifications are done by"},{"lineNumber":215,"author":{"gitID":"niloc94"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":216,"author":{"gitID":"niloc94"},"content":"     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"},{"lineNumber":217,"author":{"gitID":"niloc94"},"content":"     * selected card updated accordingly, depending on {@code cardStatus}."},{"lineNumber":218,"author":{"gitID":"niloc94"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":219,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":220,"author":{"gitID":"niloc94"},"content":"    private void assertCommandSuccess(String command, Model expectedModel) {"},{"lineNumber":221,"author":{"gitID":"niloc94"},"content":"        String expectedResultMessage \u003d String.format("},{"lineNumber":222,"author":{"gitID":"niloc94"},"content":"                MESSAGE_INTERNSHIPS_LISTED_OVERVIEW, expectedModel.getFilteredInternshipList().size());"},{"lineNumber":223,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":224,"author":{"gitID":"niloc94"},"content":"        executeCommand(command);"},{"lineNumber":225,"author":{"gitID":"niloc94"},"content":"        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"},{"lineNumber":226,"author":{"gitID":"niloc94"},"content":"        assertCommandBoxShowsDefaultStyle();"},{"lineNumber":227,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":228,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":229,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":230,"author":{"gitID":"niloc94"},"content":"     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"},{"lineNumber":231,"author":{"gitID":"niloc94"},"content":"     * box displays {@code expectedResultMessage} and the model related components equal to the current model."},{"lineNumber":232,"author":{"gitID":"niloc94"},"content":"     * These verifications are done by"},{"lineNumber":233,"author":{"gitID":"niloc94"},"content":"     * {@code JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"},{"lineNumber":234,"author":{"gitID":"niloc94"},"content":"     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"},{"lineNumber":235,"author":{"gitID":"niloc94"},"content":"     * error style."},{"lineNumber":236,"author":{"gitID":"niloc94"},"content":"     * @see JobbiBotSystemTest#assertApplicationDisplaysExpected(String, String, Model)"},{"lineNumber":237,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":238,"author":{"gitID":"niloc94"},"content":"    private void assertCommandFailure(String command, String expectedResultMessage) {"},{"lineNumber":239,"author":{"gitID":"niloc94"},"content":"        Model expectedModel \u003d getModel();"},{"lineNumber":240,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":241,"author":{"gitID":"niloc94"},"content":"        executeCommand(command);"},{"lineNumber":242,"author":{"gitID":"niloc94"},"content":"        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"},{"lineNumber":243,"author":{"gitID":"niloc94"},"content":"        assertSelectedCardUnchanged();"},{"lineNumber":244,"author":{"gitID":"niloc94"},"content":"        assertCommandBoxShowsErrorStyle();"},{"lineNumber":245,"author":{"gitID":"niloc94"},"content":"        assertStatusBarUnchanged();"},{"lineNumber":246,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":247,"author":{"gitID":"niloc94"},"content":"}"},{"lineNumber":248,"author":{"gitID":"niloc94"},"content":""}],"authorContributionMap":{"niloc94":225,"-":20,"TanCiKang":3}},{"path":"src/test/java/seedu/address/logic/parser/SaveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.SaveCommand;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * outside of the SaveCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":" * same path through the SaveCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"public class SaveCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    private SaveCommandParser parser \u003d new SaveCommandParser();"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    public void parse_validArgs_returnsSaveCommand() {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        assertParseSuccess(parser, \"1\", new SaveCommand(INDEX_FIRST_INTERNSHIP));"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public void parse_invalidAlphanumericArgs_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        assertParseFailure(parser, \"!\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":38}},{"path":"src/test/java/seedu/address/logic/parser/UnsaveCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UnsaveCommand;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" * As we are only doing white-box testing, our test cases do not cover path variations"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":" * same path through the DeleteCommand, and therefore we test only one of them."},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":" * The path variation for those two cases occur inside the ParserUtil, and"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":" * therefore should be covered by the ParserUtilTest."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"public class UnsaveCommandParserTest {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    private UnsaveCommandParser parser \u003d new UnsaveCommandParser();"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    public void parse_validArgs_returnsUnaveCommand() {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        assertParseSuccess(parser, \"1\", new UnsaveCommand(INDEX_FIRST_INTERNSHIP));"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnsaveCommand.MESSAGE_USAGE));"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public void parse_invalidAlphanumericArgs_throwsParseException() {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        assertParseFailure(parser, \"!\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnsaveCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":38}},{"path":"src/test/java/seedu/address/logic/parser/SortCommandParserTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":"public class SortCommandParserTest {"},{"lineNumber":15,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":16,"author":{"gitID":"niloc94"},"content":"    private SortCommandParser parser \u003d new SortCommandParser();"},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"    public void parse_emptyArg_throwsParseException() {"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":"        assertParseFailure(parser, \"     \","},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"    public void parse_validArgs_returnsSortCommand() {"},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"        // no leading and trailing whitespaces"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"        SortCommand expectedSortCommand \u003d"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"                new SortCommand(Arrays.asList(\"role\", \"industry\", \"salary\"));"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" role industry salary\", expectedSortCommand);"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"        // multiple whitespaces between keywords"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" \\n role \\n \\t industry  \\n \\t salary\", expectedSortCommand);"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"        // valid negative argument words"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"-name\", \"-salary\"));"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role -name -salary\", expectedSortCommand);"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        // valid negative and non negative argument words"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"region\", \"-salary\"));"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role region -salary\", expectedSortCommand);"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"        // valid repeat"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"-role\", \"-role\"));"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role -role -role\", expectedSortCommand);"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        // valid three arguments with 1 repeat"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"industry\", \"-role\"));"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role industry -role\", expectedSortCommand);"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"        // valid one argument"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\"));"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role\", expectedSortCommand);"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        // valid two argument"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"name\"));"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role name\", expectedSortCommand);"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"        // valid \u003e3 argument"},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":"        expectedSortCommand \u003d new SortCommand(Arrays.asList(\"-role\", \"name\", \"salary\", \"role\"));"},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        assertParseSuccess(parser, \" -role name salary role\", expectedSortCommand);"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"    public void parse_invalidArgs_throwsParseException() {"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        // 1 Invalid Argument"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":"        assertParseFailure(parser, \" invalid\", SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"        // Mix of valid and invalid arguments"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":"        assertParseFailure(parser, \" invalid role name\","},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"                SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":"        // Invalid mix of valid and invalid arguments with \u0027-\u0027"},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"        assertParseFailure(parser, \" name - role name\","},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"                SortCommandParser.MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":64,"-":12}},{"path":"src/test/java/seedu/address/logic/commands/ListCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInternshipAtIndex;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) and unit tests for ListCommand."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class ListCommandTest {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private Model expectedModel;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private ListCommand listCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"        listCommand \u003d new ListCommand();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        listCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void execute_listIsNotFiltered_showsSameList() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void execute_listIsFiltered_showsEverything() {"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertCommandSuccess(listCommand, model, ListCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":39,"TanCiKang":3}},{"path":"src/test/java/seedu/address/logic/commands/CommandTestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.SavedInternshipBuilder;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":24,"author":{"gitID":"-"},"content":" * Contains helper methods for testing commands."},{"lineNumber":25,"author":{"gitID":"-"},"content":" */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class CommandTestUtil {"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * - the result message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * - the {@code actualModel} matches {@code expectedModel}"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            Model expectedModel) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"            CommandResult result \u003d null;"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"            try {"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"                result \u003d command.execute();"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"                e.printStackTrace();"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, result.feedbackToUser);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            assertEquals(expectedModel, actualModel);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Execution of command should not fail.\", ce);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Executes the given {@code command}, confirms that \u003cbr\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * - a {@code CommandException} is thrown \u003cbr\u003e"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"     * - the address book and the filtered internship list in the {@code actualModel} remain unchanged"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // we are unable to defensively copy the model for comparison later, so we can"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // only do so by copying its components."},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        JobbiBot expectedJobbiBot \u003d new JobbiBot(actualModel.getJobbiBot());"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"        List\u003cInternship\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredInternshipList());"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            command.execute();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        } catch (CommandException e) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, e.getMessage());"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"            assertEquals(expectedJobbiBot, actualModel.getJobbiBot());"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"            assertEquals(expectedFilteredList, actualModel.getFilteredInternshipList());"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"            e.printStackTrace();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"     * Updates {@code model}\u0027s filtered list to show only the internship at the given {@code targetIndex} in the"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * {@code model}\u0027s address book."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"    public static void showInternshipAtIndex(Model model, Index targetIndex) {"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(targetIndex.getZeroBased() \u003c model.getFilteredInternshipList().size());"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"        Internship internship \u003d model.getFilteredInternshipList().get(targetIndex.getZeroBased());"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        final String[] splitName \u003d internship.getName().fullName.split(\"\\\\s+\");"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"        model.updateFilteredInternshipList(new InternshipContainsKeywordsPredicate(Arrays.asList(splitName[0])));"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(1, model.getFilteredInternshipList().size());"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"     * Saves the first internship in {@code model}\u0027s filtered list from {@code model}\u0027s address book."},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"    public static void saveFirstInternship(Model model) throws DuplicateInternshipException, CommandException {"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToSave \u003d model.getFilteredInternshipList().get(0);"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"                .addTag(internshipToSave);"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"            model.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"        } catch (InternshipNotFoundException pnfe) {"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"Internship in filtered list must exist in model.\", pnfe);"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Returns an {@code UndoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":106,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    public static UndoCommand prepareUndoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        return undoCommand;"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * Returns a {@code RedoCommand} with the given {@code model} and {@code undoRedoStack} set."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static RedoCommand prepareRedoCommand(Model model, UndoRedoStack undoRedoStack) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, new CommandHistory(), undoRedoStack);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return redoCommand;"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":28,"-":79,"TanCiKang":14}},{"path":"src/test/java/seedu/address/logic/commands/GlossaryCommandTest.java","lines":[{"lineNumber":1,"content":"//@@author wyinkok-unused"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"/*"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.GlossaryCommand.SHOWING_GLOSSARY_MESSAGE;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.ShowGlossaryRequestEvent;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"public class GlossaryCommandTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    public void execute_glossary_success() {"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        CommandResult result \u003d new GlossaryCommand().execute();"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"        assertEquals(SHOWING_GLOSSARY_MESSAGE, result.feedbackToUser);"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof ShowGlossaryRequestEvent);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":"}"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":" */"}],"authorContributionMap":{"null":1,"wyinkok":17,"-":11}},{"path":"src/test/java/seedu/address/logic/commands/SortCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN3;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN4;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.IN5;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternshipsForSorting.getTypicalInternshipForSorting;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":" * Contains integration tests (interaction with the Model) for {@code SortCommand}."},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"public class SortCommandTest {"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipForSorting(), new UserPrefs());"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    public void equals() {"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e keywordsSet1 \u003d new ArrayList\u003c\u003e(Arrays.asList(\"Name\", \"Role\", \"Industry\"));"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e keywordsSet2 \u003d new ArrayList\u003c\u003e(Arrays.asList(\"Role\", \"Industry\", \"Region\"));"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        SortCommand firstSortCommand \u003d new SortCommand(keywordsSet1);"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"        SortCommand secondSortCommand \u003d new SortCommand(keywordsSet2);"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"        // same object -\u003e returns true"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"        assertTrue(firstSortCommand.equals(firstSortCommand));"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        // same values -\u003e return true"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        SortCommand firstSortCommandCopy \u003d new SortCommand(keywordsSet1);"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"        assertTrue(firstSortCommand.equals(firstSortCommandCopy));"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"        // different types -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstSortCommand.equals(1));"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"        // null -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstSortCommand.equals(null));"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        // different keywords -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstSortCommand.equals(secondSortCommand));"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"    public void sort() {"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":"        // Salary keyword"},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"        String expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"        SortCommand command \u003d prepareCommand(\"salary\");"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN4, IN5));"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":"        // One keyword, non-salary attribute"},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role\");"},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN4, IN5));"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":"        // One keyword with negative attribute"},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"-salary\");"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN5, IN4, IN3, IN2, IN1));"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        // Two keyword"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role industry\");"},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":"        // Two repeated keyword"},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role role\");"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"        // Two keyword, negative of each other"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role -role\");"},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"        // Two keywords, one negative"},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"region -salary\");"},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN5, IN4));"},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":"        // Two Negative"},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"-region -salary\");"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN5, IN4, IN3, IN2, IN1));"},{"lineNumber":101,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":102,"author":{"gitID":"niloc94"},"content":"        // Three keyword"},{"lineNumber":103,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":104,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role industry name\");"},{"lineNumber":105,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":106,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":107,"author":{"gitID":"niloc94"},"content":"        // Three keyword, one negative"},{"lineNumber":108,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":109,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role -industry name\");"},{"lineNumber":110,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN5, IN4));"},{"lineNumber":111,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":112,"author":{"gitID":"niloc94"},"content":"        // Three keyword, two negative"},{"lineNumber":113,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":114,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role -industry -name\");"},{"lineNumber":115,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN4, IN5));"},{"lineNumber":116,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":117,"author":{"gitID":"niloc94"},"content":"        // Three keyword, three negative"},{"lineNumber":118,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":119,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"-role -industry -name\");"},{"lineNumber":120,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN3, IN4, IN5, IN2, IN1));"},{"lineNumber":121,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":122,"author":{"gitID":"niloc94"},"content":"        // More than three keywords"},{"lineNumber":123,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":124,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role industry name salary\");"},{"lineNumber":125,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":126,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":127,"author":{"gitID":"niloc94"},"content":"        // More than three keywords, all negative"},{"lineNumber":128,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":129,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"-role -industry -name -salary\");"},{"lineNumber":130,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN3, IN4, IN5, IN2, IN1));"},{"lineNumber":131,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":132,"author":{"gitID":"niloc94"},"content":"        // More than three keywords, 1 negative"},{"lineNumber":133,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":134,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role industry name -salary\");"},{"lineNumber":135,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN5, IN4, IN3));"},{"lineNumber":136,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":137,"author":{"gitID":"niloc94"},"content":"        // More than three keywords, 2 negative"},{"lineNumber":138,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(SortCommand.SORT_SUCCESSS_MESSAGE);"},{"lineNumber":139,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"role -industry name salary\");"},{"lineNumber":140,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(IN1, IN2, IN3, IN5, IN4));"},{"lineNumber":141,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":143,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":144,"author":{"gitID":"niloc94"},"content":"     * Parses {@code userInput} into a {@code SortCommand}."},{"lineNumber":145,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"niloc94"},"content":"    private SortCommand prepareCommand(String arguments) {"},{"lineNumber":147,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(arguments.split(\"\\\\s+\")));"},{"lineNumber":148,"author":{"gitID":"niloc94"},"content":"        SortCommand command \u003d new SortCommand(keywords);"},{"lineNumber":149,"author":{"gitID":"niloc94"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":150,"author":{"gitID":"niloc94"},"content":"        return command;"},{"lineNumber":151,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":152,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":153,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"niloc94"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":155,"author":{"gitID":"niloc94"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":156,"author":{"gitID":"niloc94"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":157,"author":{"gitID":"niloc94"},"content":"     *     - the {@code JobbiBot} in model remains the same after executing the {@code command}"},{"lineNumber":158,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":159,"author":{"gitID":"niloc94"},"content":"    private void assertCommandSuccess(SortCommand command, String expectedMessage, List\u003cInternship\u003e expectedList) {"},{"lineNumber":160,"author":{"gitID":"niloc94"},"content":"        JobbiBot expectedJobbiBot \u003d new JobbiBot(model.getJobbiBot());"},{"lineNumber":161,"author":{"gitID":"niloc94"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":162,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":163,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":164,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedList, model.getFilteredInternshipList());"},{"lineNumber":165,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedJobbiBot, model.getJobbiBot());"},{"lineNumber":166,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":167,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":141,"wyinkok":2,"-":23,"TanCiKang":1}},{"path":"src/test/java/seedu/address/logic/commands/UndoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.saveFirstInternship;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UndoCommandTest {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    private final Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    private final SaveCommand saveCommandOne \u003d new SaveCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    private final SaveCommand saveCommandTwo \u003d new SaveCommand(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    public UndoCommandTest() throws UniqueTagList.DuplicateTagException {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        saveCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        saveCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public void execute() throws Exception {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"                Arrays.asList(saveCommandOne, saveCommandTwo), Collections.emptyList());"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        UndoCommand undoCommand \u003d new UndoCommand();"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        undoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"        saveCommandOne.execute();"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        saveCommandTwo.execute();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // multiple commands in undoStack"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        saveFirstInternship(expectedModel);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // single command in undoStack"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        expectedModel \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // no command in undoStack"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":17,"-":43,"TanCiKang":2}},{"path":"src/test/java/seedu/address/logic/commands/NewChatCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.NewChatCommand.MESSAGE_RESTART_ACKNOWLEDGEMENT;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.StartAppRequestEvent;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class NewChatCommandTest {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    public void execute_restart_success() {"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"        CommandResult result \u003d new NewChatCommand().execute();"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        assertEquals(MESSAGE_RESTART_ACKNOWLEDGEMENT, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof StartAppRequestEvent);"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":25}},{"path":"src/test/java/seedu/address/logic/commands/UndoableCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.saveFirstInternship;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInternshipAtIndex;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.SavedInternshipBuilder;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class UndoableCommandTest {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    private final Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final DummyCommand dummyCommand \u003d new DummyCommand(model);"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    private Model expectedModel \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void executeUndo() throws Exception {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        dummyCommand.execute();"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        saveFirstInternship(expectedModel);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        // undo() should cause the model\u0027s filtered list to show all internships"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        dummyCommand.undo();"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        expectedModel \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    public void redo() throws DuplicateInternshipException, CommandException {"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"        // redo() should cause the model\u0027s filtered list to show all internships"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        dummyCommand.redo();"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"        saveFirstInternship(expectedModel);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(expectedModel, model);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"     * Deletes the first internship in the model\u0027s filtered list."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    class DummyCommand extends UndoableCommand {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        DummyCommand(Model model) {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            this.model \u003d model;"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"            Internship internshipToSave \u003d model.getFilteredInternshipList().get(0);"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"            Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"                        .addTag(internshipToSave);"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"            try {"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"                model.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":"            } catch (InternshipNotFoundException pnfe) {"},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"                throw new AssertionError(\"Internship in filtered list must exist in model.\", pnfe);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"                throw new CommandException(\"Internship already exists in the Collection\");"},{"lineNumber":69,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            return new CommandResult(\"\");"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":16,"-":45,"TanCiKang":12}},{"path":"src/test/java/seedu/address/logic/commands/SaveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInternshipAtIndex;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.SavedInternshipBuilder;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":" * {@code SaveCommand}."},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"public class SaveCommandTest {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToSave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"                                                    .addTag(model.getFilteredInternshipList().get(0));"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        String expectedMessage \u003d String.format(SaveCommand.MESSAGE_SAVED_INTERNSHIP_SUCCESS, internshipWithSavedTag);"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(saveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(saveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP;"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        // ensures that outOfBoundIndex is still in bounds of internship book list"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJobbiBot().getInternshipList().size());"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(saveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToSave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        // save -\u003e first internship saved"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"        saveCommand.execute();"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"        undoRedoStack.push(saveCommand);"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        // undo -\u003e reverts internship list back to previous state and filtered internship list to show all internships"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"        // redo -\u003e same first internship saved again"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"                                                    .addTag(model.getFilteredInternshipList().get(0));"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size() + 1);"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"        // execution failed -\u003e saveCommand not pushed into undoRedoStack"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(saveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"     * 1. Save a {@code Internship} from a filtered list."},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"     * 2. Undo the saved command."},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously saved internship in the"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"     * 4. Redo the save command. This ensures {@code RedoCommand} saves the internship object regardless of indexing."},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameInternshipSaved() throws Exception {"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"        showInternshipAtIndex(model, INDEX_SECOND_INTERNSHIP);"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToSave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"        // save -\u003e saves second internship in unfiltered internship list / first internship in filtered internship list"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"        saveCommand.execute();"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"        undoRedoStack.push(saveCommand);"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"        // undo -\u003e reverts internship list back to previous state and filtered internship list to show all internships"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithSavedTag \u003d new SavedInternshipBuilder()"},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"                                                    .addTag(model.getFilteredInternshipList().get(1));"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"        assertNotEquals(internshipToSave, model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased()));"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"        // redo -\u003e saves same second internship in unfiltered internship list"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":146,"author":{"gitID":"wyinkok"},"content":"    public void equals() throws Exception {"},{"lineNumber":147,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveFirstCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":148,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveSecondCommand \u003d prepareCommand(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":149,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":150,"author":{"gitID":"wyinkok"},"content":"        // same object -\u003e returns true"},{"lineNumber":151,"author":{"gitID":"wyinkok"},"content":"        assertTrue(saveFirstCommand.equals(saveFirstCommand));"},{"lineNumber":152,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":153,"author":{"gitID":"wyinkok"},"content":"        // same values -\u003e returns true"},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":"        assertTrue(saveFirstCommand.equals(saveFirstCommandCopy));"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":157,"author":{"gitID":"wyinkok"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":158,"author":{"gitID":"wyinkok"},"content":"        saveFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":159,"author":{"gitID":"wyinkok"},"content":"        assertTrue(saveFirstCommand.equals(saveFirstCommandCopy)); //not sure!!"},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":161,"author":{"gitID":"wyinkok"},"content":"        // different types -\u003e returns false"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"        assertFalse(saveFirstCommand.equals(1));"},{"lineNumber":163,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":"        // null -\u003e returns false"},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":"        assertFalse(saveFirstCommand.equals(null));"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":167,"author":{"gitID":"wyinkok"},"content":"        // different internship -\u003e returns false"},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"        assertFalse(saveFirstCommand.equals(saveSecondCommand));"},{"lineNumber":169,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":170,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":171,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"     * Returns a {@code SaveCommand} with the parameter {@code index}."},{"lineNumber":173,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"    private SaveCommand prepareCommand(Index index) {"},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"        SaveCommand saveCommand \u003d new SaveCommand(index);"},{"lineNumber":176,"author":{"gitID":"wyinkok"},"content":"        saveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"        return saveCommand;"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":180}},{"path":"src/test/java/seedu/address/logic/commands/RedoCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.UndoRedoStackUtil.prepareStack;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.saveFirstInternship;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"public class RedoCommandTest {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final CommandHistory EMPTY_COMMAND_HISTORY \u003d new CommandHistory();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private static final UndoRedoStack EMPTY_STACK \u003d new UndoRedoStack();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    private final Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"    private final SaveCommand saveCommandOne \u003d new SaveCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    private final SaveCommand saveCommandTwo \u003d new SaveCommand(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    public RedoCommandTest() throws UniqueTagList.DuplicateTagException {"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() throws Exception {"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        saveCommandOne.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        saveCommandTwo.setData(model, EMPTY_COMMAND_HISTORY, EMPTY_STACK);"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        saveCommandOne.preprocessUndoableCommand();"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"        saveCommandTwo.preprocessUndoableCommand();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"    public void execute() throws DuplicateInternshipException, CommandException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        UndoRedoStack undoRedoStack \u003d prepareStack("},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"                Collections.emptyList(), Arrays.asList(saveCommandTwo, saveCommandOne));"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        RedoCommand redoCommand \u003d new RedoCommand();"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        redoCommand.setData(model, EMPTY_COMMAND_HISTORY, undoRedoStack);"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // multiple commands in redoStack"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        saveFirstInternship(expectedModel);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        // single command in redoStack"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        // no command in redoStack"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":17,"-":43,"TanCiKang":3}},{"path":"src/test/java/seedu/address/logic/commands/FindCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS3;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.DATASCIENCE;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code FindCommand}."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class FindCommandTest {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommand));"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(1));"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(null));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        // different internship -\u003e returns false"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertFalse(findFirstCommand.equals(findSecondCommand));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"    public void execute_zeroKeywords_noInternshipFound() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SEARCH_RESPONSE_NO_INTERNSHIPS, 0);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\" \");"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public void execute_singleKeywords_singleInternshipFound() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SEARCH_RESPONSE, 1);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Data\");"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DATASCIENCE));"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"    public void execute_multipleKeywords_multipleInternshipsFound() {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SEARCH_RESPONSE, 2);"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Data Consulting\");"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DATASCIENCE, BUSINESS3));"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywordsWithDuplicate_singleInternshipFound() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SEARCH_RESPONSE, 1);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Data Data\");"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DATASCIENCE));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"-"},"content":""},{"lineNumber":87,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    public void execute_multipleKeywordsWithDuplicate_multipleInternshipsFound() {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(FindCommand.MESSAGE_SEARCH_RESPONSE, 2);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        FindCommand command \u003d prepareCommand(\"Data Data Consulting Consulting\");"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DATASCIENCE, BUSINESS3));"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"-"},"content":"     * Parses {@code userInput} into a {@code FindCommand}."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    private FindCommand prepareCommand(String userInput) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        FindCommand command \u003d"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":"                new FindCommand(new InternshipContainsKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return command;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"-"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"     *     - the {@code FilteredList\u003cInternship\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"     *     - the {@code JobbiBot} in model remains the same after executing the {@code command}"},{"lineNumber":109,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cInternship\u003e expectedList) {"},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"        JobbiBot expectedJobbiBot \u003d new JobbiBot(model.getJobbiBot());"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"        assertEquals(expectedList, model.getFilteredInternshipList());"},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"        assertEquals(expectedJobbiBot, model.getJobbiBot());"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":7,"-":98,"TanCiKang":13}},{"path":"src/test/java/seedu/address/logic/commands/SelectCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInternshipAtIndex;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_INTERNSHIP;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * Contains integration tests (interaction with the Model) for {@code SelectCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class SelectCommandTest {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Model model;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public void execute_validIndexUnfilteredList_success() {"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"        Index lastInternshipIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size());"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionSuccess(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionSuccess(INDEX_THIRD_INTERNSHIP);"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionSuccess(lastInternshipIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexUnfilteredList_failure() {"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size() + 1);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public void execute_validIndexFilteredList_success() {"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionSuccess(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void execute_invalidIndexFilteredList_failure() {"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"        Index outOfBoundsIndex \u003d INDEX_SECOND_INTERNSHIP;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        // ensures that outOfBoundIndex is still in bounds of address book list"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getJobbiBot().getInternshipList().size());"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommand));"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(1));"},{"lineNumber":90,"author":{"gitID":"-"},"content":""},{"lineNumber":91,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(null));"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"        // different internship -\u003e returns false"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertFalse(selectFirstCommand.equals(selectSecondCommand));"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * is raised with the correct index."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private void assertExecutionSuccess(Index index) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"            CommandResult commandResult \u003d selectCommand.execute();"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_INTERNSHIP_SUCCESS, index.getOneBased()),"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    commandResult.feedbackToUser);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"},{"lineNumber":119,"author":{"gitID":"-"},"content":"     * is thrown with the {@code expectedMessage}."},{"lineNumber":120,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    private void assertExecutionFailure(Index index, String expectedMessage) {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d prepareCommand(index);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            selectCommand.execute();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"            fail(\"The expected CommandException was not thrown.\");"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            assertEquals(expectedMessage, ce.getMessage());"},{"lineNumber":129,"author":{"gitID":"-"},"content":"            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":131,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"-"},"content":""},{"lineNumber":133,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * Returns a {@code SelectCommand} with parameters {@code index}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private SelectCommand prepareCommand(Index index) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        SelectCommand selectCommand \u003d new SelectCommand(index);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        return selectCommand;"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":118,"TanCiKang":20}},{"path":"src/test/java/seedu/address/logic/ListElementPointerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static org.junit.Assert.fail;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"public class ListElementPointerTest {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final String FIRST_ELEMENT \u003d \"first\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    private static final String SECOND_ELEMENT \u003d \"second\";"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e pointerElements;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private ListElementPointer pointer;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        pointerElements \u003d new ArrayList\u003c\u003e();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        pointerElements.add(FIRST_ELEMENT);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        pointerElements.add(SECOND_ELEMENT);"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor_defensiveCopy_backingListUnmodified() {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"        ListElementPointer emptyPointer \u003d new ListElementPointer(Collections.emptyList());"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertEquals(emptyPointer, pointer);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public void emptyList() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertCurrentFailure();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        assertHasElementFailure(FIRST_ELEMENT);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        pointer.add(FIRST_ELEMENT);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertNextSuccess(FIRST_ELEMENT);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        assertHasElementSuccess(FIRST_ELEMENT);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    public void singleElementList() {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        list.add(FIRST_ELEMENT);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(list);"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        assertHasElementSuccess(FIRST_ELEMENT);"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        assertHasElementFailure(SECOND_ELEMENT);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(FIRST_ELEMENT);"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"        pointer.add(SECOND_ELEMENT);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        assertNextSuccess(SECOND_ELEMENT);"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        assertHasElementSuccess(SECOND_ELEMENT);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public void multipleElementsList() {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        pointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        String thirdElement \u003d \"third\";"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        pointer.add(thirdElement);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        assertCurrentSuccess(SECOND_ELEMENT);"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        // {@code pointer#hasNext()} is unaffected by the position of the pointer"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        assertHasElementSuccess(thirdElement);"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertNextSuccess(thirdElement);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        assertNextFailure();"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"        assertHasElementSuccess(thirdElement);"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(SECOND_ELEMENT);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        assertPreviousSuccess(FIRST_ELEMENT);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        assertPreviousFailure();"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointer));"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        assertTrue(firstPointer.equals(firstPointerCopy));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(1));"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(null));"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        // different elements -\u003e returns false"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(differentElementPointer));"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // different index -\u003e returns false"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        firstPointerCopy.previous();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        assertFalse(firstPointer.equals(firstPointerCopy));"},{"lineNumber":114,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"     * Asserts that {@code pointer#hasElement()} returns true"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"    private void assertHasElementSuccess(String element) {"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        assertTrue(pointer.hasElement(element));"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"     * Asserts that {@code pointer#hasElement()} returns false"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"    private void assertHasElementFailure(String element) {"},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"        assertFalse(pointer.hasElement(element));"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns true and the return value"},{"lineNumber":134,"author":{"gitID":"-"},"content":"     * of {@code pointer#next()} equals to {@code element}."},{"lineNumber":135,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":136,"author":{"gitID":"-"},"content":"    private void assertNextSuccess(String element) {"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasNext());"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.next());"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":142,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"},{"lineNumber":143,"author":{"gitID":"-"},"content":"     * of {@code pointer#previous()} equals to {@code element}."},{"lineNumber":144,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    private void assertPreviousSuccess(String element) {"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasPrevious());"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.previous());"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"-"},"content":""},{"lineNumber":150,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"},{"lineNumber":152,"author":{"gitID":"-"},"content":"     * of {@code pointer#current()} equals to {@code element}."},{"lineNumber":153,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    private void assertCurrentSuccess(String element) {"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        assertTrue(pointer.hasCurrent());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        assertEquals(element, pointer.current());"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasNext()} returns false and the following"},{"lineNumber":161,"author":{"gitID":"-"},"content":"     * {@code pointer#next()} call throws {@code NoSuchElementException}."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    private void assertNextFailure() {"},{"lineNumber":164,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasNext());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            pointer.next();"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":169,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":170,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":174,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasPrevious()} returns false and the following"},{"lineNumber":175,"author":{"gitID":"-"},"content":"     * {@code pointer#previous()} call throws {@code NoSuchElementException}."},{"lineNumber":176,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    private void assertPreviousFailure() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasPrevious());"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":180,"author":{"gitID":"-"},"content":"            pointer.previous();"},{"lineNumber":181,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":182,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":183,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":184,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":186,"author":{"gitID":"-"},"content":""},{"lineNumber":187,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"-"},"content":"     * Asserts that {@code pointer#hasCurrent()} returns false and the following"},{"lineNumber":189,"author":{"gitID":"-"},"content":"     * {@code pointer#current()} call throws {@code NoSuchElementException}."},{"lineNumber":190,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"-"},"content":"    private void assertCurrentFailure() {"},{"lineNumber":192,"author":{"gitID":"-"},"content":"        assertFalse(pointer.hasCurrent());"},{"lineNumber":193,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            pointer.current();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            fail(\"The expected NoSuchElementException was not thrown\");"},{"lineNumber":196,"author":{"gitID":"-"},"content":"        } catch (NoSuchElementException e) {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"            // expected exception thrown"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":24,"-":176}},{"path":"src/test/java/seedu/address/logic/commands/StartCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.StartCommand.MESSAGE_START_ACKNOWLEDGEMENT;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import org.junit.Rule;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.StartAppRequestEvent;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class StartCommandTest {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    @Rule"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    public void execute_start_success() {"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"        CommandResult result \u003d new StartCommand().execute();"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        assertEquals(MESSAGE_START_ACKNOWLEDGEMENT, result.feedbackToUser);"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof StartAppRequestEvent);"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getSize() \u003d\u003d 1);"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":25}},{"path":"src/test/java/seedu/address/logic/commands/FilterCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS2;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS3;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.BUSINESS4;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.DATASCIENCE;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsAllKeywordsPredicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":" * Contains integration tests (interaction with the Model) for {@code FilterCommand}."},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"public class FilterCommandTest {"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipBook(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"    public void equals() {"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate firstPredicate \u003d"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(Collections.singletonList(\"first\"));"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate secondPredicate \u003d"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(Collections.singletonList(\"second\"));"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"        FilterCommand filterFirstCommand \u003d new FilterCommand(firstPredicate);"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"        FilterCommand filterSecondCommand \u003d new FilterCommand(secondPredicate);"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        // same object -\u003e returns true"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommand));"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"        // same values -\u003e return true"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"        FilterCommand filterFirstCommandCopy \u003d new FilterCommand(firstPredicate);"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"        assertTrue(filterFirstCommand.equals(filterFirstCommandCopy));"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"        // different types -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        assertFalse(filterFirstCommand.equals(1));"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        // null -\u003e returns false"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        assertFalse(filterFirstCommand.equals(null));"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":"        // different person -\u003e returns false"},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        assertFalse(filterFirstCommand.equals(filterSecondCommand));"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"    public void execute_command() {"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        // execute_singleKeywords_zeroInternshipsFound"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":"        String expectedMessage \u003d String.format(FilterCommand.MESSAGE_FILTER_RESPONSE_NO_INTERNSHIP);"},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":"        FilterCommand command \u003d prepareCommand(\"TryFindingThis\");"},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"        //execute_multipleKeywords_zeroInternshipsFound"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(FilterCommand.MESSAGE_FILTER_RESPONSE_NO_INTERNSHIP);"},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"Engineering Business\");"},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        //execute_singleKeyword_multipleInternshipsFound()"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(FilterCommand.MESSAGE_FILTER_RESPONSE);"},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"Business\");"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BUSINESS1, BUSINESS2, BUSINESS3, BUSINESS4));"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"        // execute_multipleKeywords_singleInternshipsFound()"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(FilterCommand.MESSAGE_FILTER_RESPONSE);"},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"Data Scientist\");"},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(DATASCIENCE));"},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"        // execute_multipleKeywords_multipleInternshipsFound()"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":"        expectedMessage \u003d String.format(FilterCommand.MESSAGE_FILTER_RESPONSE);"},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"        command \u003d prepareCommand(\"Audit Intern\");"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"        assertCommandSuccess(command, expectedMessage, Arrays.asList(BUSINESS2, BUSINESS4));"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"     * Parses {@code userInput} into a {@code FilterCommand}."},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":"    private FilterCommand prepareCommand(String userInput) {"},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":"        FilterCommand command \u003d"},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":"                new FilterCommand("},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":"                        new InternshipContainsAllKeywordsPredicate(Arrays.asList(userInput.split(\"\\\\s+\"))));"},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":"        command.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"        return command;"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":102,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"niloc94"},"content":"     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"},{"lineNumber":104,"author":{"gitID":"niloc94"},"content":"     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"},{"lineNumber":105,"author":{"gitID":"niloc94"},"content":"     *     - the {@code FilteredList\u003cPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"},{"lineNumber":106,"author":{"gitID":"niloc94"},"content":"     *     - the {@code JobbiBot} in model remains the same after executing the {@code command}"},{"lineNumber":107,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":108,"author":{"gitID":"niloc94"},"content":"    private void assertCommandSuccess(FilterCommand command, String expectedMessage, List\u003cInternship\u003e expectedList) {"},{"lineNumber":109,"author":{"gitID":"niloc94"},"content":"        JobbiBot expectedJobbiBot \u003d new JobbiBot(model.getJobbiBot());"},{"lineNumber":110,"author":{"gitID":"niloc94"},"content":"        CommandResult commandResult \u003d command.execute();"},{"lineNumber":111,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":112,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedMessage, commandResult.feedbackToUser);"},{"lineNumber":113,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedList, model.getFilteredInternshipList());"},{"lineNumber":114,"author":{"gitID":"niloc94"},"content":"        assertEquals(expectedJobbiBot, model.getJobbiBot());"},{"lineNumber":115,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":89,"wyinkok":2,"-":23,"TanCiKang":2}},{"path":"src/test/java/seedu/address/storage/StorageManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static junit.framework.TestCase.assertNotNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Before;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.ui.testutil.EventsCollectorRule;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class StorageManagerTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private StorageManager storageManager;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @Before"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    public void setUp() {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        XmlJobbiBotStorage jobbiBotStorage \u003d new XmlJobbiBotStorage(getTempFilePath(\"ab\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(getTempFilePath(\"prefs\"));"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        storageManager \u003d new StorageManager(jobbiBotStorage, userPrefsStorage);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private String getTempFilePath(String fileName) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        return testFolder.getRoot().getPath() + fileName;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public void prefsReadSave() throws Exception {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":46,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":47,"author":{"gitID":"-"},"content":"         * {@link JsonUserPrefsStorage} class."},{"lineNumber":48,"author":{"gitID":"-"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link JsonUserPrefsStorageTest} class."},{"lineNumber":49,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        original.setGuiSettings(300, 600, 4, 6);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        storageManager.saveUserPrefs(original);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        UserPrefs retrieved \u003d storageManager.readUserPrefs().get();"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertEquals(original, retrieved);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    public void jobbiBotReadSave() throws Exception {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * Note: This is an integration test that verifies the StorageManager is properly wired to the"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"         * {@link XmlJobbiBotStorage} class."},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"         * More extensive testing of UserPref saving/reading is done in {@link XmlJobbiBotStorageTest} class."},{"lineNumber":63,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        JobbiBot original \u003d getTypicalInternshipBook();"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        storageManager.saveInternshipBook(original);"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        ReadOnlyJobbiBot retrieved \u003d storageManager.readInternshipBook().get();"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        assertEquals(original, new JobbiBot(retrieved));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"    public void getJobbiBotFilePath() {"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"        assertNotNull(storageManager.getJobbiBotFilePath());"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"    public void handleJobbiBotChangedEvent_exceptionThrown_eventRaised() {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        // Create a StorageManager while injecting a stub that  throws an exception when the save method is called"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        Storage storage \u003d new StorageManager(new XmlJobbiBotStorageExceptionThrowingStub(\"dummy\"),"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                                             new JsonUserPrefsStorage(\"dummy\"));"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        storage.handleInternshipBookChangedEvent(new JobbiBotChangedEvent(new JobbiBot()));"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        assertTrue(eventsCollectorRule.eventsCollector.getMostRecent() instanceof DataSavingExceptionEvent);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * A Stub class to throw an exception when the save method is called"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"    class XmlJobbiBotStorageExceptionThrowingStub extends XmlJobbiBotStorage {"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        public XmlJobbiBotStorageExceptionThrowingStub(String filePath) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            super(filePath);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"        public void saveInternshipBook(ReadOnlyJobbiBot internshipBook, String filePath) throws IOException {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            throw new IOException(\"dummy exception\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":21,"-":80}},{"path":"src/test/java/seedu/address/storage/JsonUserPrefsStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class JsonUserPrefsStorageTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/data/JsonUserPrefsStorageTest/\");"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void readUserPrefs_nullFilePath_throwsNullPointerException() throws DataConversionException {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        readUserPrefs(null);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Optional\u003cUserPrefs\u003e readUserPrefs(String userPrefsFileInTestDataFolder) throws DataConversionException {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d addToTestDataPathIfNotNull(userPrefsFileInTestDataFolder);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return new JsonUserPrefsStorage(prefsFilePath).readUserPrefs(prefsFilePath);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void readUserPrefs_missingFile_emptyResult() throws DataConversionException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(readUserPrefs(\"NonExistentFile.json\").isPresent());"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void readUserPrefs_notJsonFormat_exceptionThrown() throws DataConversionException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        readUserPrefs(\"NotJsonFormatUserPrefs.json\");"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":51,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":52,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String userPrefsFileInTestDataFolder) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return userPrefsFileInTestDataFolder !\u003d null"},{"lineNumber":57,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + userPrefsFileInTestDataFolder"},{"lineNumber":58,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public void readUserPrefs_fileInOrder_successfullyRead() throws DataConversionException {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"TypicalUserPref.json\").get();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    public void readUserPrefs_valuesMissingFromFile_defaultValuesUsed() throws DataConversionException {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"EmptyUserPrefs.json\").get();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        assertEquals(new UserPrefs(), actual);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    public void readUserPrefs_extraValuesInFile_extraValuesIgnored() throws DataConversionException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        UserPrefs expected \u003d getTypicalUserPrefs();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        UserPrefs actual \u003d readUserPrefs(\"ExtraValuesUserPref.json\").get();"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"-"},"content":"        assertEquals(expected, actual);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    private UserPrefs getTypicalUserPrefs() {"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        userPrefs.setGuiSettings(1000, 500, 300, 100);"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        userPrefs.setInternshipBookFilePath(\"data/InternshipBook.xml\");"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        userPrefs.setInternshipBookName(\"MyInternshipBook\");"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        return userPrefs;"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":89,"author":{"gitID":"-"},"content":""},{"lineNumber":90,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":91,"author":{"gitID":"-"},"content":"    public void savePrefs_nullPrefs_throwsNullPointerException() {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        saveUserPrefs(null, \"SomeFile.json\");"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_nullFilePath_throwsNullPointerException() {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"        saveUserPrefs(new UserPrefs(), null);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * Saves {@code userPrefs} at the specified {@code prefsFileInTestDataFolder} filepath."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void saveUserPrefs(UserPrefs userPrefs, String prefsFileInTestDataFolder) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            new JsonUserPrefsStorage(addToTestDataPathIfNotNull(prefsFileInTestDataFolder))"},{"lineNumber":108,"author":{"gitID":"-"},"content":"                    .saveUserPrefs(userPrefs);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file\", ioe);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    public void saveUserPrefs_allInOrder_success() throws DataConversionException, IOException {"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"        UserPrefs original \u003d new UserPrefs();"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        original.setGuiSettings(1200, 200, 0, 2);"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        String pefsFilePath \u003d testFolder.getRoot() + File.separator + \"TempPrefs.json\";"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        JsonUserPrefsStorage jsonUserPrefsStorage \u003d new JsonUserPrefsStorage(pefsFilePath);"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        //Try writing when the file doesn\u0027t exist"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        UserPrefs readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        //Try saving when the file exists"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        original.setGuiSettings(5, 5, 5, 5);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        jsonUserPrefsStorage.saveUserPrefs(original);"},{"lineNumber":131,"author":{"gitID":"-"},"content":"        readBack \u003d jsonUserPrefsStorage.readUserPrefs().get();"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        assertEquals(original, readBack);"},{"lineNumber":133,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":133}},{"path":"src/test/java/seedu/address/storage/XmlJobbiBotStorageTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.CONSULTING;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.HEALTHCARE;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.TemporaryFolder;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"public class XmlJobbiBotStorageTest {"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    private static final String TEST_DATA_FOLDER \u003d FileUtil.getPath(\"./src/test/\""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"            + \"data/XmlJobbiBotStorageTest/\");"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public TemporaryFolder testFolder \u003d new TemporaryFolder();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    public void readInternshipBook_nullFilePath_throwsNullPointerException() throws Exception {"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        readInternshipBook(null);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"    private java.util.Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook(String filePath) throws Exception {"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        return new XmlJobbiBotStorage(filePath).readInternshipBook(addToTestDataPathIfNotNull(filePath));"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private String addToTestDataPathIfNotNull(String prefsFileInTestDataFolder) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return prefsFileInTestDataFolder !\u003d null"},{"lineNumber":44,"author":{"gitID":"-"},"content":"                ? TEST_DATA_FOLDER + prefsFileInTestDataFolder"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                : null;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public void read_missingFile_emptyResult() throws Exception {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        assertFalse(readInternshipBook(\"NonExistentFile.xml\").isPresent());"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public void read_notXmlFormat_exceptionThrown() throws Exception {"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        readInternshipBook(\"NotXmlFormatJobbiBot.xml\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        /* IMPORTANT: Any code below an exception-throwing line (like the one above) will be ignored."},{"lineNumber":60,"author":{"gitID":"-"},"content":"         * That means you should not have more than one exception test in one method"},{"lineNumber":61,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"    public void readInternshipBook_invalidInternshipInternshipBook_throwDataConversionException() throws Exception {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        readInternshipBook(\"invalidInternshipJobbiBot.xml\");"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"    public void readInternshipBook_invalidAndValidInternshipInternshipBook_throwDataConversionException()"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"            throws Exception {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        thrown.expect(DataConversionException.class);"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        readInternshipBook(\"invalidAndValidInternshipJobbiBot.xml\");"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"    public void readAndsaveInternshipBook_allInOrder_success() throws Exception {"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        String filePath \u003d testFolder.getRoot().getPath() + \"TempInternshipBook.xml\";"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        JobbiBot original \u003d getTypicalInternshipBook();"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        XmlJobbiBotStorage xmlJobbiBotStorage \u003d new XmlJobbiBotStorage(filePath);"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        //Save in new file and read back"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"        xmlJobbiBotStorage.saveInternshipBook(original, filePath);"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        ReadOnlyJobbiBot readBack \u003d xmlJobbiBotStorage.readInternshipBook(filePath).get();"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        assertEquals(original, new JobbiBot(readBack));"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        //Modify data, overwrite exiting file, and read back"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        original.addInternship(HEALTHCARE);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        original.removeInternship(ENGINEERING1);"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        xmlJobbiBotStorage.saveInternshipBook(original, filePath);"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        readBack \u003d xmlJobbiBotStorage.readInternshipBook(filePath).get();"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"        assertEquals(original, new JobbiBot(readBack));"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"        //Save and read without specifying file path"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        original.addInternship(CONSULTING);"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        xmlJobbiBotStorage.saveInternshipBook(original); //file path not specified"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"        readBack \u003d xmlJobbiBotStorage.readInternshipBook().get(); //file path not specified"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"        assertEquals(original, new JobbiBot(readBack));"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":102,"author":{"gitID":"-"},"content":""},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook_nullInternshipBook_throwsNullPointerException() {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"        saveInternshipBook(null, \"SomeFile.xml\");"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"     * Saves {@code InternshipBook} at the specified {@code filePath}."},{"lineNumber":111,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"    private void saveInternshipBook(ReadOnlyJobbiBot internshipBook, String filePath) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"            new XmlJobbiBotStorage(filePath).saveInternshipBook(internshipBook, addToTestDataPathIfNotNull(filePath));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"        } catch (IOException ioe) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"There should not be an error writing to the file.\", ioe);"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook_nullFilePath_throwsNullPointerException() throws IOException {"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        saveInternshipBook(new JobbiBot(), null);"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":""},{"lineNumber":127,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":37,"-":90}},{"path":"src/test/java/seedu/address/storage/XmlAdaptedInternshipTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.storage.XmlAdaptedInternship.MISSING_FIELD_MESSAGE_FORMAT;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING2;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Industry;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Region;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Role;"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"public class XmlAdaptedInternshipTest {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String INVALID_NAME \u003d \"R@chel\";"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_SALARY \u003d \"+651234\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String INVALID_ADDRESS \u003d \" \";"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String INVALID_EMAIL \u003d \"example.com\";"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_INDUSTRY \u003d \" \";"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_REGION \u003d \" Geylang\";"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_ROLE \u003d \" \";"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"    private static final String INVALID_TAG \u003d \" \";"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static final String VALID_NAME \u003d ENGINEERING2.getName().toString();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private static final String VALID_SALARY \u003d ENGINEERING2.getSalary().toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final String VALID_EMAIL \u003d ENGINEERING2.getEmail().toString();"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private static final String VALID_ADDRESS \u003d ENGINEERING2.getAddress().toString();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String VALID_INDUSTRY \u003d ENGINEERING2.getIndustry().toString();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private static final String VALID_REGION \u003d ENGINEERING2.getRegion().toString();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    private static final String VALID_ROLE \u003d ENGINEERING2.getRole().toString();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private static final List\u003cXmlAdaptedTag\u003e VALID_TAGS \u003d ENGINEERING2.getTags().stream()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            .map(XmlAdaptedTag::new)"},{"lineNumber":42,"author":{"gitID":"-"},"content":"            .collect(Collectors.toList());"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_validInternshipDetails_returnsInternship() throws Exception {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        XmlAdaptedInternship internship \u003d new XmlAdaptedInternship(ENGINEERING2);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertEquals(ENGINEERING2, internship.toModelType());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public void toModelType_invalidName_throwsIllegalValueException() {"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(INVALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Name.MESSAGE_NAME_CONSTRAINTS;"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    public void toModelType_nullName_throwsIllegalValueException() {"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(null, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName());"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_invalidSalary_throwsIllegalValueException() {"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, INVALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d Salary.MESSAGE_SALARY_CONSTRAINTS;"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_nullSalary_throwsIllegalValueException() {"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, null, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName());"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    public void toModelType_invalidEmail_throwsIllegalValueException() {"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, INVALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Email.MESSAGE_EMAIL_CONSTRAINTS;"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"-"},"content":""},{"lineNumber":95,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    public void toModelType_nullEmail_throwsIllegalValueException() {"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":98,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, null, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName());"},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    public void toModelType_invalidAddress_throwsIllegalValueException() {"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, INVALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d Address.MESSAGE_ADDRESS_CONSTRAINTS;"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":112,"author":{"gitID":"-"},"content":""},{"lineNumber":113,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_nullAddress_throwsIllegalValueException() {"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, null, VALID_INDUSTRY,"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName());"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":""},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_invalidIndustry_throwsIllegalValueException() {"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, INVALID_INDUSTRY,"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d Industry.MESSAGE_INDUSTRY_CONSTRAINTS;"},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_nullIndustry_throwsIllegalValueException() {"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, null,"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Industry.class.getSimpleName());"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"-"},"content":""},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_invalidLocation_throwsIllegalValueException() {"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"                        INVALID_REGION, VALID_ROLE, VALID_TAGS);"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d Region.MESSAGE_REGION_CONSTRAINTS;"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":147,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"-"},"content":""},{"lineNumber":149,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_nullLocation_throwsIllegalValueException() {"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"                        null, VALID_ROLE, VALID_TAGS);"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Region.class.getSimpleName());"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":156,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":157,"author":{"gitID":"-"},"content":""},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_invalidRole_throwsIllegalValueException() {"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":162,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, INVALID_ROLE, VALID_TAGS);"},{"lineNumber":163,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d Role.MESSAGE_ROLE_CONSTRAINTS;"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":168,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_nullRole_throwsIllegalValueException() {"},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":170,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":171,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, null, VALID_TAGS);"},{"lineNumber":172,"author":{"gitID":"TanCiKang"},"content":"        String expectedMessage \u003d String.format(MISSING_FIELD_MESSAGE_FORMAT, Role.class.getSimpleName());"},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, expectedMessage, internship::toModelType);"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":177,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTags_throwsIllegalValueException() {"},{"lineNumber":178,"author":{"gitID":"-"},"content":"        List\u003cXmlAdaptedTag\u003e invalidTags \u003d new ArrayList\u003c\u003e(VALID_TAGS);"},{"lineNumber":179,"author":{"gitID":"-"},"content":"        invalidTags.add(new XmlAdaptedTag(INVALID_TAG));"},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship internship \u003d"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"                new XmlAdaptedInternship(VALID_NAME, VALID_SALARY, VALID_EMAIL, VALID_ADDRESS, VALID_INDUSTRY,"},{"lineNumber":182,"author":{"gitID":"TanCiKang"},"content":"                        VALID_REGION, VALID_ROLE, invalidTags);"},{"lineNumber":183,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalValueException.class, internship::toModelType);"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"-"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":91,"TanCiKang":95}},{"path":"src/test/java/seedu/address/model/internship/NameTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class NameTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Name(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidName_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidName \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Name(invalidName));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidName() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null name"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Name.isValidName(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"^\")); // only non-alphanumeric characters"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertFalse(Name.isValidName(\"peter*\")); // contains non-alphanumeric characters"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // valid name"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter jack\")); // alphabets only"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"12345\")); // numbers only"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"peter the 2nd\")); // alphanumeric characters"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"Capital Tan\")); // with capital letters"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(Name.isValidName(\"David Roger Jackson Ray Jr 2nd\")); // long names"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":1,"-":40}},{"path":"src/test/java/seedu/address/model/ModelManagerTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.DATASCIENCE;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING2;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.JobbiBotBuilder;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"public class ModelManagerTest {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"    public void getFilteredInternshipList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        ModelManager modelManager \u003d new ModelManager();"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"        modelManager.getFilteredInternshipList().remove(0);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        JobbiBot jobbiBot \u003d new JobbiBotBuilder().withInternship(ENGINEERING1).withInternship(ENGINEERING2).build();"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        JobbiBot differentJobbiBot \u003d new JobbiBot();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        UserPrefs userPrefs \u003d new UserPrefs();"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        ModelManager modelManager \u003d new ModelManager(jobbiBot, userPrefs);"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        ModelManager modelManagerCopy \u003d new ModelManager(jobbiBot, userPrefs);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManagerCopy));"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertTrue(modelManager.equals(modelManager));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(null));"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(modelManager.equals(5));"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        // different jobbiBot -\u003e returns false"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        assertFalse(modelManager.equals(new ModelManager(differentJobbiBot, userPrefs)));"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        // different filteredList -\u003e returns false"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        String[] keywords \u003d DATASCIENCE.getRole().value.split(\"\\\\s+\");"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        modelManager.updateFilteredInternshipList(new InternshipContainsKeywordsPredicate(Arrays.asList(keywords)));"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        assertFalse(modelManager.equals(new ModelManager(jobbiBot, userPrefs)));"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"        // resets modelManager to initial state for upcoming tests"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        modelManager.updateFilteredInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"        // different userPrefs -\u003e returns true"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefs differentUserPrefs \u003d new UserPrefs();"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        differentUserPrefs.setInternshipBookName(\"differentName\");"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        assertTrue(modelManager.equals(new ModelManager(jobbiBot, differentUserPrefs)));"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":9,"-":51,"TanCiKang":6}},{"path":"src/test/java/seedu/address/model/UniqueInternshipListTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.UniqueInternshipList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"public class UniqueInternshipListTest {"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public void asObservableList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"        UniqueInternshipList uniqueInternshipList \u003d new UniqueInternshipList();"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"        uniqueInternshipList.asObservableList().remove(0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":15,"TanCiKang":4}},{"path":"src/test/java/seedu/address/model/internship/EmailTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class EmailTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Email(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidEmail_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidEmail \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Email(invalidEmail));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidEmail() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null email"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Email.isValidEmail(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // blank email"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // missing parts"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // invalid parts"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam_ple.com\")); // underscore in domain name"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\" peterjack@example.com\")); // leading space"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com \")); // trailing space"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@.example.com\")); // domain name starts with a period"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com.\")); // domain name ends with a period"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@-example.com\")); // domain name starts with a hyphen"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        assertFalse(Email.isValidEmail(\"peterjack@example.com-\")); // domain name ends with a hyphen"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"        // valid email"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a@bc\"));  // minimal"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"!#$%\u0026\u0027*+/\u003d?`{|}~^.-@example.org\")); // special characters local part"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"a1+be!@example1.com\")); // mixture of alphanumeric and special characters"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"peter_jack@very-very-very-long-example.com\"));   // long domain name"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":1,"-":61}},{"path":"src/test/java/seedu/address/model/internship/InternshipContainsKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.InternshipBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"public class InternshipContainsKeywordsPredicateTest {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public void equals() {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate firstPredicate \u003d"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate secondPredicate \u003d"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        // same object -\u003e returns true"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"        // same values -\u003e returns true"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"        // different types -\u003e returns false"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // null -\u003e returns false"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"        // different internship -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public void test_nameContainsKeywords_returnsTrue() {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        // One keyword"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // Multiple keywords"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Bob\", \"Carol\"));"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withName(\"Alice Carol\").build()));"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        // Mixed-case keywords"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public void test_nameDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        // Zero keywords"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withName(\"Alice\").build()));"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        // Non-matching keyword"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withName(\"Alice Bob\").build()));"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"    public void test_salaryContainsKeywords_returnsTrue() {"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        // One keyword"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.singletonList(\"1000\"));"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withSalary(\"1000\").build()));"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"1000\", \"2000\"));"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withSalary(\"1000\").build()));"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"    public void test_salaryDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"        // Zero keywords"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withSalary(\"1000\").build()));"},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"        // Non-matching keyword"},{"lineNumber":96,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"1000\"));"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withSalary(\"2000\").build()));"},{"lineNumber":98,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":100,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"    public void test_addressContainsKeywords_returnsTrue() {"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"        // One keyword"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.singletonList(\"Geylang\"));"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        // Multiple keywords"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Geylang\", \"#06-04\"));"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"        // Only one matching keyword"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Geylang\", \"Serangoon\"));"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"        // Mixed-case keyword"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"GeYlAnG\"));"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"    public void test_addressDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"        // Zero keywords"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"        // Non-matching keyword"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"Serangoon\"));"},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withAddress(\"Blk 30 Geylang Street 29, #06-40\").build()));"},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"    public void test_emailDoesNotContainKeywords_returnsFalse() {"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"        // Zero keywords"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"        InternshipContainsKeywordsPredicate predicate \u003d"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"                new InternshipContainsKeywordsPredicate(Collections.emptyList());"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withEmail(\"charlotte@example.com\").build()));"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"        // Non-matching keyword"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"        predicate \u003d new InternshipContainsKeywordsPredicate(Arrays.asList(\"bereniceyu@example.com\"));"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(predicate.test(new InternshipBuilder().withEmail(\"charlotte@example.com\").build()));"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":89,"-":55}},{"path":"src/test/java/seedu/address/logic/commands/UnsaveCommandTest.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertNotEquals;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareRedoCommand;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.prepareUndoCommand;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.CommandTestUtil.showInternshipAtIndex;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_INTERNSHIP;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_INTERNSHIP;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternshipsWithSavedTag.getTypicalInternshipBookWithSavedTag;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import org.junit.Test;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.Model;"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"import seedu.address.testutil.UnsavedInternshipBuilder;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":" * Contains integration tests (interaction with the Model, UndoCommand and RedoCommand) and unit tests for"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":" * {@code UnsaveCommand}."},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"public class UnsaveCommandTest {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private Model model \u003d new ModelManager(getTypicalInternshipBookWithSavedTag(), new UserPrefs());"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public void execute_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToUnsave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithoutSavedTag \u003d new UnsavedInternshipBuilder()"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"                .removeTag(model.getFilteredInternshipList().get(0));"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        String expectedMessage \u003d String.format(UnsaveCommand.MESSAGE_UNSAVED_INTERNSHIP_SUCCESS,"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"                                                internshipWithoutSavedTag);"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        ModelManager expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToUnsave, internshipWithoutSavedTag);"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(unsaveCommand, model, expectedMessage, expectedModel);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"    public void execute_invalidIndexUnfilteredList_throwsCommandException() {"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size() + 1);"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(unsaveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    public void execute_invalidIndexFilteredList_throwsCommandException() {"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"        showInternshipAtIndex(model, INDEX_FIRST_INTERNSHIP);"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d INDEX_SECOND_INTERNSHIP;"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        // ensures that outOfBoundIndex is still in bounds of internship book list"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getJobbiBot().getInternshipList().size());"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(unsaveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_validIndexUnfilteredList_success() throws Exception {"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToUnsave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        // save -\u003e first internship saved"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        unsaveCommand.execute();"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"        undoRedoStack.push(unsaveCommand);"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"        // undo -\u003e reverts internship book list back to previous state and filtered internship list"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        // to show all internships"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"        // redo -\u003e same first internship saved again"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithoutSavedTag \u003d new UnsavedInternshipBuilder()"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"                .removeTag(model.getFilteredInternshipList().get(0));"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToUnsave, internshipWithoutSavedTag);"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_invalidIndexUnfilteredList_failure() {"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredInternshipList().size() + 1);"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(outOfBoundIndex);"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"        // execution failed -\u003e unsaveCommand not pushed into undoRedoStack"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(unsaveCommand, model, Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"        // no commands in undoRedoStack -\u003e undoCommand and redoCommand fail"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(undoCommand, model, UndoCommand.MESSAGE_FAILURE);"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"        assertCommandFailure(redoCommand, model, RedoCommand.MESSAGE_FAILURE);"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"     * 1. Remove a saved {@code Internship} from a filtered list."},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"     * 2. Undo the unsave command."},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"     * 3. The unfiltered list should be shown now. Verify that the index of the previously unsaved internship in the"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"     * unfiltered list is different from the index at the filtered list."},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"     * 4. Redo the unsave command. This ensures {@code RedoCommand} removes the internship object"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"     * regardless of indexing."},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"    public void executeUndoRedo_validIndexFilteredList_sameInternshipUnsaved() throws Exception {"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        UndoRedoStack undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"        UndoCommand undoCommand \u003d prepareUndoCommand(model, undoRedoStack);"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        RedoCommand redoCommand \u003d prepareRedoCommand(model, undoRedoStack);"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"        Model expectedModel \u003d new ModelManager(model.getJobbiBot(), new UserPrefs());"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"        showInternshipAtIndex(model, INDEX_SECOND_INTERNSHIP);"},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"        Internship internshipToUnsave \u003d model.getFilteredInternshipList().get(INDEX_FIRST_INTERNSHIP.getZeroBased());"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"        // unsave -\u003e removes second internship in unfiltered internship list"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"        // or first internship in filtered internship list"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"        unsaveCommand.execute();"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"        undoRedoStack.push(unsaveCommand);"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":"        // undo -\u003e reverts internship database back to previous state and"},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":"        // filtered internship list to show all internships"},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(undoCommand, model, UndoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"        Internship internshipWithoutSavedTag \u003d new UnsavedInternshipBuilder()"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"                .removeTag(model.getFilteredInternshipList().get(1));"},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"        expectedModel.updateInternship(internshipToUnsave, internshipWithoutSavedTag);"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"        assertNotEquals(internshipToUnsave, model.getFilteredInternshipList()"},{"lineNumber":143,"author":{"gitID":"wyinkok"},"content":"                .get(INDEX_FIRST_INTERNSHIP.getZeroBased()));"},{"lineNumber":144,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":"        // redo -\u003e saves same second internship in unfiltered internship list"},{"lineNumber":146,"author":{"gitID":"wyinkok"},"content":"        assertCommandSuccess(redoCommand, model, RedoCommand.MESSAGE_SUCCESS, expectedModel);"},{"lineNumber":147,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":148,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":149,"author":{"gitID":"wyinkok"},"content":"    @Test"},{"lineNumber":150,"author":{"gitID":"wyinkok"},"content":"    public void equals() throws Exception {"},{"lineNumber":151,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveFirstCommand \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":152,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveSecondCommand \u003d prepareCommand(INDEX_SECOND_INTERNSHIP);"},{"lineNumber":153,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"        // same object -\u003e returns true"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":"        assertTrue(unsaveFirstCommand.equals(unsaveFirstCommand));"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":157,"author":{"gitID":"wyinkok"},"content":"        // same values -\u003e returns true"},{"lineNumber":158,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveFirstCommandCopy \u003d prepareCommand(INDEX_FIRST_INTERNSHIP);"},{"lineNumber":159,"author":{"gitID":"wyinkok"},"content":"        assertTrue(unsaveFirstCommand.equals(unsaveFirstCommandCopy));"},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":161,"author":{"gitID":"wyinkok"},"content":"        // one command preprocessed when previously equal -\u003e returns false"},{"lineNumber":162,"author":{"gitID":"wyinkok"},"content":"        unsaveFirstCommandCopy.preprocessUndoableCommand();"},{"lineNumber":163,"author":{"gitID":"wyinkok"},"content":"        assertTrue(unsaveFirstCommand.equals(unsaveFirstCommandCopy));"},{"lineNumber":164,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":165,"author":{"gitID":"wyinkok"},"content":"        // different types -\u003e returns false"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"        assertFalse(unsaveFirstCommand.equals(1));"},{"lineNumber":167,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"        // null -\u003e returns false"},{"lineNumber":169,"author":{"gitID":"wyinkok"},"content":"        assertFalse(unsaveFirstCommand.equals(null));"},{"lineNumber":170,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":171,"author":{"gitID":"wyinkok"},"content":"        // different internship -\u003e returns false"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"        assertFalse(unsaveFirstCommand.equals(unsaveSecondCommand));"},{"lineNumber":173,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":176,"author":{"gitID":"wyinkok"},"content":"     * Returns a {@code UnsaveCommand} with the parameter {@code index}."},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"    private UnsaveCommand prepareCommand(Index index) {"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"        UnsaveCommand unsaveCommand \u003d new UnsaveCommand(index);"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"        unsaveCommand.setData(model, new CommandHistory(), new UndoRedoStack());"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":"        return unsaveCommand;"},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":183}},{"path":"src/test/java/seedu/address/model/internship/AddressTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class AddressTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Address(null));"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public void constructor_invalidAddress_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        String invalidAddress \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Address(invalidAddress));"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void isValidAddress() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        // null address"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Address.isValidAddress(null));"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // invalid addresses"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        assertFalse(Address.isValidAddress(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        // valid addresses"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"-\")); // one character"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":1,"-":36}},{"path":"src/test/java/seedu/address/model/internship/SalaryTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class SalaryTest {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Salary(null));"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"    public void constructor_invalidSalary_throwsIllegalArgumentException() {"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"        String invalidSalary \u003d \"\";"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Salary(invalidSalary));"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"    public void isValidSalary() {"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        // null salary"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Salary.isValidSalary(null));"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"        // invalid salary"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"\")); // empty string"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\" \")); // spaces only"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"salary\")); // non-numeric"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"$2000\")); // symbols included"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"11p0\")); // alphabets within digits"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"10 40\")); // spaces within digits"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"-1000\")); // negative numbers"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        assertFalse(Salary.isValidSalary(\"21.10\")); // decimals points"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        // valid salary"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"1\"));"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"10\"));"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"100\"));"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"1000\"));"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"10000\"));"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"        assertTrue(Salary.isValidSalary(\"124293842033123\")); // long numbers"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"TanCiKang":35,"-":11}},{"path":"src/test/java/seedu/address/model/tag/TagTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.testutil.Assert;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"public class TagTest {"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":10,"author":{"gitID":"-"},"content":"    public void constructor_null_throwsNullPointerException() {"},{"lineNumber":11,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e new Tag(null));"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public void constructor_invalidTagName_throwsIllegalArgumentException() {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \"\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"    @Test"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    public void constructor_space_throwsIllegalArgumentException() {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String invalidTagName \u003d \" \";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        Assert.assertThrows(IllegalArgumentException.class, () -\u003e new Tag(invalidTagName));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    public void isValidTagName() {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        // null tag name"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        Assert.assertThrows(NullPointerException.class, () -\u003e Tag.isValidTagName(null));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":30,"TanCiKang":2}},{"path":"src/test/java/seedu/address/storage/XmlSerializableJobbiBotTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.TypicalInternships;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"public class XmlSerializableJobbiBotTest {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String TEST_DATA_FOLDER \u003d"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            FileUtil.getPath(\"src/test/data/XmlSerializableJobbiBotTest/\");"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    private static final File TYPICAL_INTERNSHIPS_FILE \u003d"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"            new File(TEST_DATA_FOLDER + \"typicalInternshipJobbiBot.xml\");"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private static final File INVALID_INTERNSHIP_FILE \u003d"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            new File(TEST_DATA_FOLDER + \"invalidInternshipJobbiBot.xml\");"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    private static final File INVALID_TAG_FILE \u003d new File(TEST_DATA_FOLDER + \"invalidTagJobbiBot.xml\");"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_typicalInternshipsFile_success() throws Exception {"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot dataFromFile \u003d XmlUtil.getDataFromFile(TYPICAL_INTERNSHIPS_FILE,"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"                XmlSerializableJobbiBot.class);"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        JobbiBot jobbiBotFromFile \u003d dataFromFile.toModelType();"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        JobbiBot typicalInternshipsJobbiBot \u003d TypicalInternships.getTypicalInternshipBook();"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        System.out.println(jobbiBotFromFile.getTagList().toString());"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"        System.out.println(typicalInternshipsJobbiBot.getTagList().toString());"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        assertEquals(jobbiBotFromFile, typicalInternshipsJobbiBot);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public void toModelType_invalidInternshipFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_INTERNSHIP_FILE,"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"                XmlSerializableJobbiBot.class);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public void toModelType_invalidTagFile_throwsIllegalValueException() throws Exception {"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot dataFromFile \u003d XmlUtil.getDataFromFile(INVALID_TAG_FILE,"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"                XmlSerializableJobbiBot.class);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        thrown.expect(IllegalValueException.class);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        dataFromFile.toModelType();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":13,"-":37,"TanCiKang":6}},{"path":"src/test/java/seedu/address/testutil/InternshipUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_INDUSTRY;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_REGION;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_ROLE;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_SALARY;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":" * A utility class for Internship."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"public class InternshipUtil {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"     * Returns the part of command string for the given {@code internship}\u0027s details."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"    public static String getInternshipDetails(Internship internship) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_NAME + internship.getName().fullName + \" \");"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_SALARY + internship.getSalary().value + \" \");"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_EMAIL + internship.getEmail().value + \" \");"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_ADDRESS + internship.getAddress().value + \" \");"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_INDUSTRY + internship.getIndustry().value + \" \");"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_REGION + internship.getRegion().value + \" \");"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        sb.append(PREFIX_ROLE + internship.getRole().value + \" \");"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        internship.getTags().stream().forEach("},{"lineNumber":32,"author":{"gitID":"-"},"content":"            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        );"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":19,"TanCiKang":17}},{"path":"src/test/java/seedu/address/testutil/TypicalInternshipsWithSavedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.ArrayList;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" * A utility class containing a list of {@code Internship} objects to be used in tests."},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"public class TypicalInternshipsWithSavedTag {"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"    public static final Internship DATASCIENCE \u003d new InternshipBuilder().withName(\"Grab\").withSalary(\"1500\")"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"Grab@example.com\").withAddress(\"Grab Building\").withTags(\"saved\")"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Tech\").withRegion(\"Town\").withRole(\"Data Scientist\").build();"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    public static final Internship ENGINEERING1 \u003d new InternshipBuilder().withName(\"ST Engineering\").withSalary(\"1000\")"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"STEngineering@example.com\").withAddress(\"123, Jurong West Ave 6, #08-111\").withTags(\"saved\")"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Manufacturing\").withRegion(\"Jurong\").withRole(\"Safety Officer\").build();"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    public static final Internship ENGINEERING2 \u003d new InternshipBuilder().withName(\"ABC Engineering\").withSalary(\"999\")"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"ABCEngineering@example.com\").withAddress(\"311, Jurong Ave 2\").withTags(\"saved\")"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Manufacturing\").withRegion(\"Jurong\").withRole(\"Product Engineer\").build();"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    public static final Internship ENGINEERING3 \u003d new InternshipBuilder().withName(\"Sembcorp\").withSalary(\"1001\")"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"Sembcorp@example.com\").withAddress(\"111 Tuas Street\").withTags(\"saved\")"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Engineering\").withRegion(\"Tuas\").withRole(\"Project Manager\").build();"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public static final Internship BUSINESS1 \u003d new InternshipBuilder().withName(\"PwC\").withSalary(\"1200\")"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"AdvisoryIntern@example.com\").withAddress(\"Raffles Place\")"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Business\").withRegion(\"Raffles Place\").withRole(\"Advisory Intern\").build();"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    public static final Internship BUSINESS2 \u003d new InternshipBuilder().withName(\"Deloitte\").withSalary(\"750\")"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"AuditIntern@Deloitte.com\").withAddress(\"Tanjong Pagar\").withTags(\"saved\")"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Business\").withRegion(\"Tanjong Pagar\").withRole(\"Audit Intern\").build();"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public static final Internship BUSINESS3 \u003d new InternshipBuilder().withName(\"KPMG\").withSalary(\"1000\")"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"            .withEmail(\"ConsultingIntern@example.com\").withAddress(\"Raffles Boulevard\").withTags(\"saved\")"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"            .withIndustry(\"Business\").withRegion(\"Raffles Place\").withRole(\"Consulting Intern\").build();"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    public static final String KEYWORD_MATCHING_SAFETY \u003d \"Safety\"; // A keyword that matches SAFETY"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    private TypicalInternshipsWithSavedTag() {} // prevents instantiation"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"     * Returns an {@code JobbiBot} with all the typical internships and some with saved tags."},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"    public static JobbiBot getTypicalInternshipBookWithSavedTag() {"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"        JobbiBot jobbiBot \u003d new JobbiBot();"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        for (Internship internship : getTypicalInternshipsWithSavedTag()) {"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"            try {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"                jobbiBot.addInternship(internship);"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        return jobbiBot;"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    public static List\u003cInternship\u003e getTypicalInternshipsWithSavedTag() {"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DATASCIENCE, ENGINEERING1, ENGINEERING2, ENGINEERING3,"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"                BUSINESS1, BUSINESS2, BUSINESS3));"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":62}},{"path":"src/test/java/seedu/address/testutil/TypicalIndexes.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Index} objects to be used in tests."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class TypicalIndexes {"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"    public static final Index INDEX_FIRST_INTERNSHIP \u003d Index.fromOneBased(1);"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"    public static final Index INDEX_SECOND_INTERNSHIP \u003d Index.fromOneBased(2);"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"    public static final Index INDEX_THIRD_INTERNSHIP \u003d Index.fromOneBased(3);"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":9,"TanCiKang":3}},{"path":"src/test/java/seedu/address/testutil/InternshipBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Industry;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Region;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Role;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":" * A utility class to help with building Internship objects."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"public class InternshipBuilder {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_NAME \u003d \"QYZ Company\";"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    public static final String DEFAULT_SALARY \u003d \"1000\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"    public static final String DEFAULT_INDUSTRY \u003d \"Engineering\";"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"    public static final String DEFAULT_REGION \u003d \"Geylang\";"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public static final String DEFAULT_ROLE \u003d \"Safety Offier\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Name name;"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"    private Salary salary;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Email email;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private Address address;"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    private Industry industry;"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"    private Region region;"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private Role role;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private Set\u003cTag\u003e tags;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder() {"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        name \u003d new Name(DEFAULT_NAME);"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"        salary \u003d new Salary(DEFAULT_SALARY);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        email \u003d new Email(DEFAULT_EMAIL);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        address \u003d new Address(DEFAULT_ADDRESS);"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"        industry \u003d new Industry(DEFAULT_INDUSTRY);"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"        region \u003d new Region(DEFAULT_REGION);"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"        role \u003d new Role(DEFAULT_ROLE);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        tags \u003d SampleDataUtil.getTagSet();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"     * Initializes the InternshipBuilder with the data of {@code internshipToCopy}."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder(Internship internshipToCopy) {"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"        name \u003d internshipToCopy.getName();"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        salary \u003d internshipToCopy.getSalary();"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"        email \u003d internshipToCopy.getEmail();"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        address \u003d internshipToCopy.getAddress();"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"        industry \u003d internshipToCopy.getIndustry();"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        region \u003d internshipToCopy.getRegion();"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"        role \u003d internshipToCopy.getRole();"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"        tags \u003d new HashSet\u003c\u003e(internshipToCopy.getTags());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Name} of the {@code Internship} that we are building."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withName(String name) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.name \u003d new Name(name);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Internship} that we are building."},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withTags(String ... tags) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        this.tags \u003d SampleDataUtil.getTagSet(tags);"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Address} of the {@code Internship} that we are building."},{"lineNumber":82,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withAddress(String address) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        this.address \u003d new Address(address);"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Salary} of the {@code Internship} that we are building."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withSalary(String salary) {"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"        this.salary \u003d new Salary(salary);"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Email} of the {@code Internship} that we are building."},{"lineNumber":98,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withEmail(String email) {"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        this.email \u003d new Email(email);"},{"lineNumber":101,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":103,"author":{"gitID":"-"},"content":""},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Industry} of the {@code Internship} that we are building."},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withIndustry(String industry) {"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        this.industry \u003d new Industry(industry);"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"        return this;"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Region} of the {@code Internship} that we are building."},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withRegion(String location) {"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"        this.region \u003d new Region(location);"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"        return this;"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":"     * Sets the {@code Role} of the {@code Internship} that we are building."},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"    public InternshipBuilder withRole(String role) {"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        this.role \u003d new Role(role);"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"        return this;"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"    public Internship build() {"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"        return new Internship(name, salary, email, address, industry, region, role, tags);"},{"lineNumber":130,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":62,"TanCiKang":70}},{"path":"src/test/java/seedu/address/model/JobbiBotTest.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertEquals;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.testutil.TypicalInternships.ENGINEERING1;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.testutil.TypicalInternships.getTypicalInternshipBook;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import org.junit.Rule;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import org.junit.rules.ExpectedException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"public class JobbiBotTest {"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    @Rule"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public ExpectedException thrown \u003d ExpectedException.none();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    private final JobbiBot jobbiBot \u003d new JobbiBot();"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void constructor() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        assertEquals(Collections.emptyList(), jobbiBot.getInternshipList());"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        assertEquals(Collections.emptyList(), jobbiBot.getTagList());"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public void resetData_null_throwsNullPointerException() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        thrown.expect(NullPointerException.class);"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.resetData(null);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    public void resetData_withValidReadOnlyInternshipBook_replacesData() {"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        JobbiBot newData \u003d getTypicalInternshipBook();"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.resetData(newData);"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        assertEquals(newData, jobbiBot);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"    public void resetData_withDuplicateInternships_throwsAssertionError() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        // Repeat ENGINEERING1 twice"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        List\u003cInternship\u003e newInternships \u003d Arrays.asList(ENGINEERING1, ENGINEERING1);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ENGINEERING1.getTags());"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        JobbiBotStub newData \u003d new JobbiBotStub(newInternships, newTags);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        thrown.expect(AssertionError.class);"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.resetData(newData);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"    public void getInternshipList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.getInternshipList().remove(0);"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Test"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void getTagList_modifyList_throwsUnsupportedOperationException() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        thrown.expect(UnsupportedOperationException.class);"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.getTagList().remove(0);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"     * A stub ReadOnlyJobbiBot whose internships and tags lists can violate interface constraints."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"    private static class JobbiBotStub implements ReadOnlyJobbiBot {"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"        private final ObservableList\u003cInternship\u003e internships \u003d FXCollections.observableArrayList();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        JobbiBotStub(Collection\u003cInternship\u003e internships, Collection\u003c? extends Tag\u003e tags) {"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"            this.internships.setAll(internships);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            this.tags.setAll(tags);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"        public ObservableList\u003cInternship\u003e getInternshipList() {"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"            return internships;"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            return tags;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":92,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":17,"-":70,"TanCiKang":7}},{"path":"src/test/java/seedu/address/testutil/TestUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class for test cases."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TestUtil {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Folder used for temp files created during testing. Ignored by Git."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Creates the sandbox folder if it doesn\u0027t exist."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static String getFilePathInSandboxFolder(String fileName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            FileUtil.createDirs(new File(SANDBOX_FOLDER));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            throw new RuntimeException(e);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return SANDBOX_FOLDER + fileName;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns the middle index of the internship in the {@code model}\u0027s internship list."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static Index getMidIndex(Model model) {"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        return Index.fromOneBased(model.getJobbiBot().getInternshipList().size() / 2);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"     * Returns the last index of the internship in the {@code model}\u0027s internship list."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public static Index getLastIndex(Model model) {"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        return Index.fromOneBased(model.getJobbiBot().getInternshipList().size());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"     * Returns the second last index of the internship in the {@code model}\u0027s internship list."},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"    public static Index getSecondLastIndex(Model model) {"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        return Index.fromOneBased(model.getJobbiBot().getInternshipList().size() - 1);"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"     * Returns the internship in the {@code model}\u0027s internship list at {@code index}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"    public static Internship getInternship(Model model, Index index) {"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        return model.getJobbiBot().getInternshipList().get(index.getZeroBased());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":9,"-":46,"TanCiKang":6}},{"path":"src/test/java/seedu/address/testutil/TypicalInternships.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":" * A utility class containing a list of {@code Internship} objects to be used in tests."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"public class TypicalInternships {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Internship DATASCIENCE \u003d new InternshipBuilder().withName(\"Grab\").withSalary(\"1500\")"},{"lineNumber":17,"author":{"gitID":"-"},"content":"            .withEmail(\"Grab@example.com\").withAddress(\"Grab Building\")"},{"lineNumber":18,"author":{"gitID":"-"},"content":"            .withIndustry(\"Tech\").withRegion(\"Town\").withRole(\"Data Scientist\").build();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Internship ENGINEERING1 \u003d new InternshipBuilder().withName(\"ST Engineering\").withSalary(\"1000\")"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            .withEmail(\"STEngineering@example.com\").withAddress(\"123, Jurong West Ave 6, #08-111\")"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            .withIndustry(\"Manufacturing\").withRegion(\"Jurong\").withRole(\"Safety Officer\").build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public static final Internship ENGINEERING2 \u003d new InternshipBuilder().withName(\"ABC Engineering\").withSalary(\"999\")"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            .withEmail(\"ABCEngineering@example.com\").withAddress(\"311, Jurong Ave 2\")"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            .withIndustry(\"Manufacturing\").withRegion(\"Jurong\").withRole(\"Product Engineer\").build();"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public static final Internship ENGINEERING3 \u003d new InternshipBuilder().withName(\"Sembcorp\").withSalary(\"1001\")"},{"lineNumber":26,"author":{"gitID":"-"},"content":"            .withEmail(\"Sembcorp@example.com\").withAddress(\"111 Tuas Street\")"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            .withIndustry(\"Engineering\").withRegion(\"Tuas\").withRole(\"Project Manager\").build();"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Internship BUSINESS1 \u003d new InternshipBuilder().withName(\"PwC\").withSalary(\"1200\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withEmail(\"AdvisoryIntern@example.com\").withAddress(\"Raffles Place\").withTags(\"saved\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withIndustry(\"Business\").withRegion(\"Raffles Place\").withRole(\"Advisory Intern\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static final Internship BUSINESS2 \u003d new InternshipBuilder().withName(\"Deloitte\").withSalary(\"750\")"},{"lineNumber":32,"author":{"gitID":"-"},"content":"            .withEmail(\"AuditIntern@Deloitte.com\").withAddress(\"Tanjong Pagar\")"},{"lineNumber":33,"author":{"gitID":"-"},"content":"            .withIndustry(\"Business\").withRegion(\"Tanjong Pagar\").withRole(\"Audit Intern\").build();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final Internship BUSINESS3 \u003d new InternshipBuilder().withName(\"KPMG\").withSalary(\"1000\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withEmail(\"ConsultingIntern@example.com\").withAddress(\"Raffles Boulevard\")"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            .withIndustry(\"Business\").withRegion(\"Raffles Place\").withRole(\"Consulting Intern\").build();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static final Internship BUSINESS4 \u003d new InternshipBuilder().withName(\"PwC\").withSalary(\"761\")"},{"lineNumber":38,"author":{"gitID":"-"},"content":"            .withEmail(\"AuditIntern@PwC.com\").withAddress(\"Raffles Place\")"},{"lineNumber":39,"author":{"gitID":"-"},"content":"            .withIndustry(\"Business\").withRegion(\"Raffles Place\").withRole(\"Audit Intern\").build();"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    // Manually added"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public static final Internship HEALTHCARE \u003d new InternshipBuilder().withName(\"Philips Healthcare\")"},{"lineNumber":43,"author":{"gitID":"-"},"content":"            .withSalary(\"1000\").withEmail(\"PhilipsHealthcare@example.com\").withAddress(\"Toa Payoh Central\")"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            .withIndustry(\"Healthcare\").withRegion(\"Toa Payoh\").withRole(\"Marketing Intern\").build();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public static final Internship CONSULTING \u003d new InternshipBuilder().withName(\"McKinsey\").withSalary(\"2000\")"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            .withEmail(\"Consulting@example.com\").withAddress(\"Sandcrawler Building\").withIndustry(\"Consulting\")"},{"lineNumber":47,"author":{"gitID":"-"},"content":"            .withRegion(\"One North\").withRole(\"Business Analyst\").build();"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    public static final String KEYWORD_MATCHING_AUDIT \u003d \"Audit\"; // A keyword that matches AUDIT"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"    private TypicalInternships() {} // prevents instantiation"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"     * Returns an {@code JobbiBot} with all the typical internships."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"    public static JobbiBot getTypicalInternshipBook() {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        JobbiBot jb \u003d new JobbiBot();"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        for (Internship internship : getTypicalInternships()) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":61,"author":{"gitID":"-"},"content":"                jb.addInternship(internship);"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        return jb;"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"    public static List\u003cInternship\u003e getTypicalInternships() {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(DATASCIENCE, ENGINEERING1, ENGINEERING2, ENGINEERING3,"},{"lineNumber":71,"author":{"gitID":"-"},"content":"                BUSINESS1, BUSINESS2, BUSINESS3, BUSINESS4));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":4,"-":61,"TanCiKang":8}},{"path":"src/test/java/seedu/address/testutil/JobbiBotBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":" * A utility class to help with building InternshipBook objects."},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Example usage: \u003cbr\u003e"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" *     {@code JobbiBot ab \u003d new JobbiBotBuilder().withInternship(\"Google\", \"Singapore\").build();}"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class JobbiBotBuilder {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    private JobbiBot jobbiBot;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public JobbiBotBuilder() {"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"        jobbiBot \u003d new JobbiBot();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    public JobbiBotBuilder(JobbiBot jobbiBot) {"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        this.jobbiBot \u003d jobbiBot;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"     * Adds a new {@code Internship} to the {@code JobbiBot} that we are building."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public JobbiBotBuilder withInternship(Internship internship) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            jobbiBot.addInternship(internship);"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"        } catch (DuplicateInternshipException dpe) {"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalArgumentException(\"internship is expected to be unique.\");"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"     * Parses {@code tagName} into a {@code Tag} and adds it to the {@code JobbiBot} that we are building."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    public JobbiBotBuilder withTag(String tagName) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"            jobbiBot.addTag(new Tag(tagName));"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalArgumentException(\"tagName is expected to be valid.\");"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return this;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    public JobbiBot build() {"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        return jobbiBot;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":17,"-":32,"TanCiKang":4}},{"path":"src/test/java/guitests/GuiRobot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.BooleanSupplier;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import org.testfx.api.FxRobot;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import guitests.guihandles.exceptions.StageNotFoundException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Robot used to simulate user actions on the GUI."},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Extends {@link FxRobot} by adding some customized functionality and workarounds."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class GuiRobot extends FxRobot {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private static final int PAUSE_FOR_HUMAN_DELAY_MILLISECONDS \u003d 250;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    private static final int DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS \u003d 10000;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String PROPERTY_TESTFX_HEADLESS \u003d \"testfx.headless\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final boolean isHeadlessMode;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public GuiRobot() {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        String headlessPropertyValue \u003d System.getProperty(PROPERTY_TESTFX_HEADLESS);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        isHeadlessMode \u003d headlessPropertyValue !\u003d null \u0026\u0026 headlessPropertyValue.equals(\"true\");"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Pauses execution for {@code PAUSE_FOR_HUMAN_DELAY_MILLISECONDS} milliseconds for a human to examine the"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * effects of the test. This method will be disabled when the GUI tests are executed in headless mode to avoid"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * unnecessary delays."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public void pauseForHuman() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        if (isHeadlessMode) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"            return;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"        sleep(PAUSE_FOR_HUMAN_DELAY_MILLISECONDS);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true by {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS} milliseconds."},{"lineNumber":44,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * milliseconds."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        waitForEvent(event, DEFAULT_WAIT_FOR_EVENT_TIMEOUT_MILLISECONDS);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Waits for {@code event} to be true."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * @param timeOut in milliseconds"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     * @throws EventTimeoutException if the time taken exceeds {@code timeOut}."},{"lineNumber":57,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void waitForEvent(BooleanSupplier event, int timeOut) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int timePassed \u003d 0;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        final int retryInterval \u003d 50;"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        while (!event.getAsBoolean()) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"            sleep(retryInterval);"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            timePassed +\u003d retryInterval;"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"            if (timePassed \u003e\u003d timeOut) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                throw new EventTimeoutException();"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        pauseForHuman();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Returns true if the window with {@code stageTitle} is currently open."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    public boolean isWindowShown(String stageTitle) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return listTargetWindows().stream()"},{"lineNumber":79,"author":{"gitID":"-"},"content":"                .filter(window -\u003e window instanceof Stage \u0026\u0026 ((Stage) window).getTitle().equals(stageTitle))"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                .count() \u003e\u003d 1;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns the first stage, ordered by proximity to the current target window, with the stage title."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The order that the windows are searched are as follows (proximity): current target window,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * children of the target window, rest of the windows."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws StageNotFoundException if the stage is not found."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public Stage getStage(String stageTitle) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        Optional\u003cStage\u003e targetStage \u003d listTargetWindows().stream()"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                .filter(Stage.class::isInstance)    // checks that the window is of type Stage"},{"lineNumber":93,"author":{"gitID":"-"},"content":"                .map(Stage.class::cast)"},{"lineNumber":94,"author":{"gitID":"-"},"content":"                .filter(stage -\u003e stage.getTitle().equals(stageTitle))"},{"lineNumber":95,"author":{"gitID":"-"},"content":"                .findFirst();"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"        return targetStage.orElseThrow(StageNotFoundException::new);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Represents an error which occurs when a timeout occurs when waiting for an event."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    private class EventTimeoutException extends RuntimeException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":104}},{"path":"src/test/java/seedu/address/testutil/SavedInternshipBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * A utility class to help with building saved Internship objects."},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"public class SavedInternshipBuilder {"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    private static final String MESSAGE_DUPLICATE_TAG \u003d \"This internship has been saved\";"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    private static final String SAVED_TAG_NAME \u003d \"saved\";"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"     * Initializes the SavedInternshipBuilder with the data of {@code internshipToAddSavedTag}."},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    public Internship addTag(Internship internshipToAddSavedTag) throws CommandException {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToAddSavedTag.getTags());"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"            internshipTags.add(new Tag(SAVED_TAG_NAME));"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_TAG);"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        // used for checking internship tag references"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        // Rebuild the list of intrenship tags to point to the relevant tags in the master tag list."},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        return new Internship("},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getName(),"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getSalary(),"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getEmail(),"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getAddress(),"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getIndustry(),"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getRegion(),"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"                internshipToAddSavedTag.getRole(),"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"                correctTagReferences);"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":52}},{"path":"src/test/java/seedu/address/model/internship/InternshipContainsAllKeywordsPredicateTest.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertFalse;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static org.junit.Assert.assertTrue;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import org.junit.Test;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.testutil.InternshipBuilder;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":15,"author":{"gitID":"niloc94"},"content":"public class InternshipContainsAllKeywordsPredicateTest {"},{"lineNumber":16,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":"    public static final Internship PREDICATE_TEST_INTERNSHIP \u003d new InternshipBuilder()"},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"            .withName(\"Alice Bob Charlie Company\").withSalary(\"1500\").withEmail(\"ABC@example.com\")"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"            .withAddress(\"ABC Building\").withTags(\"saved\")"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":"            .withIndustry(\"Tech\").withRegion(\"Town\").withRole(\"Data Scientist\").build();"},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"    public void equals() {"},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate firstPredicate \u003d"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate secondPredicate \u003d"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(secondPredicateKeywordList);"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"        // same object -\u003e returns true"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"        assertTrue(firstPredicate.equals(firstPredicate));"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"        // same values -\u003e returns true"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate firstPredicateCopy \u003d"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(firstPredicateKeywordList);"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        assertTrue(firstPredicate.equals(firstPredicateCopy));"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        // different types -\u003e returns false"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstPredicate.equals(1));"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"        // null -\u003e returns false"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstPredicate.equals(null));"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        // different internship -\u003e returns false"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"        assertFalse(firstPredicate.equals(secondPredicate));"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"    public void test_containsAllKeywords_returnsTrue() {"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"        // One keyword"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate predicate \u003d"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(Collections.singletonList(\"Charlie\"));"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Collections.singletonList(\"Data\"));"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        // Multiple keywords"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\"));"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Town\", \"saved\"));"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Data\", \"Scientist\"));"},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Data\", \"Tech\", \"Company\"));"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"        // Mixed-case keywords"},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"aLIce\", \"bOB\"));"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"DaTa\", \"ToWn\", \"COmpany\"));"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"DaTa\"));"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"        // Zero keywords"},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Collections.emptyList());"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":"    public void test_doesNotContainAllKeywords_returnsFalse() {"},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":"        // One non-matching keyword"},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate predicate \u003d"},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"NonMatchingKeyword\"));"},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":"        // Substrings"},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alic\"));"},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alice1\"));"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":101,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":102,"author":{"gitID":"niloc94"},"content":"        // One non-matching keyword"},{"lineNumber":103,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Bob\", \"Dick\"));"},{"lineNumber":104,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":105,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":106,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Tech\", \"NonMatchingKeyword\"));"},{"lineNumber":107,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":108,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":109,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"ABC\", \"NonMatchingKeyword\"));"},{"lineNumber":110,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":111,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":112,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"NonMatchingKeyword\", \"Tech\", \"Alice\"));"},{"lineNumber":113,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":114,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":115,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alice\", \"Bob\", \"Tech\","},{"lineNumber":116,"author":{"gitID":"niloc94"},"content":"                \"NonMatchingKeyword\"));"},{"lineNumber":117,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":118,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":119,"author":{"gitID":"niloc94"},"content":"        // All non-matching keyword"},{"lineNumber":120,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Alicia\", \"Bobby\", \"Techno\"));"},{"lineNumber":121,"author":{"gitID":"niloc94"},"content":"        assertFalse(predicate.test(PREDICATE_TEST_INTERNSHIP));"},{"lineNumber":122,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":124,"author":{"gitID":"niloc94"},"content":"    @Test"},{"lineNumber":125,"author":{"gitID":"niloc94"},"content":"    public void test_canHandleNonAlphaNumericKeywords_returnsTrue() {"},{"lineNumber":126,"author":{"gitID":"niloc94"},"content":"        // Can Handle Commas, [], and both"},{"lineNumber":127,"author":{"gitID":"niloc94"},"content":"        InternshipContainsAllKeywordsPredicate predicate \u003d"},{"lineNumber":128,"author":{"gitID":"niloc94"},"content":"                new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Test\"));"},{"lineNumber":129,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withIndustry(\"Test,\").build()));"},{"lineNumber":130,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":131,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"saved\"));"},{"lineNumber":132,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withTags(\"[saved]\").build()));"},{"lineNumber":133,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":134,"author":{"gitID":"niloc94"},"content":"        predicate \u003d new InternshipContainsAllKeywordsPredicate(Arrays.asList(\"Test\", \"saved\"));"},{"lineNumber":135,"author":{"gitID":"niloc94"},"content":"        assertTrue(predicate.test(new InternshipBuilder().withIndustry(\"Test,\").withTags(\"[saved]\").build()));"},{"lineNumber":136,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":137,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":124,"TanCiKang":2,"-":11}},{"path":"src/test/java/seedu/address/testutil/UnsavedInternshipBuilder.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.testutil;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.HashMap;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import java.util.HashSet;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import java.util.Map;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.TagNotFoundException;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * A utility class to help with building unsaved internship objects."},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"public class UnsavedInternshipBuilder {"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    private static final String MESSAGE_DUPLICATE_REMOVAL \u003d \"This internship has been removed from Saved Collection\";"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    private static final String SAVED_TAG_NAME \u003d \"saved\";"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"     * Initializes the UnsavedInternshipBuilder with the data of {@code internshipToRemoveSavedTag}."},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"     * @param internshipToRemoveSavedTag"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    public Internship removeTag(Internship internshipToRemoveSavedTag) throws CommandException {"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internshipToRemoveSavedTag.getTags());"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            internshipTags.delete(new Tag(SAVED_TAG_NAME));"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        } catch (TagNotFoundException e) {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMOVAL);"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        // used for checking internship tag references"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        // Rebuild the list of internship tags to point to the relevant tags in the master tag list."},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        return new Internship("},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getName(),"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getSalary(),"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getEmail(),"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getAddress(),"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getIndustry(),"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getRegion(),"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"                internshipToRemoveSavedTag.getRole(),"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"                correctTagReferences);"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":55}},{"path":"src/test/java/guitests/guihandles/MainWindowHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"-"},"content":" * Provides a handle for {@code MainWindow}."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"-"},"content":"public class MainWindowHandle extends StageHandle {"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"    private final InternshipListPanelHandle internshipListPanel;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"    private final ChatBotListPanelHandle chatBotListPanel;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final CommandBoxHandle commandBox;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    private final StatusBarFooterHandle statusBarFooter;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private final MainMenuHandle mainMenu;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private final BrowserPanelHandle browserPanel;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public MainWindowHandle(Stage stage) {"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        super(stage);"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"        internshipListPanel \u003d new InternshipListPanelHandle(getChildNode(InternshipListPanelHandle"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"                .INTERNSHIP_LIST_VIEW_ID));"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"        chatBotListPanel \u003d new ChatBotListPanelHandle(getChildNode(ChatBotListPanelHandle"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"                .CHAT_BOT_LIST_VIEW_ID));"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        commandBox \u003d new CommandBoxHandle(getChildNode(CommandBoxHandle.COMMAND_INPUT_FIELD_ID));"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        statusBarFooter \u003d new StatusBarFooterHandle(getChildNode(StatusBarFooterHandle.STATUS_BAR_PLACEHOLDER));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        mainMenu \u003d new MainMenuHandle(getChildNode(MainMenuHandle.MENU_BAR_ID));"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanelHandle(getChildNode(BrowserPanelHandle.BROWSER_ID));"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    public InternshipListPanelHandle getInternshipListPanel() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        return internshipListPanel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public ChatBotListPanelHandle getChatBotListPanel() {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        return chatBotListPanel;"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public CommandBoxHandle getCommandBox() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return commandBox;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public StatusBarFooterHandle getStatusBarFooter() {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        return statusBarFooter;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public MainMenuHandle getMainMenu() {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return mainMenu;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public BrowserPanelHandle getBrowserPanel() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return browserPanel;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":14,"-":41}},{"path":"src/test/java/guitests/guihandles/ChatBotCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.Node;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.Label;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * Provides a handle to a chatbot card in the chat bot message panel."},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public class ChatBotCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"    private static final String MESSAGES_FIELD_ID \u003d \"#messages\";"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"    private final Label messagesLabel;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    public ChatBotCardHandle(Node cardNode) {"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"        super(cardNode);"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"        this.messagesLabel \u003d getChildNode(MESSAGES_FIELD_ID);"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    public String getMessages() {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        return messagesLabel.getText();"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":25}},{"path":"src/test/java/guitests/guihandles/InternshipCardHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.Node;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":" * Provides a handle to a internship card in the internship list panel."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class InternshipCardHandle extends NodeHandle\u003cNode\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private static final String ID_FIELD_ID \u003d \"#id\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private static final String NAME_FIELD_ID \u003d \"#name\";"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"    private static final String INDUSTRY_FIELD_ID \u003d \"#industry\";"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"    private static final String ROLE_FIELD_ID \u003d \"#role\";"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    private static final String SALARY_FIELD_ID \u003d \"#salary\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    private static final String TAGS_FIELD_ID \u003d \"#tags\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final Label idLabel;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Label nameLabel;"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"    private final Label industryLabel;"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"    private final Label roleLabel;"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"    private final Label salaryLabel;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private final List\u003cLabel\u003e tagLabels;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public InternshipCardHandle(Node cardNode) {"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        super(cardNode);"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        this.idLabel \u003d getChildNode(ID_FIELD_ID);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"        this.industryLabel \u003d getChildNode(INDUSTRY_FIELD_ID);"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"        this.roleLabel \u003d getChildNode(ROLE_FIELD_ID);"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        this.salaryLabel \u003d getChildNode(SALARY_FIELD_ID);"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.tagLabels \u003d tagsContainer"},{"lineNumber":40,"author":{"gitID":"-"},"content":"                .getChildrenUnmodifiable()"},{"lineNumber":41,"author":{"gitID":"-"},"content":"                .stream()"},{"lineNumber":42,"author":{"gitID":"-"},"content":"                .map(Label.class::cast)"},{"lineNumber":43,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public String getId() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return idLabel.getText();"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String getName() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return nameLabel.getText();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public String getIndustry() {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        return industryLabel.getText();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"    public String getRole() {"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        return roleLabel.getText();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"    public String getSalary() {"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"        return salaryLabel.getText();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"    public String getUrl() {"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"        return createUrl();"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"    private String createUrl() {"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"        StringBuilder url \u003d new StringBuilder();"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"        url.append(nameLabel.getText()).append(\u0027 \u0027).append(roleLabel.getText());"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"        return url.toString().replace(\" \", \"-\");"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"    public List\u003cString\u003e getTags() {"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        return tagLabels"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"                .stream()"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"                .map(Label::getText)"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"                .collect(Collectors.toList());"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"wyinkok":4,"-":46,"TanCiKang":33}},{"path":"src/test/java/seedu/address/testutil/TypicalInternshipsForSorting.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"package seedu.address.testutil;"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * A utility class containing a list of {@code Internship} objects to be used in the sorting tests."},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class TypicalInternshipsForSorting {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Internship IN1 \u003d new InternshipBuilder().withName(\"NameA\").withSalary(\"1100\")"},{"lineNumber":17,"author":{"gitID":"-"},"content":"            .withIndustry(\"IndustryA\").withRegion(\"RegionA\").withRole(\"RoleA\").build();"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final Internship IN2 \u003d new InternshipBuilder().withName(\"NameB\").withSalary(\"1000\")"},{"lineNumber":20,"author":{"gitID":"-"},"content":"            .withEmail(\"XXX@XXX.com\").withAddress(\"XXX\")"},{"lineNumber":21,"author":{"gitID":"-"},"content":"            .withIndustry(\"IndustryB\").withRegion(\"RegionB\").withRole(\"RoleB\").build();"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final Internship IN3 \u003d new InternshipBuilder().withName(\"NameC\").withSalary(\"900\")"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            .withEmail(\"XXX@XXX.com\").withAddress(\"XXX\")"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            .withIndustry(\"IndustryC\").withRegion(\"RegionC\").withRole(\"RoleC\").build();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    // Clone of IN3, different industry"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final Internship IN4 \u003d new InternshipBuilder().withName(\"NameC\").withSalary(\"800\")"},{"lineNumber":29,"author":{"gitID":"-"},"content":"            .withEmail(\"XXX@XXX.com\").withAddress(\"XXX\")"},{"lineNumber":30,"author":{"gitID":"-"},"content":"            .withIndustry(\"IndustryA\").withRegion(\"RegionD\").withRole(\"RoleC\").build();"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    // Clone of IN4, different name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final Internship IN5 \u003d new InternshipBuilder().withName(\"NameA\").withSalary(\"700\")"},{"lineNumber":34,"author":{"gitID":"-"},"content":"            .withEmail(\"XXX@XXX.com\").withAddress(\"XXX\")"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            .withIndustry(\"IndustryA\").withRegion(\"RegionD\").withRole(\"RoleC\").build();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private TypicalInternshipsForSorting() {} // prevents instantiation"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"     * Returns an {@code JobbiBot} with all the typical internships."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static JobbiBot getTypicalInternshipForSorting() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        JobbiBot jb \u003d new JobbiBot();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        for (Internship internship : getTypicalInternshipsForSorting()) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"            try {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                jb.addInternship(internship);"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                throw new AssertionError(\"not possible\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        return jb;"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static List\u003cInternship\u003e getTypicalInternshipsForSorting() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return new ArrayList\u003c\u003e(Arrays.asList(IN1, IN2, IN3, IN4, IN5));"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":6,"-":49,"TanCiKang":3}},{"path":"src/test/java/guitests/guihandles/ChatBotListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package guitests.guihandles;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.ChatBotCard;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":" * Provides a handle for {@code ChatBotListPanel} containing the list of {@code ChatBotCard}."},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"public class ChatBotListPanelHandle extends NodeHandle\u003cListView\u003cChatBotCard\u003e\u003e {"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"    public static final String CHAT_BOT_LIST_VIEW_ID \u003d \"#chatBotListView\";"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    public ChatBotListPanelHandle(ListView\u003cChatBotCard\u003e chatBotListPanelNode) {"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"        super(chatBotListPanelNode);"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"     * Returns a handle of the welcome message for {@code ChatBotCardHandle}."},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"     * There is only 1 welcome message."},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"     * @throws AssertionError if no welcome message is present or more than 1 welcome message is present."},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    public ChatBotCardHandle getHandleToWelcomeMessage() {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        List\u003cChatBotCard\u003e chatBotCardList \u003d getRootNode().getItems();"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        if (chatBotCardList.size() !\u003d 1) {"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"Chatbot message thread with only the welcome message \""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"                    + \"has an expected size of 1\");"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        return new ChatBotCardHandle(chatBotCardList.get(0).getRoot());"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":35}},{"path":"src/main/java/seedu/address/ui/BrowserPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.event.Event;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.InternshipPanelSelectionChangedEvent;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * The Browser Panel of the App."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"public class BrowserPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_PAGE \u003d \"default.html\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SEARCH_PAGE_URL \u003d"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"            \"https://www.internsg.com/job/\";"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"BrowserPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private WebView browser;"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public BrowserPanel() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        // To prevent triggering events for typing inside the loaded Web page."},{"lineNumber":38,"author":{"gitID":"-"},"content":"        getRoot().setOnKeyPressed(Event::consume);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        loadDefaultPage();"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    private void loadInternshipPage(Internship internship) {"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"        loadPage(SEARCH_PAGE_URL + internship.getUrl());"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void loadPage(String url) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e browser.getEngine().load(url));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Loads a default HTML file with a background that matches the general theme."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    private void loadDefaultPage() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        loadPage(defaultPage.toExternalForm());"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     * Frees resources allocated to the browser."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public void freeResources() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        browser \u003d null;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"    private void handleInternshipPanelSelectionChangedEvent(InternshipPanelSelectionChangedEvent event) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"        loadInternshipPage(event.getNewSelection().internship);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":65,"TanCiKang":6}},{"path":"src/test/java/guitests/guihandles/GlossaryWindowHandle.java","lines":[{"lineNumber":1,"content":"//@@author wyinkok-unused"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"/*"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import guitests.GuiRobot;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"*/"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" * A handle to the {@code GlossaryWindow} of the application."},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class GlossaryWindowHandle extends StageHandle {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    public static final String GLOSSARY_WINDOW_TITLE \u003d \"Glossary\";"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    private static final String GLOSSARY_WINDOW_BROWSER_ID \u003d \"#browser\";"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    public GlossaryWindowHandle(Stage glossaryWindowStage) {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        super(glossaryWindowStage);"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"     * Returns true if a glossary window is currently present in the application."},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    public static boolean isWindowPresent() {"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        return new GuiRobot().isWindowShown(GLOSSARY_WINDOW_TITLE);"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Returns the {@code URL} of the currently loaded page."},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public URL getLoadedUrl()  {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        return WebViewUtil.getLoadedUrl(getChildNode(GLOSSARY_WINDOW_BROWSER_ID));"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":" */"}],"authorContributionMap":{"null":1,"wyinkok":29,"-":9}},{"path":"src/main/java/seedu/address/ui/InternshipListPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.InternshipPanelSelectionChangedEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":" * Panel containing the list of internships, research and other development opportunities."},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"public class InternshipListPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    private static final String FXML \u003d \"InternshipListPanel.fxml\";"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(InternshipListPanel.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    private ListView\u003cInternshipCard\u003e internshipListView;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"    public InternshipListPanel(ObservableList\u003cInternship\u003e internshipList) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        setConnections(internshipList);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private void setConnections(ObservableList\u003cInternship\u003e internshipList) {"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cInternshipCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"                internshipList, (internship) -\u003e new InternshipCard(internship, internshipList.indexOf(internship) + 1));"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"        internshipListView.setItems(mappedList);"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        internshipListView.setCellFactory(listView -\u003e new InternshipListViewCell());"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        setEventHandlerForSelectionChangeEvent();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private void setEventHandlerForSelectionChangeEvent() {"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        internshipListView.getSelectionModel().selectedItemProperty()"},{"lineNumber":46,"author":{"gitID":"-"},"content":"                .addListener((observable, oldValue, newValue) -\u003e {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"                    if (newValue !\u003d null) {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"                        logger.fine(\"Selection in internship list panel changed to : \u0027\" + newValue + \"\u0027\");"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"                        raise(new InternshipPanelSelectionChangedEvent(newValue));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                });"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"     * Scrolls to the {@code InternshipCard} at the {@code index} and selects it."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    private void scrollTo(int index) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e {"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"            internshipListView.scrollTo(index);"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"            internshipListView.getSelectionModel().clearAndSelect(index);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        scrollTo(event.targetIndex);"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code InternshipCard}."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"    class InternshipListViewCell extends ListCell\u003cInternshipCard\u003e {"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        @Override"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"        protected void updateItem(InternshipCard internship, boolean empty) {"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"            super.updateItem(internship, empty);"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"            if (empty || internship \u003d\u003d null) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"                setGraphic(null);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"                setText(null);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"            } else {"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"                setGraphic(internship.getRoot());"},{"lineNumber":84,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":17,"-":62,"TanCiKang":9}},{"path":"src/main/java/seedu/address/ui/UiManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.Alert.AlertType;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.image.Image;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * The manager of the UI component."},{"lineNumber":23,"author":{"gitID":"-"},"content":" */"},{"lineNumber":24,"author":{"gitID":"-"},"content":"public class UiManager extends ComponentManager implements Ui {"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    private static final String ICON_APPLICATION \u003d \"/images/job_icon.png\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private MainWindow mainWindow;"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public UiManager(Logic logic, Config config, UserPrefs prefs) {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        logger.info(\"Starting UI...\");"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        //Set the application icon."},{"lineNumber":52,"author":{"gitID":"-"},"content":"        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"            mainWindow.show(); //This should be called before creating other UI parts"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            mainWindow.fillInnerParts();"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        } catch (Throwable e) {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            logger.severe(StringUtil.getDetails(e));"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        mainWindow.hide();"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        mainWindow.releaseResources();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        final String content \u003d details + \":\\n\" + cause.toString();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"    private Image getImage(String imagePath) {"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return new Image(MainApp.class.getResourceAsStream(imagePath));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Shows an alert dialog on {@code owner} with the given parameters."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * This method only returns after the user has closed the alert dialog."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"},{"lineNumber":90,"author":{"gitID":"-"},"content":"                                               String contentText) {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        final Alert alert \u003d new Alert(type);"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        alert.getDialogPane().getStylesheets().add(\"view/ChatBotTheme.css\");"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        alert.initOwner(owner);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        alert.setTitle(title);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        alert.setHeaderText(headerText);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        alert.setContentText(contentText);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        alert.showAndWait();"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Shows an error alert dialog with {@code title} and error message, {@code e},"},{"lineNumber":103,"author":{"gitID":"-"},"content":"     * and exits the application after the user has closed the alert dialog."},{"lineNumber":104,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":105,"author":{"gitID":"-"},"content":"    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        System.exit(1);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"},{"lineNumber":118,"author":{"gitID":"-"},"content":"                event.exception);"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":118}},{"path":"src/main/java/seedu/address/ui/DisableSelectionOfListCell.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.MultipleSelectionModel;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"content":"//@@author wyinkok-reused"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"// Reused from https://stackoverflow.com/questions/20621752/javafx-make-listview-not-selectable-via-mouse"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"// with minor modifications"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" * Disables list cell from being selected but enables scrolling of list view. Used in ChatBotPanel"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" * @param \u003cT\u003e"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"public class DisableSelectionOfListCell\u003cT\u003e extends MultipleSelectionModel\u003cT\u003e {"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cInteger\u003e getSelectedIndices() {"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"        return FXCollections.emptyObservableList();"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cT\u003e getSelectedItems() {"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"        return FXCollections.emptyObservableList();"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public void selectIndices(int index, int... indices) {"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    public void selectAll() {"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public void selectFirst() {"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    public void selectLast() {"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"    public void clearAndSelect(int index) {"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    public void select(int index) {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"    public void select(T obj) {"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"    public void clearSelection(int index) {"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    public void clearSelection() {"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"    public boolean isSelected(int index) {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        return false;"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    public boolean isEmpty() {"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        return true;"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"    public void selectPrevious() {"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"    public void selectNext() {"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"null":1,"wyinkok":81}},{"path":"src/main/java/seedu/address/ui/InternshipCard.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import javafx.scene.control.Label;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.scene.layout.FlowPane;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":" * An UI component that displays information of a {@code Internship}."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"public class InternshipCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    private static final String FXML \u003d \"InternshipListCard.fxml\";"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * or an exception will be thrown by JavaFX during runtime."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"     * @see \u003ca href\u003d\"https://github.com/se-edu/InternshipBook-level4/issues/336\"\u003eThe issue on JobbiBot level 4\u003c/a\u003e"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"    public final Internship internship;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private HBox cardPane;"},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private Label name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private Label id;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private Label industryTitle;"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private Label industry;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"    private Label roleTitle;"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"    private Label role;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    private Label salaryTitle;"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    private Label salary;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"    private Label regionTitle;"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"    @FXML"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"    private Label region;"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private FlowPane tags;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"    public InternshipCard(Internship internship, int displayedIndex) {"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        super(FXML);"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        this.internship \u003d internship;"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        id.setText(displayedIndex + \". \");"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        name.setText(internship.getName().fullName);"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        industryTitle.setText(\"Industry: \");"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"        industry.setText(internship.getIndustry().value);"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"        roleTitle.setText(\"Role: \");"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"        role.setText(internship.getRole().value);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        salaryTitle.setText(\"Stipend: $\");"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        salary.setText(internship.getSalary().value);"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        regionTitle.setText(\"Region: \");"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        region.setText(internship.getRegion().value);"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        internship.getTags().forEach(tag -\u003e tags.getChildren().add(new Label(tag.tagName)));"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":75,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        if (!(other instanceof InternshipCard)) {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"        InternshipCard card \u003d (InternshipCard) other;"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        return id.getText().equals(card.id.getText())"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 internship.equals(card.internship);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":30,"-":47,"TanCiKang":11}},{"path":"src/main/java/seedu/address/ui/GlossaryWindow.java","lines":[{"lineNumber":1,"content":"//@@author wyinkok-unused"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"/*"},{"lineNumber":3,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.scene.web.WebView;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"*/"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" * Controller for a glossary page"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"public class GlossaryWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/GlossaryGuide.html\";"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(GlossaryWindow.class);"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    private static final String FXML \u003d \"GlossaryWindow.fxml\";"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    private WebView browser;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"     * Creates a new GlossaryWindow."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * @param root Stage to use as the root of the HelpWindow."},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    public GlossaryWindow(Stage root) {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        super(FXML, root);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        browser.getEngine().load(userGuideUrl);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"     * Creates a new GlossaryWindow."},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    public GlossaryWindow() {"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        this(new Stage());"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"     * Shows the Glossary window."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * @throws IllegalStateException"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * \u003cul\u003e"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *         if this method is called on a thread other than the JavaFX Application Thread."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":54,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"     *         if this method is called during animation or layout processing.ad"},{"lineNumber":56,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":57,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":58,"author":{"gitID":"-"},"content":"     *         if this method is called on the primary stage."},{"lineNumber":59,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     *     \u003cli\u003e"},{"lineNumber":61,"author":{"gitID":"-"},"content":"     *         if {@code dialogStage} is already showing."},{"lineNumber":62,"author":{"gitID":"-"},"content":"     *     \u003c/li\u003e"},{"lineNumber":63,"author":{"gitID":"-"},"content":"     * \u003c/ul\u003e"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"    public void show() {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        logger.fine(\"Showing Glossary page about the application.\");"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        getRoot().show();"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"     */"}],"authorContributionMap":{"null":1,"wyinkok":42,"-":27}},{"path":"src/main/java/seedu/address/ui/StatusBarFooter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.time.Clock;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Date;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import org.controlsfx.control.StatusBar;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * A ui for the status bar that is displayed at the footer of the application."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StatusBarFooter extends UiPart\u003cRegion\u003e {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    public static final String SYNC_STATUS_INITIAL \u003d \"\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * Used to generate time stamps."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * TODO: change clock to an instance variable."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * We leave it as a static variable because manual dependency injection"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * will require passing down the clock reference all the way from MainApp,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * but it should be easier once we have factories/DI frameworks."},{"lineNumber":32,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static Clock clock \u003d Clock.systemDefaultZone();"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"StatusBarFooter.fxml\";"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private StatusBar syncStatus;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    private StatusBar saveLocationStatus;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    public StatusBarFooter(String saveLocation) {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        super(FXML);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        setSyncStatus(SYNC_STATUS_INITIAL);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        setSaveLocation(\"./\" + saveLocation);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Sets the clock used to determine the current time."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static void setClock(Clock clock) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        StatusBarFooter.clock \u003d clock;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the clock currently in use."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public static Clock getClock() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return clock;"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    private void setSaveLocation(String location) {"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    private void setSyncStatus(String status) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        Platform.runLater(() -\u003e this.syncStatus.setText(status));"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"    public void handleInternshipBookChangedEvent(JobbiBotChangedEvent abce) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        long now \u003d clock.millis();"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        String lastUpdated \u003d new Date(now).toString();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":78}},{"path":"src/main/java/seedu/address/ui/UiPart.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.net.URL;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXMLLoader;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.MainApp;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Represents a distinct part of the UI. e.g. Windows, dialogs, panels, status bars, etc."},{"lineNumber":15,"author":{"gitID":"-"},"content":" * It contains a scene graph with a root node of type {@code T}."},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public abstract class UiPart\u003cT\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Resource folder where FXML files are stored. */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String FXML_FILE_FOLDER \u003d \"/view/\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private final FXMLLoader fxmlLoader \u003d new FXMLLoader();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, null);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Constructs a UiPart using the specified FXML file within {@link #FXML_FILE_FOLDER}."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL)"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName));"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file URL and root object."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * The FXML file must not specify the {@code fx:controller} attribute."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    public UiPart(URL fxmlFileUrl, T root) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        loadFxmlFile(fxmlFileUrl, root);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * Constructs a UiPart with the specified FXML file within {@link #FXML_FILE_FOLDER} and root object."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * @see #UiPart(URL, T)"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public UiPart(String fxmlFileName, T root) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        this(getFxmlFileUrl(fxmlFileName), root);"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    protected UiPart() {"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":60,"author":{"gitID":"-"},"content":"     * Returns the root object of the scene graph of this UiPart."},{"lineNumber":61,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public T getRoot() {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        return fxmlLoader.getRoot();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":65,"author":{"gitID":"-"},"content":""},{"lineNumber":66,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"-"},"content":"     * Raises the event via {@link EventsCenter#post(BaseEvent)}"},{"lineNumber":68,"author":{"gitID":"-"},"content":"     * @param event"},{"lineNumber":69,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    protected void raise(BaseEvent event) {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(event);"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Registers the object as an event handler at the {@link EventsCenter}"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * @param handler usually {@code this}"},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    protected void registerAsAnEventHandler(Object handler) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(handler);"},{"lineNumber":80,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"-"},"content":""},{"lineNumber":82,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":83,"author":{"gitID":"-"},"content":"     * Loads the object hierarchy from a FXML document."},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"     * @param location Region of the FXML document."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * @param root Specifies the root of the object hierarchy."},{"lineNumber":86,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    private void loadFxmlFile(URL location, T root) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        requireNonNull(location);"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        fxmlLoader.setLocation(location);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        fxmlLoader.setController(this);"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        fxmlLoader.setRoot(root);"},{"lineNumber":92,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            fxmlLoader.load();"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            throw new AssertionError(e);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"-"},"content":""},{"lineNumber":99,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":100,"author":{"gitID":"-"},"content":"     * Returns the FXML file URL for the specified FXML file name within {@link #FXML_FILE_FOLDER}."},{"lineNumber":101,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    private static URL getFxmlFileUrl(String fxmlFileName) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        requireNonNull(fxmlFileName);"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        String fxmlFileNameWithFolder \u003d FXML_FILE_FOLDER + fxmlFileName;"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        URL fxmlFileUrl \u003d MainApp.class.getResource(fxmlFileNameWithFolder);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        return requireNonNull(fxmlFileUrl);"},{"lineNumber":107,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"-"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":105,"TanCiKang":1}},{"path":"src/main/java/seedu/address/ui/MainWindow.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javafx.event.ActionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javafx.fxml.FXML;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.scene.control.MenuItem;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.scene.control.TextInputControl;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyCombination;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.scene.input.KeyEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.scene.layout.StackPane;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"//import seedu.address.commons.events.ui.ShowGlossaryRequestEvent;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ShowHelpRequestEvent;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * The Main Window. Provides the basic application layout containing"},{"lineNumber":26,"author":{"gitID":"-"},"content":" * a menu bar and space where other JavaFX elements can be placed."},{"lineNumber":27,"author":{"gitID":"-"},"content":" */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"public class MainWindow extends UiPart\u003cStage\u003e {"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private static final String FXML \u003d \"MainWindow.fxml\";"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private Stage primaryStage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private Logic logic;"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    // Independent Ui parts residing in this Ui container"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    private BrowserPanel browserPanel;"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    private InternshipListPanel internshipListPanel;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    private Config config;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    private UserPrefs prefs;"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    private StackPane browserPlaceholder;"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    private StackPane commandBoxPlaceholder;"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    private MenuItem helpMenuItem;"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"    private MenuItem glossaryMenuItem;"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"    private StackPane internshipListPanelPlaceholder;"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    private StackPane chatBotPanelPlaceholder;"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    private StackPane statusbarPlaceholder;"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        super(FXML, primaryStage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        // Set dependencies"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        this.primaryStage \u003d primaryStage;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        this.logic \u003d logic;"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        this.config \u003d config;"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        this.prefs \u003d prefs;"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        // Configure the UI"},{"lineNumber":74,"author":{"gitID":"-"},"content":"        setTitle(config.getAppTitle());"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        setWindowDefaultSize(prefs);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        setAccelerators();"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    public Stage getPrimaryStage() {"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        return primaryStage;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    private void setAccelerators() {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * Sets the accelerator of a MenuItem."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     * @param keyCombination the KeyCombination value of the accelerator"},{"lineNumber":92,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":93,"author":{"gitID":"-"},"content":"    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        menuItem.setAccelerator(keyCombination);"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"        /*"},{"lineNumber":97,"author":{"gitID":"-"},"content":"         * TODO: the code below can be removed once the bug reported here"},{"lineNumber":98,"author":{"gitID":"-"},"content":"         * https://bugs.openjdk.java.net/browse/JDK-8131666"},{"lineNumber":99,"author":{"gitID":"-"},"content":"         * is fixed in later version of SDK."},{"lineNumber":100,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"         * According to the bug report, TextInputControl (TextField, TextArea) will"},{"lineNumber":102,"author":{"gitID":"-"},"content":"         * consume function-key events. Because CommandBox contains a TextField, and"},{"lineNumber":103,"author":{"gitID":"-"},"content":"         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"},{"lineNumber":104,"author":{"gitID":"-"},"content":"         * not work when the focus is in them because the key event is consumed by"},{"lineNumber":105,"author":{"gitID":"-"},"content":"         * the TextInputControl(s)."},{"lineNumber":106,"author":{"gitID":"-"},"content":"         *"},{"lineNumber":107,"author":{"gitID":"-"},"content":"         * For now, we add following event filter to capture such key events and open"},{"lineNumber":108,"author":{"gitID":"-"},"content":"         * help window purposely so to support accelerators even when focus is"},{"lineNumber":109,"author":{"gitID":"-"},"content":"         * in CommandBox or ResultDisplay."},{"lineNumber":110,"author":{"gitID":"-"},"content":"         */"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"},{"lineNumber":113,"author":{"gitID":"-"},"content":"                menuItem.getOnAction().handle(new ActionEvent());"},{"lineNumber":114,"author":{"gitID":"-"},"content":"                event.consume();"},{"lineNumber":115,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"-"},"content":""},{"lineNumber":119,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":120,"author":{"gitID":"-"},"content":"     * Fills up all the placeholders of this window."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    void fillInnerParts() {"},{"lineNumber":123,"author":{"gitID":"-"},"content":"        browserPanel \u003d new BrowserPanel();"},{"lineNumber":124,"author":{"gitID":"-"},"content":"        browserPlaceholder.getChildren().add(browserPanel.getRoot());"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"        internshipListPanel \u003d new InternshipListPanel(logic.getFilteredInternshipList());"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"        internshipListPanelPlaceholder.getChildren().add(internshipListPanel.getRoot());"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"        ChatBotPanel chatBotPanel \u003d new ChatBotPanel(logic);"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"        chatBotPanelPlaceholder.getChildren().add(chatBotPanel.getRoot());"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getJobbiBotFilePath());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"},{"lineNumber":134,"author":{"gitID":"-"},"content":""},{"lineNumber":135,"author":{"gitID":"-"},"content":"        CommandBox commandBox \u003d new CommandBox(logic);"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    void hide() {"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        primaryStage.hide();"},{"lineNumber":141,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"-"},"content":""},{"lineNumber":143,"author":{"gitID":"-"},"content":"    private void setTitle(String appTitle) {"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        primaryStage.setTitle(appTitle);"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Sets the default size based on user preferences."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    private void setWindowDefaultSize(UserPrefs prefs) {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"},{"lineNumber":152,"author":{"gitID":"-"},"content":"        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"},{"lineNumber":155,"author":{"gitID":"-"},"content":"            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"},{"lineNumber":156,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":160,"author":{"gitID":"-"},"content":"     * Returns the current size and the position of the main Window."},{"lineNumber":161,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":162,"author":{"gitID":"-"},"content":"    GuiSettings getCurrentGuiSetting() {"},{"lineNumber":163,"author":{"gitID":"-"},"content":"        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"},{"lineNumber":164,"author":{"gitID":"-"},"content":"                (int) primaryStage.getX(), (int) primaryStage.getY());"},{"lineNumber":165,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":166,"author":{"gitID":"-"},"content":""},{"lineNumber":167,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":168,"author":{"gitID":"-"},"content":"     * Opens the help window."},{"lineNumber":169,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public void handleHelp() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        HelpWindow helpWindow \u003d new HelpWindow();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        helpWindow.show();"},{"lineNumber":174,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":175,"author":{"gitID":"-"},"content":""},{"lineNumber":176,"content":"    //@@author wyinkok-unused"},{"lineNumber":177,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"     * Opens the glossary window"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":181,"author":{"gitID":"wyinkok"},"content":"    public void handleGlossary() {"},{"lineNumber":182,"author":{"gitID":"wyinkok"},"content":"        GlossaryWindow glossaryWindow \u003d new GlossaryWindow();"},{"lineNumber":183,"author":{"gitID":"wyinkok"},"content":"        glossaryWindow.show();"},{"lineNumber":184,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"wyinkok"},"content":"    */"},{"lineNumber":186,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":187,"content":"    //@@author"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    void show() {"},{"lineNumber":189,"author":{"gitID":"-"},"content":"        primaryStage.show();"},{"lineNumber":190,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":191,"author":{"gitID":"-"},"content":""},{"lineNumber":192,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":193,"author":{"gitID":"-"},"content":"     * Closes the application."},{"lineNumber":194,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":195,"author":{"gitID":"-"},"content":"    @FXML"},{"lineNumber":196,"author":{"gitID":"-"},"content":"    private void handleExit() {"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        raise(new ExitAppRequestEvent());"},{"lineNumber":198,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":199,"author":{"gitID":"-"},"content":""},{"lineNumber":200,"author":{"gitID":"-"},"content":"    void releaseResources() {"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        browserPanel.freeResources();"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        handleHelp();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":210,"content":"    //@@author wyinkok-unused"},{"lineNumber":211,"author":{"gitID":"wyinkok"},"content":"    /*"},{"lineNumber":212,"author":{"gitID":"wyinkok"},"content":"    @Subscribe"},{"lineNumber":213,"author":{"gitID":"wyinkok"},"content":"    private void handleShowGlossaryEvent(ShowGlossaryRequestEvent event) {"},{"lineNumber":214,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":215,"author":{"gitID":"wyinkok"},"content":"        handleGlossary();"},{"lineNumber":216,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"wyinkok"},"content":"    */"},{"lineNumber":218,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":219,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"null":3,"wyinkok":32,"-":183,"TanCiKang":1}},{"path":"src/main/java/seedu/address/ui/ChatBotCard.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import javafx.fxml.FXML;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.Label;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.layout.HBox;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" * An UI component that displays information of a chat message."},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"public class ChatBotCard extends UiPart\u003cRegion\u003e {"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ChatBotCard.class);"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    private static final String FXML \u003d \"ChatBotCard.fxml\";"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    private HBox messagePane;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    private Label messages;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    public ChatBotCard(String msg) {"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        super(FXML);"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        setMessage(msg);"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"     * Displays messages from Jobbi or User."},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"     * @param msg"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public void setMessage(String msg) {"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"        messages.setText(msg);"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":40}},{"path":"src/main/java/seedu/address/commons/core/Messages.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Container for user visible messages."},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class Messages {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format \\n%1$s\";"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX \u003d \"The internship index provided is invalid\";"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_INTERNSHIPS_LISTED_OVERVIEW \u003d \"%1$d internships listed!\";"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_INVALID_RESTART_COMMAND \u003d \"Conversation has not restarted. Please type `start`\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":9,"TanCiKang":2}},{"path":"src/main/java/seedu/address/commons/core/Config.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Config values used by the app"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class Config {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    // Config values customizable through config file"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    private String appTitle \u003d \"JobbiBot\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    private Level logLevel \u003d Level.INFO;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private String userPrefsFilePath \u003d \"preferences.json\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String getAppTitle() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return appTitle;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public void setAppTitle(String appTitle) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        this.appTitle \u003d appTitle;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    public Level getLogLevel() {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        return logLevel;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public void setLogLevel(Level logLevel) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.logLevel \u003d logLevel;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        return userPrefsFilePath;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public void setUserPrefsFilePath(String userPrefsFilePath) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        this.userPrefsFilePath \u003d userPrefsFilePath;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        if (!(other instanceof Config)) { //this handles null as well."},{"lineNumber":48,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        Config o \u003d (Config) other;"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return Objects.equals(appTitle, o.appTitle)"},{"lineNumber":54,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"},{"lineNumber":55,"author":{"gitID":"-"},"content":"                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        sb.append(\"App title : \" + appTitle);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        sb.append(\"\\nCurrent log level : \" + logLevel);"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"        sb.append(\"\\nPreference file Region : \" + userPrefsFilePath);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":70,"TanCiKang":1}},{"path":"src/main/java/seedu/address/commons/core/LogsCenter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.core;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.logging.ConsoleHandler;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.FileHandler;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Handler;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.logging.Level;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.SimpleFormatter;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":14,"author":{"gitID":"-"},"content":" * Configures and manages loggers and handlers, including their logging level"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Named {@link Logger}s can be obtained from this class\u003cbr\u003e"},{"lineNumber":16,"author":{"gitID":"-"},"content":" * These loggers have been configured to output messages to the console and a {@code .log} file by default,"},{"lineNumber":17,"author":{"gitID":"-"},"content":" *   at the {@code INFO} level. A new {@code .log} file with a new numbering will be created after the log"},{"lineNumber":18,"author":{"gitID":"-"},"content":" *   file reaches 5MB big, up to a maximum of 5 files.\u003cbr\u003e"},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogsCenter {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_COUNT \u003d 5;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final int MAX_FILE_SIZE_IN_BYTES \u003d (int) (Math.pow(2, 20) * 5); // 5MB"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    private static final String LOG_FILE \u003d \"InternshipBook.log\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static Level currentLogLevel \u003d Level.INFO;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(LogsCenter.class);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static FileHandler fileHandler;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static ConsoleHandler consoleHandler;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Initializes with a custom log level (specified in the {@code config} object)"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * Loggers obtained *AFTER* this initialization will have their logging level changed\u003cbr\u003e"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * Logging levels for existing loggers will only be updated if the logger with the same name"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * is requested again from the LogsCenter."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public static void init(Config config) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        currentLogLevel \u003d config.getLogLevel();"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        logger.info(\"currentLogLevel: \" + currentLogLevel);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * Creates a logger with the given name."},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static Logger getLogger(String name) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        Logger logger \u003d Logger.getLogger(name);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        logger.setUseParentHandlers(false);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"        removeHandlers(logger);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        addConsoleHandler(logger);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        addFileHandler(logger);"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return Logger.getLogger(name);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":55,"author":{"gitID":"-"},"content":"     * Creates a Logger for the given class name."},{"lineNumber":56,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public static \u003cT\u003e Logger getLogger(Class\u003cT\u003e clazz) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (clazz \u003d\u003d null) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            return Logger.getLogger(\"\");"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return getLogger(clazz.getSimpleName());"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Adds the {@code consoleHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * Creates the {@code consoleHandler} if it is null."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    private static void addConsoleHandler(Logger logger) {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        if (consoleHandler \u003d\u003d null) {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            consoleHandler \u003d createConsoleHandler();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        logger.addHandler(consoleHandler);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Remove all the handlers from {@code logger}."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private static void removeHandlers(Logger logger) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Handler[] handlers \u003d logger.getHandlers();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        for (Handler handler : handlers) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            logger.removeHandler(handler);"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * Adds the {@code fileHandler} to the {@code logger}. \u003cbr\u003e"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Creates {@code fileHandler} if it is null."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":89,"author":{"gitID":"-"},"content":"    private static void addFileHandler(Logger logger) {"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"            if (fileHandler \u003d\u003d null) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"                fileHandler \u003d createFileHandler();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"            logger.addHandler(fileHandler);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            logger.warning(\"Error adding file handler for logger.\");"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":98,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * Creates a {@code FileHandler} for the log file."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * @throws IOException if there are problems opening the file."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    private static FileHandler createFileHandler() throws IOException {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        FileHandler fileHandler \u003d new FileHandler(LOG_FILE, MAX_FILE_SIZE_IN_BYTES, MAX_FILE_COUNT, true);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        fileHandler.setFormatter(new SimpleFormatter());"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        fileHandler.setLevel(currentLogLevel);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        return fileHandler;"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":110,"author":{"gitID":"-"},"content":""},{"lineNumber":111,"author":{"gitID":"-"},"content":"    private static ConsoleHandler createConsoleHandler() {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        ConsoleHandler consoleHandler \u003d new ConsoleHandler();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        consoleHandler.setLevel(currentLogLevel);"},{"lineNumber":114,"author":{"gitID":"-"},"content":"        return consoleHandler;"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"-"},"content":"     * Decorates the given string to create a log message suitable for logging event handling methods."},{"lineNumber":119,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e, String message) {"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        return \"---[Event handled][\" + e + \"]\" + message;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @see #getEventHandlingLogMessage(BaseEvent, String)"},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static String getEventHandlingLogMessage(BaseEvent e) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        return getEventHandlingLogMessage(e, \"\");"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":129}},{"path":"src/main/java/seedu/address/ui/ChatBotPanel.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import java.util.logging.Logger;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import org.fxmisc.easybind.EasyBind;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import javafx.fxml.FXML;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.ListCell;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import javafx.scene.layout.Region;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.NewResultAvailableEvent;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.ListElementPointer;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":" * Panel containing the message thread between the chatbot and user."},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"public class ChatBotPanel extends UiPart\u003cRegion\u003e {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ChatBotPanel.class);"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    private static final String FXML \u003d \"ChatBotPanel.fxml\";"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    private Logic logic;"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    private ListElementPointer historySnapshot;"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"    private ObservableList\u003cString\u003e messageList \u003d FXCollections.observableArrayList();"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    @FXML"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private ListView\u003cChatBotCard\u003e chatBotListView;"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"     *  Creates the chatbot thread of messages"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    public ChatBotPanel(Logic logic) {"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        super(FXML);"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        this.logic \u003d logic;"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"        initiateChatBot();"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"        registerAsAnEventHandler(this);"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"     * Initiates the chatbot thread of messages with Jobbi\u0027s welcome message"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    public void initiateChatBot() {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cString\u003e initialMessage \u003d createInitialMessage(messageList);"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cChatBotCard\u003e initialMappedList \u003d EasyBind.map("},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"                initialMessage, (msg) -\u003e new ChatBotCard(msg));"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        // prevents user from selecting list cell"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.setSelectionModel(new DisableSelectionOfListCell\u003c\u003e());"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.setItems(initialMappedList);"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.setCellFactory(listView -\u003e new ChatBotListViewCell());"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"     * Creates the first welcome message from Jobbi"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cString\u003e createInitialMessage(ObservableList\u003cString\u003e initialMessage) {"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        initialMessage.add(\"JOBBI:   \" + \"Hello there, I am Jobbi! \""},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"                + \"I am here to help you find your ideal internship today. Type \u0027start\u0027 to begin your search.\");"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        return initialMessage;"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"     *  Expands on the message thread between user and Jobbi"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"    public void buildConversation(ObservableList\u003cString\u003e listToBuild) {"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cString\u003e updatedMessages \u003d handleUserResponse(listToBuild);"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"        ObservableList\u003cChatBotCard\u003e mappedList \u003d EasyBind.map("},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"                updatedMessages, (msg) -\u003e new ChatBotCard(msg));"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.setItems(mappedList);"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.setCellFactory(listView -\u003e new ChatBotPanel.ChatBotListViewCell());"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        chatBotListView.scrollTo(chatBotListView.getItems().size());"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"     *  Checks if the user has initiated conversation with Jobbi and adds User\u0027s response if he/she has."},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cString\u003e handleUserResponse(ObservableList\u003cString\u003e listToUpdateWithUserResponse) {"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        if (historySnapshot.hasElement(\"start\")) {"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"            listToUpdateWithUserResponse.add(\"USER:   \" + historySnapshot.current());"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"            if (historySnapshot.current().equals(\"new\")) {"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"                listToUpdateWithUserResponse.clear();"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"                initiateChatBot();"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"        return listToUpdateWithUserResponse;"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"     * Checks if the user has initiated conversation with Jobbi and adds Jobbi\u0027s response if he/she has."},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"     * @param listToUpdateWithJobbiResponse"},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"     * @param message"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"     * @return"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"    public ObservableList\u003cString\u003e handleJobbiResponse(ObservableList\u003cString\u003e listToUpdateWithJobbiResponse,"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"                                                      String message) {"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"        historySnapshot \u003d logic.getHistorySnapshot();"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"        if (historySnapshot.hasElement(\"start\")) {"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"            listToUpdateWithJobbiResponse.add(\"JOBBI:  \" + message);"},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"            if (historySnapshot.current().equals(\"new\")) {"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"                listToUpdateWithJobbiResponse.clear();"},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"                initiateChatBot();"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"        return listToUpdateWithJobbiResponse;"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"    @Subscribe"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"    private void handleNewResultAvailableForChatBot(NewResultAvailableEvent event) {"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"        buildConversation(messageList);"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        handleJobbiResponse(messageList, event.message);"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"     * Custom {@code ListCell} that displays the graphics of a {@code ChatBotCard}."},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"    class ChatBotListViewCell extends ListCell\u003cChatBotCard\u003e {"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"        @Override"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"        protected void updateItem(ChatBotCard message, boolean isEmpty) {"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"            super.updateItem(message, isEmpty);"},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"            if (isEmpty || message \u003d\u003d null) {"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"                setGraphic(null);"},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":"                setText(null);"},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":137,"author":{"gitID":"wyinkok"},"content":"            } else {"},{"lineNumber":138,"author":{"gitID":"wyinkok"},"content":"                setGraphic(message.getRoot());"},{"lineNumber":139,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":142,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":142}},{"path":"src/test/java/guitests/guihandles/InternshipListPanelHandle.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package guitests.guihandles;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.scene.control.ListView;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.InternshipCard;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":" * Provides a handle for {@code InternshipListPanel} containing the list of {@code InternshipCard}."},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"public class InternshipListPanelHandle extends NodeHandle\u003cListView\u003cInternshipCard\u003e\u003e {"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    public static final String INTERNSHIP_LIST_VIEW_ID \u003d \"#internshipListView\";"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    private Optional\u003cInternshipCard\u003e lastRememberedSelectedInternshipCard;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public InternshipListPanelHandle(ListView\u003cInternshipCard\u003e internshipListPanelNode) {"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"        super(internshipListPanelNode);"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"     * Returns a handle to the selected {@code InternshipCardHandle}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * A maximum of 1 item can be selected at any time."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     * @throws AssertionError if no card is selected, or more than 1 card is selected."},{"lineNumber":26,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    public InternshipCardHandle getHandleToSelectedCard() {"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternshipCard\u003e internshipList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"        if (internshipList.size() !\u003d 1) {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"Internship list size expected 1.\");"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"        return new InternshipCardHandle(internshipList.get(0).getRoot());"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Returns the index of the selected card."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    public int getSelectedCardIndex() {"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        return getRootNode().getSelectionModel().getSelectedIndex();"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Returns true if a card is currently selected."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean isAnyCardSelected() {"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternshipCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (selectedCardsList.size() \u003e 1) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Card list size expected 0 or 1.\");"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"        return !selectedCardsList.isEmpty();"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"     * Navigates the listview to display and select the internship."},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"    public void navigateToCard(Internship internship) {"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternshipCard\u003e cards \u003d getRootNode().getItems();"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"        Optional\u003cInternshipCard\u003e matchingCard \u003d"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"                cards.stream().filter(card -\u003e card.internship.equals(internship)).findFirst();"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        if (!matchingCard.isPresent()) {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"            throw new IllegalArgumentException(\"Internship does not exist.\");"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        guiRobot.interact(() -\u003e {"},{"lineNumber":70,"author":{"gitID":"-"},"content":"            getRootNode().scrollTo(matchingCard.get());"},{"lineNumber":71,"author":{"gitID":"-"},"content":"            getRootNode().getSelectionModel().select(matchingCard.get());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        });"},{"lineNumber":73,"author":{"gitID":"-"},"content":"        guiRobot.pauseForHuman();"},{"lineNumber":74,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":75,"author":{"gitID":"-"},"content":""},{"lineNumber":76,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"     * Returns the internship card handle of an internship associated with the {@code index} in the list."},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"    public InternshipCardHandle getInternshipCardHandle(int index) {"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"        return getInternshipCardHandle(getRootNode().getItems().get(index).internship);"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"     * Returns the {@code InternshipCardHandle} of the specified {@code internship} in the list."},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"    public InternshipCardHandle getInternshipCardHandle(Internship internship) {"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":"        Optional\u003cInternshipCardHandle\u003e handle \u003d getRootNode().getItems().stream()"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"                .filter(card -\u003e card.internship.equals(internship))"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"                .map(card -\u003e new InternshipCardHandle(card.getRoot()))"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"                .findFirst();"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Internship does not exist.\"));"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"     * Selects the {@code InternshipCard} at {@code index} in the list."},{"lineNumber":96,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":97,"author":{"gitID":"-"},"content":"    public void select(int index) {"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        getRootNode().getSelectionModel().select(index);"},{"lineNumber":99,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":100,"author":{"gitID":"-"},"content":""},{"lineNumber":101,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":102,"author":{"gitID":"-"},"content":"     * Remembers the selected {@code PersonCard} in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"    public void rememberSelectedInternshipCard() {"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternshipCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"            lastRememberedSelectedInternshipCard \u003d Optional.empty();"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"        } else {"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"            lastRememberedSelectedInternshipCard \u003d Optional.of(selectedItems.get(0));"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":112,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":113,"author":{"gitID":"-"},"content":""},{"lineNumber":114,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"     * {@code rememberSelectedInternshipCard()} call."},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"    public boolean isSelectedInternshipCardChanged() {"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternshipCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"        if (selectedItems.size() \u003d\u003d 0) {"},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"            return lastRememberedSelectedInternshipCard.isPresent();"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"        } else {"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":"            return !lastRememberedSelectedInternshipCard.isPresent()"},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"                    || !lastRememberedSelectedInternshipCard.get().equals(selectedItems.get(0));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":128,"author":{"gitID":"-"},"content":""},{"lineNumber":129,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":130,"author":{"gitID":"-"},"content":"     * Returns the size of the list."},{"lineNumber":131,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":132,"author":{"gitID":"-"},"content":"    public int getListSize() {"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return getRootNode().getItems().size();"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":60,"-":64,"TanCiKang":11}},{"path":"src/main/java/seedu/address/commons/events/ui/JumpToListRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Indicates a request to jump to the list of internships"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class JumpToListRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public final int targetIndex;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public JumpToListRequestEvent(Index targetIndex) {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex.getZeroBased();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":19,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":21,"TanCiKang":1}},{"path":"src/main/java/seedu/address/commons/events/ui/InternshipPanelSelectionChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.ui.InternshipCard;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":" * Represents a selection change in the Internship List Panel"},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"public class InternshipPanelSelectionChangedEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    private final InternshipCard newSelection;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    public InternshipPanelSelectionChangedEvent(InternshipCard newSelection) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.newSelection \u003d newSelection;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    public InternshipCard getNewSelection() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        return newSelection;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":6,"-":20}},{"path":"src/main/java/seedu/address/commons/events/ui/ShowGlossaryRequestEvent.java","lines":[{"lineNumber":1,"content":"//@@author wyinkok-unused"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"//package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"//import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * An event requesting to view the Glossary page."},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public class ShowGlossaryRequestEvent extends BaseEvent {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":" */"}],"authorContributionMap":{"null":1,"wyinkok":11,"-":5}},{"path":"src/main/java/seedu/address/logic/Logic.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"-"},"content":" * API of the Logic component"},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public interface Logic {"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":14,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     * @param commandText The command as entered by the user."},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * @return the result of the command execution."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * @throws ParseException If an error occurs during parsing."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    CommandResult execute(String commandText) throws CommandException, ParseException;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"    /** Returns an unmodifiable view of the filtered list of internships */"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    ObservableList\u003cInternship\u003e getFilteredInternshipList();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    ListElementPointer getHistorySnapshot();"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":24,"TanCiKang":3}},{"path":"src/main/java/seedu/address/commons/events/ui/StartAppRequestEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.commons.events.ui;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":" * Indicates a request to start conversation with Jobbi"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"public class StartAppRequestEvent extends BaseEvent {"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    public String toString() {"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"        return this.getClass().getSimpleName();"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":15}},{"path":"src/main/java/seedu/address/commons/events/model/JobbiBotChangedEvent.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.commons.events.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.BaseEvent;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"/** Indicates the JobbiBot in the model has changed*/"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"public class JobbiBotChangedEvent extends BaseEvent {"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"    public final ReadOnlyJobbiBot data;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"    public JobbiBotChangedEvent(ReadOnlyJobbiBot data) {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"        this.data \u003d data;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"        return \"number of internships \" + data.getInternshipList().size() + \", number of tags \""},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"                + data.getTagList().size();"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":8,"-":10,"TanCiKang":2}},{"path":"src/main/java/seedu/address/logic/parser/InternshipBookParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_RESTART_COMMAND;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.regex.Matcher;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.regex.Pattern;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ExitCommand;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HelpCommand;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.HistoryCommand;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.ListCommand;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.NewChatCommand;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.RedoCommand;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.SaveCommand;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SelectCommand;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.StartCommand;"},{"lineNumber":23,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.UndoCommand;"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UnsaveCommand;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * Parses user input."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"public class InternshipBookParser {"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Used for initial separation of command word and args."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    private static boolean hasRestarted \u003d false;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private static boolean hasStarted \u003d false;"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * Parses user input into command for execution."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @param userInput full user input string"},{"lineNumber":43,"author":{"gitID":"-"},"content":"     * @return the command based on the user input"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public Command parseCommand(String userInput) throws ParseException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        if (!matcher.matches()) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        final String commandWord \u003d matcher.group(\"commandWord\").toLowerCase();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        final String arguments \u003d matcher.group(\"arguments\");"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        switch (commandWord) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"        case SelectCommand.COMMAND_WORD:"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return new SelectCommandParser().parse(arguments);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        case FindCommand.COMMAND_WORD:"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":61,"author":{"gitID":"-"},"content":"            return new FindCommandParser().parse(arguments);"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"        case FilterCommand.COMMAND_WORD:"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"            return new FilterCommandParser().parse(arguments);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        //@@author wyinkok"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        case SaveCommand.COMMAND_WORD:"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"            return new SaveCommandParser().parse(arguments);"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"        case UnsaveCommand.COMMAND_WORD:"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"            return new UnsaveCommandParser().parse(arguments);"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":"        //@@author niloc94"},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"        case SortCommand.COMMAND_WORD:"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"            checkIfConversationRestarted();"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":"            return new SortCommandParser().parse(arguments);"},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":"        //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Command without arguments \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"        //@@author"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        case ListCommand.COMMAND_WORD:"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":87,"author":{"gitID":"-"},"content":"            return new ListCommand();"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"        case HistoryCommand.COMMAND_WORD:"},{"lineNumber":90,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            return new HistoryCommand();"},{"lineNumber":93,"author":{"gitID":"-"},"content":""},{"lineNumber":94,"author":{"gitID":"-"},"content":"        case ExitCommand.COMMAND_WORD:"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"            return new ExitCommand();"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"        case HelpCommand.COMMAND_WORD:"},{"lineNumber":99,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":100,"author":{"gitID":"-"},"content":"            return new HelpCommand();"},{"lineNumber":101,"author":{"gitID":"-"},"content":""},{"lineNumber":102,"author":{"gitID":"-"},"content":"        case UndoCommand.COMMAND_WORD:"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":105,"author":{"gitID":"-"},"content":"            return new UndoCommand();"},{"lineNumber":106,"author":{"gitID":"-"},"content":""},{"lineNumber":107,"author":{"gitID":"-"},"content":"        case RedoCommand.COMMAND_WORD:"},{"lineNumber":108,"author":{"gitID":"-"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":110,"author":{"gitID":"-"},"content":"            return new RedoCommand();"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"        //@@author wyinkok"},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"        case StartCommand.COMMAND_WORD:"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"            hasRestarted \u003d false;"},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"            checkIfConversationRestarted();"},{"lineNumber":117,"author":{"gitID":"wyinkok"},"content":"            if (!hasStarted) {"},{"lineNumber":118,"author":{"gitID":"wyinkok"},"content":"                hasStarted \u003d true;"},{"lineNumber":119,"author":{"gitID":"wyinkok"},"content":"                return new StartCommand();"},{"lineNumber":120,"author":{"gitID":"wyinkok"},"content":"            } else {"},{"lineNumber":121,"author":{"gitID":"wyinkok"},"content":"                throw new ParseException(\"Our conversation has already started.\""},{"lineNumber":122,"author":{"gitID":"wyinkok"},"content":"                        + \" Type \u0027new\u0027 if you would like to restart our conversation\");"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":124,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":125,"author":{"gitID":"wyinkok"},"content":"        case NewChatCommand.COMMAND_WORD:"},{"lineNumber":126,"author":{"gitID":"wyinkok"},"content":"            checkIfContainArguments(arguments);"},{"lineNumber":127,"author":{"gitID":"wyinkok"},"content":"            hasStarted \u003d false;"},{"lineNumber":128,"author":{"gitID":"wyinkok"},"content":"            if (!hasRestarted) {"},{"lineNumber":129,"author":{"gitID":"wyinkok"},"content":"                hasRestarted \u003d true;"},{"lineNumber":130,"author":{"gitID":"wyinkok"},"content":"                return new NewChatCommand();"},{"lineNumber":131,"author":{"gitID":"wyinkok"},"content":"            } else {"},{"lineNumber":132,"author":{"gitID":"wyinkok"},"content":"                throw new AssertionError(\"Conversation should only restart after Start Command is \""},{"lineNumber":133,"author":{"gitID":"wyinkok"},"content":"                        + \"entered again\");"},{"lineNumber":134,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":135,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":136,"author":{"gitID":"wyinkok"},"content":"        //@@author"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        default:"},{"lineNumber":138,"author":{"gitID":"-"},"content":"            throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"},{"lineNumber":139,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":141,"author":{"gitID":"-"},"content":""},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public void resetHasStarted() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        hasStarted \u003d false;"},{"lineNumber":144,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":145,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":146,"author":{"gitID":"-"},"content":"    public boolean getHasStarted() {"},{"lineNumber":147,"author":{"gitID":"-"},"content":"        return hasStarted;"},{"lineNumber":148,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":149,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":150,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":151,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":152,"author":{"gitID":"wyinkok"},"content":"     * Checks if the user has typed in the start command after the new command to restart the conversation successfully"},{"lineNumber":153,"author":{"gitID":"wyinkok"},"content":"     * @throws ParseException if any other command is typed in after the new command"},{"lineNumber":154,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":155,"author":{"gitID":"wyinkok"},"content":"    private void checkIfConversationRestarted() throws ParseException {"},{"lineNumber":156,"author":{"gitID":"wyinkok"},"content":"        if (hasRestarted) {"},{"lineNumber":157,"author":{"gitID":"wyinkok"},"content":"            throw new ParseException(MESSAGE_INVALID_RESTART_COMMAND);"},{"lineNumber":158,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":159,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":160,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":161,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":162,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":163,"author":{"gitID":"niloc94"},"content":"     *  Helper method to check if commands without arguments have arguments added to it"},{"lineNumber":164,"author":{"gitID":"niloc94"},"content":"     * @throws ParseException"},{"lineNumber":165,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":166,"author":{"gitID":"niloc94"},"content":"    private void checkIfContainArguments(String arguments) throws ParseException {"},{"lineNumber":167,"author":{"gitID":"niloc94"},"content":"        if (!arguments.isEmpty()) {"},{"lineNumber":168,"author":{"gitID":"niloc94"},"content":"            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"},{"lineNumber":169,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":170,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":171,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":19,"wyinkok":61,"-":91}},{"path":"src/main/java/seedu/address/logic/parser/SaveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.SaveCommand;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" * Parses input arguments and creates a new SaveCommand object."},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class SaveCommandParser implements Parser\u003cSaveCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"     * Parses the given {@code String} of arguments in the context of the SaveCommand"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"     * and returns an SaveCommand object for execution."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    public SaveCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"            return new SaveCommand(index);"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SaveCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":32}},{"path":"src/main/java/seedu/address/logic/parser/CliSyntax.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"-"},"content":" * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"},{"lineNumber":5,"author":{"gitID":"-"},"content":" */"},{"lineNumber":6,"author":{"gitID":"-"},"content":"public class CliSyntax {"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"    /* Prefix definitions */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"    public static final Prefix PREFIX_SALARY \u003d new Prefix(\"s/\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"    public static final Prefix PREFIX_INDUSTRY \u003d new Prefix(\"i/\");"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"    public static final Prefix PREFIX_REGION \u003d new Prefix(\"l/\");"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    public static final Prefix PREFIX_ROLE \u003d new Prefix(\"r/\");"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":14,"TanCiKang":3}},{"path":"src/main/java/seedu/address/logic/parser/FindCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FindCommand;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FindCommand object"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"-"},"content":"public class FindCommandParser implements Parser\u003cFindCommand\u003e {"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FindCommand"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * and returns an FindCommand object for execution."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     * Argument keywords only contain unique values"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public FindCommand parse(String args) throws ParseException {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":27,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":29,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"        //@@author niloc94"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"        // Create a unique (no duplicates) list of keywords, using the Sets Collection"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"        ArrayList\u003cString\u003e uniqueKeywords \u003d new ArrayList\u003c\u003e(new HashSet\u003c\u003e(Arrays.asList(nameKeywords)));"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        ModelManager.setKeywords(uniqueKeywords);"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        return new FindCommand(new InternshipContainsKeywordsPredicate(uniqueKeywords));"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":9,"-":32,"TanCiKang":1}},{"path":"src/main/java/seedu/address/logic/parser/ParserUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collection;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Industry;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Region;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Role;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Contains utility methods used for parsing strings in the various *Parser classes."},{"lineNumber":24,"author":{"gitID":"-"},"content":" * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"},{"lineNumber":25,"author":{"gitID":"-"},"content":" * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."},{"lineNumber":26,"author":{"gitID":"-"},"content":" * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"},{"lineNumber":28,"author":{"gitID":"-"},"content":" * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"},{"lineNumber":29,"author":{"gitID":"-"},"content":" * {@code Optional} return value inside {@code ParserUtil} methods."},{"lineNumber":30,"author":{"gitID":"-"},"content":" */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"public class ParserUtil {"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * trimmed."},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        String trimmedIndex \u003d oneBasedIndex.trim();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"-"},"content":"     * Parses a {@code String name} into a {@code Name}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":52,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code name} is invalid."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public static Name parseName(String name) throws IllegalValueException {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        String trimmedName \u003d name.trim();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(trimmedName)) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        return new Name(trimmedName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":65,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."},{"lineNumber":66,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":67,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":70,"author":{"gitID":"-"},"content":"        return name.isPresent() ? Optional.of(parseName(name.get())) : Optional.empty();"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code String salary} into a {@code Salary}."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":76,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if the given {@code salary} is invalid."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"    public static Salary parseSalary(String salary) throws IllegalValueException {"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(salary);"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"        String trimmedSalary \u003d salary.trim();"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        if (!Salary.isValidSalary(trimmedSalary)) {"},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"        return new Salary(trimmedSalary);"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":87,"author":{"gitID":"-"},"content":""},{"lineNumber":88,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code Optional\u003cString\u003e salary} into an {@code Optional\u003cSalary\u003e} if {@code salary} is present."},{"lineNumber":90,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"    public static Optional\u003cSalary\u003e parseSalary(Optional\u003cString\u003e salary) throws IllegalValueException {"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(salary);"},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"        return salary.isPresent() ? Optional.of(parseSalary(salary.get())) : Optional.empty();"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Parses a {@code String address} into an {@code Address}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":101,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code address} is invalid."},{"lineNumber":102,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    public static Address parseAddress(String address) throws IllegalValueException {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        String trimmedAddress \u003d address.trim();"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(trimmedAddress)) {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":108,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        return new Address(trimmedAddress);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":115,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":116,"author":{"gitID":"-"},"content":"    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        return address.isPresent() ? Optional.of(parseAddress(address.get())) : Optional.empty();"},{"lineNumber":119,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":122,"author":{"gitID":"-"},"content":"     * Parses a {@code String email} into an {@code Email}."},{"lineNumber":123,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":124,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":125,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code email} is invalid."},{"lineNumber":126,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":127,"author":{"gitID":"-"},"content":"    public static Email parseEmail(String email) throws IllegalValueException {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        String trimmedEmail \u003d email.trim();"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(trimmedEmail)) {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        return new Email(trimmedEmail);"},{"lineNumber":134,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":135,"author":{"gitID":"-"},"content":""},{"lineNumber":136,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":137,"author":{"gitID":"-"},"content":"     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."},{"lineNumber":138,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":139,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":140,"author":{"gitID":"-"},"content":"    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        return email.isPresent() ? Optional.of(parseEmail(email.get())) : Optional.empty();"},{"lineNumber":143,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"-"},"content":""},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code String industry} into an {@code Industry}."},{"lineNumber":147,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":148,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if the given {@code industry} is invalid."},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"    public static Industry parseIndustry(String industry) throws IllegalValueException {"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(industry);"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"        String trimmedIndustry \u003d industry.trim();"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"        if (!Industry.isValidIndustry(trimmedIndustry)) {"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Industry.MESSAGE_INDUSTRY_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"TanCiKang"},"content":"        return new Industry(trimmedIndustry);"},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code Optional\u003cString\u003e industry} into an {@code Optional\u003cIndustry\u003e} if {@code industry} is present."},{"lineNumber":162,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":163,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"    public static Optional\u003cIndustry\u003e parseIndustry(Optional\u003cString\u003e industry) throws IllegalValueException {"},{"lineNumber":165,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(industry);"},{"lineNumber":166,"author":{"gitID":"TanCiKang"},"content":"        return industry.isPresent() ? Optional.of(parseIndustry(industry.get())) : Optional.empty();"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":170,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code String region} into an {@code Region}."},{"lineNumber":171,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":172,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if the given {@code region} is invalid."},{"lineNumber":174,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":175,"author":{"gitID":"TanCiKang"},"content":"    public static Region parseRegion(String region) throws IllegalValueException {"},{"lineNumber":176,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(region);"},{"lineNumber":177,"author":{"gitID":"TanCiKang"},"content":"        String trimmedRegion \u003d region.trim();"},{"lineNumber":178,"author":{"gitID":"TanCiKang"},"content":"        if (!Region.isValidRegion(trimmedRegion)) {"},{"lineNumber":179,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Region.MESSAGE_REGION_CONSTRAINTS);"},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"        return new Region(trimmedRegion);"},{"lineNumber":182,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":184,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":185,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code Optional\u003cString\u003e region} into an {@code Optional\u003cRegion\u003e} if {@code region} is present."},{"lineNumber":186,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":187,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":188,"author":{"gitID":"TanCiKang"},"content":"    public static Optional\u003cRegion\u003e parseRegion(Optional\u003cString\u003e region) throws IllegalValueException {"},{"lineNumber":189,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(region);"},{"lineNumber":190,"author":{"gitID":"TanCiKang"},"content":"        return region.isPresent() ? Optional.of(parseRegion(region.get())) : Optional.empty();"},{"lineNumber":191,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":193,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":194,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":195,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code String role} into an {@code Role}."},{"lineNumber":196,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":197,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":198,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if the given {@code role} is invalid."},{"lineNumber":199,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":200,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":201,"author":{"gitID":"TanCiKang"},"content":"    public static Role parseRole(String role) throws IllegalValueException {"},{"lineNumber":202,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(role);"},{"lineNumber":203,"author":{"gitID":"TanCiKang"},"content":"        String trimmedRole \u003d role.trim();"},{"lineNumber":204,"author":{"gitID":"TanCiKang"},"content":"        if (!Role.isValidRole(trimmedRole)) {"},{"lineNumber":205,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":206,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":207,"author":{"gitID":"TanCiKang"},"content":"        return new Role(trimmedRole);"},{"lineNumber":208,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":210,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":211,"author":{"gitID":"TanCiKang"},"content":"     * Parses a {@code Optional\u003cString\u003e role} into an {@code Optional\u003cRole\u003e} if {@code role} is present."},{"lineNumber":212,"author":{"gitID":"-"},"content":"     * See header comment of this class regarding the use of {@code Optional} parameters."},{"lineNumber":213,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":214,"author":{"gitID":"TanCiKang"},"content":"    public static Optional\u003cRole\u003e parseRole(Optional\u003cString\u003e role) throws IllegalValueException {"},{"lineNumber":215,"author":{"gitID":"TanCiKang"},"content":"        return role.isPresent() ? Optional.of(parseRole(role.get())) : Optional.empty();"},{"lineNumber":216,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":217,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":218,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":219,"author":{"gitID":"-"},"content":"     * Parses a {@code String tag} into a {@code Tag}."},{"lineNumber":220,"author":{"gitID":"-"},"content":"     * Leading and trailing whitespaces will be trimmed."},{"lineNumber":221,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":222,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if the given {@code tag} is invalid."},{"lineNumber":223,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"-"},"content":"    public static Tag parseTag(String tag) throws IllegalValueException {"},{"lineNumber":225,"author":{"gitID":"-"},"content":"        requireNonNull(tag);"},{"lineNumber":226,"author":{"gitID":"-"},"content":"        String trimmedTag \u003d tag.trim();"},{"lineNumber":227,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(trimmedTag)) {"},{"lineNumber":228,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":229,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":230,"author":{"gitID":"-"},"content":"        return new Tag(trimmedTag);"},{"lineNumber":231,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":232,"author":{"gitID":"-"},"content":""},{"lineNumber":233,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":234,"author":{"gitID":"-"},"content":"     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."},{"lineNumber":235,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":236,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"},{"lineNumber":237,"author":{"gitID":"-"},"content":"        requireNonNull(tags);"},{"lineNumber":238,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"},{"lineNumber":239,"author":{"gitID":"-"},"content":"        for (String tagName : tags) {"},{"lineNumber":240,"author":{"gitID":"-"},"content":"            tagSet.add(parseTag(tagName));"},{"lineNumber":241,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":242,"author":{"gitID":"-"},"content":"        return tagSet;"},{"lineNumber":243,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":244,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":164,"TanCiKang":80}},{"path":"src/main/java/seedu/address/logic/ListElementPointer.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.NoSuchElementException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Has a cursor that points to an element in the list, and is able to iterate through the list."},{"lineNumber":9,"author":{"gitID":"-"},"content":" * This is different from {@code ListIterator}, which has a cursor that points in between elements."},{"lineNumber":10,"author":{"gitID":"-"},"content":" * The {@code ListIterator}\u0027s behaviour: when making alternating calls of {@code next()} and"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * {@code previous()}, the same element is returned on both calls."},{"lineNumber":12,"author":{"gitID":"-"},"content":" * In contrast, {@code ListElementPointer}\u0027s behaviour: when making alternating calls of"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * {@code next()} and {@code previous()}, the next and previous elements are returned respectively."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class ListElementPointer {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    private List\u003cString\u003e list;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"    private int index;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * Constructs {@code ListElementPointer} which is backed by a defensive copy of {@code list}."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * The cursor points to the last element in {@code list}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public ListElementPointer(List\u003cString\u003e list) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        this.list \u003d new ArrayList\u003c\u003e(list);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        index \u003d this.list.size() - 1;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Appends {@code element} to the end of the list."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public void add(String element) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        list.add(element);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #next()} does not throw an {@code NoSuchElementException}."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public boolean hasNext() {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        int nextIndex \u003d index + 1;"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        return isWithinBounds(nextIndex);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #previous()} does not throw an {@code NoSuchElementException}."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public boolean hasPrevious() {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        int previousIndex \u003d index - 1;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return isWithinBounds(previousIndex);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     * Returns true if calling {@code #current()} does not throw an {@code NoSuchElementException}."},{"lineNumber":53,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public boolean hasCurrent() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return isWithinBounds(index);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    private boolean isWithinBounds(int index) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"    //@@author wyinkok"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"     * Returns true if calling {@code #hasElement} does not throw an {@code NoSuchElementException}."},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"    public boolean hasElement(String toSearch) {"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        if (list.contains(toSearch)) {"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"            return true;"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        } else {"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"            return false;"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":75,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":76,"author":{"gitID":"-"},"content":"     * Returns the next element in the list and advances the cursor position."},{"lineNumber":77,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more next element in the list."},{"lineNumber":78,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    public String next() {"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        if (!hasNext()) {"},{"lineNumber":81,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        return list.get(++index);"},{"lineNumber":84,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":85,"author":{"gitID":"-"},"content":""},{"lineNumber":86,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":87,"author":{"gitID":"-"},"content":"     * Returns the previous element in the list and moves the cursor position backwards."},{"lineNumber":88,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if there is no more previous element in the list."},{"lineNumber":89,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    public String previous() {"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        if (!hasPrevious()) {"},{"lineNumber":92,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":93,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        return list.get(--index);"},{"lineNumber":95,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":96,"author":{"gitID":"-"},"content":""},{"lineNumber":97,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":98,"author":{"gitID":"-"},"content":"     * Returns the current element in the list."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * @throws NoSuchElementException if the list is empty."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    public String current() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        if (!hasCurrent()) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"            throw new NoSuchElementException();"},{"lineNumber":104,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return list.get(index);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":109,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        // short circuit if same object"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"        // instanceof handles nulls"},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (!(other instanceof ListElementPointer)) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":""},{"lineNumber":120,"author":{"gitID":"-"},"content":"        // state check"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        ListElementPointer iterator \u003d (ListElementPointer) other;"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        return list.equals(iterator.list) \u0026\u0026 index \u003d\u003d iterator.index;"},{"lineNumber":123,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":124,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":13,"-":111}},{"path":"src/main/java/seedu/address/logic/commands/StartCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.StartAppRequestEvent;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * Starts the conversation with Jobbi."},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public class StartCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    public static final String COMMAND_WORD \u003d \"start\";"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_START_ACKNOWLEDGEMENT \u003d \"Next, please key in all the industries and roles\""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"            + \" that you are interested in.  To view a suggested list of possible industries and roles, \""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"            + \"type \u0027help\u0027. \\n\\nE.g  find finance technology marketing consulting\";"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    public CommandResult execute() {"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"        EventsCenter.getInstance().post(new StartAppRequestEvent());"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"        return new CommandResult(MESSAGE_START_ACKNOWLEDGEMENT);"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":23}},{"path":"src/main/java/seedu/address/logic/commands/ListCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":" * Lists all internships in the address book to the user."},{"lineNumber":11,"author":{"gitID":"-"},"content":" */"},{"lineNumber":12,"author":{"gitID":"-"},"content":"public class ListCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"list\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Here are all the internships I have stored\";"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"    public CommandResult execute() {"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"        ModelManager.setKeywords(new ArrayList\u003c\u003e());"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"        model.updateSearchedInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"        model.removeTagsFromFilteredList();"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"        return new CommandResult(MESSAGE_SUCCESS);"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":14,"TanCiKang":11}},{"path":"src/main/java/seedu/address/logic/parser/FilterCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.FilterCommand;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsAllKeywordsPredicate;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"-"},"content":" * Parses input arguments and creates a new FilterCommand.java object"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class FilterCommandParser implements Parser\u003cFilterCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Parses the given {@code String} of arguments in the context of the FilterCommand.java"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * and returns an FilterCommand.java object for execution."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public FilterCommand parse(String args) throws ParseException {"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"            throw new ParseException("},{"lineNumber":25,"author":{"gitID":"-"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FilterCommand.MESSAGE_USAGE));"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        return new FilterCommand(new InternshipContainsAllKeywordsPredicate(Arrays.asList(nameKeywords)));"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":30,"TanCiKang":2}},{"path":"src/main/java/seedu/address/logic/parser/UnsaveCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.parser;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.UnsaveCommand;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" * Parses input arguments and creates a new UnsaveCommand object"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"public class UnsaveCommandParser implements Parser\u003cUnsaveCommand\u003e {"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"     * Parses the given {@code String} of arguments in the context of the UnsaveCommand"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"     * and returns an UnsaveCommand object for execution."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"     * @throws ParseException if the user input does not conform the expected format."},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    public UnsaveCommand parse(String args) throws ParseException {"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"            Index index \u003d ParserUtil.parseIndex(args);"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"            return new UnsaveCommand(index);"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"            throw new ParseException("},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, UnsaveCommand.MESSAGE_USAGE));"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":31}},{"path":"src/main/java/seedu/address/logic/commands/FilterCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsAllKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":6,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"niloc94"},"content":" * Filter the lists all internships in the internship according to all keyword arguments"},{"lineNumber":8,"author":{"gitID":"niloc94"},"content":" * Keyword matching is case insensitive"},{"lineNumber":9,"author":{"gitID":"niloc94"},"content":" *"},{"lineNumber":10,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":11,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":12,"author":{"gitID":"niloc94"},"content":"public class FilterCommand extends Command {"},{"lineNumber":13,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":"    public static final String COMMAND_WORD \u003d \"filter\";"},{"lineNumber":15,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":16,"author":{"gitID":"niloc94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all internship from the list which contain the\""},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"            + \"Example: \" + COMMAND_WORD + \" Marketing\";"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"    public static final String MESSAGE_FILTER_RESPONSE \u003d \"How would you to sort your results by? You may only sort by \""},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"            + \"Industry Region Name Role Salary \\n\\nE.g sort industry role salary\";"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"    public static final String MESSAGE_FILTER_RESPONSE_NO_INTERNSHIP \u003d \"No internships found ! You may want to try \""},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"            + \"using lesser keywords or change your keywords \\n\""},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"            + \"E.g filter Central\";"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"    private final InternshipContainsAllKeywordsPredicate predicate;"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"    public FilterCommand(InternshipContainsAllKeywordsPredicate predicate) {"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"        model.updateFilteredInternshipList(predicate);"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"        return getCommandResult();"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"                || (other instanceof FilterCommand // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"                \u0026\u0026 this.predicate.equals(((FilterCommand) other).predicate)); // state check"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"     * Helper method to retrieve the correct message for command results"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"     * @return"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"    private CommandResult getCommandResult() {"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"        if (model.getFilteredInternshipList().size() \u003e 0) {"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"            return new CommandResult(MESSAGE_FILTER_RESPONSE);"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"            return new CommandResult(MESSAGE_FILTER_RESPONSE_NO_INTERNSHIP);"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":54,"-":3,"TanCiKang":1}},{"path":"src/main/java/seedu/address/logic/commands/Command.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"-"},"content":" * Represents a command with hidden internal logic and the ability to be executed."},{"lineNumber":12,"author":{"gitID":"-"},"content":" */"},{"lineNumber":13,"author":{"gitID":"-"},"content":"public abstract class Command {"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    protected CommandHistory history;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    protected UndoRedoStack undoRedoStack;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"     * Constructs a feedback message to summarise an operation that displayed a listing of internships."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"-"},"content":"     * @param displaySize used to generate summary"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"     * @return summary message for internships displayed"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"    public static String getMessageForInternshipListShownSummary(int displaySize) {"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        return String.format(Messages.MESSAGE_INTERNSHIPS_LISTED_OVERVIEW, displaySize);"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Executes the command and returns the result message."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * @return feedback message of the operation result for display"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @throws CommandException If an error occurs during command execution."},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    public abstract CommandResult execute() throws CommandException, DuplicateInternshipException;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"-"},"content":"     * Provides any needed dependencies to the command."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     * Commands making use of any of these should override this method to gain"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * access to the dependencies."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":38,"TanCiKang":5}},{"path":"src/main/java/seedu/address/logic/commands/SortCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":6,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"niloc94"},"content":" * Sort and lists all Internships in the Internship List according to the order of the keywords given"},{"lineNumber":8,"author":{"gitID":"niloc94"},"content":" * Keyword matching is case insensitive."},{"lineNumber":9,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":10,"author":{"gitID":"niloc94"},"content":"public class SortCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":12,"author":{"gitID":"niloc94"},"content":"    public static final String COMMAND_WORD \u003d \"sort\";"},{"lineNumber":13,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":"    public static final String SORT_SUCCESSS_MESSAGE \u003d \"Sort success! Here is your ideal list of internships. \\n\\n\""},{"lineNumber":15,"author":{"gitID":"niloc94"},"content":"            + \"If you would like to search, filter or sort again, \""},{"lineNumber":16,"author":{"gitID":"niloc94"},"content":"            + \"key in the respective command word(s) and the new thing(s) you would like to search/filter/sort. \""},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":"            + \"Please note that redoing the above commands will clear your existing search.\";"},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"    public static final String NOTHING_TO_SORT_MESSAGE \u003d \"No internships to sort! \";"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Sort all internships according \""},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"            + \"to the argument(s) given and displays them as a list with index numbers.\\n\""},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"            + \"Up to 3 arguments will be sorted.\""},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"            + \"Negative valid arguments (e.g sort -industry) sorts in reverse orders\\n\""},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"            + \"Example: \" + COMMAND_WORD + \" Industry Role Region\";"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"    public SortCommand(List\u003cString\u003e keywords) {"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"    public CommandResult execute() {"},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"        model.setComparator(keywords);"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"        return getCommandResult();"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"                || (other instanceof SortCommand) // instanceof handles nulls"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"                \u0026\u0026 this.keywords.equals(((SortCommand) other).keywords);"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"     * Helper method to retrieve the correct message for command results"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"     * @return"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"    private CommandResult getCommandResult() {"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"        if (model.getFilteredInternshipList().size() \u003e 0) {"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"            return new CommandResult(SORT_SUCCESSS_MESSAGE);"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        } else {"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"            return new CommandResult(NOTHING_TO_SORT_MESSAGE);"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":54,"-":4}},{"path":"src/main/java/seedu/address/logic/commands/HistoryCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.CommandHistory;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.UndoRedoStack;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Lists all the commands entered by user from the start of app launch."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class HistoryCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"history\";"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"You have entered the following commands (from most recent \""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"            + \"to earliest):\\n%1$s\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        List\u003cString\u003e previousCommands \u003d history.getHistory();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"        if (previousCommands.isEmpty()) {"},{"lineNumber":27,"author":{"gitID":"-"},"content":"            return new CommandResult(MESSAGE_NO_HISTORY);"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"        Collections.reverse(previousCommands);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        requireNonNull(history);"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        this.history \u003d history;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":37}},{"path":"src/main/java/seedu/address/logic/commands/UndoableCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"import static seedu.address.model.Model.PREDICATE_SHOW_ALL_INTERNSHIPS;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * Represents a command which can be undone and redone."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public abstract class UndoableCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    private ReadOnlyJobbiBot previousInternshipBook;"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    protected abstract CommandResult executeUndoableCommand() throws CommandException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"     * Stores the current state of {@code model#InternshipBook}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    private void saveInternshipBookSnapshot() {"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"        this.previousInternshipBook \u003d new JobbiBot(model.getJobbiBot());"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * This method is called before the execution of {@code UndoableCommand}."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * {@code UndoableCommand}s that require this preprocessing step should override this method."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    protected void preprocessUndoableCommand() throws CommandException {}"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"     * Reverts the JobbiBot to the state before this command"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     * was executed and updates the filtered internship list to"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"     * show all internships."},{"lineNumber":38,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    protected final void undo() {"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"        requireAllNonNull(model, previousInternshipBook);"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        model.resetData(previousInternshipBook);"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"        model.updateFilteredInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"     * Executes the command and updates the filtered internship"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"     * list to show all internships."},{"lineNumber":48,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected final void redo() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        requireNonNull(model);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"            executeUndoableCommand();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        } catch (CommandException ce) {"},{"lineNumber":54,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"The command has been successfully executed previously; \""},{"lineNumber":55,"author":{"gitID":"-"},"content":"                    + \"it should not fail now\");"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        model.updateFilteredInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    public final CommandResult execute() throws CommandException, DuplicateInternshipException {"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        saveInternshipBookSnapshot();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        preprocessUndoableCommand();"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return executeUndoableCommand();"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":11,"-":47,"TanCiKang":8}},{"path":"src/main/java/seedu/address/logic/commands/SelectCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.JumpToListRequestEvent;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":" * Selects a internship identified using it\u0027s last displayed index from the internship book."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public class SelectCommand extends Command {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"select\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"            + \": Selects the internship identified by the index number used in the last internship listing.\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_SELECT_INTERNSHIP_SUCCESS \u003d \"You have selected internship: %1$s\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final Index targetIndex;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public SelectCommand(Index targetIndex) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    public CommandResult execute() throws CommandException {"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"        List\u003cInternship\u003e lastShownList \u003d model.getFilteredInternshipList();"},{"lineNumber":36,"author":{"gitID":"-"},"content":""},{"lineNumber":37,"author":{"gitID":"-"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"        return new CommandResult(String.format(MESSAGE_SELECT_INTERNSHIP_SUCCESS, targetIndex.getOneBased()));"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof SelectCommand // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":45,"TanCiKang":6}},{"path":"src/main/java/seedu/address/logic/parser/SortCommandParser.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.parser;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.model.internship.Internship.SORTABLE_ATTRIBUTES_LIST;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import static seedu.address.model.internship.Internship.SORTABLE_ATTRIBUTES_LIST_WITH_NEGATIVE;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Arrays;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.SortCommand;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":" * Parses input arguments and creates a new SortCommand object"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"public class SortCommandParser implements Parser\u003cSortCommand\u003e {"},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"    public static final String MESSAGE_INVALID_SORT_ATTRIBUTE \u003d \"Invalid attributes given! Possible attributes are : \""},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"            + SORTABLE_ATTRIBUTES_LIST;"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"     * Parses the given {@code String} of arguments in the context of the SortCommand"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"     * and returns an SortCommand object for execution."},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"     *"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"     * @throws ParseException if the user input does not conform the expected format"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"    public SortCommand parse(String args) throws ParseException {"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"        String trimmedArgs \u003d args.trim();"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"        if (trimmedArgs.isEmpty()) {"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":"            throw new ParseException("},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, SortCommand.MESSAGE_USAGE));"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"        String[] nameKeywords \u003d trimmedArgs.split(\"\\\\s+\");"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"        List\u003cString\u003e keywords \u003d new ArrayList\u003c\u003e(Arrays.asList(nameKeywords));"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"        // Checks if keywords are proper internship attributes, can contain -attribute for reverse sort"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"        if (!keywords.stream().allMatch(keyword -\u003e"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"                    StringUtil.containsWordIgnoreCase(SORTABLE_ATTRIBUTES_LIST_WITH_NEGATIVE, keyword))) {"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"            throw new ParseException(MESSAGE_INVALID_SORT_ATTRIBUTE);"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"        return new SortCommand(keywords);"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":34,"-":16}},{"path":"src/main/java/seedu/address/logic/commands/FindCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.InternshipContainsKeywordsPredicate;"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":" * Finds and lists all Internships in address book whose name, address, salary, email or industry contains any of the"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * argument keywords."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Keyword matching is case insensitive."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class FindCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"find\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all internships whose names contain any of \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"            + \"Example: \" + COMMAND_WORD + \" Marketing Analytics\";"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_SEARCH_RESPONSE \u003d \"Awesome, would you like to narrow down your search even \""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"            + (\"more? You may like to filter by region and salary. If not, you may go on to sort your results \""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"            + \"by typing \u0027sort [KEYWORD]\u0027 \\n\\nE.g  filter Central 800. \");"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_SEARCH_RESPONSE_NO_INTERNSHIPS \u003d \"Woops, no internship found ! \""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"            + \"Try using lesser keywords or entering other keywords  \\nE.g: find finance\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"    private final InternshipContainsKeywordsPredicate predicate;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public FindCommand(InternshipContainsKeywordsPredicate predicate) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.predicate \u003d predicate;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    public CommandResult execute() {"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"        model.removeTagsFromAllInternshipList();"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"        model.updateSearchedInternshipList(predicate);"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"        model.addTagsToFilteredList();"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        return getCommandResult();"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof FindCommand // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"     * Helper method to retrieve the correct message for command results"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"     * @return"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"    private CommandResult getCommandResult() {"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"        if (model.getFilteredInternshipList().size() \u003e 0) {"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"            return new CommandResult(MESSAGE_SEARCH_RESPONSE);"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        } else {"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"            return new CommandResult(MESSAGE_SEARCH_RESPONSE_NO_INTERNSHIPS);"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"wyinkok":6,"-":17,"TanCiKang":36}},{"path":"src/main/java/seedu/address/logic/commands/GlossaryCommand.java","lines":[{"lineNumber":1,"content":"//@@author wyinkok-unused"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"//package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"//import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"//import seedu.address.commons.events.ui.ShowGlossaryRequestEvent;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * Displays a full glossary of potential jobs, industries and other related information a user might consider."},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public class GlossaryCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    public static final String COMMAND_WORD \u003d \"glossary\";"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"            + \": Shows user a list of potential jobs, industries, skills and other related information to consider.\\n\""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"            + \"Example: \" + COMMAND_WORD;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public static final String SHOWING_GLOSSARY_MESSAGE \u003d \"Opened glossary window.\";"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"    public CommandResult execute() {"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"        EventsCenter.getInstance().post(new ShowGlossaryRequestEvent());"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"        return new CommandResult(SHOWING_GLOSSARY_MESSAGE);"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":" */"}],"authorContributionMap":{"null":1,"wyinkok":23,"-":2}},{"path":"src/main/java/seedu/address/logic/commands/ExitCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic.commands;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Terminates the program."},{"lineNumber":8,"author":{"gitID":"-"},"content":" */"},{"lineNumber":9,"author":{"gitID":"-"},"content":"public class ExitCommand extends Command {"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"    public static final String COMMAND_WORD \u003d \"exit\";"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Goodbye! Exiting JobbiBot as requested ...\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public CommandResult execute() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().post(new ExitAppRequestEvent());"},{"lineNumber":18,"author":{"gitID":"-"},"content":"        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"-":20}},{"path":"src/main/java/seedu/address/logic/commands/SaveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":" * Saves internships into a separate Saved collection to access it again later."},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"public class SaveCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    public static final String COMMAND_WORD \u003d \"save\";"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"            + \": Saves an internship to your Saved Collection \""},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            + \"by the index number used in the last internship listing.\\n\""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_SAVED_INTERNSHIP_SUCCESS \u003d \"New internship saved: %1$s\";"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_DUPLICATE_SAVED_INTERNSHIP \u003d \"This internship has been saved\";"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    private static final String SAVED_TAG \u003d \"saved\";"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    private final Index targetIndex;"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"    private Internship internshipWithSavedTag;"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    private Internship internshipToSave;"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    public SaveCommand(Index targetIndex) {"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        requireNonNull(internshipToSave);"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"            model.updateInternship(internshipToSave, internshipWithSavedTag);"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"        } catch (InternshipNotFoundException e) {"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        return new CommandResult(String.format(MESSAGE_SAVED_INTERNSHIP_SUCCESS, internshipWithSavedTag));"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternship\u003e lastShownList \u003d model.getFilteredInternshipList();"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"        internshipToSave \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        internshipWithSavedTag \u003d addSavedTagToInternship(internshipToSave);"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"     * Adds a \"saved\" tag to the existing tags of an internship."},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"     * @param internship"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"     * @return internship with a saved tag."},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"     * @throws CommandException"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"    private Internship addSavedTagToInternship(Internship internship) throws CommandException {"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internship.getTags());"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"            internshipTags.add(new Tag(SAVED_TAG));"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"        // used for checking internship tag references."},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"        // Rebuild the list of internship tags to point to the relevant tags in the master tag list."},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"        return new Internship("},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"                internship.getName(), internship.getSalary(), internship.getEmail(), internship.getAddress(),"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"                internship.getIndustry(), internship.getRegion(), internship.getRole(), correctTagReferences);"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":101,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":102,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"                || (other instanceof SaveCommand // instanceof handles nulls"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 this.targetIndex.equals(((SaveCommand) other).targetIndex)); // state check"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"}"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":""}],"authorContributionMap":{"wyinkok":105,"-":3}},{"path":"src/main/java/seedu/address/logic/LogicManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.logic;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.Command;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.CommandResult;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.parser.InternshipBookParser;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.logic.parser.exceptions.ParseException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * The main LogicManager of the app."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class LogicManager extends ComponentManager implements Logic {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private final Model model;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private final CommandHistory history;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"    private final InternshipBookParser internshipBookParser;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private final UndoRedoStack undoRedoStack;"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public LogicManager(Model model) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        this.model \u003d model;"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        model.removeTagsFromAllInternshipList();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        history \u003d new CommandHistory();"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"        internshipBookParser \u003d new InternshipBookParser();"},{"lineNumber":33,"author":{"gitID":"-"},"content":"        undoRedoStack \u003d new UndoRedoStack();"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public CommandResult execute(String commandText) throws CommandException, ParseException {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"            Command command \u003d internshipBookParser.parseCommand(commandText);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"            command.setData(model, history, undoRedoStack);"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"            CommandResult result \u003d null;"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"            try {"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"                result \u003d command.execute();"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"                e.printStackTrace();"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"            }"},{"lineNumber":48,"author":{"gitID":"-"},"content":"            undoRedoStack.push(command);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"            return result;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        } finally {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            history.add(commandText);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    public ObservableList\u003cInternship\u003e getFilteredInternshipList() {"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        return model.getFilteredInternshipList();"},{"lineNumber":58,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    public ListElementPointer getHistorySnapshot() {"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        return new ListElementPointer(history.getHistory());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":10,"-":49,"TanCiKang":5}},{"path":"src/main/java/seedu/address/storage/Storage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * API of the Storage component"},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"public interface Storage extends JobbiBotStorage, UserPrefsStorage {"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":21,"author":{"gitID":"-"},"content":"    void saveUserPrefs(UserPrefs userPrefs) throws IOException;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    String getJobbiBotFilePath();"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook() throws DataConversionException, IOException;"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    void saveInternshipBook(ReadOnlyJobbiBot internshipBook) throws IOException;"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Saves the current version of the Address Book to the hard disk."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     *   Creates the data file if it is missing."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Raises {@link DataSavingExceptionEvent} if there was an error during saving."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    void handleInternshipBookChangedEvent(JobbiBotChangedEvent abce);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":7,"-":31}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedTag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlValue;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"-"},"content":" * JAXB-friendly adapted version of the Tag."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"-"},"content":"public class XmlAdaptedTag {"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"    @XmlValue"},{"lineNumber":14,"author":{"gitID":"-"},"content":"    private String tagName;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * Constructs an XmlAdaptedTag."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag() {}"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * Constructs a {@code XmlAdaptedTag} with the given {@code tagName}."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(String tagName) {"},{"lineNumber":26,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"-"},"content":"     * Converts a given Tag into this class for JAXB use."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * @param source future changes to this will not affect the created"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    public XmlAdaptedTag(Tag source) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"        tagName \u003d source.tagName;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Converts this jaxb-friendly adapted tag object into the model\u0027s Tag object."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted internship"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public Tag toModelType() throws IllegalValueException {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        if (!Tag.isValidTagName(tagName)) {"},{"lineNumber":45,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Tag.MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        return new Tag(tagName);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"        if (!(other instanceof XmlAdaptedTag)) {"},{"lineNumber":57,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        return tagName.equals(((XmlAdaptedTag) other).tagName);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":61,"TanCiKang":1}},{"path":"src/main/java/seedu/address/storage/StorageManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.storage.DataSavingExceptionEvent;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":" * Manages storage of JobbiBot data in local storage."},{"lineNumber":19,"author":{"gitID":"-"},"content":" */"},{"lineNumber":20,"author":{"gitID":"-"},"content":"public class StorageManager extends ComponentManager implements Storage {"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    private JobbiBotStorage jobbiBotStorage;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private UserPrefsStorage userPrefsStorage;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    public StorageManager(JobbiBotStorage jobbiBotStorage, UserPrefsStorage userPrefsStorage) {"},{"lineNumber":28,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"        this.jobbiBotStorage \u003d jobbiBotStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        this.userPrefsStorage \u003d userPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public String getUserPrefsFilePath() {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return userPrefsStorage.getUserPrefsFilePath();"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        return userPrefsStorage.readUserPrefs();"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        userPrefsStorage.saveUserPrefs(userPrefs);"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d JobbiBot methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"    public String getJobbiBotFilePath() {"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        return jobbiBotStorage.getJobbiBotFilePath();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    public Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook() throws DataConversionException, IOException {"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"        return readInternshipBook(jobbiBotStorage.getJobbiBotFilePath());"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"    public Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook(String filePath) throws DataConversionException, IOException {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to read data from file: \" + filePath);"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        return jobbiBotStorage.readInternshipBook(filePath);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook(ReadOnlyJobbiBot internshipBook) throws IOException {"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        saveInternshipBook(internshipBook, jobbiBotStorage.getJobbiBotFilePath());"},{"lineNumber":72,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":73,"author":{"gitID":"-"},"content":""},{"lineNumber":74,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook(ReadOnlyJobbiBot internshipBook, String filePath) throws IOException {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        logger.fine(\"Attempting to write to data file: \" + filePath);"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"        jobbiBotStorage.saveInternshipBook(internshipBook, filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"    public void handleInternshipBookChangedEvent(JobbiBotChangedEvent event) {"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"},{"lineNumber":85,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"            saveInternshipBook(event.data);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":88,"author":{"gitID":"-"},"content":"            raise(new DataSavingExceptionEvent(e));"},{"lineNumber":89,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":90,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":91,"author":{"gitID":"-"},"content":""},{"lineNumber":92,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":19,"-":73}},{"path":"src/main/java/seedu/address/storage/XmlAdaptedInternship.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Industry;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Region;"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Role;"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":" * JAXB-friendly version of the Internship."},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"public class XmlAdaptedInternship {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"    public static final String MISSING_FIELD_MESSAGE_FORMAT \u003d \"Internship\u0027s %s field is missing!\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":""},{"lineNumber":29,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private String name;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    private String salary;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    private String email;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private String address;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"    private String industry;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"    private String region;"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @XmlElement(required \u003d true)"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    private String role;"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an XmlAdaptedInternship."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     * This is the no-arg constructor that is required by JAXB."},{"lineNumber":50,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"    public XmlAdaptedInternship() {}"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an {@code XmlAdaptedInternship} with the given internship details."},{"lineNumber":55,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    public XmlAdaptedInternship(String name, String salary, String email, String address, String industry,"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"                                String region, String role, List\u003cXmlAdaptedTag\u003e tagged) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"        this.salary \u003d salary;"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"        this.industry \u003d industry;"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"        this.region \u003d region;"},{"lineNumber":64,"author":{"gitID":"TanCiKang"},"content":"        this.role \u003d role;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        if (tagged !\u003d null) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"            this.tagged \u003d new ArrayList\u003c\u003e(tagged);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"     * Converts a given Internship into this class for JAXB use."},{"lineNumber":72,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"     * @param source future changes to this will not affect the created XmlAdaptedInternship"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"    public XmlAdaptedInternship(Internship source) {"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        name \u003d source.getName().fullName;"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"        salary \u003d source.getSalary().value;"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        email \u003d source.getEmail().value;"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        address \u003d source.getAddress().value;"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"        industry \u003d source.getIndustry().value;"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"        region \u003d source.getRegion().value;"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        role \u003d source.getRole().value;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"        tagged \u003d new ArrayList\u003c\u003e();"},{"lineNumber":84,"author":{"gitID":"-"},"content":"        for (Tag tag : source.getTags()) {"},{"lineNumber":85,"author":{"gitID":"-"},"content":"            tagged.add(new XmlAdaptedTag(tag));"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"     * Converts this jaxb-friendly adapted internship object into the model\u0027s Internship object."},{"lineNumber":91,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"     * @throws IllegalValueException if there were any data constraints violated in the adapted internship"},{"lineNumber":93,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"    public Internship toModelType() throws IllegalValueException {"},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"        final List\u003cTag\u003e internshipTags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":96,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag tag : tagged) {"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"            internshipTags.add(tag.toModelType());"},{"lineNumber":98,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":99,"author":{"gitID":"-"},"content":""},{"lineNumber":100,"author":{"gitID":"-"},"content":"        if (this.name \u003d\u003d null) {"},{"lineNumber":101,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Name.class.getSimpleName()));"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        if (!Name.isValidName(this.name)) {"},{"lineNumber":104,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Name.MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        final Name name \u003d new Name(this.name);"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        if (this.salary \u003d\u003d null) {"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Salary.class.getSimpleName()));"},{"lineNumber":110,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"TanCiKang"},"content":"        if (!Salary.isValidSalary(this.salary)) {"},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Salary.MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":113,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"        final Salary salary \u003d new Salary(this.salary);"},{"lineNumber":115,"author":{"gitID":"-"},"content":""},{"lineNumber":116,"author":{"gitID":"-"},"content":"        if (this.email \u003d\u003d null) {"},{"lineNumber":117,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Email.class.getSimpleName()));"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        if (!Email.isValidEmail(this.email)) {"},{"lineNumber":120,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Email.MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":122,"author":{"gitID":"-"},"content":"        final Email email \u003d new Email(this.email);"},{"lineNumber":123,"author":{"gitID":"-"},"content":""},{"lineNumber":124,"author":{"gitID":"-"},"content":"        if (this.address \u003d\u003d null) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT, Address.class.getSimpleName()));"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":"        if (!Address.isValidAddress(this.address)) {"},{"lineNumber":128,"author":{"gitID":"-"},"content":"            throw new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":130,"author":{"gitID":"-"},"content":"        final Address address \u003d new Address(this.address);"},{"lineNumber":131,"author":{"gitID":"-"},"content":""},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"        if (this.industry \u003d\u003d null) {"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"                    Industry.class.getSimpleName()));"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"        if (!Industry.isValidIndustry(this.industry)) {"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Industry.MESSAGE_INDUSTRY_CONSTRAINTS);"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":"        final Industry industry \u003d new Industry(this.industry);"},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"        if (this.region \u003d\u003d null) {"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"                    Region.class.getSimpleName()));"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"        if (!Region.isValidRegion(this.region)) {"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Region.MESSAGE_REGION_CONSTRAINTS);"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":148,"author":{"gitID":"TanCiKang"},"content":"        final Region region \u003d new Region(this.region);"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"        if (this.role \u003d\u003d null) {"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(String.format(MISSING_FIELD_MESSAGE_FORMAT,"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":"                    Role.class.getSimpleName()));"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"        if (!Role.isValidRole(this.role)) {"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"            throw new IllegalValueException(Role.MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":156,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":157,"author":{"gitID":"TanCiKang"},"content":"        final Role role \u003d new Role(this.role);"},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":"        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(internshipTags);"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"        return new Internship(name, salary, email, address, industry, region, role, tags);"},{"lineNumber":161,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":162,"author":{"gitID":"-"},"content":""},{"lineNumber":163,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":164,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":166,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":167,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":168,"author":{"gitID":"-"},"content":""},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"        if (!(other instanceof XmlAdaptedInternship)) {"},{"lineNumber":170,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":172,"author":{"gitID":"-"},"content":""},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"        XmlAdaptedInternship otherInternship \u003d (XmlAdaptedInternship) other;"},{"lineNumber":174,"author":{"gitID":"TanCiKang"},"content":"        return Objects.equals(name, otherInternship.name)"},{"lineNumber":175,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(salary, otherInternship.salary)"},{"lineNumber":176,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(email, otherInternship.email)"},{"lineNumber":177,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(address, otherInternship.address)"},{"lineNumber":178,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(industry, otherInternship.industry)"},{"lineNumber":179,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(region, otherInternship.region)"},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 Objects.equals(role, otherInternship.role)"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 tagged.equals(otherInternship.tagged);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":103,"TanCiKang":80}},{"path":"src/main/java/seedu/address/storage/XmlSerializableJobbiBot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlElement;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import javax.xml.bind.annotation.XmlRootElement;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":" * An Immutable JobbiBot that is serializable to XML format"},{"lineNumber":16,"author":{"gitID":"-"},"content":" */"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"@XmlRootElement(name \u003d \"InternshipBook\")"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"public class XmlSerializableJobbiBot {"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    private List\u003cXmlAdaptedInternship\u003e internships;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    @XmlElement"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    private List\u003cXmlAdaptedTag\u003e tags;"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"     * Creates an empty XmlSerializableJobbiBot."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     * This empty constructor is required for marshalling."},{"lineNumber":28,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public XmlSerializableJobbiBot() {"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        internships \u003d new ArrayList\u003c\u003e();"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        tags \u003d new ArrayList\u003c\u003e();"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     * Conversion"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public XmlSerializableJobbiBot(ReadOnlyJobbiBot src) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"        internships.addAll(src.getInternshipList().stream().map(XmlAdaptedInternship::new)"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":"                .collect(Collectors.toList()));"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"     * Converts this InternshipBook into the model\u0027s {@code JobbiBot} object."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":47,"author":{"gitID":"-"},"content":"     * @throws IllegalValueException if there were any data constraints violated or duplicates in the"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"     * {@code XmlAdaptedInternship} or {@code XmlAdaptedTag}."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"    public JobbiBot toModelType() throws IllegalValueException {"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        JobbiBot jobbiBot \u003d new JobbiBot();"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        for (XmlAdaptedTag t : tags) {"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"            jobbiBot.addTag(t.toModelType());"},{"lineNumber":54,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        for (XmlAdaptedInternship p : internships) {"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"            jobbiBot.addInternship(p.toModelType());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        return jobbiBot;"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        if (!(other instanceof XmlSerializableJobbiBot)) {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot otherAb \u003d (XmlSerializableJobbiBot) other;"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"        return internships.equals(otherAb.internships) \u0026\u0026 tags.equals(otherAb.tags);"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":16,"-":51,"TanCiKang":7}},{"path":"src/main/java/seedu/address/logic/commands/NewChatCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.ui.StartAppRequestEvent;"},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * Restarts the conversation with Jobbi."},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public class NewChatCommand extends Command {"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"    public static final String COMMAND_WORD \u003d \"new\";"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_RESTART_ACKNOWLEDGEMENT \u003d \"We\u0027ve successfully restarted our conversation.\";"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"    public CommandResult execute() {"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"        EventsCenter.getInstance().post(new StartAppRequestEvent());"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"        return new CommandResult(MESSAGE_RESTART_ACKNOWLEDGEMENT);"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":21}},{"path":"src/main/java/seedu/address/storage/XmlFileStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javax.xml.bind.JAXBException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.XmlUtil;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" * Stores InternshipBook data in an XML file"},{"lineNumber":13,"author":{"gitID":"-"},"content":" */"},{"lineNumber":14,"author":{"gitID":"-"},"content":"public class XmlFileStorage {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"     * Saves the given InternshipBook data to the specified file."},{"lineNumber":17,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    public static void saveDataToFile(File file, XmlSerializableJobbiBot internshipBook)"},{"lineNumber":19,"author":{"gitID":"-"},"content":"            throws FileNotFoundException {"},{"lineNumber":20,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"            XmlUtil.saveDataToFile(file, internshipBook);"},{"lineNumber":22,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"            throw new AssertionError(\"Unexpected exception \" + e.getMessage());"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Returns address book in the file or an empty address book"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    public static XmlSerializableJobbiBot loadDataFromSaveFile(File file) throws DataConversionException,"},{"lineNumber":31,"author":{"gitID":"-"},"content":"                                                                            FileNotFoundException {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            return XmlUtil.getDataFromFile(file, XmlSerializableJobbiBot.class);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"        } catch (JAXBException e) {"},{"lineNumber":35,"author":{"gitID":"-"},"content":"            throw new DataConversionException(e);"},{"lineNumber":36,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"-"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":6,"-":33}},{"path":"src/main/java/seedu/address/MainApp.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"import com.google.common.eventbus.Subscribe;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.application.Application;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.application.Platform;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import javafx.stage.Stage;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Config;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.EventsCenter;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.Version;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.events.ui.ExitAppRequestEvent;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.ConfigUtil;"},{"lineNumber":20,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"-"},"content":"import seedu.address.logic.Logic;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"import seedu.address.logic.LogicManager;"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.Model;"},{"lineNumber":25,"author":{"gitID":"-"},"content":"import seedu.address.model.ModelManager;"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":27,"author":{"gitID":"-"},"content":"import seedu.address.model.UserPrefs;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"import seedu.address.model.util.SampleDataUtil;"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"import seedu.address.storage.JobbiBotStorage;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"import seedu.address.storage.JsonUserPrefsStorage;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"import seedu.address.storage.Storage;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"import seedu.address.storage.StorageManager;"},{"lineNumber":33,"author":{"gitID":"-"},"content":"import seedu.address.storage.UserPrefsStorage;"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"import seedu.address.storage.XmlJobbiBotStorage;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"import seedu.address.ui.Ui;"},{"lineNumber":36,"author":{"gitID":"-"},"content":"import seedu.address.ui.UiManager;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":39,"author":{"gitID":"-"},"content":" * The main entry point to the application."},{"lineNumber":40,"author":{"gitID":"-"},"content":" */"},{"lineNumber":41,"author":{"gitID":"-"},"content":"public class MainApp extends Application {"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public static final Version VERSION \u003d new Version(0, 6, 0, true);"},{"lineNumber":44,"author":{"gitID":"-"},"content":""},{"lineNumber":45,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    protected Ui ui;"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    protected Logic logic;"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    protected Storage storage;"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    protected Model model;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    protected Config config;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    protected UserPrefs userPrefs;"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    public void init() throws Exception {"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing JobbiBot ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        super.init();"},{"lineNumber":59,"author":{"gitID":"-"},"content":""},{"lineNumber":60,"author":{"gitID":"-"},"content":"        config \u003d initConfig(getApplicationParameter(\"config\"));"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"},{"lineNumber":63,"author":{"gitID":"-"},"content":"        userPrefs \u003d initPrefs(userPrefsStorage);"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"        JobbiBotStorage jobbiBotStorage \u003d new XmlJobbiBotStorage(userPrefs.getJobbiBotFilePath());"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        storage \u003d new StorageManager(jobbiBotStorage, userPrefsStorage);"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"        initLogging(config);"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"        model \u003d initModelManager(storage, userPrefs);"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"        logic \u003d new LogicManager(model);"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"        ui \u003d new UiManager(logic, config, userPrefs);"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"        initEventsCenter();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"    private String getApplicationParameter(String parameterName) {"},{"lineNumber":79,"author":{"gitID":"-"},"content":"        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"},{"lineNumber":80,"author":{"gitID":"-"},"content":"        return applicationParameters.get(parameterName);"},{"lineNumber":81,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"-"},"content":""},{"lineNumber":83,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"},{"lineNumber":85,"author":{"gitID":"-"},"content":"     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"},{"lineNumber":86,"author":{"gitID":"-"},"content":"     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"-"},"content":"    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        Optional\u003cReadOnlyJobbiBot\u003e internshipBookOptional;"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        ReadOnlyJobbiBot initialData;"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"            internshipBookOptional \u003d storage.readInternshipBook();"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"            if (!internshipBookOptional.isPresent()) {"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"                logger.info(\"Data file not found. Will be starting with a sample JobbiBot\");"},{"lineNumber":95,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"            initialData \u003d internshipBookOptional.orElseGet(SampleDataUtil::getSampleJobbiBot);"},{"lineNumber":97,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"            logger.warning(\"Data file not in the correct format. Will be starting with an empty JobbiBot\");"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"            initialData \u003d new JobbiBot();"},{"lineNumber":100,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty JobbiBot\");"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"            initialData \u003d new JobbiBot();"},{"lineNumber":103,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return new ModelManager(initialData, userPrefs);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":107,"author":{"gitID":"-"},"content":""},{"lineNumber":108,"author":{"gitID":"-"},"content":"    private void initLogging(Config config) {"},{"lineNumber":109,"author":{"gitID":"-"},"content":"        LogsCenter.init(config);"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":111,"author":{"gitID":"-"},"content":""},{"lineNumber":112,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":113,"author":{"gitID":"-"},"content":"     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"},{"lineNumber":114,"author":{"gitID":"-"},"content":"     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"},{"lineNumber":115,"author":{"gitID":"-"},"content":"     * if {@code configFilePath} is null."},{"lineNumber":116,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":117,"author":{"gitID":"-"},"content":"    protected Config initConfig(String configFilePath) {"},{"lineNumber":118,"author":{"gitID":"-"},"content":"        Config initializedConfig;"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        String configFilePathUsed;"},{"lineNumber":120,"author":{"gitID":"-"},"content":""},{"lineNumber":121,"author":{"gitID":"-"},"content":"        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"        if (configFilePath !\u003d null) {"},{"lineNumber":124,"author":{"gitID":"-"},"content":"            logger.info(\"Custom Config file specified \" + configFilePath);"},{"lineNumber":125,"author":{"gitID":"-"},"content":"            configFilePathUsed \u003d configFilePath;"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":127,"author":{"gitID":"-"},"content":""},{"lineNumber":128,"author":{"gitID":"-"},"content":"        logger.info(\"Using config file : \" + configFilePathUsed);"},{"lineNumber":129,"author":{"gitID":"-"},"content":""},{"lineNumber":130,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":131,"author":{"gitID":"-"},"content":"            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"},{"lineNumber":132,"author":{"gitID":"-"},"content":"            initializedConfig \u003d configOptional.orElse(new Config());"},{"lineNumber":133,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":134,"author":{"gitID":"-"},"content":"            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""},{"lineNumber":135,"author":{"gitID":"-"},"content":"                    + \"Using default config properties\");"},{"lineNumber":136,"author":{"gitID":"-"},"content":"            initializedConfig \u003d new Config();"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"        //Update config file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":140,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":141,"author":{"gitID":"-"},"content":"            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"},{"lineNumber":142,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":145,"author":{"gitID":"-"},"content":"        return initializedConfig;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":147,"author":{"gitID":"-"},"content":""},{"lineNumber":148,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":149,"author":{"gitID":"-"},"content":"     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"},{"lineNumber":150,"author":{"gitID":"-"},"content":"     * or a new {@code UserPrefs} with default configuration if errors occur when"},{"lineNumber":151,"author":{"gitID":"-"},"content":"     * reading from the file."},{"lineNumber":152,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":153,"author":{"gitID":"-"},"content":"    protected UserPrefs initPrefs(UserPrefsStorage storage) {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        String prefsFilePath \u003d storage.getUserPrefsFilePath();"},{"lineNumber":155,"author":{"gitID":"-"},"content":"        logger.info(\"Using prefs file : \" + prefsFilePath);"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"        UserPrefs initializedPrefs;"},{"lineNumber":158,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":159,"author":{"gitID":"-"},"content":"            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"},{"lineNumber":160,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"},{"lineNumber":161,"author":{"gitID":"-"},"content":"        } catch (DataConversionException e) {"},{"lineNumber":162,"author":{"gitID":"-"},"content":"            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""},{"lineNumber":163,"author":{"gitID":"-"},"content":"                    + \"Using default user prefs\");"},{"lineNumber":164,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":165,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":166,"author":{"gitID":"wyinkok"},"content":"            logger.warning(\"Problem while reading from the file. Will be starting with an empty JobbiBot\");"},{"lineNumber":167,"author":{"gitID":"-"},"content":"            initializedPrefs \u003d new UserPrefs();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"        //Update prefs file in case it was missing to begin with or there are new/unused fields"},{"lineNumber":171,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(initializedPrefs);"},{"lineNumber":173,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":174,"author":{"gitID":"-"},"content":"            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"},{"lineNumber":175,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":176,"author":{"gitID":"-"},"content":""},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return initializedPrefs;"},{"lineNumber":178,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":179,"author":{"gitID":"-"},"content":""},{"lineNumber":180,"author":{"gitID":"-"},"content":"    private void initEventsCenter() {"},{"lineNumber":181,"author":{"gitID":"-"},"content":"        EventsCenter.getInstance().registerHandler(this);"},{"lineNumber":182,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":183,"author":{"gitID":"-"},"content":""},{"lineNumber":184,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":185,"author":{"gitID":"-"},"content":"    public void start(Stage primaryStage) {"},{"lineNumber":186,"author":{"gitID":"wyinkok"},"content":"        logger.info(\"Starting Jobbi Bot \" + MainApp.VERSION);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"        ui.start(primaryStage);"},{"lineNumber":188,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":189,"author":{"gitID":"-"},"content":""},{"lineNumber":190,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":191,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":192,"author":{"gitID":"-"},"content":"    public void stop() {"},{"lineNumber":193,"author":{"gitID":"wyinkok"},"content":"        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Jobbi Bot ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"},{"lineNumber":194,"author":{"gitID":"-"},"content":"        ui.stop();"},{"lineNumber":195,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":196,"author":{"gitID":"-"},"content":"            storage.saveUserPrefs(userPrefs);"},{"lineNumber":197,"author":{"gitID":"-"},"content":"        } catch (IOException e) {"},{"lineNumber":198,"author":{"gitID":"-"},"content":"            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"},{"lineNumber":199,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":200,"author":{"gitID":"-"},"content":"        Platform.exit();"},{"lineNumber":201,"author":{"gitID":"-"},"content":"        System.exit(0);"},{"lineNumber":202,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":203,"author":{"gitID":"-"},"content":""},{"lineNumber":204,"author":{"gitID":"-"},"content":"    @Subscribe"},{"lineNumber":205,"author":{"gitID":"-"},"content":"    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        logger.info(LogsCenter.getEventHandlingLogMessage(event));"},{"lineNumber":207,"author":{"gitID":"-"},"content":"        this.stop();"},{"lineNumber":208,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"    public static void main(String[] args) {"},{"lineNumber":211,"author":{"gitID":"-"},"content":"        launch(args);"},{"lineNumber":212,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":21,"-":192}},{"path":"src/main/java/seedu/address/storage/XmlJobbiBotStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.io.File;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.io.FileNotFoundException;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.IllegalValueException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.FileUtil;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":" * A class to access JobbiBot data stored as an xml file on the hard disk."},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"public class XmlJobbiBotStorage implements JobbiBotStorage {"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(XmlJobbiBotStorage.class);"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":"    private String filePath;"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    public XmlJobbiBotStorage(String filePath) {"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"        this.filePath \u003d filePath;"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"    public String getJobbiBotFilePath() {"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"        return filePath;"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook() throws DataConversionException, IOException {"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"        return readInternshipBook(filePath);"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"     * Similar to {@link #readInternshipBook()}"},{"lineNumber":41,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":42,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the file is not in the correct format."},{"lineNumber":43,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    public Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook(String filePath) throws DataConversionException,"},{"lineNumber":45,"author":{"gitID":"-"},"content":"                                                                                 FileNotFoundException {"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        File internshipBookFile \u003d new File(filePath);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        if (!internshipBookFile.exists()) {"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"            logger.info(\"JobbiBot file \"  + internshipBookFile + \" not found\");"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"            return Optional.empty();"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        XmlSerializableJobbiBot xmlInternshipBook \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"            return Optional.of(xmlInternshipBook.toModelType());"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        } catch (IllegalValueException ive) {"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"            logger.info(\"Illegal values found in \" + internshipBookFile + \": \" + ive.getMessage());"},{"lineNumber":60,"author":{"gitID":"-"},"content":"            throw new DataConversionException(ive);"},{"lineNumber":61,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook(ReadOnlyJobbiBot internshipBook) throws IOException {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        saveInternshipBook(internshipBook, filePath);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"     * Similar to {@link #saveInternshipBook(ReadOnlyJobbiBot)}"},{"lineNumber":71,"author":{"gitID":"-"},"content":"     * @param filePath location of the data. Cannot be null"},{"lineNumber":72,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"    public void saveInternshipBook(ReadOnlyJobbiBot internshipBook, String filePath) throws IOException {"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        requireNonNull(internshipBook);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        requireNonNull(filePath);"},{"lineNumber":76,"author":{"gitID":"-"},"content":""},{"lineNumber":77,"author":{"gitID":"-"},"content":"        File file \u003d new File(filePath);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        FileUtil.createIfMissing(file);"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"        XmlFileStorage.saveDataToFile(file, new XmlSerializableJobbiBot(internshipBook));"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":51,"-":31}},{"path":"src/main/java/seedu/address/model/util/SampleDataUtil.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Address;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Email;"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Industry;"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Name;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Region;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Role;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Salary;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":" * Contains utility methods for populating {@code InternshipBook} with sample data."},{"lineNumber":21,"author":{"gitID":"-"},"content":" */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"public class SampleDataUtil {"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    public static Internship[] getSampleInternships() {"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"        return new Internship[] {"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Yunomori Onsen\"), new Salary(\"800\"),"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"                new Email(\"phoebe@yunomorionsen.com.sg\"), new Address(\"1 Stadium Place, #02-17/18 Kallang \""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"                    + \"Wave Mall, 397628\"), new Industry(\"Hospitality\"), new Region(\"Central Region\"),"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Design Advertising Interns\"), getTagSet()),"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Affinixy Pte Ltd\"), new Salary(\"400\"), new Email(\"charlotte@affinixy.com\"),"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"                new Address(\"61 Ubi Road 1, Oxley Bizhub 1 #03-40\"), new Industry(\"Media\"),"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Bedok\"), new Role(\"2D Artist Animator Cute Stuff\"), getTagSet()),"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Simple Clouds Films\"), new Salary(\"800\"), new Email(\"jamie@simpleclouds.com\"),"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"                new Address(\"53 Dafne St\"), new Industry(\"Media\"),"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Kembangan\"), new Role(\"Videographer Editor\"), getTagSet()),"},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Shevron Urgent\"), new Salary(\"800\"), new Email(\"irfan@su.com\"),"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 5 Ang Mo Kio Industrial Park 2A AMK Tech II #06-18\"), new Industry(\"Manufacturing\"),"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Ang Mo Kio\"), new Role(\"Graphic Designer Intern\"), getTagSet()),"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Buds Theatre Company\"), new Salary(\"400\"), new Email(\"berniceyu@budstheatre.com\"),"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"                new Address(\"The Playtent #02-01 180 Joo Chiat Road\"), new Industry(\"Arts Design\"),"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Siglap\"), new Role(\"Arts Administrator Intern\"), getTagSet()),"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Mount Studio Pte Ltd\"), new Salary(\"750\"), new Email(\"royb@example.com\"),"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"                new Address(\"45 Jalan Pemimpin #07-02\"), new Industry(\"Arts Design\"), new Region(\"Marymount\"),"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Photo Studio Assistant Junior Photographer\"), getTagSet(\"saved\")),"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Scooterson Inc\"), new Salary(\"850\"), new Email(\"contact@scootersoninc.com\"),"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 3 Chijmes Street 85, #17-31\"), new Industry(\"Automotive\"), new Region(\"Central\"),"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Mechanical Engineer RD Automotive in Singapore at Scooterson\"), getTagSet()),"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"AV Intelligence\"), new Salary(\"800\"), new Email(\"royb@avintelligence.com\"),"},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"                new Address(\"9 Raffles Boulevard\"), new Industry(\"Finance\"), new Region(\"Raffles\"),"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Accountant\"), getTagSet()),"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Momentum Works\"), new Salary(\"500\"), new Email(\"momentumhr@gmail.com\"),"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Raffles Street 85, #21-31\"), new Industry(\"Finance\"), new Region(\"Central Business \""},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"                    + \"District\"), new Role(\"Freelance Accountant Finance Intern\"), getTagSet()),"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Kao Singapore Private Limited\"), new Salary(\"900\"), new Email(\"ronaldjohn@outlook\""},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"                    + \".com\"), new Address(\"83 Clemenceau Ave, Singapore 239920\"), new Industry(\"Finance\"),"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"                    new Region(\"Central Business District\"), new Role(\"Audit Associate Internship\"), getTagSet()),"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Daimler South East Asia Pte Ltd\"), new Salary(\"1000\"),"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"                    new Email(\"yu_yan.ho@daimler.com\"), new Address(\"1 Gateway Drive, #15-01 Westgate Tower, 608531\"),"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"                    new Industry(\"Technology\"), new Region(\"Jurong\"), new Role(\"Corporate Security Intern\"),"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"                    getTagSet(\"saved\")),"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Pivot FinTech\"), new Salary(\"400\"), new Email(\"jennie@pft.com\"),"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"                new Address(\"143 Cecil Street #08-00 GB Building Singapore 069452\"), new Industry(\"Finance\"),"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"                    new Region(\"Raffles Place\"), new Role(\"UI Designer\"), getTagSet(\"saved\")),"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Allianz SE Insurance Management Asia Pacific\"), new Salary(\"900\"),"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":"                    new Email(\"jennie@example.com\"), new Address(\"Blk 45 Tampines Street 85, #11-31\"),"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"                    new Industry(\"Finance\"), new Region(\"Marina\"), new Role(\"Intern Risk Management\"), getTagSet()),"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Silver Straits Capital Pte Ltd\"), new Salary(\"600\"),"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"                    new Email(\"admin@silverstraits.co\"), new Address(\"167 Cecil Street #09-107 Singapore 509452\"),"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":"                    new Industry(\"Finance\"), new Region(\"Raffles Place\"), new Role(\"Private Equity Intern\"),"},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"                    getTagSet()),"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Hawksburn Capital\"), new Salary(\"800\"), new Email(\"jennie@example.com\"),"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Finance\"), new Region(\"Outram\"),"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Research Analyst Intern\"), getTagSet()),"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"TalentGuru\"), new Salary(\"1000\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Siglap\"),"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Business Consultant Intern\"), getTagSet()),"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Wealth Ridge Solutions\"), new Salary(\"2500\"), new Email(\"jennie@example.com\"),"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"                new Address(\"600 North Bridge Road Parkview Square Tower 2\"), new Industry(\"Consultancy\"),"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Bugis\"), new Role(\"Trainee Sales Consultant\"), getTagSet()),"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Prime Solutions Provider\"), new Salary(\"950\"), new Email(\"email@prsolutions.com\"),"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Bugis\"),"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Management Trainee Consultant\"), getTagSet()),"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Prime Solutions Provider Pte Ltd\"), new Salary(\"850\"), new Email(\"jenn@exa.com\"),"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Bugis\"),"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Sales Marketing Consultant\"), getTagSet()),"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"JPSO Consultancy\"), new Salary(\"2800\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Bugis\"),"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Customer Relationship Consultant\"), getTagSet()),"},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Ispring Group\"), new Salary(\"2500\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Bugis\"),"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Sales Consultant\"), getTagSet()),"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"B Consultancy\"), new Salary(\"2350\"), new Email(\"jennie@example.com\"),"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"),"},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"                    new Region(\"Tanjong Pagar\"), new Role(\"Financial Consultant Internship\"), getTagSet()),"},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"PurpleClick Media Pte Ltd\"), new Salary(\"400\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Tampines\"),"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Digital Consultant\"), getTagSet()),"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Advisors Clique\"), new Salary(\"1500\"), new Email(\"jennie@example.com\"),"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #9-31\"), new Industry(\"Consultancy\"), new Region(\"Telok Ayer\"),"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Wealth Management Consultant\"), getTagSet()),"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Kind of Blue Pte Ltd\"), new Salary(\"1500\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Consultancy\"), new Region(\"Orchard\"),"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Beauty Sales Consultant\"), getTagSet()),"},{"lineNumber":103,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Rimus Idea\"), new Salary(\"800\"), new Email(\"roybcd@example.com\"),"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Engineering\"), new Region(\"Ubi\"),"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Design Consultant\"), getTagSet()),"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Horizon Education Group of Companies\"), new Salary(\"800\"),"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"                new Email(\"roybcd@example.com\"), new Address(\"Blk 45 Tampines Street 85, #11-31\"),"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"                new Industry(\"Education\"), new Region(\"Kallang\"), new Role(\"Accounts Intern\"), getTagSet()),"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Macs Music School Pte Ltd\"), new Salary(\"800\"), new Email(\"jennie@example.com\"),"},{"lineNumber":110,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Education\"), new Region(\"Orchard\"),"},{"lineNumber":111,"author":{"gitID":"wyinkok"},"content":"                new Role(\"Intern Violin Teacher\"), getTagSet()),"},{"lineNumber":112,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"Pan Asia Logistics Investments Pte Ltd\"), new Salary(\"800\"),"},{"lineNumber":113,"author":{"gitID":"wyinkok"},"content":"                new Email(\"roybcd@example.com\"), new Address(\"21 Changi North Way, Singapore 498774\"),"},{"lineNumber":114,"author":{"gitID":"wyinkok"},"content":"                new Industry(\"Transportation\"), new Region(\"Changi\"), new Role(\"Finance Intern\"), getTagSet()),"},{"lineNumber":115,"author":{"gitID":"wyinkok"},"content":"            new Internship(new Name(\"PACE OD Consulting Pte Ltd\"), new Salary(\"400\"), new Email(\"jennie@example.com\"),"},{"lineNumber":116,"author":{"gitID":"wyinkok"},"content":"                new Address(\"Blk 45 Tampines Street 85, #11-31\"), new Industry(\"Arts\"), new Region(\"Oueenstown\"),"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"                new Role(\"Content Curation Intern\"), getTagSet()),"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Wealth Springs Holdings Pte Ltd Healthcare Technology\"), new Salary(\"600\"),"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"wsholdings@example.com\"), new Address(\"985 Bukit Timah Road\"), new Industry(\"Healthcare\"),"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Bukit Timah\"), new Role(\"Intern New Business Development\"), getTagSet()),"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"ClearSK Healthcare Pte Ltd\"), new Salary(\"1200\"),"},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"csk@example.com\"), new Address(\"125 Novena Street 13\"), new Industry(\"Healthcare\"),"},{"lineNumber":123,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Novena\"), new Role(\"Financial Data Business Analyst\"), getTagSet(\"saved\")),"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"ClearSK Healthcare Pte Ltd\"), new Salary(\"1000\"),"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"csk@example.com\"), new Address(\"10 Sinaran Drive\"), new Industry(\"Healthcare\"),"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Novena\"), new Role(\"Accounting Finance Analyst\"), getTagSet()),"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"WE Communications\"), new Salary(\"800\"),"},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"wecomms@example.com\"), new Address(\"77 Robinson Road\"), new Industry(\"Media\"),"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Orchard\"), new Role(\"Account Servicing Intern Healthcare\"), getTagSet()),"},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"ClearSK Healthcare Pte Ltd\"), new Salary(\"1000\"),"},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"csk@example.com\"), new Address(\"126 Novena Street 13\"), new Industry(\"Healthcare\"),"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Novena\"), new Role(\"Operations Marketing Assistant\"), getTagSet()),"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Recruit Express Pte Ltd\"), new Salary(\"1150\"),"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"rexpress@example.com\"), new Address(\"126 Novena Street 13\"), new Industry(\"Healthcare\"),"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Orchard\"), new Role(\"Contract Perm Recruiter Healthcare Sector\"), getTagSet()),"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"KosmodeHealth\"), new Salary(\"2500\"),"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"kosmode@example.com\"), new Address(\"15 Libra Drive\"), new Industry(\"Healthcare\"),"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Bishan\"), new Role(\"Project Executive Manager Biochemistry Startup\"), getTagSet()),"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Royal Vending Pte Ltd\"), new Salary(\"1000\"),"},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"royalvv@example.com\"), new Address(\"Bukit Batok St 24 Blk 2 #04-04\"),"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"                new Industry(\"Hospitality\"), new Region(\"Bukit Batok\"),"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"                new Role(\"Sentosa Hospitality Internship Opportunity\"), getTagSet()),"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Far East Hospitality\"), new Salary(\"800\"),"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"FEhosp@example.com\"), new Address(\"Centre Square St 13\"), new Industry(\"Hospitality\"),"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Admin Executive Marketing\"), getTagSet()),"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Yerra Solutions\"), new Salary(\"400\"),"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"Yerrasol@example.com\"), new Address(\"8 eu Tong Sen St #14-93\"), new Industry(\"Legal\"),"},{"lineNumber":148,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Legal HR Admin Intern\"), getTagSet()),"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Mc Corporate Services Pte Ltd\"), new Salary(\"450\"),"},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"Mccorp@example.com\"), new Address(\"1 Coleman Street\"), new Industry(\"Legal\"),"},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Legal Corporate Secretarial Internship\"), getTagSet()),"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Schneider Electric Pte Ltd\"), new Salary(\"800\"),"},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"Schneider@example.com\"), new Address(\"50 Kallang Ave\"), new Industry(\"Legal\"),"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Legal Intern\"), getTagSet()),"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"PropertyLimBrothersMedia\"), new Salary(\"1500\"),"},{"lineNumber":156,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"PLBM11@example.com\"), new Address(\"Central Street 13\"), new Industry(\"Media\"),"},{"lineNumber":157,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Full Time Videographer\"), getTagSet()),"},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Allies Of Skin\"), new Salary(\"800\"),"},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"AlliesOShosp@example.com\"), new Address(\"3 Jln Kledek\"), new Industry(\"Media\"),"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Editorial and Social Media Intern\"), getTagSet()),"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Piece Future Pte Ltd\"), new Salary(\"500\"),"},{"lineNumber":162,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"PFpteltd@example.com\"), new Address(\"45 Middle Road #11-09\"), new Industry(\"Business\"),"},{"lineNumber":163,"author":{"gitID":"wyinkok"},"content":"                new Region(\"Central\"), new Role(\"Business Analyst\"), getTagSet(\"saved\")),"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Effectual Knowledge Services Pte Ltd\"), new Salary(\"800\"),"},{"lineNumber":165,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"EKSpteltd@example.com\"), new Address(\"5 Shenton Way #10-01\"), new Industry(\"Business\"),"},{"lineNumber":166,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Business Development Associate\"), getTagSet()),"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Tradex Systems Pte Ltd\"), new Salary(\"800\"),"},{"lineNumber":168,"author":{"gitID":"wyinkok"},"content":"                new Email(\"Tradex@example.com\"), new Address(\"20 Collyer Quay #23-01\"), new Industry(\"Technology\"),"},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Central\"), new Role(\"Business Development Associate\"), getTagSet()),"},{"lineNumber":170,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Riverview Mobile Solutions\"), new Salary(\"600\"),"},{"lineNumber":171,"author":{"gitID":"wyinkok"},"content":"                new Email(\"RVMS@example.com\"), new Address(\"8 Burn road #12-02\"), new Industry(\"Technology\"),"},{"lineNumber":172,"author":{"gitID":"wyinkok"},"content":"                new Region(\"West\"), new Role(\"Technology Analyst Intern\"), getTagSet(\"saved\")),"},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Caproasia\"), new Salary(\"800\"),"},{"lineNumber":174,"author":{"gitID":"wyinkok"},"content":"                new Email(\"Caproasia@example.com\"), new Address(\"10 Shenton way #11-02\"), new Industry(\"Technology\"),"},{"lineNumber":175,"author":{"gitID":"wyinkok"},"content":"                new Region(\"CBD\"), new Role(\"Web Technology Intern\"), getTagSet(\"saved\")),"},{"lineNumber":176,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Cochat\"), new Salary(\"400\"),"},{"lineNumber":177,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"Cochat@example.com\"), new Address(\"10 Serangoon Road #08-10\"), new Industry(\"Healthcare\"),"},{"lineNumber":178,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Serangoon\"), new Role(\"Social Enterprise Marcom Writer\"), getTagSet()),"},{"lineNumber":179,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Bettr Barista Coffee Academy\"), new Salary(\"800\"),"},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"BettrBari@example.com\"), new Address(\"37 Mactaggart Road #07-03\"), new Industry(\"Services\"),"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"West\"), new Role(\"Social Enterprise Intern\"), getTagSet()),"},{"lineNumber":182,"author":{"gitID":"TanCiKang"},"content":"            new Internship(new Name(\"Aii International Pte Ltd\"), new Salary(\"400\"),"},{"lineNumber":183,"author":{"gitID":"TanCiKang"},"content":"                new Email(\"AiiINT@example.com\"), new Address(\"442 Orchard Road #03-01\"), new Industry(\"Marketing\"),"},{"lineNumber":184,"author":{"gitID":"TanCiKang"},"content":"                new Region(\"Orchard\"), new Role(\"Sales and Marketing Social Enterprise\"), getTagSet()),"},{"lineNumber":185,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":186,"author":{"gitID":"-"},"content":"        };"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":""},{"lineNumber":189,"author":{"gitID":"wyinkok"},"content":"    public static ReadOnlyJobbiBot getSampleJobbiBot() {"},{"lineNumber":190,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":191,"author":{"gitID":"wyinkok"},"content":"            JobbiBot sampleAb \u003d new JobbiBot();"},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":"            for (Internship sampleInternship : getSampleInternships()) {"},{"lineNumber":193,"author":{"gitID":"TanCiKang"},"content":"                sampleAb.addInternship(sampleInternship);"},{"lineNumber":194,"author":{"gitID":"-"},"content":"            }"},{"lineNumber":195,"author":{"gitID":"-"},"content":"            return sampleAb;"},{"lineNumber":196,"author":{"gitID":"TanCiKang"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":197,"author":{"gitID":"TanCiKang"},"content":"            throw new AssertionError(\"sample data cannot contain duplicate internships\", e);"},{"lineNumber":198,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":199,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":200,"author":{"gitID":"-"},"content":""},{"lineNumber":201,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":202,"author":{"gitID":"-"},"content":"     * Returns a tag set containing the list of strings given."},{"lineNumber":203,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":204,"author":{"gitID":"-"},"content":"    public static Set\u003cTag\u003e getTagSet(String... strings) {"},{"lineNumber":205,"author":{"gitID":"-"},"content":"        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"},{"lineNumber":206,"author":{"gitID":"-"},"content":"        for (String s : strings) {"},{"lineNumber":207,"author":{"gitID":"-"},"content":"            tags.add(new Tag(s));"},{"lineNumber":208,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":209,"author":{"gitID":"-"},"content":""},{"lineNumber":210,"author":{"gitID":"-"},"content":"        return tags;"},{"lineNumber":211,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":212,"author":{"gitID":"-"},"content":""},{"lineNumber":213,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":103,"-":32,"TanCiKang":78}},{"path":"src/main/java/seedu/address/model/UserPrefs.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.GuiSettings;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Represents User\u0027s preferences."},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class UserPrefs {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private GuiSettings guiSettings;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"    private String internshipBookFilePath \u003d \"data/InternshipBook.xml\";"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"    private String internshipBookName \u003d \"MyInternshipBook\";"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"    public UserPrefs() {"},{"lineNumber":17,"author":{"gitID":"-"},"content":"        this.setGuiSettings(500, 500, 0, 0);"},{"lineNumber":18,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":19,"author":{"gitID":"-"},"content":""},{"lineNumber":20,"author":{"gitID":"-"},"content":"    public GuiSettings getGuiSettings() {"},{"lineNumber":21,"author":{"gitID":"-"},"content":"        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.guiSettings \u003d guiSettings;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public void setGuiSettings(double width, double height, int x, int y) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        guiSettings \u003d new GuiSettings(width, height, x, y);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"    public String getJobbiBotFilePath() {"},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"        return internshipBookFilePath;"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"    public void setInternshipBookFilePath(String internshipBookFilePath) {"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"        this.internshipBookFilePath \u003d internshipBookFilePath;"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"    public String getJobbiBotName() {"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"        return internshipBookName;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    public void setInternshipBookName(String internshipBookName) {"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        this.internshipBookName \u003d internshipBookName;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        if (!(other instanceof UserPrefs)) { //this handles null as well."},{"lineNumber":54,"author":{"gitID":"-"},"content":"            return false;"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":56,"author":{"gitID":"-"},"content":""},{"lineNumber":57,"author":{"gitID":"-"},"content":"        UserPrefs o \u003d (UserPrefs) other;"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        return Objects.equals(guiSettings, o.guiSettings)"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 Objects.equals(internshipBookFilePath, o.internshipBookFilePath)"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 Objects.equals(internshipBookName, o.internshipBookName);"},{"lineNumber":62,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"        return Objects.hash(guiSettings, internshipBookFilePath, internshipBookName);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":68,"author":{"gitID":"-"},"content":""},{"lineNumber":69,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":70,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":71,"author":{"gitID":"-"},"content":"        StringBuilder sb \u003d new StringBuilder();"},{"lineNumber":72,"author":{"gitID":"-"},"content":"        sb.append(\"Gui Settings : \" + guiSettings.toString());"},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"        sb.append(\"\\nLocal data file location : \" + internshipBookFilePath);"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"        sb.append(\"\\nJobbiBot name : \" + internshipBookName);"},{"lineNumber":75,"author":{"gitID":"-"},"content":"        return sb.toString();"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":77,"author":{"gitID":"-"},"content":""},{"lineNumber":78,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":15,"-":63}},{"path":"src/main/java/seedu/address/storage/JobbiBotStorage.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.storage;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.io.IOException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.Optional;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DataConversionException;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.JobbiBot;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.ReadOnlyJobbiBot;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":" * Represents a storage for {@link JobbiBot}."},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"public interface JobbiBotStorage {"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"     * Returns the file path of the data file."},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"    String getJobbiBotFilePath();"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":"     * Returns JobbiBot data as a {@link ReadOnlyJobbiBot}."},{"lineNumber":22,"author":{"gitID":"-"},"content":"     *   Returns {@code Optional.empty()} if storage file is not found."},{"lineNumber":23,"author":{"gitID":"-"},"content":"     * @throws DataConversionException if the data in storage is not in the expected format."},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem when reading from the storage."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":"    Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook() throws DataConversionException, IOException;"},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"     * @see #getJobbiBotFilePath()"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"    Optional\u003cReadOnlyJobbiBot\u003e readInternshipBook(String filePath) throws DataConversionException, IOException;"},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"     * Saves the given {@link ReadOnlyJobbiBot} to the storage."},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"     * @param internshipBook cannot be null."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @throws IOException if there was any problem writing to the file."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":"    void saveInternshipBook(ReadOnlyJobbiBot internshipBook) throws IOException;"},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"     * @see #saveInternshipBook(ReadOnlyJobbiBot)"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":"    void saveInternshipBook(ReadOnlyJobbiBot internshipBook, String filePath) throws IOException;"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":33,"-":12}},{"path":"src/main/java/seedu/address/model/ModelManager.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":"import static seedu.address.logic.commands.SaveCommand.MESSAGE_DUPLICATE_SAVED_INTERNSHIP;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.ArrayList;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.logging.Logger;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.FilteredList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"import javafx.collections.transformation.SortedList;"},{"lineNumber":17,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.ComponentManager;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.commons.core.LogsCenter;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.events.model.JobbiBotChangedEvent;"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":24,"author":{"gitID":"-"},"content":"import seedu.address.model.util.Sorter;"},{"lineNumber":25,"author":{"gitID":"-"},"content":""},{"lineNumber":26,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":27,"author":{"gitID":"-"},"content":" * Represents the in-memory model of the address book data."},{"lineNumber":28,"author":{"gitID":"-"},"content":" * All changes to any model should be synchronized."},{"lineNumber":29,"author":{"gitID":"-"},"content":" */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"public class ModelManager extends ComponentManager implements Model {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    private static List\u003cString\u003e filterKeywords;"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":"    private final JobbiBot jobbiBot;"},{"lineNumber":35,"author":{"gitID":"-"},"content":"    private final FilteredList\u003cInternship\u003e searchedInternships;"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    private final FilteredList\u003cInternship\u003e filteredInternships;"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    private final SortedList\u003cInternship\u003e sortedFilteredInternships;"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":39,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"     * Initializes a ModelManager with the given jobbiBot and userPrefs."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    public ModelManager(ReadOnlyJobbiBot internshipBook, UserPrefs userPrefs) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        super();"},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"        requireAllNonNull(internshipBook, userPrefs);"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"        logger.fine(\"Initializing with internship book: \" + internshipBook + \" and user prefs \" + userPrefs);"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"        this.jobbiBot \u003d new JobbiBot(internshipBook);"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"        this.searchedInternships \u003d new FilteredList\u003c\u003e(this.jobbiBot.getInternshipList());"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        this.filteredInternships \u003d new FilteredList\u003c\u003e(searchedInternships);"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        this.sortedFilteredInternships \u003d new SortedList\u003c\u003e(filteredInternships);"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        filterKeywords \u003d new ArrayList\u003c\u003e();"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public ModelManager() {"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"        this(new JobbiBot(), new UserPrefs());"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":"    public void resetData(ReadOnlyJobbiBot newData) {"},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.resetData(newData);"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"        indicateInternshipBookChanged();"},{"lineNumber":63,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":64,"author":{"gitID":"-"},"content":""},{"lineNumber":65,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"    public ReadOnlyJobbiBot getJobbiBot() {"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        return jobbiBot;"},{"lineNumber":68,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"    /** Raises an event to indicate the model has changed */"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"    private void indicateInternshipBookChanged() {"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":"        raise(new JobbiBotChangedEvent(jobbiBot));"},{"lineNumber":73,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"-"},"content":""},{"lineNumber":75,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"    public void updateInternship(Internship target, Internship editedInternship)"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"            throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        requireAllNonNull(target, editedInternship);"},{"lineNumber":79,"author":{"gitID":"-"},"content":""},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"        jobbiBot.updateInternship(target, editedInternship);"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        indicateInternshipBookChanged();"},{"lineNumber":82,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":83,"author":{"gitID":"-"},"content":""},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":"    public void setComparator(List\u003cString\u003e keywords) {"},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"        Comparator\u003cInternship\u003e comparatorToSet \u003d Sorter.makeComparator(keywords);"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"        sortedFilteredInternships.setComparator(comparatorToSet);"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":91,"author":{"gitID":"niloc94"},"content":"    public static void setKeywords(List\u003cString\u003e uniqueKeywords) {"},{"lineNumber":92,"author":{"gitID":"niloc94"},"content":"        filterKeywords \u003d uniqueKeywords;"},{"lineNumber":93,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":94,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":95,"author":{"gitID":"niloc94"},"content":"    public static List\u003cString\u003e getKeywords() {"},{"lineNumber":96,"author":{"gitID":"niloc94"},"content":"        return filterKeywords;"},{"lineNumber":97,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":98,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":99,"author":{"gitID":"niloc94"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Add / Remove Tags Methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":100,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"     * Add keyword tags that matches the internship to the list of filteredInternships"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"    public void addTagsToFilteredList() {"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"        for (String keyword: filterKeywords) {"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"            filteredInternships.forEach(filteredInternship -\u003e {"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"                if (StringUtil.containsWordIgnoreCase(filteredInternship.toString(), keyword)) {"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"                    try {"},{"lineNumber":111,"author":{"gitID":"TanCiKang"},"content":"                        updateInternship(filteredInternship, filteredInternship.addTagsToInternship(keyword));"},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"                    } catch (InternshipNotFoundException e) {"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"                        throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"                    } catch (DuplicateInternshipException e) {"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"                        throw new AssertionError(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"                    }"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"                }"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"            });"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"     * Remove all tags that are not \u0027saved\u0027 from the filtered list"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"    public void removeTagsFromFilteredList() {"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"        for (Internship internship : getFilteredInternshipList()) {"},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"            try {"},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"                updateInternship(internship, internship.removeTagsFromInternship());"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"            } catch (DuplicateInternshipException e) {"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"                throw new AssertionError(MESSAGE_DUPLICATE_SAVED_INTERNSHIP);"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"            } catch (InternshipNotFoundException e) {"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"                throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"            }"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"     * Remove all tags from the internship list with the exception of saved tag"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"     * @param model"},{"lineNumber":145,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":146,"author":{"gitID":"TanCiKang"},"content":"    public void removeTagsFromAllInternshipList() {"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"        updateSearchedInternshipList(PREDICATE_SHOW_ALL_INTERNSHIPS);"},{"lineNumber":148,"author":{"gitID":"TanCiKang"},"content":"        removeTagsFromFilteredList();"},{"lineNumber":149,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":151,"author":{"gitID":"TanCiKang"},"content":"    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Internship List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"},{"lineNumber":152,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":153,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":154,"author":{"gitID":"TanCiKang"},"content":"     * Returns an unmodifiable view of the list of {@code Internship} backed by the internal list of"},{"lineNumber":155,"author":{"gitID":"TanCiKang"},"content":"     * {@code jobbiBot}"},{"lineNumber":156,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":157,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":158,"author":{"gitID":"TanCiKang"},"content":"    public ObservableList\u003cInternship\u003e getFilteredInternshipList() {"},{"lineNumber":159,"author":{"gitID":"TanCiKang"},"content":"        return FXCollections.unmodifiableObservableList(sortedFilteredInternships);"},{"lineNumber":160,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":162,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":163,"author":{"gitID":"TanCiKang"},"content":"    public void updateFilteredInternshipList(Predicate\u003cInternship\u003e predicate) {"},{"lineNumber":164,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(predicate);"},{"lineNumber":165,"author":{"gitID":"TanCiKang"},"content":"        filteredInternships.setPredicate(predicate);"},{"lineNumber":166,"author":{"gitID":"TanCiKang"},"content":"        logger.info(\"Updating only Filtered Internship List\");"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":168,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":169,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":170,"author":{"gitID":"TanCiKang"},"content":"    public void updateSearchedInternshipList(Predicate\u003cInternship\u003e predicate) {"},{"lineNumber":171,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(predicate);"},{"lineNumber":172,"author":{"gitID":"TanCiKang"},"content":"        searchedInternships.setPredicate(predicate);"},{"lineNumber":173,"author":{"gitID":"TanCiKang"},"content":"        filteredInternships.setPredicate(predicate);"},{"lineNumber":174,"author":{"gitID":"TanCiKang"},"content":"        logger.info(\"Updating both Searched Internship List and Filtered Internship List\");"},{"lineNumber":175,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":176,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":177,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":178,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object obj) {"},{"lineNumber":179,"author":{"gitID":"TanCiKang"},"content":"        // short circuit if same object"},{"lineNumber":180,"author":{"gitID":"TanCiKang"},"content":"        if (obj \u003d\u003d this) {"},{"lineNumber":181,"author":{"gitID":"TanCiKang"},"content":"            return true;"},{"lineNumber":182,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":183,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":184,"author":{"gitID":"TanCiKang"},"content":"        // instanceof handles nulls"},{"lineNumber":185,"author":{"gitID":"TanCiKang"},"content":"        if (!(obj instanceof ModelManager)) {"},{"lineNumber":186,"author":{"gitID":"TanCiKang"},"content":"            return false;"},{"lineNumber":187,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":188,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":189,"author":{"gitID":"TanCiKang"},"content":"        // state check"},{"lineNumber":190,"author":{"gitID":"TanCiKang"},"content":"        ModelManager other \u003d (ModelManager) obj;"},{"lineNumber":191,"author":{"gitID":"TanCiKang"},"content":"        return jobbiBot.equals(other.jobbiBot)"},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 filteredInternships.equals(other.filteredInternships);"},{"lineNumber":193,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":194,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"niloc94":17,"wyinkok":19,"-":55,"TanCiKang":103}},{"path":"src/main/java/seedu/address/model/internship/Email.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":" * Represents a Internship\u0027s email in the internship book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Email {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private static  final String SPECIAL_CHARACTERS \u003d \"!#$%\u0026\u0027*+/\u003d?`{|}~^.-\";"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"            \"Internship emails should be of the format local-part@domain \""},{"lineNumber":15,"author":{"gitID":"-"},"content":"            + \"and adhere to the following constraints:\\n\""},{"lineNumber":16,"author":{"gitID":"-"},"content":"            + \"1. The local-part should only contain alphanumeric characters and these special characters, excluding \""},{"lineNumber":17,"author":{"gitID":"-"},"content":"            + \"the parentheses, (\" + SPECIAL_CHARACTERS + \") .\\n\""},{"lineNumber":18,"author":{"gitID":"-"},"content":"            + \"2. This is followed by a \u0027@\u0027 and then a domain name. \""},{"lineNumber":19,"author":{"gitID":"-"},"content":"            + \"The domain name must:\\n\""},{"lineNumber":20,"author":{"gitID":"-"},"content":"            + \"    - be at least 2 characters long\\n\""},{"lineNumber":21,"author":{"gitID":"-"},"content":"            + \"    - start and end with alphanumeric characters\\n\""},{"lineNumber":22,"author":{"gitID":"-"},"content":"            + \"    - consist of alphanumeric characters, a period or a hyphen for the characters in between, if any.\";"},{"lineNumber":23,"author":{"gitID":"-"},"content":"    // alphanumeric and special characters"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    private static final String LOCAL_PART_REGEX \u003d \"^[\\\\w\" + SPECIAL_CHARACTERS + \"]+\";"},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_FIRST_CHARACTER_REGEX \u003d \"[^\\\\W_]\"; // alphanumeric characters except underscore"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_MIDDLE_REGEX \u003d \"[a-zA-Z0-9.-]*\"; // alphanumeric, period and hyphen"},{"lineNumber":27,"author":{"gitID":"-"},"content":"    private static final String DOMAIN_LAST_CHARACTER_REGEX \u003d \"[^\\\\W_]$\";"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public static final String EMAIL_VALIDATION_REGEX \u003d LOCAL_PART_REGEX + \"@\""},{"lineNumber":29,"author":{"gitID":"-"},"content":"            + DOMAIN_FIRST_CHARACTER_REGEX + DOMAIN_MIDDLE_REGEX + DOMAIN_LAST_CHARACTER_REGEX;"},{"lineNumber":30,"author":{"gitID":"-"},"content":""},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":32,"author":{"gitID":"-"},"content":""},{"lineNumber":33,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Constructs an {@code Email}."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":36,"author":{"gitID":"-"},"content":"     * @param email A valid email address."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":38,"author":{"gitID":"-"},"content":"    public Email(String email) {"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        requireNonNull(email);"},{"lineNumber":40,"author":{"gitID":"-"},"content":"        checkArgument(isValidEmail(email), MESSAGE_EMAIL_CONSTRAINTS);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"        this.value \u003d email;"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"     * Returns if a given string is a valid internship email."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public static boolean isValidEmail(String test) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return test.matches(EMAIL_VALIDATION_REGEX);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":50,"author":{"gitID":"-"},"content":""},{"lineNumber":51,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":53,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":55,"author":{"gitID":"-"},"content":""},{"lineNumber":56,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":59,"author":{"gitID":"-"},"content":"                || (other instanceof Email // instanceof handles nulls"},{"lineNumber":60,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"TanCiKang":4,"-":63}},{"path":"src/main/java/seedu/address/model/util/Sorter.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.util;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.Comparator;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"niloc94"},"content":"//@@author niloc94"},{"lineNumber":9,"author":{"gitID":"niloc94"},"content":"/**"},{"lineNumber":10,"author":{"gitID":"niloc94"},"content":" * Takes in keywords for attributes and creates comparator object for sorting"},{"lineNumber":11,"author":{"gitID":"niloc94"},"content":" */"},{"lineNumber":12,"author":{"gitID":"niloc94"},"content":"public class Sorter {"},{"lineNumber":13,"author":{"gitID":"niloc94"},"content":"    private static String attribute1;"},{"lineNumber":14,"author":{"gitID":"niloc94"},"content":"    private static String attribute2;"},{"lineNumber":15,"author":{"gitID":"niloc94"},"content":"    private static String attribute3;"},{"lineNumber":16,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":17,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"     * Assigns keyword value to attribute"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":"     * @param keywords"},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"    public static void assignValuesToAttributes(List\u003cString\u003e keywords) {"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"        attribute1 \u003d keywords.get(0);"},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"        if (keywords.size() \u003d\u003d 2) {"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":"            attribute2 \u003d keywords.get(1);"},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"            attribute3 \u003d keywords.get(1);"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"        } else if (keywords.size() \u003e\u003d 3) {"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"            attribute2 \u003d keywords.get(1);"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"            attribute3 \u003d keywords.get(2);"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"        } else {"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"            attribute2 \u003d keywords.get(0);"},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"            attribute3 \u003d keywords.get(0);"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"     * Helper method to compare string and integer values in attributes"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"     * String values are compareTo each other without case sensitivity"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"     * Integer values (salary) are compareTo each other to sort from highest to lowest"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"     * \u0027-\u0027 char at the start of attributeToCompare flips the order of the Internship objects being compared"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"     *"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"     * @param attributeToCompare the internship attribute to compare"},{"lineNumber":43,"author":{"gitID":"niloc94"},"content":"     * @param o1 internship object 1"},{"lineNumber":44,"author":{"gitID":"niloc94"},"content":"     * @param o2 internship object 2"},{"lineNumber":45,"author":{"gitID":"niloc94"},"content":"     * @return"},{"lineNumber":46,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"niloc94"},"content":"    private static int attributeCompare(Internship o1, Internship o2, String attributeToCompare) {"},{"lineNumber":48,"author":{"gitID":"niloc94"},"content":"        if (attributeToCompare.equalsIgnoreCase(\"salary\")) {"},{"lineNumber":49,"author":{"gitID":"niloc94"},"content":"            return new Integer(Integer.parseInt(o2.getValue(attributeToCompare)))"},{"lineNumber":50,"author":{"gitID":"niloc94"},"content":"                    .compareTo(new Integer(Integer.parseInt(o1.getValue(attributeToCompare))));"},{"lineNumber":51,"author":{"gitID":"niloc94"},"content":"        } else if (attributeToCompare.equalsIgnoreCase(\"-salary\")) {"},{"lineNumber":52,"author":{"gitID":"niloc94"},"content":"            return new Integer(Integer.parseInt(o1.getValue(attributeToCompare)))"},{"lineNumber":53,"author":{"gitID":"niloc94"},"content":"                    .compareTo(new Integer(Integer.parseInt(o2.getValue(attributeToCompare))));"},{"lineNumber":54,"author":{"gitID":"niloc94"},"content":"        } else if (attributeToCompare.charAt(0) \u003d\u003d \u0027-\u0027) {"},{"lineNumber":55,"author":{"gitID":"niloc94"},"content":"            return o2.getValue(attributeToCompare).toLowerCase()"},{"lineNumber":56,"author":{"gitID":"niloc94"},"content":"                    .compareTo(o1.getValue(attributeToCompare).toLowerCase());"},{"lineNumber":57,"author":{"gitID":"niloc94"},"content":"        } else {"},{"lineNumber":58,"author":{"gitID":"niloc94"},"content":"            return o1.getValue(attributeToCompare).toLowerCase()"},{"lineNumber":59,"author":{"gitID":"niloc94"},"content":"                    .compareTo(o2.getValue(attributeToCompare).toLowerCase());"},{"lineNumber":60,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":61,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":63,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":64,"author":{"gitID":"niloc94"},"content":"     * Creates a comparator which sort according objects according to three attributes entered by the user"},{"lineNumber":65,"author":{"gitID":"niloc94"},"content":"     * Keyword attributes are sorted from A-Z by default (ignoring case sensitivity)"},{"lineNumber":66,"author":{"gitID":"niloc94"},"content":"     * Integer values are sorted from highest to lowest by default"},{"lineNumber":67,"author":{"gitID":"niloc94"},"content":"     * For keywords with \u0027-\u0027 at the start of that keyword attribute,"},{"lineNumber":68,"author":{"gitID":"niloc94"},"content":"     * the reverses sort order for that attribute is applied"},{"lineNumber":69,"author":{"gitID":"niloc94"},"content":"     *"},{"lineNumber":70,"author":{"gitID":"niloc94"},"content":"     * @param keywords the list of string keys entered by the user"},{"lineNumber":71,"author":{"gitID":"niloc94"},"content":"     * @return a custom comparator which compare two Internship Object according to their the keyword attributes given"},{"lineNumber":72,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":73,"author":{"gitID":"niloc94"},"content":"    public static Comparator\u003cInternship\u003e makeComparator(List\u003cString\u003e keywords) {"},{"lineNumber":74,"author":{"gitID":"niloc94"},"content":"        assignValuesToAttributes(keywords);"},{"lineNumber":75,"author":{"gitID":"niloc94"},"content":"        return new Comparator\u003cInternship\u003e() {"},{"lineNumber":76,"author":{"gitID":"niloc94"},"content":"            @Override"},{"lineNumber":77,"author":{"gitID":"niloc94"},"content":"            public int compare(Internship o1, Internship o2) {"},{"lineNumber":78,"author":{"gitID":"niloc94"},"content":"                if (attributeCompare(o1, o2, attribute1) \u003d\u003d 0 \u0026\u0026 attributeCompare(o1, o2, attribute2) \u003d\u003d 0) {"},{"lineNumber":79,"author":{"gitID":"niloc94"},"content":"                    return attributeCompare(o1, o2, attribute3);"},{"lineNumber":80,"author":{"gitID":"niloc94"},"content":"                } else if (attributeCompare(o1, o2, attribute1) \u003d\u003d 0 \u0026\u0026 attributeCompare(o1, o2, attribute2) !\u003d 0) {"},{"lineNumber":81,"author":{"gitID":"niloc94"},"content":"                    return attributeCompare(o1, o2, attribute2);"},{"lineNumber":82,"author":{"gitID":"niloc94"},"content":"                } else {"},{"lineNumber":83,"author":{"gitID":"niloc94"},"content":"                    return attributeCompare(o1, o2, attribute1);"},{"lineNumber":84,"author":{"gitID":"niloc94"},"content":"                }"},{"lineNumber":85,"author":{"gitID":"niloc94"},"content":"            }"},{"lineNumber":86,"author":{"gitID":"niloc94"},"content":"        };"},{"lineNumber":87,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"niloc94"},"content":"}"},{"lineNumber":89,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":90,"author":{"gitID":"niloc94"},"content":""}],"authorContributionMap":{"niloc94":83,"-":6,"TanCiKang":1}},{"path":"src/main/java/seedu/address/model/JobbiBot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.HashMap;"},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import java.util.stream.Collectors;"},{"lineNumber":12,"author":{"gitID":"-"},"content":""},{"lineNumber":13,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.UniqueInternshipList;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":18,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":19,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":22,"author":{"gitID":"-"},"content":" * Wraps all data at the Internship-book level"},{"lineNumber":23,"author":{"gitID":"-"},"content":" * Duplicates are not allowed (by .equals comparison)"},{"lineNumber":24,"author":{"gitID":"-"},"content":" */"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"public class JobbiBot implements ReadOnlyJobbiBot {"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"    private final UniqueInternshipList internships;"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":29,"author":{"gitID":"-"},"content":""},{"lineNumber":30,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":31,"author":{"gitID":"-"},"content":"     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"},{"lineNumber":32,"author":{"gitID":"-"},"content":"     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"},{"lineNumber":35,"author":{"gitID":"-"},"content":"     *   among constructors."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        internships \u003d new UniqueInternshipList();"},{"lineNumber":39,"author":{"gitID":"-"},"content":"        tags \u003d new UniqueTagList();"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    public JobbiBot() {}"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"     * Creates an JobbiBot using the Internships and Tags in the {@code toBeCopied}"},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":"    public JobbiBot(ReadOnlyJobbiBot toBeCopied) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        this();"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        resetData(toBeCopied);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    //// list overwrite operations"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public void setInternships(List\u003cInternship\u003e internships) throws DuplicateInternshipException {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        this.internships.setInternships(internships);"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":59,"author":{"gitID":"-"},"content":"        this.tags.setTags(tags);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":61,"author":{"gitID":"-"},"content":""},{"lineNumber":62,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"     * Resets the existing data of this {@code JobbiBot} with {@code newData}."},{"lineNumber":64,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"    public void resetData(ReadOnlyJobbiBot newData) {"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        requireNonNull(newData);"},{"lineNumber":67,"author":{"gitID":"-"},"content":"        setTags(new HashSet\u003c\u003e(newData.getTagList()));"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"        List\u003cInternship\u003e syncedInternshipList \u003d newData.getInternshipList().stream()"},{"lineNumber":69,"author":{"gitID":"-"},"content":"                .map(this::syncWithMasterTagList)"},{"lineNumber":70,"author":{"gitID":"-"},"content":"                .collect(Collectors.toList());"},{"lineNumber":71,"author":{"gitID":"-"},"content":""},{"lineNumber":72,"author":{"gitID":"-"},"content":"        try {"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"            setInternships(syncedInternshipList);"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"InternshipBooks should not have duplicate internships\");"},{"lineNumber":76,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":77,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"-"},"content":""},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"    //// internship-level operations"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"     * Adds a internship to the address book."},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"     * Also checks the new internship\u0027s tags and updates {@link #tags} with any new tags found,"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"     * and updates the Tag objects in the internship to point to those in {@link #tags}."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":"     * @throws DuplicateInternshipException if an equivalent internship already exists."},{"lineNumber":87,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"    public void addInternship(Internship p) throws DuplicateInternshipException {"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"        Internship internship \u003d syncWithMasterTagList(p);"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any internship"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"        // in the internship list."},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":"        internships.add(internship);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"     * Replaces the given internship {@code target} in the list with {@code editedInternship}."},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"     * {@code JobbiBot}\u0027s tag list will be updated with the tags of {@code editedInternship}."},{"lineNumber":99,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":100,"author":{"gitID":"TanCiKang"},"content":"     * @throws DuplicateInternshipException if updating the internship\u0027s details causes the internship to be equivalent"},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"     * to another existing internship in the list."},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"     * @throws InternshipNotFoundException if {@code target} could not be found in the list."},{"lineNumber":103,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"     * @see #syncWithMasterTagList(Internship)"},{"lineNumber":105,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"    public void updateInternship(Internship target, Internship editedInternship)"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":"            throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(editedInternship);"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"        Internship syncedEditedInternship \u003d syncWithMasterTagList(editedInternship);"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        // TODO: the tags master list will be updated even though the below line fails."},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"        // This can cause the tags master list to have additional tags that are not tagged to any internship"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"        // in the internship list."},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"        internships.setInternship(target, syncedEditedInternship);"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"     *  Updates the master tag list to include tags in {@code internship} that are not in the list."},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"     *  @return a copy of this {@code internship} such that every tag in this internship points to a Tag object in the"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"     *  master list."},{"lineNumber":121,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"    private Internship syncWithMasterTagList(Internship internship) {"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(internship.getTags());"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        tags.mergeFrom(internshipTags);"},{"lineNumber":125,"author":{"gitID":"-"},"content":""},{"lineNumber":126,"author":{"gitID":"-"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":"        // used for checking internship tag references"},{"lineNumber":128,"author":{"gitID":"-"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":129,"author":{"gitID":"-"},"content":"        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"        // Rebuild the list of internship tags to point to the relevant tags in the master tag list."},{"lineNumber":132,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"        return new Internship("},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"                internship.getName(), internship.getSalary(), internship.getEmail(), internship.getAddress(),"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"                internship.getIndustry(), internship.getRegion(), internship.getRole(), correctTagReferences);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":138,"author":{"gitID":"-"},"content":""},{"lineNumber":139,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":140,"author":{"gitID":"wyinkok"},"content":"     * Removes {@code key} from this {@code JobbiBot}."},{"lineNumber":141,"author":{"gitID":"wyinkok"},"content":"     * @throws InternshipNotFoundException if the {@code key} is not in this {@code JobbiBot}."},{"lineNumber":142,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"    public boolean removeInternship(Internship key) throws InternshipNotFoundException {"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":"        if (internships.remove(key)) {"},{"lineNumber":145,"author":{"gitID":"-"},"content":"            return true;"},{"lineNumber":146,"author":{"gitID":"-"},"content":"        } else {"},{"lineNumber":147,"author":{"gitID":"TanCiKang"},"content":"            throw new InternshipNotFoundException();"},{"lineNumber":148,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":149,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":150,"author":{"gitID":"-"},"content":""},{"lineNumber":151,"author":{"gitID":"-"},"content":"    //// tag-level operations"},{"lineNumber":152,"author":{"gitID":"-"},"content":""},{"lineNumber":153,"author":{"gitID":"-"},"content":"    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"},{"lineNumber":154,"author":{"gitID":"-"},"content":"        tags.add(t);"},{"lineNumber":155,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":156,"author":{"gitID":"-"},"content":""},{"lineNumber":157,"author":{"gitID":"-"},"content":"    //// util methods"},{"lineNumber":158,"author":{"gitID":"-"},"content":""},{"lineNumber":159,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":160,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":161,"author":{"gitID":"TanCiKang"},"content":"        return internships.asObservableList().size() + \" internships, \" + tags.asObservableList().size() +  \" tags\";"},{"lineNumber":162,"author":{"gitID":"-"},"content":"        // TODO: refine later"},{"lineNumber":163,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":164,"author":{"gitID":"-"},"content":""},{"lineNumber":165,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":166,"author":{"gitID":"TanCiKang"},"content":"    public ObservableList\u003cInternship\u003e getInternshipList() {"},{"lineNumber":167,"author":{"gitID":"TanCiKang"},"content":"        return internships.asObservableList();"},{"lineNumber":168,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":169,"author":{"gitID":"-"},"content":""},{"lineNumber":170,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":171,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e getTagList() {"},{"lineNumber":172,"author":{"gitID":"-"},"content":"        return tags.asObservableList();"},{"lineNumber":173,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":174,"author":{"gitID":"-"},"content":""},{"lineNumber":175,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":176,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":177,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":178,"author":{"gitID":"wyinkok"},"content":"                || (other instanceof JobbiBot // instanceof handles nulls"},{"lineNumber":179,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 this.internships.equals(((JobbiBot) other).internships)"},{"lineNumber":180,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 this.tags.equalsOrderInsensitive(((JobbiBot) other).tags));"},{"lineNumber":181,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":182,"author":{"gitID":"-"},"content":""},{"lineNumber":183,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":184,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":185,"author":{"gitID":"-"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":186,"author":{"gitID":"TanCiKang"},"content":"        return Objects.hash(internships, tags);"},{"lineNumber":187,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":188,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":13,"-":123,"TanCiKang":52}},{"path":"src/main/java/seedu/address/model/internship/InternshipContainsKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" * Tests that a {@code Internship}\u0027s {@code Name, Salary, Address, Email or Industry} matches any of the keywords given."},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"public class InternshipContainsKeywordsPredicate implements Predicate\u003cInternship\u003e {"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":14,"author":{"gitID":"-"},"content":"    public InternshipContainsKeywordsPredicate(List\u003cString\u003e uniqueKeywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d uniqueKeywords;"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":"    public boolean test(Internship internship) {"},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"        // Check if any of the keyword can be found in all of an internship\u0027s details (e.g name, industry, location)"},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"        return keywords.stream().anyMatch(keyword -\u003e StringUtil.containsWordIgnoreCase"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"                (internshipAttributeString(internship), keyword));"},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"     * Helper method to collate all attributes of internship formats it for searching"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"    public String internshipAttributeString(Internship internship) {"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"        // tags currently toString as [tagName], replace [] with whitespace for searching."},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"        // Also replaces comma with whitespace"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"        return internship.toString().replaceAll(\"[\\\\[+\\\\]+\\\\,]\", \" \");"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"                || (other instanceof InternshipContainsKeywordsPredicate // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"                \u0026\u0026 this.keywords.equals(((InternshipContainsKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":25,"TanCiKang":8,"-":9}},{"path":"src/main/java/seedu/address/model/internship/Address.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":" * Represents a Internship\u0027s address in the internship book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Address {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship addresses can take any values, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"-"},"content":"     * The first character of the address must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs an {@code Address}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param address A valid address."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Address(String address) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(address);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidAddress(address), MESSAGE_ADDRESS_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.value \u003d address;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid internship address."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidAddress(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(ADDRESS_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"-"},"content":"                || (other instanceof Address // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":1,"TanCiKang":3,"-":54}},{"path":"src/main/java/seedu/address/model/internship/InternshipContainsAllKeywordsPredicate.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.StringUtil;"},{"lineNumber":7,"author":{"gitID":"-"},"content":""},{"lineNumber":8,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" * Tests that a {@code Internship}\u0027s {@code Name, Salary, Address, Email or Industry} matches all of the keywords given."},{"lineNumber":10,"author":{"gitID":"-"},"content":" */"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":"public class InternshipContainsAllKeywordsPredicate implements Predicate\u003cInternship\u003e {"},{"lineNumber":12,"author":{"gitID":"-"},"content":"    private final List\u003cString\u003e keywords;"},{"lineNumber":13,"author":{"gitID":"-"},"content":""},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"    public InternshipContainsAllKeywordsPredicate(List\u003cString\u003e keywords) {"},{"lineNumber":15,"author":{"gitID":"-"},"content":"        this.keywords \u003d keywords;"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":19,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":20,"author":{"gitID":"niloc94"},"content":"    public boolean test(Internship internship) {"},{"lineNumber":21,"author":{"gitID":"niloc94"},"content":"        // Check if all keyword can be found in all of a person\u0027s details (e.g name, contact number, address)"},{"lineNumber":22,"author":{"gitID":"niloc94"},"content":"        return keywords.stream().allMatch(keyword -\u003e"},{"lineNumber":23,"author":{"gitID":"niloc94"},"content":"                StringUtil.containsWordIgnoreCase(internshipAttributeString(internship), keyword));"},{"lineNumber":24,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":25,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":26,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":27,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"niloc94"},"content":"     * Helper method to collate all attributes of internship formats it for searching"},{"lineNumber":29,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"niloc94"},"content":"    private String internshipAttributeString(Internship internship) {"},{"lineNumber":31,"author":{"gitID":"niloc94"},"content":"        // tags currently toString as [tagName], replace [] with whitespace for searching."},{"lineNumber":32,"author":{"gitID":"niloc94"},"content":"        // Also replaces commas with whitespace"},{"lineNumber":33,"author":{"gitID":"niloc94"},"content":"        return internship.toString().replaceAll(\"[\\\\[+\\\\]+\\\\,]\", \" \");"},{"lineNumber":34,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":36,"author":{"gitID":"niloc94"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"niloc94"},"content":"    public boolean equals(Object other) {"},{"lineNumber":38,"author":{"gitID":"niloc94"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":39,"author":{"gitID":"niloc94"},"content":"                || (other instanceof InternshipContainsAllKeywordsPredicate // instanceof handles nulls"},{"lineNumber":40,"author":{"gitID":"niloc94"},"content":"                \u0026\u0026 this.keywords.equals(((InternshipContainsAllKeywordsPredicate) other).keywords)); // state check"},{"lineNumber":41,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"niloc94"},"content":"}"}],"authorContributionMap":{"niloc94":25,"TanCiKang":4,"-":13}},{"path":"src/main/java/seedu/address/model/internship/Region.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s region in the internship book."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRegion(String)}"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class Region {"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_REGION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship region can take any values and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"     * The first character of the region must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    public static final String REGION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an {@code Region}."},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"     * @param region A valid region."},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public Region(String region) {"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(region);"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        checkArgument(isValidRegion(region), MESSAGE_REGION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        this.value \u003d region;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid region."},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"    public static boolean isValidRegion(String test) {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        return test.matches(REGION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"-"},"content":""},{"lineNumber":46,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof Region // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.value.equals(((Region) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":""},{"lineNumber":58,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":35,"-":23}},{"path":"src/main/java/seedu/address/logic/commands/UnsaveCommand.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.logic.commands;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":"import java.util.List;"},{"lineNumber":9,"author":{"gitID":"wyinkok"},"content":"import java.util.Map;"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":12,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.Messages;"},{"lineNumber":13,"author":{"gitID":"wyinkok"},"content":"import seedu.address.commons.core.index.Index;"},{"lineNumber":14,"author":{"gitID":"wyinkok"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":15,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":16,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":17,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":18,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.internship.exceptions.TagNotFoundException;"},{"lineNumber":19,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":21,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":" * Removes saved internships from the saved collection."},{"lineNumber":24,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":25,"author":{"gitID":"wyinkok"},"content":"public class UnsaveCommand extends UndoableCommand {"},{"lineNumber":26,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":27,"author":{"gitID":"wyinkok"},"content":"    public static final String COMMAND_WORD \u003d \"unsave\";"},{"lineNumber":28,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":29,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"},{"lineNumber":30,"author":{"gitID":"wyinkok"},"content":"            + \": Removes a saved internship to your Saved Collection \""},{"lineNumber":31,"author":{"gitID":"wyinkok"},"content":"            + \"by the index number used in the last internship listing.\\n\""},{"lineNumber":32,"author":{"gitID":"wyinkok"},"content":"            + \"Parameters: INDEX (must be a positive integer)\\n\""},{"lineNumber":33,"author":{"gitID":"wyinkok"},"content":"            + \"Example: \" + COMMAND_WORD + \" 1\";"},{"lineNumber":34,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":35,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_UNSAVED_INTERNSHIP_SUCCESS \u003d"},{"lineNumber":36,"author":{"gitID":"wyinkok"},"content":"            \"New internship removed from Saved Collection: %1$s\";"},{"lineNumber":37,"author":{"gitID":"wyinkok"},"content":"    public static final String MESSAGE_DUPLICATE_REMOVAL \u003d \"This internship has been removed from the collection\";"},{"lineNumber":38,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":39,"author":{"gitID":"wyinkok"},"content":"    private static final String SAVED_TAG \u003d \"saved\";"},{"lineNumber":40,"author":{"gitID":"wyinkok"},"content":"    private final Index targetIndex;"},{"lineNumber":41,"author":{"gitID":"wyinkok"},"content":"    private Internship internshipWithoutSavedTag;"},{"lineNumber":42,"author":{"gitID":"wyinkok"},"content":"    private Internship internshipToUnsave;"},{"lineNumber":43,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":44,"author":{"gitID":"wyinkok"},"content":"    public UnsaveCommand(Index targetIndex) {"},{"lineNumber":45,"author":{"gitID":"wyinkok"},"content":"        this.targetIndex \u003d targetIndex;"},{"lineNumber":46,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":48,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"wyinkok"},"content":"    public CommandResult executeUndoableCommand() throws CommandException {"},{"lineNumber":50,"author":{"gitID":"wyinkok"},"content":"        requireNonNull(internshipToUnsave);"},{"lineNumber":51,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":52,"author":{"gitID":"wyinkok"},"content":"            model.updateInternship(internshipToUnsave, internshipWithoutSavedTag);"},{"lineNumber":53,"author":{"gitID":"wyinkok"},"content":"        } catch (DuplicateInternshipException e) {"},{"lineNumber":54,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMOVAL);"},{"lineNumber":55,"author":{"gitID":"wyinkok"},"content":"        } catch (InternshipNotFoundException e) {"},{"lineNumber":56,"author":{"gitID":"wyinkok"},"content":"            throw new AssertionError(\"The target internship cannot be missing\");"},{"lineNumber":57,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":58,"author":{"gitID":"wyinkok"},"content":"        return new CommandResult(String.format(MESSAGE_UNSAVED_INTERNSHIP_SUCCESS, internshipWithoutSavedTag));"},{"lineNumber":59,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":61,"author":{"gitID":"wyinkok"},"content":"    @Override"},{"lineNumber":62,"author":{"gitID":"wyinkok"},"content":"    protected void preprocessUndoableCommand() throws CommandException {"},{"lineNumber":63,"author":{"gitID":"wyinkok"},"content":"        List\u003cInternship\u003e lastShownList \u003d model.getFilteredInternshipList();"},{"lineNumber":64,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":65,"author":{"gitID":"wyinkok"},"content":"        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"},{"lineNumber":66,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(Messages.MESSAGE_INVALID_INTERNSHIP_DISPLAYED_INDEX);"},{"lineNumber":67,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":68,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":69,"author":{"gitID":"wyinkok"},"content":"        internshipToUnsave \u003d lastShownList.get(targetIndex.getZeroBased());"},{"lineNumber":70,"author":{"gitID":"wyinkok"},"content":"        internshipWithoutSavedTag \u003d removeSavedTagToInternship(internshipToUnsave);"},{"lineNumber":71,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":73,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"wyinkok"},"content":"     * Removes a \"saved\" tag to the existing tags of an internship."},{"lineNumber":75,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":76,"author":{"gitID":"wyinkok"},"content":"     * @param internship"},{"lineNumber":77,"author":{"gitID":"wyinkok"},"content":"     * @return"},{"lineNumber":78,"author":{"gitID":"wyinkok"},"content":"     * @throws CommandException"},{"lineNumber":79,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":80,"author":{"gitID":"wyinkok"},"content":"    private Internship removeSavedTagToInternship(Internship internship) throws CommandException {"},{"lineNumber":81,"author":{"gitID":"wyinkok"},"content":"        final UniqueTagList personTags \u003d new UniqueTagList(internshipToUnsave.getTags());"},{"lineNumber":82,"author":{"gitID":"wyinkok"},"content":"        try {"},{"lineNumber":83,"author":{"gitID":"wyinkok"},"content":"            personTags.delete(new Tag(SAVED_TAG));"},{"lineNumber":84,"author":{"gitID":"wyinkok"},"content":"        } catch (TagNotFoundException e) {"},{"lineNumber":85,"author":{"gitID":"wyinkok"},"content":"            throw new CommandException(MESSAGE_DUPLICATE_REMOVAL);"},{"lineNumber":86,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":87,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":88,"author":{"gitID":"wyinkok"},"content":"        // Create map with values \u003d tag object references in the master list"},{"lineNumber":89,"author":{"gitID":"wyinkok"},"content":"        // used for checking person tag references"},{"lineNumber":90,"author":{"gitID":"wyinkok"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":91,"author":{"gitID":"wyinkok"},"content":"        personTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":92,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":93,"author":{"gitID":"wyinkok"},"content":"        // Rebuild the list of person tags to point to the relevant tags in the master tag list."},{"lineNumber":94,"author":{"gitID":"wyinkok"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":95,"author":{"gitID":"wyinkok"},"content":"        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"        return new Internship("},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"                internship.getName(), internship.getSalary(), internship.getEmail(),"},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"                internship.getAddress(), internship.getIndustry(), internship.getRegion(), internship.getRole(),"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"                correctTagReferences);"},{"lineNumber":100,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"    //@@author"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":104,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":105,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":106,"author":{"gitID":"wyinkok"},"content":"                || (other instanceof UnsaveCommand // instanceof handles nulls"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"                \u0026\u0026 this.targetIndex.equals(((UnsaveCommand) other).targetIndex)); // state check"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"wyinkok"},"content":"}"}],"authorContributionMap":{"wyinkok":106,"-":3}},{"path":"src/main/java/seedu/address/model/internship/exceptions/InternshipNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship.exceptions;"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":3,"author":{"gitID":"TanCiKang"},"content":"/**"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":" * Signals that the operation is unable to find the specified internship."},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"public class InternshipNotFoundException extends Exception {}"}],"authorContributionMap":{"TanCiKang":6}},{"path":"src/main/java/seedu/address/model/internship/exceptions/DuplicateInternshipException.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship.exceptions;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":" * Signals that the operation will result in duplicate Internship objects."},{"lineNumber":7,"author":{"gitID":"-"},"content":" */"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"public class DuplicateInternshipException extends DuplicateDataException {"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"    public DuplicateInternshipException() {"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"        super(\"Operation would result in duplicate internships\");"},{"lineNumber":11,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":12,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":5,"-":7}},{"path":"src/main/java/seedu/address/model/internship/Salary.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s salary number in the address book."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidSalary(String)}"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class Salary {"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_SALARY_CONSTRAINTS \u003d"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"            \"Salary numbers can only contain numbers and it should not be blank\";"},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    public static final String SALARY_VALIDATION_REGEX \u003d \"\\\\d+\";"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"    public final String value;"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"     * Constructs a {@code Salary}."},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"     * @param salary A valid salary number."},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    public Salary(String salary) {"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(salary);"},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"        checkArgument(isValidSalary(salary), MESSAGE_SALARY_CONSTRAINTS);"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"        this.value \u003d salary;"},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid salary."},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    public static boolean isValidSalary(String test) {"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"        return test.matches(SALARY_VALIDATION_REGEX);"},{"lineNumber":34,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return value;"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof Salary // instanceof handles nulls"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.value.equals(((Salary) other).value)); // state check"},{"lineNumber":46,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":47,"author":{"gitID":"-"},"content":""},{"lineNumber":48,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":49,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":50,"author":{"gitID":"-"},"content":"        return value.hashCode();"},{"lineNumber":51,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"-"},"content":""},{"lineNumber":53,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":30,"-":23}},{"path":"src/main/java/seedu/address/model/internship/exceptions/TagNotFoundException.java","lines":[{"lineNumber":1,"author":{"gitID":"wyinkok"},"content":"//@@author wyinkok"},{"lineNumber":2,"author":{"gitID":"wyinkok"},"content":"package seedu.address.model.internship.exceptions;"},{"lineNumber":3,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":4,"author":{"gitID":"wyinkok"},"content":"/**"},{"lineNumber":5,"author":{"gitID":"wyinkok"},"content":" * Signals that the operation is unable to find the specified internship."},{"lineNumber":6,"author":{"gitID":"wyinkok"},"content":" */"},{"lineNumber":7,"author":{"gitID":"wyinkok"},"content":"public class TagNotFoundException extends Exception {}"}],"authorContributionMap":{"wyinkok":7}},{"path":"src/main/java/seedu/address/model/internship/Internship.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":""},{"lineNumber":5,"author":{"gitID":"-"},"content":"import java.util.Collections;"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"import java.util.HashMap;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import java.util.HashSet;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Map;"},{"lineNumber":9,"author":{"gitID":"-"},"content":"import java.util.Objects;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.logic.commands.exceptions.CommandException;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.TagNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":15,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.UniqueTagList;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship in the internship book."},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Guarantees: details are present and not null, field values are validated, immutable."},{"lineNumber":20,"author":{"gitID":"-"},"content":" */"},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"public class Internship {"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    public static final String SORTABLE_ATTRIBUTES_LIST \u003d \"Name Salary Industry Region Role\";"},{"lineNumber":24,"author":{"gitID":"-"},"content":"    public static final String SORTABLE_ATTRIBUTES_LIST_WITH_NEGATIVE \u003d SORTABLE_ATTRIBUTES_LIST"},{"lineNumber":25,"author":{"gitID":"-"},"content":"            + \" -Name -Salary -Industry -Region -Role\";"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"    private static final String SAVED_TAG_NAME \u003d \"[saved]\";"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    private final Name name;"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"    private final Salary salary;"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    private final Email email;"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    private final Address address;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    private final Industry industry;"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"    private final Region region;"},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    private final Role role;"},{"lineNumber":35,"author":{"gitID":"-"},"content":""},{"lineNumber":36,"author":{"gitID":"-"},"content":"    private final UniqueTagList tags;"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"-"},"content":"     * Every field must be present and not null."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    public Internship(Name name, Salary salary, Email email, Address address, Industry industry, Region region,"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"                      Role role, Set\u003cTag\u003e tags) {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        requireAllNonNull(name, salary, email, address, industry, region, tags);"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        this.name \u003d name;"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":"        this.salary \u003d salary;"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        this.email \u003d email;"},{"lineNumber":47,"author":{"gitID":"-"},"content":"        this.address \u003d address;"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        this.industry \u003d industry;"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"        this.region \u003d region;"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"        this.role \u003d role;"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        // protect internal tags from changes in the arg list"},{"lineNumber":52,"author":{"gitID":"-"},"content":"        this.tags \u003d new UniqueTagList(tags);"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public Name getName() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return name;"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"    public Salary getSalary() {"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":"        return salary;"},{"lineNumber":61,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":62,"author":{"gitID":"-"},"content":""},{"lineNumber":63,"author":{"gitID":"-"},"content":"    public Email getEmail() {"},{"lineNumber":64,"author":{"gitID":"-"},"content":"        return email;"},{"lineNumber":65,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":66,"author":{"gitID":"-"},"content":""},{"lineNumber":67,"author":{"gitID":"-"},"content":"    public Address getAddress() {"},{"lineNumber":68,"author":{"gitID":"-"},"content":"        return address;"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"TanCiKang"},"content":"    public Industry getIndustry() {"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"        return industry;"},{"lineNumber":73,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":75,"author":{"gitID":"TanCiKang"},"content":"    public Region getRegion() {"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"        return region;"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"    public Role getRole() {"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"        return role;"},{"lineNumber":81,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":83,"author":{"gitID":"TanCiKang"},"content":"    public String getUrl() {"},{"lineNumber":84,"author":{"gitID":"TanCiKang"},"content":"        return createUrl();"},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":86,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":87,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":88,"author":{"gitID":"TanCiKang"},"content":"    private String createUrl() {"},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"        StringBuilder url \u003d new StringBuilder();"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"        url.append(getName()).append(\u0027 \u0027).append(getRole());"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        return url.toString().replace(\" \", \"-\");"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":94,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"},{"lineNumber":96,"author":{"gitID":"TanCiKang"},"content":"     * if modification is attempted."},{"lineNumber":97,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":98,"author":{"gitID":"TanCiKang"},"content":"    public Set\u003cTag\u003e getTags() {"},{"lineNumber":99,"author":{"gitID":"TanCiKang"},"content":"        return Collections.unmodifiableSet(tags.toSet());"},{"lineNumber":100,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":102,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":104,"author":{"gitID":"TanCiKang"},"content":"        if (other \u003d\u003d this) {"},{"lineNumber":105,"author":{"gitID":"TanCiKang"},"content":"            return true;"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":107,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":108,"author":{"gitID":"TanCiKang"},"content":"        if (!(other instanceof Internship)) {"},{"lineNumber":109,"author":{"gitID":"TanCiKang"},"content":"            return false;"},{"lineNumber":110,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":111,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":112,"author":{"gitID":"TanCiKang"},"content":"        Internship otherInternship \u003d (Internship) other;"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"        return otherInternship.getName().equals(this.getName())"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getSalary().equals(this.getSalary())"},{"lineNumber":115,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getEmail().equals(this.getEmail())"},{"lineNumber":116,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getAddress().equals(this.getAddress())"},{"lineNumber":117,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getIndustry().equals(this.getIndustry())"},{"lineNumber":118,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getRegion().equals(this.getRegion())"},{"lineNumber":119,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 otherInternship.getRole().equals(this.getRole());"},{"lineNumber":120,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":122,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":123,"author":{"gitID":"TanCiKang"},"content":"    public int hashCode() {"},{"lineNumber":124,"author":{"gitID":"TanCiKang"},"content":"        // use this method for custom fields hashing instead of implementing your own"},{"lineNumber":125,"author":{"gitID":"TanCiKang"},"content":"        return Objects.hash(name, salary, email, address, industry, region, role, tags);"},{"lineNumber":126,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":127,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":128,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":129,"author":{"gitID":"TanCiKang"},"content":"    public String toString() {"},{"lineNumber":130,"author":{"gitID":"TanCiKang"},"content":"        final StringBuilder builder \u003d new StringBuilder();"},{"lineNumber":131,"author":{"gitID":"TanCiKang"},"content":"        builder.append(getName())"},{"lineNumber":132,"author":{"gitID":"TanCiKang"},"content":"                .append(\" Salary: \")"},{"lineNumber":133,"author":{"gitID":"TanCiKang"},"content":"                .append(getSalary())"},{"lineNumber":134,"author":{"gitID":"TanCiKang"},"content":"                .append(\" Industry: \")"},{"lineNumber":135,"author":{"gitID":"TanCiKang"},"content":"                .append(getIndustry())"},{"lineNumber":136,"author":{"gitID":"TanCiKang"},"content":"                .append(\" Region: \")"},{"lineNumber":137,"author":{"gitID":"TanCiKang"},"content":"                .append(getRegion())"},{"lineNumber":138,"author":{"gitID":"TanCiKang"},"content":"                .append(\" Role: \")"},{"lineNumber":139,"author":{"gitID":"TanCiKang"},"content":"                .append(getRole())"},{"lineNumber":140,"author":{"gitID":"TanCiKang"},"content":"                .append(\" Tags: \");"},{"lineNumber":141,"author":{"gitID":"TanCiKang"},"content":"        getTags().forEach(builder::append);"},{"lineNumber":142,"author":{"gitID":"TanCiKang"},"content":"        return builder.toString();"},{"lineNumber":143,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":144,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":145,"author":{"gitID":"niloc94"},"content":"    //@@author niloc94"},{"lineNumber":146,"author":{"gitID":"niloc94"},"content":"    /**"},{"lineNumber":147,"author":{"gitID":"niloc94"},"content":"     * Helper method to return an Internship attributes string value"},{"lineNumber":148,"author":{"gitID":"niloc94"},"content":"     * Negative attributes are for use with sorter class"},{"lineNumber":149,"author":{"gitID":"niloc94"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"niloc94"},"content":"    public String getValue(String keyword) {"},{"lineNumber":151,"author":{"gitID":"niloc94"},"content":"        switch (keyword.toLowerCase()) {"},{"lineNumber":152,"author":{"gitID":"niloc94"},"content":"        case \"name\":"},{"lineNumber":153,"author":{"gitID":"niloc94"},"content":"        case \"-name\":"},{"lineNumber":154,"author":{"gitID":"niloc94"},"content":"            return getName().toString();"},{"lineNumber":155,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":156,"author":{"gitID":"niloc94"},"content":"        case \"salary\":"},{"lineNumber":157,"author":{"gitID":"niloc94"},"content":"        case \"-salary\":"},{"lineNumber":158,"author":{"gitID":"niloc94"},"content":"            return getSalary().toString();"},{"lineNumber":159,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":160,"author":{"gitID":"niloc94"},"content":"        case \"industry\":"},{"lineNumber":161,"author":{"gitID":"niloc94"},"content":"        case \"-industry\":"},{"lineNumber":162,"author":{"gitID":"niloc94"},"content":"            return getIndustry().toString();"},{"lineNumber":163,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":164,"author":{"gitID":"niloc94"},"content":"        case \"region\":"},{"lineNumber":165,"author":{"gitID":"niloc94"},"content":"        case \"-region\":"},{"lineNumber":166,"author":{"gitID":"niloc94"},"content":"            return getRegion().toString();"},{"lineNumber":167,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":168,"author":{"gitID":"niloc94"},"content":"        case \"role\":"},{"lineNumber":169,"author":{"gitID":"niloc94"},"content":"        case \"-role\":"},{"lineNumber":170,"author":{"gitID":"niloc94"},"content":"            return getRole().toString();"},{"lineNumber":171,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":172,"author":{"gitID":"niloc94"},"content":"        case \"address\":"},{"lineNumber":173,"author":{"gitID":"niloc94"},"content":"        case \"-address\":"},{"lineNumber":174,"author":{"gitID":"niloc94"},"content":"            return getAddress().toString();"},{"lineNumber":175,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":176,"author":{"gitID":"niloc94"},"content":"        case \"email\":"},{"lineNumber":177,"author":{"gitID":"niloc94"},"content":"        case \"-email\":"},{"lineNumber":178,"author":{"gitID":"niloc94"},"content":"            return getEmail().toString();"},{"lineNumber":179,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":180,"author":{"gitID":"niloc94"},"content":"        default:"},{"lineNumber":181,"author":{"gitID":"niloc94"},"content":"            assert false; // Keyword already parsed to attribute type. Program should never reach here"},{"lineNumber":182,"author":{"gitID":"niloc94"},"content":"            throw new AssertionError();"},{"lineNumber":183,"author":{"gitID":"niloc94"},"content":"        }"},{"lineNumber":184,"author":{"gitID":"niloc94"},"content":"    }"},{"lineNumber":185,"author":{"gitID":"niloc94"},"content":""},{"lineNumber":186,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":187,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":188,"author":{"gitID":"TanCiKang"},"content":"     * Remove all tags other than \u0027saved\u0027 tags from individual internship"},{"lineNumber":189,"author":{"gitID":"TanCiKang"},"content":"     * @return internship"},{"lineNumber":190,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":191,"author":{"gitID":"TanCiKang"},"content":"    public Internship removeTagsFromInternship() {"},{"lineNumber":192,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(getTags());"},{"lineNumber":193,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":194,"author":{"gitID":"TanCiKang"},"content":"        for (Tag tagToBeRemoved : tags) {"},{"lineNumber":195,"author":{"gitID":"TanCiKang"},"content":"            if (!tagToBeRemoved.toString().equals(SAVED_TAG_NAME)) {"},{"lineNumber":196,"author":{"gitID":"TanCiKang"},"content":"                try {"},{"lineNumber":197,"author":{"gitID":"TanCiKang"},"content":"                    internshipTags.delete(tagToBeRemoved);"},{"lineNumber":198,"author":{"gitID":"TanCiKang"},"content":"                } catch (TagNotFoundException e) {"},{"lineNumber":199,"author":{"gitID":"TanCiKang"},"content":"                    assert false;"},{"lineNumber":200,"author":{"gitID":"TanCiKang"},"content":"                    throw new AssertionError(\"Impossible! Should not have TagNotFoundException\");"},{"lineNumber":201,"author":{"gitID":"TanCiKang"},"content":"                }"},{"lineNumber":202,"author":{"gitID":"TanCiKang"},"content":"            }"},{"lineNumber":203,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":204,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":205,"author":{"gitID":"TanCiKang"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":206,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":207,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":208,"author":{"gitID":"TanCiKang"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":209,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":210,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":211,"author":{"gitID":"TanCiKang"},"content":"        return new Internship("},{"lineNumber":212,"author":{"gitID":"TanCiKang"},"content":"                getName(), getSalary(), getEmail(), getAddress(),"},{"lineNumber":213,"author":{"gitID":"TanCiKang"},"content":"                getIndustry(), getRegion(), getRole(), correctTagReferences);"},{"lineNumber":214,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":215,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":216,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":217,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":218,"author":{"gitID":"TanCiKang"},"content":"     * Adds keyword tags that matches the individual internship to the internship except keywords with only"},{"lineNumber":219,"author":{"gitID":"TanCiKang"},"content":"     * non-alphanumeric characters"},{"lineNumber":220,"author":{"gitID":"TanCiKang"},"content":"     * @param keyword"},{"lineNumber":221,"author":{"gitID":"TanCiKang"},"content":"     * @return Internship"},{"lineNumber":222,"author":{"gitID":"TanCiKang"},"content":"     * @throws CommandException"},{"lineNumber":223,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":224,"author":{"gitID":"TanCiKang"},"content":"    public Internship addTagsToInternship(String keyword) {"},{"lineNumber":225,"author":{"gitID":"TanCiKang"},"content":"        final UniqueTagList internshipTags \u003d new UniqueTagList(getTags());"},{"lineNumber":226,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":227,"author":{"gitID":"TanCiKang"},"content":"        try {"},{"lineNumber":228,"author":{"gitID":"TanCiKang"},"content":"            internshipTags.add(new Tag(keyword));"},{"lineNumber":229,"author":{"gitID":"TanCiKang"},"content":"        } catch (UniqueTagList.DuplicateTagException e) {"},{"lineNumber":230,"author":{"gitID":"TanCiKang"},"content":"            throw new AssertionError(\"Operation would result in duplicate tags\");"},{"lineNumber":231,"author":{"gitID":"TanCiKang"},"content":"        }"},{"lineNumber":232,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":233,"author":{"gitID":"TanCiKang"},"content":"        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"},{"lineNumber":234,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"},{"lineNumber":235,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":236,"author":{"gitID":"TanCiKang"},"content":"        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"},{"lineNumber":237,"author":{"gitID":"TanCiKang"},"content":"        internshipTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"},{"lineNumber":238,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":239,"author":{"gitID":"TanCiKang"},"content":"        return new Internship("},{"lineNumber":240,"author":{"gitID":"TanCiKang"},"content":"                getName(), getSalary(), getEmail(), getAddress(),"},{"lineNumber":241,"author":{"gitID":"TanCiKang"},"content":"                getIndustry(), getRegion(), getRole(), correctTagReferences);"},{"lineNumber":242,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":243,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"niloc94":41,"TanCiKang":154,"-":48}},{"path":"src/main/java/seedu/address/model/internship/Name.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s company name."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Name {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    public static final String MESSAGE_NAME_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship names should only contain alphanumeric characters and spaces, and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"     * The first character of the name must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"-"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"-"},"content":"    public static final String NAME_VALIDATION_REGEX \u003d \"[\\\\p{Alnum}][\\\\p{Alnum} ]*\";"},{"lineNumber":20,"author":{"gitID":"-"},"content":""},{"lineNumber":21,"author":{"gitID":"-"},"content":"    public final String fullName;"},{"lineNumber":22,"author":{"gitID":"-"},"content":""},{"lineNumber":23,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"-"},"content":"     * Constructs a {@code Name}."},{"lineNumber":25,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"-"},"content":"     * @param name A valid name."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"-"},"content":"    public Name(String name) {"},{"lineNumber":29,"author":{"gitID":"-"},"content":"        requireNonNull(name);"},{"lineNumber":30,"author":{"gitID":"-"},"content":"        checkArgument(isValidName(name), MESSAGE_NAME_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        this.fullName \u003d name;"},{"lineNumber":32,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"-"},"content":""},{"lineNumber":34,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid company\u0027s name."},{"lineNumber":36,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"-"},"content":"    public static boolean isValidName(String test) {"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        return test.matches(NAME_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"-"},"content":""},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return fullName;"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":50,"author":{"gitID":"-"},"content":"                || (other instanceof Name // instanceof handles nulls"},{"lineNumber":51,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.fullName.equals(((Name) other).fullName)); // state check"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"-"},"content":""},{"lineNumber":54,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        return fullName.hashCode();"},{"lineNumber":57,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":5,"-":54}},{"path":"src/main/java/seedu/address/model/internship/Industry.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"//@@author TanCiKang"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s industry in the internship book."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidIndustry(String)}"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class Industry {"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_INDUSTRY_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship industry can take any values and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"     * The first character of the industry must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    public static final String INDUSTRY_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an {@code Industry}."},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"     * @param industry A valid industry."},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public Industry (String industry) {"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(industry);"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        checkArgument(isValidIndustry(industry), MESSAGE_INDUSTRY_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        this.value \u003d industry;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid internship industry."},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"    public static boolean isValidIndustry(String test) {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        return test.matches(INDUSTRY_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof Industry // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.value.equals(((Industry) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"TanCiKang":56,"-":2}},{"path":"src/main/java/seedu/address/model/ReadOnlyJobbiBot.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":4,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":5,"author":{"gitID":"-"},"content":"import seedu.address.model.tag.Tag;"},{"lineNumber":6,"author":{"gitID":"-"},"content":""},{"lineNumber":7,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":8,"author":{"gitID":"wyinkok"},"content":" * Unmodifiable view of an internship list"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"wyinkok"},"content":"public interface ReadOnlyJobbiBot {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"     * Returns an unmodifiable view of the internships list."},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"     * This list will not contain any duplicate internships."},{"lineNumber":15,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"    ObservableList\u003cInternship\u003e getInternshipList();"},{"lineNumber":17,"author":{"gitID":"-"},"content":""},{"lineNumber":18,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":19,"author":{"gitID":"-"},"content":"     * Returns an unmodifiable view of the tags list."},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * This list will not contain any duplicate tags."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    ObservableList\u003cTag\u003e getTagList();"},{"lineNumber":23,"author":{"gitID":"-"},"content":""},{"lineNumber":24,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":2,"-":18,"TanCiKang":4}},{"path":"src/main/java/seedu/address/model/tag/Tag.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"-"},"content":" * Represents a Tag in the address book."},{"lineNumber":8,"author":{"gitID":"-"},"content":" * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"},{"lineNumber":9,"author":{"gitID":"-"},"content":" */"},{"lineNumber":10,"author":{"gitID":"-"},"content":"public class Tag {"},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names can take any values and it should not be blank\";"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"    public static final String TAG_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"    public final String tagName;"},{"lineNumber":16,"author":{"gitID":"-"},"content":""},{"lineNumber":17,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":18,"author":{"gitID":"-"},"content":"     * Constructs a {@code Tag}."},{"lineNumber":19,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":20,"author":{"gitID":"-"},"content":"     * @param tagName A valid tag name."},{"lineNumber":21,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":22,"author":{"gitID":"-"},"content":"    public Tag(String tagName) {"},{"lineNumber":23,"author":{"gitID":"-"},"content":"        requireNonNull(tagName);"},{"lineNumber":24,"author":{"gitID":"-"},"content":"        checkArgument(isValidTagName(tagName), MESSAGE_TAG_CONSTRAINTS);"},{"lineNumber":25,"author":{"gitID":"-"},"content":"        this.tagName \u003d tagName;"},{"lineNumber":26,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":27,"author":{"gitID":"-"},"content":""},{"lineNumber":28,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":29,"author":{"gitID":"-"},"content":"     * Returns true if a given string is a valid tag name."},{"lineNumber":30,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":31,"author":{"gitID":"-"},"content":"    public static boolean isValidTagName(String test) {"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return test.matches(TAG_VALIDATION_REGEX);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":38,"author":{"gitID":"-"},"content":"                || (other instanceof Tag // instanceof handles nulls"},{"lineNumber":39,"author":{"gitID":"-"},"content":"                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"},{"lineNumber":40,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":41,"author":{"gitID":"-"},"content":""},{"lineNumber":42,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":43,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":44,"author":{"gitID":"-"},"content":"        return tagName.hashCode();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":46,"author":{"gitID":"-"},"content":""},{"lineNumber":47,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":48,"author":{"gitID":"-"},"content":"     * Format state as text for viewing."},{"lineNumber":49,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    public String toString() {"},{"lineNumber":51,"author":{"gitID":"-"},"content":"        return \u0027[\u0027 + tagName + \u0027]\u0027;"},{"lineNumber":52,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public String getTagName() {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        return tagName;"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"-":51,"TanCiKang":6}},{"path":"src/main/java/seedu/address/model/Model.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import java.util.function.Predicate;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.Internship;"},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":10,"author":{"gitID":"-"},"content":""},{"lineNumber":11,"author":{"gitID":"-"},"content":""},{"lineNumber":12,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":13,"author":{"gitID":"-"},"content":" * The API of the Model component."},{"lineNumber":14,"author":{"gitID":"-"},"content":" */"},{"lineNumber":15,"author":{"gitID":"-"},"content":"public interface Model {"},{"lineNumber":16,"author":{"gitID":"-"},"content":"    /** {@code Predicate} that always evaluate to true */"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"    Predicate\u003cInternship\u003e PREDICATE_SHOW_ALL_INTERNSHIPS \u003d unused -\u003e true;"},{"lineNumber":18,"author":{"gitID":"-"},"content":""},{"lineNumber":19,"author":{"gitID":"-"},"content":"    /** Clears existing backing model and replaces with the provided new data. */"},{"lineNumber":20,"author":{"gitID":"wyinkok"},"content":"    void resetData(ReadOnlyJobbiBot newData);"},{"lineNumber":21,"author":{"gitID":"-"},"content":""},{"lineNumber":22,"author":{"gitID":"wyinkok"},"content":"    /** Returns the JobbiBot */"},{"lineNumber":23,"author":{"gitID":"wyinkok"},"content":"    ReadOnlyJobbiBot getJobbiBot();"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"     * Replaces the given internship {@code target} with {@code editedInternship}."},{"lineNumber":27,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"     * @throws DuplicateInternshipException if updating the internship\u0027s details causes the internship to be equivalent"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"     * to another existing internship in the list."},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"     * @throws InternshipNotFoundException if {@code target} could not be found in the list."},{"lineNumber":31,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    void updateInternship(Internship target, Internship editedInternship)"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":"            throws DuplicateInternshipException, InternshipNotFoundException;"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"    /** Returns an unmodifiable view of the filtered internship list */"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"    ObservableList\u003cInternship\u003e getFilteredInternshipList();"},{"lineNumber":37,"author":{"gitID":"-"},"content":""},{"lineNumber":38,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"     * Updates the filter of the filtered internship list to filter by the given {@code predicate}."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":41,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    void updateFilteredInternshipList(Predicate\u003cInternship\u003e predicate);"},{"lineNumber":43,"author":{"gitID":"-"},"content":""},{"lineNumber":44,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * Updates the filter of the searched internship list to filter by the given {@code predicate}."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     * @throws NullPointerException if {@code predicate} is null."},{"lineNumber":47,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":48,"author":{"gitID":"-"},"content":"    void updateSearchedInternshipList(Predicate\u003cInternship\u003e predicate);"},{"lineNumber":49,"author":{"gitID":"-"},"content":""},{"lineNumber":50,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":51,"author":{"gitID":"-"},"content":"     * Creates a comparator based on the keyword arguments and apply it to the SortedList of Internship"},{"lineNumber":52,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":53,"author":{"gitID":"-"},"content":"    void setComparator(List\u003cString\u003e keywords);"},{"lineNumber":54,"author":{"gitID":"-"},"content":""},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"    //@@author TanCiKang"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"     *  Remove tags from the entire internship list"},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":59,"author":{"gitID":"TanCiKang"},"content":"    void removeTagsFromAllInternshipList();"},{"lineNumber":60,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"TanCiKang"},"content":"     *  Remove tags from the filtered list"},{"lineNumber":63,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"TanCiKang"},"content":"    void removeTagsFromFilteredList();"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":66,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":67,"author":{"gitID":"TanCiKang"},"content":"     * Add keyword tags that matches the internship to the list of filteredInternships"},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":69,"author":{"gitID":"TanCiKang"},"content":"    void addTagsToFilteredList();"},{"lineNumber":70,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"wyinkok":3,"-":37,"TanCiKang":30}},{"path":"src/main/java/seedu/address/model/tag/UniqueTagList.java","lines":[{"lineNumber":1,"author":{"gitID":"-"},"content":"package seedu.address.model.tag;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.HashSet;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":8,"author":{"gitID":"-"},"content":"import java.util.Set;"},{"lineNumber":9,"author":{"gitID":"-"},"content":""},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":12,"author":{"gitID":"-"},"content":"import seedu.address.commons.exceptions.DuplicateDataException;"},{"lineNumber":13,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.TagNotFoundException;"},{"lineNumber":15,"author":{"gitID":"-"},"content":""},{"lineNumber":16,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":17,"author":{"gitID":"-"},"content":" * A list of tags that enforces no nulls and uniqueness between its elements."},{"lineNumber":18,"author":{"gitID":"-"},"content":" *"},{"lineNumber":19,"author":{"gitID":"-"},"content":" * Supports minimal set of list operations for the app\u0027s features."},{"lineNumber":20,"author":{"gitID":"-"},"content":" *"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see Tag#equals(Object)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"-"},"content":"public class UniqueTagList implements Iterable\u003cTag\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"-"},"content":"    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"-"},"content":"     * Constructs empty TagList."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"-"},"content":"    public UniqueTagList() {}"},{"lineNumber":31,"author":{"gitID":"-"},"content":""},{"lineNumber":32,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":33,"author":{"gitID":"-"},"content":"     * Creates a UniqueTagList using given tags."},{"lineNumber":34,"author":{"gitID":"-"},"content":"     * Enforces no nulls."},{"lineNumber":35,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":36,"author":{"gitID":"-"},"content":"    public UniqueTagList(Set\u003cTag\u003e tags) {"},{"lineNumber":37,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":38,"author":{"gitID":"-"},"content":"        internalList.addAll(tags);"},{"lineNumber":39,"author":{"gitID":"-"},"content":""},{"lineNumber":40,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":41,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":42,"author":{"gitID":"-"},"content":""},{"lineNumber":43,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":44,"author":{"gitID":"-"},"content":"     * Returns all tags in this list as a Set."},{"lineNumber":45,"author":{"gitID":"-"},"content":"     * This set is mutable and change-insulated against the internal list."},{"lineNumber":46,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    public Set\u003cTag\u003e toSet() {"},{"lineNumber":48,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":49,"author":{"gitID":"-"},"content":"        return new HashSet\u003c\u003e(internalList);"},{"lineNumber":50,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":51,"author":{"gitID":"-"},"content":""},{"lineNumber":52,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":53,"author":{"gitID":"-"},"content":"     * Replaces the Tags in this list with those in the argument tag list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"-"},"content":"    public void setTags(Set\u003cTag\u003e tags) {"},{"lineNumber":56,"author":{"gitID":"-"},"content":"        requireAllNonNull(tags);"},{"lineNumber":57,"author":{"gitID":"-"},"content":"        internalList.setAll(tags);"},{"lineNumber":58,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":59,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":60,"author":{"gitID":"-"},"content":""},{"lineNumber":61,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":62,"author":{"gitID":"-"},"content":"     * Ensures every tag in the argument list exists in this object."},{"lineNumber":63,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":64,"author":{"gitID":"-"},"content":"    public void mergeFrom(UniqueTagList from) {"},{"lineNumber":65,"author":{"gitID":"-"},"content":"        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        from.internalList.stream()"},{"lineNumber":67,"author":{"gitID":"-"},"content":"                .filter(tag -\u003e !alreadyInside.contains(tag))"},{"lineNumber":68,"author":{"gitID":"-"},"content":"                .forEach(internalList::add);"},{"lineNumber":69,"author":{"gitID":"-"},"content":""},{"lineNumber":70,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":71,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":72,"author":{"gitID":"-"},"content":""},{"lineNumber":73,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":74,"author":{"gitID":"-"},"content":"     * Returns true if the list contains an equivalent Tag as the given argument."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"-"},"content":"    public boolean contains(Tag toCheck) {"},{"lineNumber":77,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":78,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":79,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":80,"author":{"gitID":"-"},"content":""},{"lineNumber":81,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":82,"author":{"gitID":"-"},"content":"     * Adds a Tag to the list."},{"lineNumber":83,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":84,"author":{"gitID":"-"},"content":"     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."},{"lineNumber":85,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":86,"author":{"gitID":"-"},"content":"    public void add(Tag toAdd) throws DuplicateTagException {"},{"lineNumber":87,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":88,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":89,"author":{"gitID":"-"},"content":"            throw new DuplicateTagException();"},{"lineNumber":90,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":91,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":92,"author":{"gitID":"-"},"content":""},{"lineNumber":93,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":95,"author":{"gitID":"-"},"content":""},{"lineNumber":96,"author":{"gitID":"wyinkok"},"content":"    /**"},{"lineNumber":97,"author":{"gitID":"wyinkok"},"content":"     * Removes a Tag to the list."},{"lineNumber":98,"author":{"gitID":"wyinkok"},"content":"     *"},{"lineNumber":99,"author":{"gitID":"wyinkok"},"content":"     */"},{"lineNumber":100,"author":{"gitID":"TanCiKang"},"content":"    public void delete(Tag toDelete) throws TagNotFoundException {"},{"lineNumber":101,"author":{"gitID":"wyinkok"},"content":"        requireNonNull(toDelete);"},{"lineNumber":102,"author":{"gitID":"wyinkok"},"content":"        if (!contains(toDelete)) {"},{"lineNumber":103,"author":{"gitID":"TanCiKang"},"content":"            throw new TagNotFoundException();"},{"lineNumber":104,"author":{"gitID":"wyinkok"},"content":"        }"},{"lineNumber":105,"author":{"gitID":"wyinkok"},"content":"        internalList.remove(toDelete);"},{"lineNumber":106,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":107,"author":{"gitID":"wyinkok"},"content":"    }"},{"lineNumber":108,"author":{"gitID":"wyinkok"},"content":""},{"lineNumber":109,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":110,"author":{"gitID":"-"},"content":"    public Iterator\u003cTag\u003e iterator() {"},{"lineNumber":111,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":113,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":114,"author":{"gitID":"-"},"content":""},{"lineNumber":115,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":116,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":117,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public ObservableList\u003cTag\u003e asObservableList() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":120,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":121,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":122,"author":{"gitID":"-"},"content":""},{"lineNumber":123,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":124,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":125,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":126,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":127,"author":{"gitID":"-"},"content":"                || (other instanceof UniqueTagList // instanceof handles nulls"},{"lineNumber":128,"author":{"gitID":"-"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"},{"lineNumber":129,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":130,"author":{"gitID":"-"},"content":""},{"lineNumber":131,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":132,"author":{"gitID":"-"},"content":"     * Returns true if the element in this list is equal to the elements in {@code other}."},{"lineNumber":133,"author":{"gitID":"-"},"content":"     * The elements do not have to be in the same order."},{"lineNumber":134,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":135,"author":{"gitID":"-"},"content":"    public boolean equalsOrderInsensitive(UniqueTagList other) {"},{"lineNumber":136,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":137,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(other.internalList);"},{"lineNumber":138,"author":{"gitID":"-"},"content":"        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"},{"lineNumber":139,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":140,"author":{"gitID":"-"},"content":""},{"lineNumber":141,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":142,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":143,"author":{"gitID":"-"},"content":"        assert CollectionUtil.elementsAreUnique(internalList);"},{"lineNumber":144,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":145,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":146,"author":{"gitID":"-"},"content":""},{"lineNumber":147,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":148,"author":{"gitID":"-"},"content":"     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."},{"lineNumber":149,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":150,"author":{"gitID":"-"},"content":"    public static class DuplicateTagException extends DuplicateDataException {"},{"lineNumber":151,"author":{"gitID":"-"},"content":"        protected DuplicateTagException() {"},{"lineNumber":152,"author":{"gitID":"-"},"content":"            super(\"Operation would result in duplicate tags\");"},{"lineNumber":153,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":154,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":155,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"wyinkok":10,"-":142,"TanCiKang":3}},{"path":"src/main/java/seedu/address/model/internship/Location.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"//@@author TanCiKang"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s location in the internship book."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidLocation(String)}"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class Location {"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_LOCATION_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship location can take any values and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"     * The first character of the location must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    public static final String LOCATION_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an {@code Location}."},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"     * @param location A valid location."},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public Location (String location) {"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(location);"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        checkArgument(isValidLocation(location), MESSAGE_LOCATION_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        this.value \u003d location;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid location industry."},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"    public static boolean isValidLocation(String test) {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        return test.matches(LOCATION_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof Location // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.value.equals(((Location) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"TanCiKang":55,"-":3}},{"path":"src/main/java/seedu/address/model/internship/Role.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.AppUtil.checkArgument;"},{"lineNumber":5,"author":{"gitID":"TanCiKang"},"content":"//@@author TanCiKang"},{"lineNumber":6,"author":{"gitID":"TanCiKang"},"content":"/**"},{"lineNumber":7,"author":{"gitID":"TanCiKang"},"content":" * Represents a Internship\u0027s role in the internship book."},{"lineNumber":8,"author":{"gitID":"TanCiKang"},"content":" * Guarantees: immutable; is valid as declared in {@link #isValidRole(String)}"},{"lineNumber":9,"author":{"gitID":"TanCiKang"},"content":" */"},{"lineNumber":10,"author":{"gitID":"TanCiKang"},"content":"public class Role {"},{"lineNumber":11,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"    public static final String MESSAGE_ROLE_CONSTRAINTS \u003d"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"            \"Internship role can take any values and it should not be blank\";"},{"lineNumber":14,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":15,"author":{"gitID":"TanCiKang"},"content":"    /*"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":"     * The first character of the role must not be a whitespace,"},{"lineNumber":17,"author":{"gitID":"TanCiKang"},"content":"     * otherwise \" \" (a blank string) becomes a valid input."},{"lineNumber":18,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":19,"author":{"gitID":"TanCiKang"},"content":"    public static final String ROLE_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":21,"author":{"gitID":"TanCiKang"},"content":"    public final String value;"},{"lineNumber":22,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":24,"author":{"gitID":"TanCiKang"},"content":"     * Constructs an {@code Role}."},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"     *"},{"lineNumber":26,"author":{"gitID":"TanCiKang"},"content":"     * @param role A valid role."},{"lineNumber":27,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"    public Role (String role) {"},{"lineNumber":29,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(role);"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"        checkArgument(isValidRole(role), MESSAGE_ROLE_CONSTRAINTS);"},{"lineNumber":31,"author":{"gitID":"TanCiKang"},"content":"        this.value \u003d role;"},{"lineNumber":32,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":33,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":34,"author":{"gitID":"TanCiKang"},"content":"    /**"},{"lineNumber":35,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if a given string is a valid internship role."},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     */"},{"lineNumber":37,"author":{"gitID":"TanCiKang"},"content":"    public static boolean isValidRole(String test) {"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"        return test.matches(ROLE_VALIDATION_REGEX);"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":40,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":42,"author":{"gitID":"TanCiKang"},"content":"    public String toString() {"},{"lineNumber":43,"author":{"gitID":"TanCiKang"},"content":"        return value;"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":45,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":46,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":47,"author":{"gitID":"TanCiKang"},"content":"    public boolean equals(Object other) {"},{"lineNumber":48,"author":{"gitID":"TanCiKang"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":49,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof Role // instanceof handles nulls"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"                \u0026\u0026 this.value.equals(((Role) other).value)); // state check"},{"lineNumber":51,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"    @Override"},{"lineNumber":54,"author":{"gitID":"TanCiKang"},"content":"    public int hashCode() {"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"        return value.hashCode();"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"    }"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":""},{"lineNumber":58,"author":{"gitID":"TanCiKang"},"content":"}"}],"authorContributionMap":{"TanCiKang":55,"-":3}},{"path":"src/main/java/seedu/address/model/internship/UniqueInternshipList.java","lines":[{"lineNumber":1,"author":{"gitID":"TanCiKang"},"content":"package seedu.address.model.internship;"},{"lineNumber":2,"author":{"gitID":"-"},"content":""},{"lineNumber":3,"author":{"gitID":"-"},"content":"import static java.util.Objects.requireNonNull;"},{"lineNumber":4,"author":{"gitID":"-"},"content":"import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"},{"lineNumber":5,"author":{"gitID":"-"},"content":""},{"lineNumber":6,"author":{"gitID":"-"},"content":"import java.util.Iterator;"},{"lineNumber":7,"author":{"gitID":"-"},"content":"import java.util.List;"},{"lineNumber":8,"author":{"gitID":"-"},"content":""},{"lineNumber":9,"author":{"gitID":"-"},"content":"import javafx.collections.FXCollections;"},{"lineNumber":10,"author":{"gitID":"-"},"content":"import javafx.collections.ObservableList;"},{"lineNumber":11,"author":{"gitID":"-"},"content":"import seedu.address.commons.util.CollectionUtil;"},{"lineNumber":12,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.DuplicateInternshipException;"},{"lineNumber":13,"author":{"gitID":"TanCiKang"},"content":"import seedu.address.model.internship.exceptions.InternshipNotFoundException;"},{"lineNumber":14,"author":{"gitID":"-"},"content":""},{"lineNumber":15,"author":{"gitID":"-"},"content":"/**"},{"lineNumber":16,"author":{"gitID":"TanCiKang"},"content":" * A list of internships that enforces uniqueness between its elements and does not allow nulls."},{"lineNumber":17,"author":{"gitID":"-"},"content":" *"},{"lineNumber":18,"author":{"gitID":"-"},"content":" * Supports a minimal set of list operations."},{"lineNumber":19,"author":{"gitID":"-"},"content":" *"},{"lineNumber":20,"author":{"gitID":"TanCiKang"},"content":" * @see Internship#equals(Object)"},{"lineNumber":21,"author":{"gitID":"-"},"content":" * @see CollectionUtil#elementsAreUnique(Collection)"},{"lineNumber":22,"author":{"gitID":"-"},"content":" */"},{"lineNumber":23,"author":{"gitID":"TanCiKang"},"content":"public class UniqueInternshipList implements Iterable\u003cInternship\u003e {"},{"lineNumber":24,"author":{"gitID":"-"},"content":""},{"lineNumber":25,"author":{"gitID":"TanCiKang"},"content":"    private final ObservableList\u003cInternship\u003e internalList \u003d FXCollections.observableArrayList();"},{"lineNumber":26,"author":{"gitID":"-"},"content":""},{"lineNumber":27,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":28,"author":{"gitID":"TanCiKang"},"content":"     * Returns true if the list contains an equivalent internship as the given argument."},{"lineNumber":29,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":30,"author":{"gitID":"TanCiKang"},"content":"    public boolean contains(Internship toCheck) {"},{"lineNumber":31,"author":{"gitID":"-"},"content":"        requireNonNull(toCheck);"},{"lineNumber":32,"author":{"gitID":"-"},"content":"        return internalList.contains(toCheck);"},{"lineNumber":33,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":34,"author":{"gitID":"-"},"content":""},{"lineNumber":35,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":36,"author":{"gitID":"TanCiKang"},"content":"     * Adds a internship to the list."},{"lineNumber":37,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":38,"author":{"gitID":"TanCiKang"},"content":"     * @throws DuplicateInternshipException if the internship to add is a duplicate of an existing internship in the"},{"lineNumber":39,"author":{"gitID":"TanCiKang"},"content":"     * list."},{"lineNumber":40,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":41,"author":{"gitID":"TanCiKang"},"content":"    public void add(Internship toAdd) throws DuplicateInternshipException {"},{"lineNumber":42,"author":{"gitID":"-"},"content":"        requireNonNull(toAdd);"},{"lineNumber":43,"author":{"gitID":"-"},"content":"        if (contains(toAdd)) {"},{"lineNumber":44,"author":{"gitID":"TanCiKang"},"content":"            throw new DuplicateInternshipException();"},{"lineNumber":45,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":46,"author":{"gitID":"-"},"content":"        internalList.add(toAdd);"},{"lineNumber":47,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":48,"author":{"gitID":"-"},"content":""},{"lineNumber":49,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":50,"author":{"gitID":"TanCiKang"},"content":"     * Replaces the internship {@code target} in the list with {@code editedInternship}."},{"lineNumber":51,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":52,"author":{"gitID":"TanCiKang"},"content":"     * @throws DuplicateInternshipException if the replacement is equivalent to another existing internship in the list."},{"lineNumber":53,"author":{"gitID":"TanCiKang"},"content":"     * @throws InternshipNotFoundException if {@code target} could not be found in the list."},{"lineNumber":54,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":55,"author":{"gitID":"TanCiKang"},"content":"    public void setInternship(Internship target, Internship editedInternship)"},{"lineNumber":56,"author":{"gitID":"TanCiKang"},"content":"            throws DuplicateInternshipException, InternshipNotFoundException {"},{"lineNumber":57,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(editedInternship);"},{"lineNumber":58,"author":{"gitID":"-"},"content":""},{"lineNumber":59,"author":{"gitID":"-"},"content":"        int index \u003d internalList.indexOf(target);"},{"lineNumber":60,"author":{"gitID":"-"},"content":"        if (index \u003d\u003d -1) {"},{"lineNumber":61,"author":{"gitID":"TanCiKang"},"content":"            throw new InternshipNotFoundException();"},{"lineNumber":62,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":63,"author":{"gitID":"-"},"content":""},{"lineNumber":64,"author":{"gitID":"TanCiKang"},"content":"        if (!target.equals(editedInternship) \u0026\u0026 internalList.contains(editedInternship)) {"},{"lineNumber":65,"author":{"gitID":"TanCiKang"},"content":"            throw new DuplicateInternshipException();"},{"lineNumber":66,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":67,"author":{"gitID":"-"},"content":""},{"lineNumber":68,"author":{"gitID":"TanCiKang"},"content":"        internalList.set(index, editedInternship);"},{"lineNumber":69,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":70,"author":{"gitID":"-"},"content":""},{"lineNumber":71,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":72,"author":{"gitID":"TanCiKang"},"content":"     * Removes the equivalent internship from the list."},{"lineNumber":73,"author":{"gitID":"-"},"content":"     *"},{"lineNumber":74,"author":{"gitID":"TanCiKang"},"content":"     * @throws InternshipNotFoundException if no such internship could be found in the list."},{"lineNumber":75,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":76,"author":{"gitID":"TanCiKang"},"content":"    public boolean remove(Internship toRemove) throws InternshipNotFoundException {"},{"lineNumber":77,"author":{"gitID":"TanCiKang"},"content":"        requireNonNull(toRemove);"},{"lineNumber":78,"author":{"gitID":"TanCiKang"},"content":"        final boolean internshipFoundAndDeleted \u003d internalList.remove(toRemove);"},{"lineNumber":79,"author":{"gitID":"TanCiKang"},"content":"        if (!internshipFoundAndDeleted) {"},{"lineNumber":80,"author":{"gitID":"TanCiKang"},"content":"            throw new InternshipNotFoundException();"},{"lineNumber":81,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":82,"author":{"gitID":"TanCiKang"},"content":"        return internshipFoundAndDeleted;"},{"lineNumber":83,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":84,"author":{"gitID":"-"},"content":""},{"lineNumber":85,"author":{"gitID":"TanCiKang"},"content":"    public void setInternships(UniqueInternshipList replacement) {"},{"lineNumber":86,"author":{"gitID":"-"},"content":"        this.internalList.setAll(replacement.internalList);"},{"lineNumber":87,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":88,"author":{"gitID":"-"},"content":""},{"lineNumber":89,"author":{"gitID":"TanCiKang"},"content":"    public void setInternships(List\u003cInternship\u003e internships) throws DuplicateInternshipException {"},{"lineNumber":90,"author":{"gitID":"TanCiKang"},"content":"        requireAllNonNull(internships);"},{"lineNumber":91,"author":{"gitID":"TanCiKang"},"content":"        final UniqueInternshipList replacement \u003d new UniqueInternshipList();"},{"lineNumber":92,"author":{"gitID":"TanCiKang"},"content":"        for (final Internship internship : internships) {"},{"lineNumber":93,"author":{"gitID":"TanCiKang"},"content":"            replacement.add(internship);"},{"lineNumber":94,"author":{"gitID":"-"},"content":"        }"},{"lineNumber":95,"author":{"gitID":"TanCiKang"},"content":"        setInternships(replacement);"},{"lineNumber":96,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":97,"author":{"gitID":"-"},"content":""},{"lineNumber":98,"author":{"gitID":"-"},"content":"    /**"},{"lineNumber":99,"author":{"gitID":"-"},"content":"     * Returns the backing list as an unmodifiable {@code ObservableList}."},{"lineNumber":100,"author":{"gitID":"-"},"content":"     */"},{"lineNumber":101,"author":{"gitID":"TanCiKang"},"content":"    public ObservableList\u003cInternship\u003e asObservableList() {"},{"lineNumber":102,"author":{"gitID":"-"},"content":"        return FXCollections.unmodifiableObservableList(internalList);"},{"lineNumber":103,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":104,"author":{"gitID":"-"},"content":""},{"lineNumber":105,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":106,"author":{"gitID":"TanCiKang"},"content":"    public Iterator\u003cInternship\u003e iterator() {"},{"lineNumber":107,"author":{"gitID":"-"},"content":"        return internalList.iterator();"},{"lineNumber":108,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":109,"author":{"gitID":"-"},"content":""},{"lineNumber":110,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":111,"author":{"gitID":"-"},"content":"    public boolean equals(Object other) {"},{"lineNumber":112,"author":{"gitID":"-"},"content":"        return other \u003d\u003d this // short circuit if same object"},{"lineNumber":113,"author":{"gitID":"TanCiKang"},"content":"                || (other instanceof UniqueInternshipList // instanceof handles nulls"},{"lineNumber":114,"author":{"gitID":"TanCiKang"},"content":"                        \u0026\u0026 this.internalList.equals(((UniqueInternshipList) other).internalList));"},{"lineNumber":115,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":116,"author":{"gitID":"-"},"content":""},{"lineNumber":117,"author":{"gitID":"-"},"content":"    @Override"},{"lineNumber":118,"author":{"gitID":"-"},"content":"    public int hashCode() {"},{"lineNumber":119,"author":{"gitID":"-"},"content":"        return internalList.hashCode();"},{"lineNumber":120,"author":{"gitID":"-"},"content":"    }"},{"lineNumber":121,"author":{"gitID":"-"},"content":"}"}],"authorContributionMap":{"TanCiKang":43,"-":78}}]
