[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "# UniFy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://travis-ci.org/CS2103AUG2017-W09-B1/main[image:https://travis-ci.org/CS2103AUG2017-W09-B1/main.svg?branch\u003dmaster[\"Build Status\"]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://ci.appveyor.com/project/zacharytang/main[image:https://ci.appveyor.com/api/projects/status/1kk36eq1wha8tcut?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://coveralls.io/github/CS2103AUG2017-W09-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103AUG2017-W09-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://www.codacy.com/app/zacharytang/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103AUG2017-W09-B1/main\u0026amp;utm_campaign\u003dBadge_Grade)[image:https://api.codacy.com/project/badge/Grade/67e717e8e66245b9881839446b7fb464[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "__Unifying your University Contact Information, and more. For You.__"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* This is a desktop Address Book application for University students, particularly those from NUS (National University of Singapore)."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Manage the many people you meet in University, keep track of your friends\u0027 Birthdays, view your friend\u0027s timetables, plus much more!"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Most of your user interactions are via command line, while there exists a GUI (Graphical User Interface)."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d For Developers"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* This Java application is *written in OOP fashion*. The code base is *reasonably well-written* and *significantly big* (around 6 KLoC)."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Source code is based on the  https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "nbriannl": 11,
      "-": 26
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "AddressBook - Level 2.0 was developed by the \u0027https://github.com/orgs/CS2103AUG2017-W09-B1/teams/developers/members\u0027 team. +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Fan Yuting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::yuting.JPG[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "{empty}[https://github.com/April0616[github]] [\u003c\u003cApril0616#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Labayna Neil Brian Narido"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::nbriannl.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "{empty}[http://github.com/nbriannl[github]] [\u003c\u003cnbriannl#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Tsai Yu Hsuan"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::cindytsai1.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "{empty}[http://github.com/CindyTsai1[github]] [\u003c\u003cCindyTsai1#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Zachary Tang"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::zacharytang.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://github.com/zacharytang[github]] [\u003c\u003cjohndoe#, portfolio\u003e\u003e]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "CindyTsai1": 3,
      "nbriannl": 6,
      "April0616": 6,
      "-": 27
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d UniFy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "By: `Team W09-B1`      Since: `Aug 2017`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "Welcome to UniFy !"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "UniFy is a command-line application which provides a convenient way to store students\u0027 contact information. It is customised for NUS students, allowing them to efficiently manage their contact lists. This developer guide provides information that helps you to get started as a UniFy contributor, and aids you even if you are an experienced contributor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The developer guide consists of the following sections."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#settingup[Setting up]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#design[Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#implementation[Implementation]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#testing[Testing]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#devops[Dev Ops]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#appendixa[Appendices]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This app will only work with later versions of Java 8."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "IntelliJ has Gradle and JavaFx plugins installed by default. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Please do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Setting up UniFy in your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ". Open a console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ". Run the `seedu.address.MainApp` and try a few commands"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ". link:#testing[Run the tests] to ensure they all pass."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configurations to do before writing code"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Our UniFy project follows https://github.com/oss-generic/process/blob/master/codingStandards/CodingStandard-Java.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, then `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance automatically as you write code."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up Continuous Integration (CI)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You would have to set up `Travis` to perform CI for your fork. You can check \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Optionally, you can set up `AppVeyor` as a second CI (check \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Having both `Travis` and `AppVeyor` ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "When you are ready to start coding, you can get some sense of the overall design by reading the link:#architecture[Architecture] section."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.1 : Architecture Diagram_"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. A quick overview of each component is given below."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You can find the `.pptx` files used to create diagrams in this developer guide in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Main"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Launching app: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Shutting down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Commons"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "link:#common-classes[*`Commons`*] represents a collection of classes used by multiple other components. These classes can be found in the `seedu.addressbook.commons` package. The following two classes play important roles at the architecture level."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Four main components"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#ui-component[*`UI`*] : The User Interface (UI) of the App."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#logic-component[*`Logic`*] : Executes command."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "* link:#model-component[*`Model`*] : Holds the data of the App in-memory."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* link:#storage-component[*`Storage`*] : Reads data from, and writes data to, the hard disk."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "For example, the `Logic` component (_Fig 3.1.2_) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.2 : Class Diagram of the Logic Component_"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.3a : Component interactions for `delete 1` command (part 1)_"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.3b : Component interactions for `delete 1` command (part 2)_"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This shows you how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.2.1 : Structure of the UI Component_"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The UI consists of a `MainWindow` that is made up of several parts such as `CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, and `BrowserPanel`. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.1 : Structure of the Logic Component_"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.2 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 3.3.1_"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.3 : Interactions Inside the Logic Component for the `delete 1` Command_"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.4.1 : Structure of the Model Component_"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cReadOnlyPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.5.1 : Structure of the Storage Component_"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undo/Redo mechanism"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The undo/redo mechanism is designed to suit the needs of students who might accidentally execute a undesired command. It is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. The following diagram shows the inheritance diagram for commands:"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.1 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 3.3.1_"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. The technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "When the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. The current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2a : The most recent undoable command is pushed into the undoStack_"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2b : More commands are added into the undoStack_"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2c : The command on the top will be popped and pushed into the redoStack_"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.3 : The sequence diagram for the undo function_"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2d : When a new command is pushed into undoStack, the redoStack is purged_"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2e : The list command is not added to the undoStack_"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.4 : Activity diagram when a new command is executed_"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Implementation of `UndoableCommand` +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 1 (current choice):** Add a new abstract method `executeUndoableCommand()` +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** We will not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` will not know that `executeUndoableCommand()` exist. +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** Hard for new developers to understand the template pattern. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 2:** Just override `execute()` +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** Does not involve the template pattern, easier for new developers to understand. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Classes that inherit from `UndoableCommand` must remember to call `super.execute()` to gain the ability to undo/redo."
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** How undo \u0026 redo executes +"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 1 (current choice):** Saves the entire address book. +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** Easy to implement. +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** May have performance issues in terms of memory usage. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 2:** Individual command knows how to undo/redo by itself. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** Will use less memory (e.g. for `delete`, just save the person being deleted). +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** We must ensure that the implementation of each individual command are correct."
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Type of commands that can be undone/redone +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 1 (current choice):** Only include commands that modifies the address book (`add`, `clear`, `edit`). +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** We only revert changes that are hard to change back (the view can easily be re-modified as no data are lost). +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** User might think that undo also applies when the list is modified (undoing filtering for example), only to realize that it does not do that, after executing `undo`. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 2:** Include all commands. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** Might be more intuitive for the user. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** User have no way of skipping such commands if he just want to reset the state of the address book and not the view. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Data structure to support the undo/redo commands +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 1 (current choice):** Use separate stack for undo and redo +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** Easy to understand for new Computer Science student undergraduates, who are likely to be the new incoming developers of our project. +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `UndoRedoStack`. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 2:** Use `HistoryManager` for undo/redo +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** We do not need to maintain a separate stack, and just reuse what is already in the codebase. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** Requires dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Timetables Attribute"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Users are able to store timetables by supplying a shortened NUSMods url when adding a person. This need is especially crucial for NUS students who require friends\u0027 timetables in order to find out a time to meet up."
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Retrieval of Lesson Information"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "NUSMods urls are in the format of `.../timetable/ACAD_YEAR/SEM?MODULE_CODE[LESSON_TYPE]\u003dLESSON_NO\u0026...`  We use `TimetableParserUtil : expandUrl` to get an expanded url from shortened URL provided, then parse the expanded url accordingly to obtain lesson data."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Lessons for each module are stored in `ModuleInfoFromUrl`, which is then represented in `TimetableInfoFromUrl`."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://github.com/nusmodifications/nusmods-api[NUSMods API] is used to retrieve data related to lessons parsed from urls. JSON objects representing each module is retrieved and"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "cast to a `Map` using http://wiki.fasterxml.com/JacksonHome[Jackson library]. Lesson data is then retrieved as a list of `Lesson` objects."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "----"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// read JSON as map"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// retrieve lesson data"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d mappedJson.get(\"Timetable\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    Lesson lessonToAdd \u003d new Lesson(...);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "----"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "`TimetableParserUtil` in `commons.util.timetable` contains all utility methods for parsing of NUSMods urls and conversion between terms parsed from urls and terms used in NUSMods API."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Representation of Timetables"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Storing of timetables is facilitated by an immutable `Timetable` object, which is a component of `Person`. The information regarding the timings of each lesson is stored in a single `TimetableInfo` object within `Timetable`."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "More specific information for a person\u0027s lessons is abstracted further as follows:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Information for odd/even weeks are stored by two `TimetableWeek` objects within `TimetableInfo`"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Each day of the timetable (Monday to Friday) is represented by five `TimetableDay` objects in `TimetableWeek`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* To represent each timeslot in `TimetableDay`, a `TimetableSlot` class is used to represent a 30 minute interval. 32 instances of `TimetableSlot` are used to represent a full day from 0800 to 0000"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "The following UML diagram represents the implementation of the classes."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::TimetableClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.2.1 : Timetable class diagram (XYZComponent refers to all other components that `Person` is composed of, the class diagram is not complete)_"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Aspect:** Representation of timetables +"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Alternative 1 (current choice):** Abstraction of timetable grid using classes for weeks/days/slots +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Pros:** Easily extendable to include new functionality e.g. lessons that occur in each slot +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Cons:** Requires many method call chains to update and query timetable, might not be intuitive for new programmers. Hard to iterate through entire timetable +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Alternative 2:** Using a 3D array to represent the entire timetable +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Pros:** Simple and easy to understand,  easy to iterate through +"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Cons:** Does not follow OOP concepts, cannot be extended to implement new functionalities. +"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Alternative 3:** Storing individual lesson timings and information. +"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Pros:** Building the timetable is not required +"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Cons:** Inefficient queries if a timing has a lesson, need to iterate through every lesson stored."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Aspect:** Shortened URLs versus full-length URLs +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Alternative 1 (current choice):** Only accept short URLs +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Pros:** No need to deal with multiple types of URL +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Cons:** Less user friendly as users need to supply specific type of URL +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Alternative 2:** Accept both shortened and full-length NUSMods URLs +"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Pros:** More user friendly as any type of NUSMods URL is accepted +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Cons:** Much harder to detect malformed URL as parsing data does not detect errors in lesson tokens in URL. Shortened URL gives 403 response on bad URL."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Delete Tag Mechanism"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To delete a tag means to delete a specified tag in all persons who contain that tag, as well as in the master list of tags in the Address Book."
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This is significantly different from deleting a tag for a person via the `edit` command."
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "There is a need for this because a user would like to delete a tag that is no longer relevant or is outdated, instead of going editing those with the same tags one by one."
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "To delete a particular tag across multiple contacts would be a tedious process, hence, the addition of this feature."
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In general, the ability to delete a tag was implemented via an _augmentation_ of the existing `delete` command."
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This augmentation is achieved via"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* detection of the type of deletion in the DeleteCommandParser"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* overloading the DeleteCommand constructor"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* executing the respective logic based on which attributes are present/non-null."
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Detection of the Deletion Type"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The current `delete` command (for a person) is in the format `delete INDEX`. Deleting a tag is in the format `delete t/TAG`."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The same `delete` command is used but the parameters in the command line are different."
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The two types of commands are distinguished by the `preamble` of the parameter arguments after the word `delete`, when tokenized against the `/t` prefix for tags."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The preamble for `delete \"INDEX\"` is a *digit* while the preamble for `delete\" \"t/TAG` is a *space*."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The implementation of this parse is shown below:"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (preamble.equals(\"\")) {"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // parsing of tags into a Set\u003cTag\u003e tagList"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new DeleteCommand(tagList); # \u003c1\u003e"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else if (preamble.matches(\"-?\\\\d+\")) {"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // parsing of the index"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new DeleteCommand(index); # \u003c2\u003e"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Overloading the DeleteCommand constructor"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "With reference to the previous code snippet the type of `DeleteCommand` returned during the parse are also different."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c1\u003e a `new DeleteCommand(tagList)` is returned when deleting one or more tags."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c2\u003e a `new DeleteCommand(index)` is returned when deleting a person."
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following code shows the respective object construction of both types of DeleteCommand."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Depending on the constructor method called, *either* the `targetIndex` attribute *or* the `targetTags` will be made null."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Which will lead on to the next section about command execution."
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Set\u003cTag\u003e targetTags;"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Set\u003cTag\u003e targetTags) {"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d targetTags;"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d null;"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Execution depending on which attributes are present."
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_If_ `targetIndex` is present, execute the logic for deleting a person, _else_ execute the logic for deleting a tag."
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This trivial implementation is show below."
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (targetTags \u003d\u003d null \u0026\u0026 targetIndex !\u003d null) {"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // command logic for deletion for a person"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // command logic for deletion for a tag"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Command Logic"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following sequence diagrams show how the delete operation for tags work."
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Not shown in Figure 4.3.2, `listTags` are checked against `listOfExistingTags`, i.e. all tags"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to be deleted are checked whether each of them already exist in the address book. If this check fails, an exception is thrown."
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The sequence diagram demonstrates a *successful* deletion, hence this aspect of the logic is omitted for clarity."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::DeleteCommandForTagSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.3.1 : Typical command execution_"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::DeleteCommandForTagSequenceDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.3.2 : The tags parsed are put into an ArrayList and iterated through for deletion_"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::DeleteCommandForTagSequenceDiagram3.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.3.3 : How each tag is removed from the Address Book and each Person\u0027s list of tags_"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Aspect:** Implementation of Delete Tags +"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Alternative 1 (current choice):** Augment the existing delete command +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Pros:** The same command word `delete` is used which is an intuitive way to invoke a deletion of some object (person or tag).  +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** The `DeleteCommand` class is no longer responsible for deletion of a person *only*"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "but is now responsible for deleting a tag as well."
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Augmenting the command via overriding constructors, adding new attributes and modifying the parse may seem too convoluted a solution. This Violates Single Responsibility Principle and Separation of Concerns as `DeleteCommand` now needs to do two different things. Users who are used to the previous version of the command may not appreciate the new change also. +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Alternative 2:** Just create a new command `deletetag` +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Pros:** Simple implementation of a new command. Does not involve any major modification of existing parse and command logic +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** `deletetag t/tag` is not as intuitive a command line especially to new or casual users."
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Users may try `delete t/tag` out of instinct and we would need to inform or prompt users of the `deletetag` command."
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Aspect:** How delete command executes +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Alternative 1 (current choice):** On the `Logic` level, iterate through an array of tags and invoke a Model method `deleteTag(Tag tag)` on each tag.  +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** Maintain consistency with the Model API that deals with objects in singular amounts. +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Requires a loop to delete the tags. +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Alternative 2:** On the `Logic` level, invoke a method `deleteTags(tagSet)` on a Set\u003cTag\u003e. Implement `deleteTags(Set\u003cTag\u003e tagSet)` in the Model component. +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** The code will be easier for future contributors to understand. +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Does not maintain consistency of the API"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Remark Command Mechanism"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "April0616"
        },
        "content": "The remark command allows user to modify the remark of a contact, and it supports adding, editing and deleting remarks."
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "It is different from adding the tags using `AddCommand` as it is used to store unique information of contact."
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "We are implementing this `Remark Command` because NUS students see a need to add additional information to their contacts as a reminder to themselves, such as `owesMoney` to someone."
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Generally, the implementation of this command is similar to `EditCommand`."
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "April0616"
        },
        "content": "These main classes are added to implement this enhancement:"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Remark"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* RemarkCommand"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* RemarkCommandParser"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "April0616"
        },
        "content": "These main classes are significantly edited to implement this enhancement:"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddressBookParser"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* PersonListCard, PersonCardHandle"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* XmlAdaptedPerson"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Person"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* EditCommand"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddCommand"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Instead of typing the command `remark`, an alternative would be `rm`."
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The alias is added to the `RemarkCommand Class`."
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "April0616"
        },
        "content": "The added remark will be displayed on the last line of the person card."
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "If a person is newly added to the personList by `AddCommand` without a remark, its remark field will be an empty string."
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In the `EditCommand` class, a new attribute `updatedRemark` is added to the person, and it is independent from `editPersonDescriptor`."
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of Remark Command"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 1]** _Logic:_ Teach the app to accept \u0027remark\u0027 which does nothing"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 2]** _Logic:_ Teach the app to accept \u0027remark\u0027 arguments"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 3]** _Ui:_ Add a placeholder for remark in PersonCard"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 4]** _Model:_ Add Remark class"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 5]** _Model:_ Modify ReadOnlyPerson to support a Remark field"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 6]** _Storage:_ Add Remark field to XmlAdaptedPerson class"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 7]** _Ui:_ Connect Remark field to PersonCard"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**[Step 8]** _Logic:_ Implement RemarkCommand#execute() logic"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Codes and Diagrams"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "April0616"
        },
        "content": "The following diagram shows the high-level sequence diagram of the remark command:"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandHighLevelSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.4.1 : High-level sequence diagram_"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The RemarkCommand extends Undoable Command, which is an abstract subclass of abstract class Command, so the user can also undo the added remark."
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "April0616"
        },
        "content": "The class inheritance diagram is shown below:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandClassInheritanceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.4.2 : Class Inheritance Diagram_"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/*"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the remark of a person to the address book."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "April0616"
        },
        "content": "After the remark command is executed, the new data will be saved to the AddressBook. The logic component sequence diagram is shown below:"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandLogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.4.3 : Logic Component Sequence Diagram_"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "April0616"
        },
        "content": "A person class is linked to a new remark attribute. Its model component class diagram is shown below:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.4.4 : Component Class Diagram_"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cTimetable\u003e timetable;"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspects:** UI Display of Remark +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1(current choice):** Display the remark of the specified contact at the end of the personCard. +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It has the consistent format with other fields in the person card. +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It does not highlight the remark so that the user will hardly notice the additional remark information. +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Display the Remark next to the name. +"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** Placing the remark in this prominent place will better remind the user of the added remark."
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Also, the font-size is larger that is easier to read. +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It does not have the consistent formatting with other fields in the person card."
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "If the remark is too long, it will be poorly displayed as well."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspects:** The command nature of Remark +"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1(current choice):** Use a remark command to add remarks. +"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It is not a field when a person is added as most people do not add remarks to a newly added contact. +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It is an extra command for the user to remember. +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Use AddCommand and EditCommand for the adding and editing of remark. +"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** The command lines are more intuitive for the user. +"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Remark will be perceived as a field of personal information for that contact, which is not true."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Birthday Attribute"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "User are able to store birthdays by inputting in the format of DDMMYYYY when adding a person."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This allows the user to get a list of people having the same birthday month."
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In general, the ability to store a person\u0027s birthday was implemented via an _augmentation_ of the component of `Person`."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Representation of Birthdays"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Storing of birthdays is facilitated by an immutable `Birthday` object, which is a component of `Person`."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The following are the main classes edited to implement this:"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddCommand"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddCommandParser"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* EditCommand"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* EditCommandParser"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Person"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* PersonListCard, PersonCardHandle"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* XmlAdaptedPerson"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The following UML diagram represents the implementation of the classes in the Model component."
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::BirthdayModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Validation of Birthdays"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "After the birthday is inputted, it will be checked if the date is valid."
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The number of digits inputted will be checked first."
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Then the year would be checked from the 20th century until now."
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Range of day inputted will then be checked according to month."
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Representation of birthdays +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Display the birthday of the specified contact at the end of the personCard. +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It has the consistent format with other fields in the person card. +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It is difficult to recognise the number displayed is birthday. +"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Display the birthday with \"Birthday:\" in front. +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** Simple and easy to understand. +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Inconsistent with the format in person card."
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See link:#configuration[Configuration])"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "-"
        },
        "content": "* `WARNING` : Can continue, but with caution"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 5.6.1 : Saving documentation as PDF files in Chrome_"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Build Automation"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d User Stories"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "-"
        },
        "content": "Priorities: High (must have) - `* * \\*`, Medium (nice to have) - `* \\*`, Low (unlikely to have) - `*`"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "-"
        },
        "content": "[width\u003d\"59%\",cols\u003d\"22%,\u003c23%,\u003c25%,\u003c30%\",options\u003d\"header\",]"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "-"
        },
        "content": "|Priority |As a ... |I want to ... |So that I can..."
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |new user |see usage instructions |refer to instructions when I forget how to use the App"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |add a new person |"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |edit a person | correct any outdated information"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |delete a person |remove entries that I no longer need"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |clear the entire address book |remove all entries without tedious single deletions"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |see a history of commands |retrieve a command to execute again or see past actions"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |list all the people in the address book  |see all the contacts I have"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |select a person from a list by the index  |easily select a person from a list I have just seen"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "-"
        },
        "content": "|`* * *` |user |find a person by name |locate details of persons without having to go through the entire list"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user with many contacts| sort contacts by name | locate a contact easily"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |undo my previous action |reverse what I did previously"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |redo my previous action |reverse what an undo command"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |exit the program |"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |add a remark to a contact |see more details"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user who has many friends |view different groups of my friends by their tags |manage my large list of contacts well"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |view an link:#attribute[attribute] called \u0027matriculation no.\u0027 \u0026 \u0027gender\u0027 |see more details of my friends"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |view an link:#attribute[attribute] called \u0027birthday\u0027 |see the birthdays of my friends"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user who likes to celebrates my friends\u0027 birthdays |view different groups of my friends by the month |better plan their celebrations"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |use multiple synonyms of a command word (example \u0027list\u0027, \u0027find\u0027, \u0027search\u0027) to execute a command | the application will be more intuitive for me"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* * *` |user |be link:#suggested[suggested] a correct command if I type a command incorrectly |not need to always check help to see the list of commands"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* * *` |user |see the total number of contacts | have a sense of the size of the address book"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |see the total number of contacts for a given tag |easily keep track of how many contacts in a specific group/type"
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |delete multiple contacts at the same time |not have to key in the delete command multiple times"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |be informed who I deleted |confirm if I have deleted the correct person"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user who likes using social media platform |extract the contact data from social media automatically |not need to type and save them manually"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |impatient user |type my commands in shorthand form |execute commands quickly and be more productive"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |see the tags in different colors |identify what tags and contacts i have faster"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |remove a specific tag that exists in some/all my contacts |remove a tag label that is no longer needed"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |edit a specific tag name for all contacts with this tag |update a specific tag common to multiple contacts easily"
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |search my contacts using different filters simultaneously, such as tags, keyword, birthday month and gender | find the person faster"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |forgetful user |save and see the photos of my contacts |recognise them when I click their names"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |access the Google Maps service for a given address |quickly find the directions or the map locations of a contact"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`* *` |user |see who lives near me |find out who I can conveniently meet nearby"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user who has a limited disk space |delete the contacts who I haven\u0027t viewed for a certain time |manage the large number of people I meet in University"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |be able to see all the existing tag icons in the UI |see at a glance how many type of groups of people/tags there are"
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |click one of the tag icons in the UI and see all the contacts under this tag| easily access tag groups of people"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |access my address book using a password | ensure my data is secured"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user |have temporary tags for semester-based project groups |can delete my contacts after one semester"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`* *` |user who likes different styles | change the theme(color) of the UI |"
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`*` |student with many friends |save my friends\u0027 timetables |know when my friends are free to meet up"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`*` |student with many friends |combine my friends\u0027 timetables by selecting the contacts one by one or by tags| know when is the common time slot for everyone to meet up"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "April0616"
        },
        "content": "|`*` |near-sighted user | change the font size of the Address Book |"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`*` |student who has many outdoor activities | have a day mode and night mode in the address book| have the application more visible on the screen outdoors"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|`*` |user with many friends |find the centre location of a certain group of addresses |find a place that is convenient for everyone to meet up"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "-"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "April0616"
        },
        "content": "3.  User requests to delete the specific person(s) in the list"
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "April0616"
        },
        "content": "4.  AddressBook deletes the person(s)"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "April0616"
        },
        "content": "* 3a. One of the given indexes is invalid."
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a specific tag word"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests to edit a tag"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "2.  AddressBook shows the tag about to be edited"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3.  User requests to a new word to replace the current tag"
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "4.  AddressBook edits the tag word"
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. The tag does not exist"
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3b. The new word to replace the given tag is an existing tag"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Type an incorrect command"
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests with an incorrect command"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "April0616"
        },
        "content": "2.  AddressBook shows the suggested command based on user\u0027s misspelling or prompts help if the incorrect command cannot be identified"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3.  User requests with a correct command"
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3.  User requests to edit the details of the person identified by the index number in the listing"
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "4.  AddressBook edits the details of the identified person"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 1a. AddressBook detects an error in the entered command"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 1a1. AddressBook requests for the correct command"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. AddressBook detects an error in the entered command"
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3a1. AddressBook requests for the correct command"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3a2. User enters new command"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Undo"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests to undo previous action"
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "2.  AddressBook search for the previous action done"
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3. AddressBook undo the previous action"
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. The previous command is undoable."
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. All previous commands are undoable."
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any link:#mainstream-os[mainstream OS] as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Have a user interface that is visible for use indoors as well as outdoors"
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  A user who is not very tech savvy will be able to familiar in using the application within 1 day of use"
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Only the user himself can access his address book"
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be able to easily find a person within a large amount of contacts in terms of robustness in searching capability (i.e. the use of multiple filters)"
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be able to recover the address book data in case of loss of data"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  User guide is clear and concise"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be as responsive as possible (a maximum of 0.3 millisecond)"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be possible to upgrade to it from any previous version when a new version is released"
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]]"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "-"
        },
        "content": "Mainstream OS"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]]"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "-"
        },
        "content": "Private contact detail"
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[bright-coloured-mode]]"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Bright coloured mode"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Using brighter colours for the user interface to make the AddressBook more visible under the sun."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[attribute]]"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Attribute"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A characteristic of a person that is common across all people (e.g. Relationship/Marital Status, Birthday, Gender, Age)."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[suggested]]"
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Suggested (a command)"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The app will conduct the suggested command based on the detection of a misspelling of a command (e.g. find is suggested when fnid is spelled)."
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "...."
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[[preamble]]"
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Preamble"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "...."
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A short marker used to synchronize a transmission by indicating the end of the header information and the start of the data."
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      }
    ],
    "authorContributionMap": {
      "zacharytang": 52,
      "CindyTsai1": 211,
      "nbriannl": 284,
      "April0616": 92,
      "-": 524
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d UniFy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "By: `CS2103AUG2017-W09-B1`      Since: `AUG 2017`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Thank you for downloading **UniFy**! We\u0027re glad that you\u0027ve chosen us to help you manage your hectic university life."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**UniFy** is a personal assistant to your everyday life in NUS. It helps you maintain your numerous groups,"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "tells you when your friends are free for lunch and find common time for project meetings. It even helps you find directions to"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "wherever your friends might be!"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "We know that time is precious for university students, so we made **UniFy** as simple to use as possible. You only need commands"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "to use **UniFy**, no more searching for hidden buttons or navigating unfamiliar pages!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Excited? Let\u0027s get started!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Make sure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "Having any Java 8 version is not enough. +"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ".  Download the latest `addressbook.jar` link:{repoURL}/releases[here]."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for UniFy."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 2.1 : UniFy\u0027s Interface_"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* **`add`**`n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/abCdE` : adds a contact named `John Doe` to the Address Book"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ". Now you can explore the rest of UniFy! Refer to the link:#commands[Commands] section below for details of each command."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In this User Guide and in the message box in UniFy, you can see how to type a command by"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "referring to the Command Format provided for you. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Understanding the Command Format is easy! Let us explain:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Commands always start with a command word."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add`, `delete`, `clear`, `edit`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `INDEX` refers to the index number shown in the last generated listing of people."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `INDEX` *must be a positive integer* e.g.: 1, 2, 3, ..."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Words in `UPPER_CASE` are *parameters* you have to give to the command. Each *parameter* is assigned and preceded by a *prefix*: a letter followed by a `/` +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add n/*NAME*` +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   `NAME` is a *parameter* you have to give to the `add` command, assigned to the `n/` *prefix* +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   If the *parameter* you want to provide is John Doe, the command will be `add n/*John Doe*`."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add n/NAME *[t/TAG]*` +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   You can use the `add` command as `add n/John Doe t/friend` or as `add n/John Doe`."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items can be in any order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** If the Command Format specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Commands have alternative keywords than can be used in place of them."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: You can type `wipe` or `c` instead of `clear` to execute the same command."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Unsure what to do inside UniFy? Call for help with this simple command._"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Views the User Guide for Help +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "Format: `help`"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_First thing to do with UniFy is to start adding the various people you\u0027ve met in University, as well as important people like your family._"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person manually"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Add contact information you want to remember! Your group mate\u0027s timetable, your friend\u0027s birthday. Tag your"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "module mates with appropriate tags too!_"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `add n/NAME g/GENDER p/PHONE_NUMBER e/EMAIL a/ADDRESS [m/MATRIC_NUMBER] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]... [tmpt/NUM_OF_MONTHS/TEMPORARY TAG]...` +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `a` , `insert` +"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " +"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::PersonCard.png[]"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.2.1 : A person with various contact information_"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "You can view the contacts you have added in UniFy in the form of _cards_."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Here are the following information a person can have: +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Name*"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Gender*"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `GENDER` is either Male/Female or M/F"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Phone number*"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Email*"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Address*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Matriculation number* _(Added since v1.2)_"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `MATRIC_NUMBER` should be a 9-character string starting with \u0027A or a\u0027 and ending with a letter"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Birthday* _(Added since v1.2)_"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** The format for `BIRTHDAY` is DDMMYYYY."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Timetable* via an NUSMods shortlink _(Added since v1.2)_"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** The full link is not allowed"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*** Example of a shortlink: http://modsn.us/AC71u"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Tags*"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** A person can have any number of tags (even no tags at all!)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Tags are alphanumeric and without spaces."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *_Temporary_ Tags* _(Coming in v2.0)_"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `NUM_OF_MONTHS` *must be a positive integer* eg: 1, 2, 3, ..."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `NUM_OF_MONTHS` specifies the number of months the temporary tag will last, after which it will disappear."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*** Example: `tmpt/6/ATAPcolleague` tags the person with `ATAPcolleague`. After 6 months, the tag will disappear."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `add n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/abCdE`"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `add n/Betsy Crowe g/Female p/1234567 e/betsycrowe@example.com a/Newgate Prison t/friend t/criminal`"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `add n/Amy Tan g/F p/82974823 tt/4/CS2101classmates e/amy_tan@example.com a/PGP m/a0142323T`"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add n/Betty g/F p/12345678 e/betty@example.com b/23051998`"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person using the information on social media _(Coming in v2.0)_"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Add someone from a module via Facebook? Add him seamlessly into UniFy!_"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Adds a person to address book from the social media accounts +"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `add s/SOCIAL_MEDIA_TYPE SOCIAL_MEDIA_ID`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* The name of social media type is case insensitive."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add s/facebook John Doe`"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add s/Instagram John Doe`"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Adding/Deleting a Photo for a person : `photo` _(Coming in v1.4)_"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_When you study too much, sometimes, you forget how someone looks like._"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Adds or removes a photo to an existing person in the address book. +"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "(Add photo) `photo INDEX [ph/PHOTO PATH]` +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "(Delete photo) `photo INDEX [ph/]` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `ph`"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "****"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Edits the photo of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Ensure that format of the path to the photo file is correct."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The file path of the photo will be updated to the new path."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "`photo 1 ph/ C:\\Users\\User\\Files\\Amy_selfie.jpg` +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "Add the picture \u0027Amy_selfie.jpg\u0027 in the specified location to the 1st person in the last shown list. +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "The photo of the 1st person will be shown while clicking on the name."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "`photo 2 ph/` +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the picture from the 2nd person in the last shown list."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "`photo 1 ph/` +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the picture from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Giving a remark to a person : `remark` _(Since v1.1)_"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Sometimes you want to remind yourself how this person was like in a funny incident. Or you owe friends money for last night\u0027s supper. +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Tags are too short, and your remarks for a person are more descriptive and unique. UniFy lets you add a remark to a person you can always look back on._"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "April0616"
        },
        "content": "Adds or Deletes a remark to the specified person from the address book. +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Add remark) `remark INDEX r/REMARK` +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Delete remark): `remark INDEX r/`"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Edits the remark of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 2 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "Adds \u0027Likes to drink coffee\u0027 remark to the 2nd person in the address book."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 1 r/` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the remark from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Listing all people : `list`"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Want to list all contacts for an overview?_"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "Shows a list of all persons in the address book. +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `l` , `showall`, `viewall`"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Locating persons by filters : `find` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Display your contacts how you like it. All of them? Just your classmates for a particular module? +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Want to know who\u0027s birthday is in this month? Unify every common contact together and list them as one._"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Finds persons whose information contain any of the given keywords from each category. +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `find t/Tag p/PHONE e/EMAIL b/BIRTHDAY MONTH...` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Alternatives: `f` , `search`"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* The order of the categories does not matter. e.g. `p/` can come before `t/`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Mentioned attributes are searched."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "* Only full words will be matched e.g. `Han` will not match `Hans`"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Persons matching all keyword will be returned."
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* MONTH should be inputted by numbers. e.g `12` searches for December babies"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Single digit months needs to be preceded by a 0 in front."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Example: `02` searches for those born in February"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Only the birthday month is searched."
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* The result will be ordered in terms of ascending order of their birthday dates."
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Example: Person with birthday on October 10 is returned after someone with October 2."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find t/friends` +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person tagged by `friends`"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find t/friends p/1234` +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person tagged by `friends`, and having phone numbers containing `1234`"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find t/jcfriends t/computing` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns all persons in the address book containing *either* \u0027JCfriends\u0027 or \u0027computing\u0027 (or *both*)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find b/12` +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns all persons in the address book having birthdays in `December`"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Sorting all persons : `sort` _(Coming in v1.5)_"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Sometimes, you just meet too many people in University. Do not worry, get all your contacts in order._"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows a list of all persons in the address book by arranging their names in alphabetical order. +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Sort by name in ascending order) `sort ASC` +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Sort by name in descending order) `sort DESC`"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "April0616"
        },
        "content": "Alternatives: `s` , `sortall`, `arrange`"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Editing a person or a tag: `edit`"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Made a mistake? Someone changed their contact details? Edit it._"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "Edits an existing person in the address book. +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `edit INDEX [n/NAME] [g/GENDER] [m/MATRIC_NO] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `e` , `modify`, `change`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* You must provide at least one of the optional fields."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Editing tags is not cumulative! WWhen editing tags, the person\u0027s existing tags will be replaced by the new ones you put in."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** This also means you can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `edit 1 p/91234567 g/Male e/johndoe@example.com` +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "April0616"
        },
        "content": "Edits the phone number, gender and email address of the 1st person to be `91234567`, `Male` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `edit 2 n/Betsy Crower m/A0162522j b/14081998 t/` +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Edits the name, matriculation number and birthday of the 2nd person to be `Betsy Crower`, `A0162522j`, `14081998` and clears all existing tags."
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a tag _(Added since v1.2)_"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_When you need to edit module tags of classmates when advancing from a prerequisite module (e.g. CS1010 -\u003e CS1020),"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "changing each of their tag to an updated one is too tedious! UniFy lets you simply edit a particular tag for all contacts in one command._ +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Replaces the specified tag word to a specified new word for all people containing the specified tag +"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `edit old/OLDTAG new/NEWTAG` +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `e` , `modify`, `change`"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The tag that you want to replace has to already exist in the address book ."
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Tags are case-sensitive."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit old/bestfriends new/enemies` +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit old/CS1010 new/CS1020`"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Editing a person\u0027s tag only edits the tag(s) for a *single* person. This command edits one tag name for *all* people."
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Deleting a person, multiple people or a tag: `delete`"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a person or multiple persons _(Added since v1.3)_"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Some people just have to go away in your life. Sometimes they leave you. Delete these people out of UniFy as well._"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "By specifying an index or multiple indexes, deletes the specified person(s) in the most recent listing from the address book. +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: `delete INDEX1, INDEX2, INDEX3...` +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* UniFy accepts duplicated indexes."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete 2, 3, 4` +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "April0616"
        },
        "content": "Deletes the 2nd, 3rd, 4th persons in the address book."
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete 2, 2, 4` +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "April0616"
        },
        "content": "Deletes the 2nd and 4th persons in the address book."
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete 1, 5` +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "April0616"
        },
        "content": "Deletes the 1st and 5th persons in the results of the `find` command."
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting old contacts"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Some people you do not talk for months. Maybe a group mate from a previous module you never see ever again."
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "They drift away, and out of UniFy they go as well._"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the contacts who you have not viewed/edited/listed by the \u0027edit\u0027, \u0027photo\u0027 or \u0027find\u0027 command"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "for a certain number of months. +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: `delete old/NUM_OF_MONTH` +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "April0616"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "April0616"
        },
        "content": "* The NUM_OF_MONTH *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete old/2` +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes all the contacts which you have not viewed/edited/listed by the \u0027edit\u0027, \u0027photo\u0027 or \u0027find\u0027 command for the past 2 months."
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a Tag (or multiple Tags) _(Added since v1.1)_"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You have just finished a project in a module. Having the \u0027groupmate\u0027 tag to your project mates seems rude for you since"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "the project is alreadt over."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Instead of going through each member one by one, delete that particular \u0027groupmate\u0027 tag in one go!_"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the specified tag from all people containing the tag in the address book. +"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `delete t/TAG...` +"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The tag specified is case-sensitive."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* You can delete multiple tags with one delete command."
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The tag (or all the tags) specified must already exist in the address book."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`delete t/friends` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the tag \u0027friends\u0027 from all people containing the tag \u0027friends\u0027 in the address book."
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`delete t/module1 t/module2` +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the tags \u0027module1\u0027 and \u0027module2\u0027 from all people containing one of the tag, or both of the tags in the address book."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the person identified by the index number used in the last person listing. +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `select INDEX` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `s`, `choose`"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Selects the person and loads the Google search page for the person at the specified `INDEX`."
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "`select 1` +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Viewing combined timetables : `whenfree` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_\"When are all of you free?\" is an extremely common question in University. Let us solve that._"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Views the combined timetables of a group of persons, selected by indexes. +"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `whenfree [INDEX]...`"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* `whenfree 1 2` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Displays a combined timetable for the 1st and 2nd person in the address book"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `whenfree` +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Displays a combined timetable for all listed users"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Creates a combined timetable representing all the persons chosen"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* If no index is specified, displays the timetable representing all the persons currently listed"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* All persons specified *must have timetables added*"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Open a Google Maps view of a selected person\u0027s address : `gmaps` _(Added since v1.3)_"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You are meeting your group mate at his house. But where is his house on the map?_"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For a person specified by an index, opens a Google Maps view of the person\u0027s address location. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "If you specify an address, gives the Google Maps directions from the given address to the person\u0027s location. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `gmaps INDEX [a/ADDRESS]` +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `g`, `map`, `maps`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 2` +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps view for the address of the 2nd person listed in the address book."
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `find Betsy` +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 1` +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps view for the address of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 2 a/Blk 632 Yishun St 61` +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps directions from Blk 632 Yishun St 61 to the address of the 2nd person listed in the address book."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Listing persons who live nearby : `nearby` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_It is Summer break. Who is there to call for late night supper near your home?_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows a list of persons who\u0027s address is nearby a specified *address* within a specified radius. +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `nearby a/ADDRESS d/DISTANCE` +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `n`, `nearme`, `closeby`, `neighbours` `neighbors`"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `nearby a/Blk 123 Kent Ridge Drive d/500` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " Shows a list of people with address 500m away from Blk 123 Kent Ridge Drive."
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The `DISTANCE` specified is in metres."
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Finding a central location among a group of persons : `central` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_\"Where is a good place for us to meet?\" UniFy everyone\u0027s location to find a central one._"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "After listing persons, shows the central location among the persons most recently listed +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `central [a/ADDRESS] [INDEX]...` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `ct`, `center`, `wheremeet`"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Specifying an `ADDRESS` will include that address in calculating the central location."
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* If an `INDEX`, or multiple `INDEX` es are specified, shows the central location among the specified people with these indexes. +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central` +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Show the central location among the persons most recently listed."
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central a/Blk 123 Kent Ridge Drive` +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Show the central location among the persons most recently listed and Blk 123 Kent Ridge Drive."
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central 1 5 6` +"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows the central location among the persons most recently listed with Index 1, 5 and 6."
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list t/jcfriends` +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central` +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows the central locaton among the persons tagged as \u0027jcfriends\u0027."
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_What have you been doing? Check the past._"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `history` +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `h` , `past`"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You made a mistake, deleted some one by accident. Do not fret. UniFy is forgiving, undo your mistakes._"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `u`"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit` and `clear`)."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete 1, 2` +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "April0616"
        },
        "content": "`undo` (reverses the `delete 1, 2` command) +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_It is OK. You wanted to delete that person anyways._"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `redo` +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `r`"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete 1, 2` +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "April0616"
        },
        "content": "`undo` (reverses the `delete 1, 2` command) +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "April0616"
        },
        "content": "`redo` (reapplies the `delete 1, 2` command) +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `clear` +"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `c`, `wipe`"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Setting a password for your address book : `password` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Your privacy is important. Prevent others from viewing the contact details you possess._"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Sets or changes the password that allows access to the address book +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `password pw/PASSWORD` +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Alternatives: `p` , `code`"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `PASSWORD` length is limited to 20 characters."
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Remove the password by putting `PASSWORD` as `PASSWORD`."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `password pw/PASSWORD` removes the password in UniFy."
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `password 123456789` +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Adds 123456789 as a password to UniFy."
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `password` +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To clear the password set in UniFy."
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You are done with what you need to do. Thank you for using UniFy._"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `exit` +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `x` , `quit`"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Other features"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Here are some features in UniFy that are not in the form of commands, but good to know to aid in your productivity._"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Theme Selection _(Coming in v2.0)_"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To change the theme of the app, click on *Appearance* -\u003e *Themes*, at the top of the window. +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Several themes are available, such as *Day Mode* and *Night Mode*."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Font Size _(Coming in v2.0)_"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "If you find the font too big or too small, the font size can be changed in *Appearance* -\u003e *Themes*"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Command Suggestion _(Coming in v2.0)_"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Typing the wrong/mispelled word for a command will trigger the address book to suggest the correct phrasing for that command"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Typing the command `cancel` will make UniFy reply `Do you mean DELETE or UNDO?` +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Typing \u0027cacnel` will also trigger the same response."
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Tag Bar _(Coming in v2.0)_"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "All existing tags can be viewed as icons on the UI +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Clicking on the icons will show a list of contacts being tagged with that tag"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Footer Bar _(Coming in v2.0)_"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Clicking on a tag will display the number of people associated with that tag. +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "By default, the footer bar shows the total number of people stored."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Google Maps Integration with Address _(Coming in v2.0)_"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Clicking on the address in the address book will open a Google Map map view of the address location."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "*A*: Install the app in the other computer and overwrite the empty data file it creates with the file that contains the data of your previous Address Book folder."
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Command Summary"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Add* : `add n/NAME g/GENDER p/PHONE_NUMBER e/EMAIL a/ADDRESS [m/MATRIC_NUMBER] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]... [tmpt/NUM_OF_MONTHS/TEMPORARY TAG]...` +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `add n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/abCdE t/friend t/colleague tmpt/3/projectA`"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Delete (Person)* : `delete INDEX1, INDEX2, INDEX3` +"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `delete 1, 2, 3`"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Delete (Tag)* : `delete [t/TAG]...` +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `delete t/modulemate t/colleague`"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Edit (Person)* : `edit INDEX [n/NAME] [g/GENDER] [m/MATRIC_NO] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com b/19051994`"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Edit (Tag)* : `edit old/TAG new/TAG` +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `edit tag/friends tag/enemy`"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Photo* : `photo INDEX ph/PHOTO_PATH` +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `photo 1 ph/ C:/desktop/photo.jpg`"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Remark* : `remark INDEX r/REMARK ` +"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `remark 2 r/Likes to drink coffee.`"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "-"
        },
        "content": "* *Find* : `find KEYWORD [MORE_KEYWORDS]` +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `find James Jake`"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Google Maps* `gmaps INDEX`"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Nearby* `nearby a/ADDRESS d/DISTANCE` +"
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `nearby a/123, Clementi Rd, 1234665 d/500`"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Sort (in Ascending Order)* `sort ASC`"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Sort (in Descending Order)* `sort DESC`"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Central* `central`"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Command Alternatives Reference Table"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[width\u003d\"15%\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|Command | Alternatives |-|-|-|-"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|help |-|-|-|-|-"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|add | a | insert |-|-|-"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|photo | ph |-|-|-|-"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|remark |-|-|-|-|-"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|list | l | showall | viewall |-|-"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "|find | f | search |-|-|-"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|sort | s | sortall | arrange |-|-"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|edit | e | modify | change |-|-"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|delete | d | remove |-|-|-"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|select| s | choose |-|-|-"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "|history| h | past |-|-|-"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|whenfree |-|-|-|-|-"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|gmaps | g | map | maps|-|-"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|nearby| n | nearme | closeby | neighbours | neighbors"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|central| ct | center | wheremeet |-|-"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|undo | u |-|-|-|-"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|redo | r |-|-|-|-"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|password | p | code |-|-|-"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|exit | x | quit |-|-|-"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Version Notes"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.1"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `remark` command"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete` support for tags"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.2"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Added new person contact information fields"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Birthday"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Timetable"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Gender"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Matriculation Number"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit` support for tags"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.3"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `gmaps` command"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete` support for multiple persons"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Auto-correct command suggested"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 57,
      "CindyTsai1": 64,
      "nbriannl": 362,
      "April0616": 66,
      "-": 183
    }
  },
  {
    "path": "docs/team/nbriannl.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d Labayna Neil Brian Narido - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project: AddressBook - Level 4"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "AddressBook - Level 4 is a desktop address book application used for teaching Software Engineering principles. The user interacts with it using a CLI, and it has a GUI created with JavaFX. It is written in Java, and has about 6 kLoC."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "*Code contributed*: [https://github.com[Functional code]] [https://github.com[Test code]] {give links to collated code files}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Undo/Redo"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "include::../UserGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "{Justify the need for, and the current design (i.e. external behavior) of, the feature}"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dundoredo]"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Add command `remark`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "{Explain similar to the Undo/Redo feature above.}"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "* Updated the GUI color scheme (Pull requests https://github.com[#33], https://github.com[#34])"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* Wrote additional tests to increase coverage from 88% to 92% (Pull requests https://github.com[#36], https://github.com[#38])"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project: PowerPointLabs"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "{Optionally (not graded), you may include other projects in your portfolio.}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * The main entry point to the application. Dummy word"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 3, 0, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 1,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String appTitle \u003d \"UniFy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_PROVIDED \u003d \"One (or more) of the tags provided does not exist\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 1,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/MasterTagListHasAnUnusedTagEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates that the master tag list has an unused tag not used by any person*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class MasterTagListHasAnUnusedTagEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final Set\u003cTag\u003e outdatedTags;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public MasterTagListHasAnUnusedTagEvent (Set\u003cTag\u003e outdatedTags) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.outdatedTags \u003d outdatedTags;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"The tag list is outdated. With outdated tags: \" + outdatedTags.toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 20,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonAddressDisplayDirectionsEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates a person\u0027s address as a map is to be displayed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonAddressDisplayDirectionsEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final Address address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonAddressDisplayDirectionsEvent(ReadOnlyPerson person, Address address) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Displaying location of \" + person.getName() + \": \" + person.getAddress()"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + \" from \" + address.toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 18,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonAddressDisplayMapEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates a person\u0027s address as a map is to be displayed*/"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonAddressDisplayMapEvent extends BaseEvent {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonAddressDisplayMapEvent (ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Displaying location of \" + person.getName() + \": \" + person.getAddress();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 14,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public final boolean isError;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean isError) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonSelectedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a person being selected"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class PersonSelectedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonSelectedEvent(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return \"Person selected: \" + person.getName().toString();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 12,
      "nbriannl": 6,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/Lesson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a lesson that a module has"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String classNo;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String lessonType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String weekType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Lesson(String classNo, String lessonType, String weekType,"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                  String day, String startTime, String endTime) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.weekType \u003d weekType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return classNo;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getWeekType() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return weekType;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/ModuleInfoFromUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents lesson for a specific module parsed from a NUSMods url"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class ModuleInfoFromUrl {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private HashMap\u003cString, String\u003e lessonInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ModuleInfoFromUrl(String modCode) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        lessonInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds information for a specific lesson"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void addLesson(String classType, String classNo) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        lessonInfo.put(classType, classNo);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public HashMap\u003cString, String\u003e getLessonInfo() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return lessonInfo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof ModuleInfoFromUrl)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return this.modCode.equals(((ModuleInfoFromUrl) other).getModCode());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 42,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/TimetableInfoFromUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents all timetable information parsed from a NUSMods url"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableInfoFromUrl {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ArrayList\u003cModuleInfoFromUrl\u003e moduleInfo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableInfoFromUrl() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        moduleInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ArrayList\u003cModuleInfoFromUrl\u003e getModuleInfoList() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Gets lessons for a specific module code. If module does not exist, creates a new ModuleInfoFromUrl object"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ModuleInfoFromUrl getModuleInfo(String moduleCodeToGet) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ModuleInfoFromUrl currentModule : moduleInfo) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (currentModule.getModCode().equals(moduleCodeToGet)) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return currentModule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return new ModuleInfoFromUrl(moduleCodeToGet);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds lesson information for a specific module to the timetable information."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void addModuleInfo(ModuleInfoFromUrl moduleInfoToAdd) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (moduleInfo.contains(moduleInfoToAdd)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.set(moduleInfo.indexOf(moduleInfoToAdd), moduleInfoToAdd);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.add(moduleInfoToAdd);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/TimetableParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_MONDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_THURSDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_TUESDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_WEDNESDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_INVALID_SHORT_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_BOTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_EVEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_ODD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.isValidUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.Proxy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Helper class that contains utilities to parse NUSMods urls."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableParserUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_TYPE \u003d \"Invalid class type provided!\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK_TYPE \u003d \"Invald week type!\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Invalid timing provided!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Invalid day provided\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_ACAD_YEAR \u003d 4;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_MODULE_INFO \u003d 5;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_SEMESTER_INFO \u003d 0;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_CLASS_INFO \u003d 1;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_BACKWARDS_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_QUESTION_MARK \u003d \"\\\\?\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_AMPERSAND \u003d \"\u0026\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_EQUALS_SIGN \u003d \"\u003d\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_LEFT_SQAURE_BRACKET \u003d \"%5B\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_RIGHT_SQUARE_BRACKET \u003d \"%5D\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes in a valid timetable URL and attempts to parse it"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static TimetableInfo parseUrl(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!isValidUrl(url)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String newUrl \u003d expandUrl(url);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return parseLongUrl(newUrl);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(\"Url cannot be accessed\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a full expanded NUSMods url"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfo parseLongUrl(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String acadYear;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String semester;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] splitUrl \u003d url.split(SPLIT_BACKWARDS_SLASH);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        acadYear \u003d splitUrl[INDEX_ACAD_YEAR];"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String toParse \u003d splitUrl[INDEX_MODULE_INFO];"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] modInfo \u003d toParse.split(SPLIT_QUESTION_MARK);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (modInfo.length !\u003d 2) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableInfo();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        semester \u003d modInfo[INDEX_SEMESTER_INFO].substring(3);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfoFromUrl timetableInfo \u003d parseModuleInfo(modInfo[INDEX_CLASS_INFO]);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return constructTimetable(acadYear, semester, timetableInfo);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a string of module info from an expanded NUSMods link"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns a hashmap where module code is the key, and values are a hashmap of class types and class numbers"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfoFromUrl parseModuleInfo(String modInfoFromString) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfoFromUrl modules \u003d new TimetableInfoFromUrl();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] classes \u003d modInfoFromString.split(SPLIT_AMPERSAND);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // Split a string of format \"MODULE_CODE[CLASS_TYPE]\u003dCLASS_NO\""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (String classInfo : classes) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String moduleCode \u003d classInfo.split(SPLIT_LEFT_SQAURE_BRACKET)[0];"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classType \u003d classInfo.split(SPLIT_LEFT_SQAURE_BRACKET)[1].split(SPLIT_RIGHT_SQUARE_BRACKET)[0];"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classNo \u003d classInfo.split(SPLIT_EQUALS_SIGN)[1];"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ModuleInfoFromUrl moduleInfo \u003d modules.getModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.addLesson(classType, classNo);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            modules.addModuleInfo(moduleInfo);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Uses NUSMods API to obtain all classes a module has, and returns it in"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * an arraylist of classes. Each class is represented by a hash map, storing the information about the class"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @return list of all lessons a module has"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static ArrayList\u003cLesson\u003e getLessonInfoFromApi(String acadYear, String semester, String modCode)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws ParseException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String uri \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semester + \"/modules/\" + modCode + \".json\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            URL url \u003d new URL(uri);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d (ArrayList\u003cHashMap\u003cString, String\u003e\u003e)"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    mappedJson.get(\"Timetable\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Lesson lessonToAdd \u003d new Lesson(lesson.get(\"ClassNo\"), lesson.get(\"LessonType\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.get(\"WeekText\"), lesson.get(\"DayText\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.get(\"StartTime\"), lesson.get(\"EndTime\"));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(\"Cannot retrieve module information\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes a shortened URL and returns the full length URL as a string"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static String expandUrl(String shortenedUrl) throws IOException, ParseException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        URL url \u003d new URL(shortenedUrl);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // open connection"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // stop following browser redirect"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        httpUrlConnection.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // extract location header containing the actual destination URL"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String expandedUrl \u003d httpUrlConnection.getHeaderField(\"Location\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        httpUrlConnection.disconnect();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (expandedUrl.equals(\"http://modsn.us\")) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return expandedUrl;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Constructs a timetable array using information parsed from a url"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param acadYear academic year"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param semester semester"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetableInfo Class information parsed from url, stored by module code"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfo constructTimetable(String acadYear, String semester,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                    TimetableInfoFromUrl timetableInfo) throws IllegalValueException {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo timetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cModuleInfoFromUrl\u003e lessonInfoByModules \u003d timetableInfo.getModuleInfoList();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ModuleInfoFromUrl moduleInfoFromTimetable : lessonInfoByModules) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            constructTimetableForModule(acadYear, semester, timetable, moduleInfoFromTimetable);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds all lessons for a specific module found in the timetable information parsed from URL"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Timings for every lesson from a specific module will be added to the timetable information"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param acadYear academic year"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param semester semester"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetable timetable to be updated"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param moduleInfo lessons for a module parsed from url"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static void constructTimetableForModule(String acadYear, String semester, TimetableInfo timetable,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                    ModuleInfoFromUrl moduleInfo) throws IllegalValueException {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d getLessonInfoFromApi(acadYear, semester, moduleInfo.getModCode());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        HashMap\u003cString, String\u003e lessonsForModule \u003d moduleInfo.getLessonInfo();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (String classType : lessonsForModule.keySet()) {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classNo \u003d lessonsForModule.get(classType);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            addLessonToTimetable(timetable, lessons, classType, classNo);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Finds the timings for a lesson in the URL parsed info, and adds it to the timetable"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetable to be returned"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param lessons list of all lessons for a module"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param classType type of class parsed"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param classNo identifier for class parsed"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static void addLessonToTimetable(TimetableInfo timetable, ArrayList\u003cLesson\u003e lessons, String classType,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                             String classNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (lessonExistsInParsedInfo(classType, classNo, lesson)) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                timetable.updateSlotsWithLesson(lesson.getWeekType(), lesson.getDay(), lesson.getStartTime(),"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.getEndTime());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if lesson info that was parsed from URL is equivalent to a lesson"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static boolean lessonExistsInParsedInfo(String classType, String classNo, Lesson lesson)"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return parseSlotType(classType).equals(lesson.getLessonType()) \u0026\u0026 classNo.equals(lesson.getClassNo());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /* ------------------------------------------- Helper methods ----------------------------------------------------*/"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts string representing day of class to integer representation"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns -1 if day cannot be found;"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseDay(String day) throws IllegalValueException {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Monday\":"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_MONDAY;"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Tuesday\":"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_TUESDAY;"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Wednesday\":"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_WEDNESDAY;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Thursday\":"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_THURSDAY;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Friday\":"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_FRIDAY;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes in String representing start/end timing of lessons, and returns respective index to be used for array"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseStartEndTime(String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return (int) Math.ceil(((Integer.parseInt(timing) - 800) * 2) / 100.0);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts shortened slot type in URL to full slot-type string used in API"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static String parseSlotType(String slotType) throws IllegalValueException {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (slotType) {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"LEC\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Lecture\";"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"TUT\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Tutorial\";"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"LAB\":"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Laboratory\";"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"SEM\":"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Seminar-Style Module Class\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"SEC\":"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Sectional Teaching\";"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"REC\":"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Recitation\";"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_CLASS_TYPE);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts week type from string used in api to integer index for use in URL"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseWeekType(String weekType) throws IllegalValueException {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (weekType) {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Odd Week\":"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_ODD;"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Even Week\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_EVEN;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Every Week\":"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_BOTH;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_WEEK_TYPE);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 311,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void checkAllMasterListTagsAreBeingUsed ();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 5,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            undoRedoStack.push(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return model.getAddressBook().getTagList();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void checkAllMasterListTagsAreBeingUsed () {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        model.checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 11,
      "April0616": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"insert\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Adds a person to the address book. \""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_GENDER + \"GENDER \""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_MATRIC_NO + \"MATRIC NO. \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"PHONE \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"EMAIL \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"ADDRESS \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_BIRTHDAY + \"BIRTHDAY \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + PREFIX_TIMETABLE + \"TIMETABLE_URL \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_MATRIC_NO + \"A0162533K \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_BIRTHDAY + \"21051994 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + PREFIX_TIMETABLE + \"http://modsn.us/AbCdE \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new Person(person);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "CindyTsai1": 3,
      "April0616": 6,
      "-": 67
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"wipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Deletes persons identified using their last displayed indexes from the address book,"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * or a tag identified by the tag name"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"remove\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \": Deletes persons identified using their last displayed indexes used in the last person listing.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"  OR the tag specified from all people containing the specific tag\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Parameters: INDEX (must be positive integers)\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"        OR  \" + PREFIX_TAG + \"TAG (case-sensitive)\\n \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 1, 2, 3\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"friend\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" \" + PREFIX_TAG + \"friend \" + PREFIX_TAG + \"enemy\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tags\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final ArrayList\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Set\u003cTag\u003e targetTags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        targetIndexes.add(targetIndex);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Set\u003cTag\u003e targetTags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndexes \u003d null;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d targetTags;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // this code block is command execution for delete [indexes]"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetTags \u003d\u003d null \u0026\u0026 targetIndexes !\u003d null) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "            for (Index index : targetIndexes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ReadOnlyPerson personToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "                deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "                model.deletePersons(deletePersonList);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "                assert false : \"One of the target persons is missing\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "            //return new CommandResult(String.format(MESSAGE_DELETE_PERSON_SUCCESS));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return new CommandResult(generateResultMsg(deletePersonList));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else { // this code block is command execution for delete t/[tag...]"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ArrayList\u003cTag\u003e arrayTags \u003d new ArrayList\u003cTag\u003e(targetTags);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            List\u003cTag\u003e listOfExistingTags \u003d model.getAddressBook().getTagList();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (!listOfExistingTags.containsAll(arrayTags)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            for (Tag tagToBeDeleted: arrayTags) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    model.deleteTag(tagToBeDeleted);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                } catch (TagNotFoundException tnfe) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    assert false : \"[Delete Tag] A tag is not found\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    assert false : \"[Delete Tag] A duplicate person is there\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    assert false : \"[Delete Tag] A person not found\";"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(MESSAGE_DELETE_TAG_SUCCESS);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generate the command result of the deletePersonList."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param deletePersonList"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return commandResult string"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static String generateResultMsg(ArrayList\u003cReadOnlyPerson\u003e deletePersonList) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        int numOfPersons \u003d deletePersonList.size();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        StringBuilder formatBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (numOfPersons \u003d\u003d 1) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"Deleted Person :\\n\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"Deleted Persons :\\n\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson p : deletePersonList) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"[\");"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(p.getAsText());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"]\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String resultMsg \u003d formatBuilder.toString();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return resultMsg;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetIndexes !\u003d null) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                    || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 this.targetIndexes.equals(((DeleteCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "                    || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 this.targetTags.equals(((DeleteCommand) other).targetTags)); // state check"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "nbriannl": 45,
      "April0616": 56,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"modify\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"change\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Edits the details of the person identified \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"by the index number used in the last person listing. \""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NO + \"MATRIC NO.] \""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"[\" + PREFIX_TIMETABLE + \"TIMETABLE_URL] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\\n\""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"OR \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Edit the specified tag in all contacts containing this tag with a new specified tag \""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Parameters: \" + PREFIX_OLD_TAG + \"TAG \" + PREFIX_NEW_TAG + \"TAG\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \"old/CS1020 new/CS2010\";"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited Tag: %1$s\";"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"The specified old tag does not exist\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final boolean isEditForPerson;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag oldTag;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag newTag;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d true;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d null;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d null;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param oldTag the old tag to be replaced by the new tag"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param newTag that will replace the old tag"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(newTag);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d false;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d oldTag;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d newTag;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (isEditForPerson) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                model.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                throw new AssertionError(\"Updating the tags on one person cannot possibly make the person\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        + \" identical to another person.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (TagNotFoundException tgne) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                throw new CommandException(MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_EDIT_TAG_SUCCESS, oldTag));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToEdit}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * edited with {@code editPersonDescriptor}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "                                             EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "        MatricNo updatedMatricNo \u003d editPersonDescriptor.getMatricNo().orElse(personToEdit.getMatricNo());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        Birthday updateBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable updatedTimetable \u003d editPersonDescriptor.getTimetable().orElse(personToEdit.getTimetable());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new Person(updatedName, updatedGender, updatedMatricNo,"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "                updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                updatedTimetable, updatedRemark, updatedTags, updateBirthday);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (isEditForPerson) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return  isEditForPerson \u003d\u003d e.isEditForPerson"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 index.equals(e.index)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return isEditForPerson \u003d\u003d e.isEditForPerson"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 oldTag.equals(e.oldTag)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 newTag.equals(e.newTag);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private MatricNo matricNo;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        private Timetable timetable;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d toCopy.name;"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.gender \u003d toCopy.gender;"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.matricNo \u003d toCopy.matricNo;"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d toCopy.phone;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d toCopy.email;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d toCopy.address;"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.timetable \u003d toCopy.timetable;"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d toCopy.tags;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.birthday \u003d toCopy.birthday;"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.gender, this.matricNo, this.phone, this.email,"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    this.address, this.timetable, this.tags, this.birthday);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void setMatricNo(MatricNo matricNo) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public Optional\u003cMatricNo\u003e getMatricNo() {"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return Optional.ofNullable(matricNo);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        public void setTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        public Optional\u003cTimetable\u003e getTimetable() {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return Optional.ofNullable(timetable);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(tags);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 getMatricNo().equals(e.getMatricNo())"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    \u0026\u0026 getTimetable().equals(e.getTimetable())"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday());"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 18,
      "CindyTsai1": 18,
      "nbriannl": 52,
      "April0616": 35,
      "-": 215
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"quit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Finds and lists all persons in address book whose name contains any of the argument keywords."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Keyword matching is case sensitive."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"search\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD + \": Finds all persons whose names contain any of \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"the specified keywords (case-sensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: KEYWORD [MORE_KEYWORDS]...\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" alice bob charlie\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private final NameContainsKeywordsPredicate predicate;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public FindCommand(NameContainsKeywordsPredicate predicate) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(predicate);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GMapsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gmaps\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"map\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"maps\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Opens a Google Maps view of a person’s address.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \" If you specify an address, you can find directions from the address to that person\u0027s address.\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" INDEX [a/ADDRESS]\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"         \" + COMMAND_WORD + \" 1 a/Blk 123, Yishun 75\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Showing Map View of %1$s \u0027s address\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS \u003d \"Showing directions to %1$s\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Address targetAddress;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public GMapsCommand (Index targetIndex, Address targetAddress) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetAddress \u003d targetAddress;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToShowMap \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (targetAddress !\u003d null) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            model.showDirectionsTo(personToShowMap, targetAddress);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS, personToShowMap.getName()));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            model.showMapOf(personToShowMap);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, personToShowMap.getName()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!(other instanceof GMapsCommand)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand e \u003d (GMapsCommand) other;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Objects.equals(this.targetIndex, e.targetIndex)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \u0026\u0026 Objects.equals(this.targetAddress, e.targetAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 57,
      "April0616": 1,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"past\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"showall\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"viewall\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the remark of a person to the address book."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rm\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \": If remarks the person identified by the index number used in the last person listing,\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \" add the remark to the person.\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"If the remark field is empty, the remark is removed for the person.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_REMARK + \"[REMARK] \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Example: (add remark) \" + COMMAND_WORD + \" 1 \" + PREFIX_REMARK + \"Likes to drink coffee.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Example: (delete remark) \" + COMMAND_WORD"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \" 2 \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_REMARK + \"\\n\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added Remark to Person: %1$s\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed Remark from Person: %1$s\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param targetIndex of the person in the list to edit the remark"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param remark of the person"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public RemarkCommand(Index targetIndex, Remark remark) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personToRemark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person remarkedPerson \u003d createRemarkedPerson(personToRemark, remark);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "            model.updatePerson(personToRemark, remarkedPerson);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new CommandResult(generateSuccessMsg(remarkedPerson));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generate the Successful Message accordingly."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param personToRemark"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return successful message for adding remark if the remark string is not empty."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String generateSuccessMsg(ReadOnlyPerson personToRemark) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (remark.toString().isEmpty()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return String.format(MESSAGE_DELETE_REMARK_SUCCESS, personToRemark);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return String.format(MESSAGE_ADD_REMARK_SUCCESS, personToRemark);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToRemark}"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * remarked with {@code remarkPersonDescriptor}."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Person createRemarkedPerson(ReadOnlyPerson personToRemark,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "                                                 Remark remark) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assert personToRemark !\u003d null;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person remarkPerson \u003d new Person(personToRemark.getName(), personToRemark.getGender(),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToRemark.getMatricNo(), personToRemark.getPhone(),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                personToRemark.getEmail(), personToRemark.getAddress(), personToRemark.getTimetable(),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                remark, personToRemark.getTags(), personToRemark.getBirthday());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remarkPerson;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand r \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return targetIndex.equals(r.targetIndex)"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 remark.equals(r.remark);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "April0616": 97,
      "-": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"choose\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d COMMAND_WORD"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EventsCenter.getInstance().post(new PersonSelectedEvent(model.getFilteredPersonList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .get(targetIndex.getZeroBased())));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Suggests a correct command"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Do you mean %1$s?\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private final String possibleCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Creates an SuggestCommand to suggest the specified {@code String} for command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public SuggestCommand(String command) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.possibleCommand \u003d command;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_SUCCESS, possibleCommand));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 19,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UniqueCommandList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * A list of all command words, including alias and secondary word"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class UniqueCommandList {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static TreeSet\u003cString\u003e possibleCommandList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static ArrayList\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RemarkCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RemarkCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static TreeSet\u003cString\u003e getPossibleCommandList(String command) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        possibleCommandList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // Swapping i with i+1"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 1; i \u003c command.length() - 1; i++) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            possibleCommandList.add(command.substring(0, i) + command.charAt(i + 1)"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    + command.charAt(i) + command.substring(i + 2));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // deleting one char, skipping i"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c command.length(); i++) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            possibleCommandList.add(command.substring(0, i) + command.substring(i + 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // inserting one char"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c command.length() + 1; i++) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (char j \u003d \u0027a\u0027; j \u003c\u003d \u0027z\u0027; j++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                possibleCommandList.add(command.substring(0, i) + j + command.substring(i));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                // replacing one char"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (i \u003c command.length()) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    possibleCommandList.add(command.substring(0, i) + j + command.substring(i + 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return possibleCommandList;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_MATRIC_NO,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_TIMETABLE);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME, PREFIX_GENDER, PREFIX_MATRIC_NO, PREFIX_ADDRESS, PREFIX_PHONE,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                PREFIX_EMAIL, PREFIX_TIMETABLE, PREFIX_BIRTHDAY)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Gender gender \u003d ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "            MatricNo matricNo \u003d ParserUtil.parseMatricNo(argMultimap.getValue(PREFIX_MATRIC_NO)).get();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone phone \u003d ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            Email email \u003d ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            Address address \u003d ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            Timetable timetable \u003d ParserUtil.parseTimetable(argMultimap.getValue(PREFIX_TIMETABLE)).get();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Remark remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Birthday birthday \u003d ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ReadOnlyPerson person \u003d new Person(name, gender, matricNo, phone, email, address, timetable,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    remark, tagList, birthday);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "CindyTsai1": 6,
      "April0616": 12,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final String commandWords \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final String commandWord \u003d commandWords.toLowerCase();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case AddCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case SelectCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case DeleteCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ClearCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new GMapsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case FindCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case RemarkCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case HistoryCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ExitCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return new SuggestCommandParser().parse(commandWord);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 22,
      "CindyTsai1": 4,
      "nbriannl": 7,
      "April0616": 17,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_MATRIC_NO \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final Prefix PREFIX_OLD_TAG \u003d new Prefix(\"old/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final Prefix PREFIX_NEW_TAG \u003d new Prefix(\"new/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Prefix PREFIX_TIMETABLE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "nbriannl": 2,
      "April0616": 3,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the DeleteCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an DeleteCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (preamble.equals(\"\")) { // code block for delete for a tag"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    return new DeleteCommand(tagList);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else if (preamble.matches(\"-?\\\\d+\")) { // code block for delete for a person"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (preamble.matches(\"((-?\\\\d([\\\\s+]*)\\\\,([\\\\s+]*)(?\u003d-?\\\\d))|-?\\\\d)+\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "            //code block for delete multiple persons"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ArrayList\u003cIndex\u003e deletePersons \u003d ParserUtil.parseIndexes(args);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return new DeleteCommand(deletePersons);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 26,
      "April0616": 7,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArgumentMultimap argsMultimap \u003d"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_MATRIC_NO,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TIMETABLE, PREFIX_TAG,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_OLD_TAG, PREFIX_NEW_TAG, PREFIX_BIRTHDAY);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String preamble \u003d argsMultimap.getPreamble();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (preamble.matches(\"\")) { // this code block deals with edit for a tag"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (!arePrefixesPresent(argsMultimap, PREFIX_NEW_TAG, PREFIX_OLD_TAG)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                Tag oldTag \u003d ParserUtil.parseSingleTag(argsMultimap.getValue(PREFIX_OLD_TAG)).get();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                Tag newTag \u003d ParserUtil.parseSingleTag(argsMultimap.getValue(PREFIX_NEW_TAG)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                return new EditCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else if (preamble.matches(\"\\\\d+\")) { // this code block deals with edit for a person"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            Index index;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ParserUtil.parseName(argsMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ParserUtil.parseGender(argsMultimap.getValue(PREFIX_GENDER)).ifPresent(editPersonDescriptor::setGender);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ParserUtil.parseMatricNo(argsMultimap.getValue(PREFIX_MATRIC_NO))"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        .ifPresent(editPersonDescriptor::setMatricNo);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ParserUtil.parsePhone(argsMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ParserUtil.parseEmail(argsMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ParserUtil.parseAddress(argsMultimap.getValue(PREFIX_ADDRESS))"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        .ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ParserUtil.parseTimetable(argsMultimap.getValue(PREFIX_TIMETABLE))"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        .ifPresent(editPersonDescriptor::setTimetable);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                parseTagsForEdit(argsMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ParserUtil.parseBirthday(argsMultimap.getValue(PREFIX_BIRTHDAY))"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        .ifPresent(editPersonDescriptor::setBirthday);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 5,
      "nbriannl": 26,
      "April0616": 7,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GMapsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Parses input arguments and creates a new GMapsCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandParser implements Parser\u003cGMapsCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GMapsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and returns an GMapsCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public GMapsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArgumentMultimap argsMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GMapsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (arePrefixesPresent(argsMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                address \u003d ParserUtil.parseAddress(argsMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new GMapsCommand(index, address);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 48,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses {@code oneBasedIndexes} separated with commas into a {@Code ArrayList\u003cIndex\u003e} and returns it."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Leading and trailing whitespaces will be trimmed."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if one of the specified indexes is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static ArrayList\u003cIndex\u003e parseIndexes(String oneBasedIndexes) throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedIndexes \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String[] indexes \u003d trimmedIndexes.split(\",\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "            index \u003d index.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Index thisIndex \u003d Index.fromOneBased(Integer.valueOf(index));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (!deletePersons.contains(thisIndex)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "                deletePersons.add(thisIndex);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return deletePersons;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender.isPresent() ? Optional.of(new Gender(gender.get())) : Optional.empty();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e matricNo} into an {@code Optional\u003cMatricNo\u003e} if {@code matricNo} is present."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Optional\u003cMatricNo\u003e parseMatricNo(Optional\u003cString\u003e matricNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo.isPresent() ? Optional.of(new MatricNo(matricNo.get())) : Optional.empty();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses {@code Optional\u003cint\u003e birthday} into a {@code HashMap\u003cBirthday\u003e} if {@code birthday} is present."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday.isPresent() ? Optional.of(new Birthday(birthday.get())) : Optional.empty();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses a single {@code Optional\u003cString\u003e tag} into an {@code Optional\u003cTag\u003e} if {@code tag} is present."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static Optional\u003cTag\u003e parseSingleTag(Optional\u003cString\u003e tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tag.isPresent() ? Optional.of(new Tag(tag.get())) : Optional.empty();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cTimetable\u003e} if {@code url} is present."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static Optional\u003cTimetable\u003e parseTimetable(Optional\u003cString\u003e url) throws IllegalValueException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return url.isPresent() ? Optional.of(new Timetable(url.get())) : Optional.empty();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 8,
      "CindyTsai1": 10,
      "nbriannl": 7,
      "April0616": 45,
      "-": 98
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * and returns an RemarkCommand object for execution."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark \u003d new Remark(argMultimap.getValue(PREFIX_REMARK).orElse(\"\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 30,
      "-": 10
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.UniqueCommandList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Suggest user input command"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private UniqueCommandList list;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses the given {@code String} of commandWord in the context of the SuggestCommand"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * and returns an SuggestCommand object for execution."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or if a suggested spelling is found"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public SuggestCommand parse (String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        list \u003d new UniqueCommandList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        TreeSet\u003cString\u003e possibleCommand \u003d list.getPossibleCommandList(commandWord);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d list.getCommandList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (String command: possibleCommand) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (commandList.contains(command)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return new SuggestCommand(command);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 31,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddressBook using the Persons and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            assert false : \"AddressBooks should not have duplicate persons\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(persons);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Person newPerson \u003d new Person(p);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(newPerson);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(newPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncMasterTagListWith(Person)"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedReadOnlyPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(editedReadOnlyPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(editedPerson);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that every tag in this person:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - exists in the master list {@link #tags}"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - points to a Tag object in the master list"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    private void syncMasterTagListWith(Person person) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        person.setTags(correctTagReferences);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that every tag in these persons:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - exists in the master list {@link #tags}"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - points to a Tag object in the master list"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @see #syncMasterTagListWith(Person)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    private void syncMasterTagListWith(UniquePersonList persons) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.forEach(this::syncMasterTagListWith);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Checks if the master list {@link #tags} has every tag being used."
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @return true if all tags in the master list is being used by a person"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean hasAllTagsInUse () {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        HashSet\u003cTag\u003e masterSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            masterSet.addAll(person.getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return masterSet.containsAll(tags.toSet());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  Gets the tags in the master list {@link #tags} that is not being used"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @return {@code Set\u003cTag\u003e} of Tags not being used by any person"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @see #hasAllTagsInUse()"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public Set\u003cTag\u003e getUnusedTags () {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        HashSet\u003cTag\u003e actualSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            actualSet.addAll(person.getTags());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e masterSet \u003d tags.toSet();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        masterSet.removeAll(actualSet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return masterSet;"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return persons.remove(key);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes {@code keys} from this {@code AddressBook}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws PersonNotFoundException if one of the {@code keys} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean removePersons(ArrayList\u003cReadOnlyPerson\u003e keys) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson key : keys) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "            persons.remove(key);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    //// tag-level operations"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Removes {@code tag} from this {@code AddressBook}."
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if the {@code tag} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean removeTag(Tag tag) throws TagNotFoundException {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (tags.remove(tag)) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 41,
      "April0616": 19,
      "-": 185
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Show map of the given person **/"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void showMapOf(ReadOnlyPerson person);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Show direction to the given person from a given address **/"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void showDirectionsTo(ReadOnlyPerson target, Address address);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /** Deletes the given list of persons. */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Deletes the specified tag from everyone in the address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws DuplicatePersonException if deleting a tag from the person causes the person to be equivalent to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      another existing person in the list"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws PersonNotFoundException if unable able to find a person in the list when iterating through"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      all the persons"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if {@code tag} could not be found in the list."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Deletes the specified tag from everyone in the address book"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws DuplicatePersonException if updating a tag for the person causes the person to be equivalent to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      another existing person in the list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws PersonNotFoundException if unable to find a person in the list when iterating through"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      all the persons"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if {@code tag} could not be found in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Checks if the master list of tags in the address book has every tag being used */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void checkMasterTagListHasAllTagsUsed ();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 35,
      "April0616": 5,
      "-": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.MasterTagListHasAnUnusedTagEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.UniqueTagList.DuplicateTagException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Raises an event to indicate a tag in the master list of tags is unused*/"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void indicateMasterTagListHasAnUnusedTag () {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new MasterTagListHasAnUnusedTagEvent(addressBook.getUnusedTags()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void showMapOf(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new PersonAddressDisplayMapEvent(person));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void showDirectionsTo(ReadOnlyPerson target, Address address) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new PersonAddressDisplayDirectionsEvent(target, address));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public synchronized void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        addressBook.removePersons(targets);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void checkMasterTagListHasAllTagsUsed () {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!addressBook.hasAllTagsInUse()) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            indicateMasterTagListHasAnUnusedTag();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public synchronized void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        addressBook.removeTag(tag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (int i \u003d 0; i \u003c addressBook.getPersonList().size(); i++) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ReadOnlyPerson oldPerson \u003d addressBook.getPersonList().get(i);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Person newPerson \u003d new Person(oldPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(newPerson.getTags());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            newTags.remove(tag);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            newPerson.setTags(newTags);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            addressBook.updatePerson(oldPerson, newPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        addressBook.removeTag(oldTag);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (int i \u003d 0; i \u003c addressBook.getPersonList().size(); i++) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ReadOnlyPerson oldPerson \u003d addressBook.getPersonList().get(i);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Person newPerson \u003d new Person(oldPerson);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(newPerson.getTags());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (newTags.remove(oldTag)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                newTags.add(newTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                newPerson.setTags(newTags);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                addressBook.updatePerson(oldPerson, newPerson);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            addressBook.addTag(newTag);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (DuplicateTagException dpe) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            //do nothing. It\u0027s perfectly fine if the new tag already exists in the address book. Enabled merge"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 77,
      "April0616": 8,
      "-": 122
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Birthday.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Represents a Person\u0027s birthday in the address book."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            \"Person\u0027s birthday should be in the format of DDMMYYYY, and it should not be blank\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_VALIDATION_REGEX \u003d \"\\\\d{2}\\\\d{2}\\\\d{4}\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"ddMMyyyy\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Validates given birthday."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws IllegalValueException if given birthday string is invalid."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public Birthday(String birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (!isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.date \u003d birthday;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Returns true if a given string is a valid person birthday."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                df.setLenient(false);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                df.parse(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 this.date.equals(((Birthday) other).date)); // state check"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 74,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d trimmedEmail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid person email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidGender(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Person gender should be a string of either \u0027Male\u0027, \u0027Female\u0027 or \u0027M\u0027, \u0027F\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_VALIDATION_WORD1 \u003d \"Male\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_VALIDATION_WORD2 \u003d \"Female\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Validates given gender."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * If gender string is \u0027Male\u0027 or \u0027Female\u0027, it remains the same."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Converts \u0027M\u0027 into \u0027Male\u0027, \u0027F\u0027 into \u0027Female\u0027."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if given gender string is invalid."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Gender(String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (trimmedGender.equals(\"M\")) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "            trimmedGender \u003d \"Male\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (trimmedGender.equals(\"F\")) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            trimmedGender \u003d \"Female\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isValidGender(trimmedGender)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d trimmedGender;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns if a given string is a valid person gender."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidGender(String test) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return test.equals(GENDER_VALIDATION_WORD1) || test.equals(GENDER_VALIDATION_WORD2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 48,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents a Person\u0027s Matriculation Number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNo(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class MatricNo {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_MATRIC_NO_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Person matric number should be a 9-character string starting with \u0027A or a\u0027 and ending with a letter\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_VALIDATION_REGEX \u003d \"([Aa])(\\\\d{7})([a-zA-Z])\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Validates given matricNo."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if given matricNo string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public MatricNo(String matricNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedMatricNo \u003d matricNo.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isValidMatricNo(trimmedMatricNo)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d trimmedMatricNo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns if a given string is a valid person matricNo."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidMatricNo(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //return test.matches(MATRIC_NO_VALIDATION_REGEX) \u0026\u0026 test.length() \u003d\u003d 9;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return test.matches(MATRIC_NO_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns true if two matric numbers are the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * \u0027A0162533K\u0027 equals \u0027a0162533k\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof MatricNo // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.toUpperCase().equals(((MatricNo) other).value.toUpperCase())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 46,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cName\u003e name;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cGender\u003e gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cMatricNo\u003e matricNo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cPhone\u003e phone;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ObjectProperty\u003cTimetable\u003e timetable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private ObjectProperty\u003cBirthday\u003e birthday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cUniqueTagList\u003e tags;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Person(Name name, Gender gender, MatricNo matricNo, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                  Timetable timetable, Remark remark, Set\u003cTag\u003e tags, Birthday birthday) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.gender \u003d new SimpleObjectProperty\u003c\u003e(gender);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.matricNo \u003d new SimpleObjectProperty\u003c\u003e(matricNo);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable \u003d new SimpleObjectProperty\u003c\u003e(timetable);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a copy of the given ReadOnlyPerson."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this(source.getName(), source.getGender(), source.getMatricNo(), source.getPhone(), source.getEmail(),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                source.getAddress(), source.getTimetable(), source.getRemark(), source.getTags(), source.getBirthday());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name.set(requireNonNull(name));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cName\u003e nameProperty() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.gender.set(requireNonNull(gender));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cGender\u003e genderProperty() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender.get();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setMatricNo(MatricNo matricNo) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.matricNo.set(requireNonNull(matricNo));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cMatricNo\u003e matricNoProperty() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public MatricNo getMatricNo() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo.get();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone.set(requireNonNull(phone));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cPhone\u003e phoneProperty() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.get();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email.set(requireNonNull(email));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cEmail\u003e emailProperty() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.get();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address.set(requireNonNull(address));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cAddress\u003e addressProperty() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.get();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void setTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable.set(requireNonNull(timetable));"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ObjectProperty\u003cTimetable\u003e timetableProperty() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Timetable getTimetable() {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable.get();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark.set(requireNonNull(remark));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cRemark\u003e remarkProperty() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remark.get();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.get().toSet());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in the argument tag set."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.set(new UniqueTagList(replacement));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.birthday.set(requireNonNull(birthday));"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday.get();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return Objects.hash(name, gender, matricNo, phone, email, address, timetable, tags, birthday);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsText();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 14,
      "CindyTsai1": 19,
      "April0616": 53,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cName\u003e nameProperty();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cGender\u003e genderProperty();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    Gender getGender();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cMatricNo\u003e matricNoProperty();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    MatricNo getMatricNo();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cPhone\u003e phoneProperty();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cEmail\u003e emailProperty();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cAddress\u003e addressProperty();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    ObjectProperty\u003cTimetable\u003e timetableProperty();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    Timetable getTimetable();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cRemark\u003e remarkProperty();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    Remark getRemark();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    ObjectProperty\u003cBirthday\u003e birthdayProperty();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    Birthday getBirthday();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both have the same state. (interfaces cannot override .equals)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getGender().equals(this.getGender())"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getMatricNo().equals(this.getMatricNo())"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 other.getTimetable().equals(this.getTimetable())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 other.getRemark().equals(this.getRemark()))"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 other.getBirthday().equals(this.getBirthday());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsText() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\" Gender: \")"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\" Matric No.: \")"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getMatricNo())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Phone: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Email: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Address: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .append(\" Birthday: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .append(\" Timetable: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .append(getTimetable())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\" Remark: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(\" Tags: \");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 6,
      "CindyTsai1": 6,
      "April0616": 15,
      "-": 54
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents the remark of a person in the address book."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_REMARK_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Person remarks can take any values, including blank\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 16,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/Timetable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseUrl;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a person\u0027s timetable in the address book"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_ODD \u003d 0;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_EVEN \u003d 1;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_BOTH \u003d -1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_MONDAY \u003d 0;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_TUESDAY \u003d 1;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_WEDNESDAY \u003d 2;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_THURSDAY \u003d 3;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_FRIDAY \u003d 4;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_URL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            \"Timetable URLs should be a valid shortened NUSMods URL\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_SHORT_URL \u003d \"Invalid shortened URL provided\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String NUSMODS_SHORT \u003d \"modsn.us\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String URL_HOST_REGEX \u003d \"\\\\/\\\\/.*?\\\\/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final TimetableInfo timetable;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Timetable(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!isValidUrl(trimmedUrl)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.value \u003d trimmedUrl;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable \u003d parseUrl(trimmedUrl);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns if a url is a valid NUSMods url"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static boolean isValidUrl(String test) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(URL_HOST_REGEX).matcher(test);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String hostName \u003d matcher.group()"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .substring(2, matcher.group().length() - 1);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return hostName.equals(NUSMODS_SHORT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if a timeslot specified has a lesson"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String weekType, String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable.doesSlotHaveLesson(weekType, day, timing);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                || (other instanceof Timetable // instanceof handles nulls"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 this.value.equals(((Timetable) other).value)); // state check"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 79,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseStartEndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a single day in a timetable"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableDay {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int ARRAY_NUM_TIMESLOTS \u003d 32;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableSlot[] slots;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableDay() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        slots \u003d new TimetableSlot[ARRAY_NUM_TIMESLOTS];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_TIMESLOTS; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            slots[i] \u003d new TimetableSlot();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Sets all slots between two timings to have lessons"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String startTime, String endTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int startTimeIndex \u003d parseStartEndTime(startTime);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int endTimeIndex \u003d parseStartEndTime(endTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d startTimeIndex; i \u003c endTimeIndex; i++) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            slots[i].setLesson();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return slots[parseStartEndTime(timing)].hasLesson();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableSlot getTimetableSlot(int index) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return slots[index];"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableDay)) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_TIMESLOTS; i++) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.slots[i].equals(((TimetableDay) other).getTimetableSlot(i))) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 59,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseWeekType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_BOTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_EVEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_ODD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Fully represents all information about a person\u0027s timetable slots"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableInfo {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int ARRAY_NUM_EVEN_ODD \u003d 2;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableWeek[] timetable;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableInfo() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable \u003d new TimetableWeek[ARRAY_NUM_EVEN_ODD];"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_EVEN_ODD; i++) {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[i] \u003d new TimetableWeek();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if a specific slot has a lesson"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String weekType, String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int weekIndex \u003d parseWeekType(weekType);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (weekIndex !\u003d WEEK_ODD \u0026\u0026 weekIndex !\u003d WEEK_EVEN) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(\"Please specify a week type!\");"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable[weekIndex].doesSlotHaveLesson(day, timing);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Updates the timetable using lesson information provided"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String weekType, String day, String startTime, String endTime)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int weekIndex \u003d parseWeekType(weekType);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (weekIndex \u003d\u003d WEEK_BOTH) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[WEEK_ODD].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[WEEK_EVEN].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[weekIndex].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableWeek getWeek(int weekIndex) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable[weekIndex];"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableInfo)) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_EVEN_ODD; i++) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.timetable[i].equals(((TimetableInfo) other).getWeek(i))) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 71,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a single slot in a timetable"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableSlot {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private boolean hasLesson;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableSlot() {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.hasLesson \u003d false;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void setLesson() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        hasLesson \u003d true;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean hasLesson() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return hasLesson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                || (other instanceof TimetableSlot // instanceof handles nulls"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 this.hasLesson \u003d\u003d ((TimetableSlot) other).hasLesson());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 24,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableWeek.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseDay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a full timetable for a week"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableWeek {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int ARRAY_NUM_DAYS \u003d 5;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDay[] days;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableWeek() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        days \u003d new TimetableDay[ARRAY_NUM_DAYS];"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            days[i] \u003d new TimetableDay();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return days[parseDay(day)].doesSlotHaveLesson(timing);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String day, String startTime, String endTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        days[parseDay(day)].updateSlotsWithLesson(startTime, endTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDay getDay(int dayIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return days[dayIndex];"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableWeek)) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.days[i].equals(((TimetableWeek) other).getDay(i))) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 51,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric, and should not be blank\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given tag name."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if the given tag name string is invalid."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public Tag(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagName \u003d trimmedName;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tags that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports minimal set of list operations for the app\u0027s features."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Tag#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty TagList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueTagList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a UniqueTagList using given tags."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueTagList(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all tags in this list as a Set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This set is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e toSet() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the Tags in this list with those in the argument tag list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures every tag in the argument list exists in this object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void mergeFrom(UniqueTagList from) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(tag -\u003e !alreadyInside.contains(tag))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(internalList::add);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent Tag as the given argument."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Tag toAdd) throws DuplicateTagException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Removes a Tag from the list."
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if no such tag could be found in the list."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean remove(Tag toRemove) throws TagNotFoundException {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        final boolean tagFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!tagFoundAndDeleted) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tagFoundAndDeleted;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e asObservableList() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the element in this list is equal to the elements in {@code other}."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * The elements do not have to be in the same order."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equalsOrderInsensitive(UniqueTagList other) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(other.internalList);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicateTagException extends DuplicateDataException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicateTagException() {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 15,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class TagNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"Alex Yeoh\"), new Gender(\"Male\"), new MatricNo(\"A0162531N\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"87438807\"), new Email(\"alexyeoh@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 30 Geylang Street 29, #06-40\"), new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"\"), getTagSet(\"friends\"), new Birthday(\"23051997\")),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"Bernice Yu\"), new Gender(\"Male\"), new MatricNo(\"A0162541N\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"99272758\"), new Email(\"berniceyu@example.com\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 30 Lorong 3 Serangoon Gardens, #07-18\"),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"Likes to drink tea\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        getTagSet(\"colleagues\", \"friends\"), new Birthday(\"16021991\")),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"Charlotte Oliveiro\"), new Gender(\"Female\"), new MatricNo(\"A0163331N\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"93210283\"), new Email(\"charlotte@example.com\"),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 11 Ang Mo Kio Street 74, #11-04\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"\"), getTagSet(\"neighbours\"), new Birthday(\"18081993\")),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"David Li\"), new Gender(\"Male\"), new MatricNo(\"A0165231N\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"91031282\"), new Email(\"lidavid@example.com\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "                        new Address(\"Blk 436 Serangoon Gardens Street 26, #16-43\"),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"Likes to drink coffee\"), getTagSet(\"family\"), new Birthday(\"23091992\")),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"Irfan Ibrahim\"), new Gender(\"Male\"), new MatricNo(\"A0175531N\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"92492021\"), new Email(\"irfan@example.com\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 47 Tampines Street 20, #17-35\"), new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"\"), getTagSet(\"classmates\"), new Birthday(\"07121998\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new Person(new Name(\"Roy Balakrishnan\"), new Gender(\"Male\"), new MatricNo(\"A0155531K\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 45 Aljunied Street 85, #11-31\"), new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"CAP 5.0\"), getTagSet(\"colleagues\"), new Birthday(\"05111998\"))"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot be invalid\", e);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 7,
      "April0616": 20,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    String getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"_backUp.xml\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 5,
      "-": 92
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String matricNo;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String timetable;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        matricNo \u003d source.getMatricNo().value;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable \u003d source.getTimetable().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        birthday \u003d source.getBirthday().date;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Gender gender \u003d new Gender(this.gender);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final MatricNo matricNo \u003d new MatricNo(this.matricNo);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        final Timetable timetable \u003d new Timetable(this.timetable);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Remark remark \u003d new Remark(this.remark);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final Birthday birthday \u003d new Birthday(this.birthday);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return new Person(name, gender, matricNo, phone, email, address, timetable, remark, tags, birthday);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 5,
      "April0616": 12,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        File addressBookFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!addressBookFile.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(addressBookOptional);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        saveAddressBook(addressBook, filePath + \"_backup.xml\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 4,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void loadGoogleMap(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadPage(\"https://www.google.com.sg/maps/search/\" + person.getAddress());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void loadGoogleMapDirections(ReadOnlyPerson person, Address address) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadPage(\"https://www.google.com.sg/maps/dir/\" + address.toString() + \"/\" + person.getAddress());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadGoogleMap(event.person);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadGoogleMapDirections(event.person, event.address);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 20,
      "-": 64
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(), true));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 3,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InfoPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Container for both browser panel and person information panel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class InfoPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String FXML \u003d \"InfoPanel.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private PersonInfoOverview infoOverview;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StackPane infoOverviewPlaceholder;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public InfoPanel() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoOverview \u003d new PersonInfoOverview();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoOverviewPlaceholder.getChildren().add(infoOverview.getRoot());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoOverviewPlaceholder.toFront();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPlaceholder.toFront();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPlaceholder.toFront();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 41,
      "nbriannl": 2,
      "-": 23
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FxViewUtil;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MIN_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final int MIN_WIDTH \u003d 450;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private InfoPanel infoPanel;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StackPane infoPlaceholder;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private StackPane tagListPanelPlaceholder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        setIcon(ICON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowMinSize();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(getRoot());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPanel \u003d new InfoPanel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPlaceholder.getChildren().add(infoPanel.getRoot());"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getTagList());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagListPanelPlaceholder.getChildren().add(tagListPanel.getRoot());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logic.checkAllMasterListTagsAreBeingUsed();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the given image as the icon of the main window."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setIcon(String iconSource) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        FxViewUtil.setStageIcon(primaryStage, iconSource);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowMinSize() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setMinHeight(MIN_HEIGHT);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setMinWidth(MIN_WIDTH);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPanel.freeResources();"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "nbriannl": 8,
      "-": 214
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String[] COLORS \u003d {\"Crimson\", \"orange\", \"DarkSalmon\", \"LightSeaGreen\","
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "        \"RoyalBlue\", \"MediumPurple\", \"Teal\", \"Sienna\", \"HotPink\", \"MediumSeaGreen\","
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        \"DarkSlateBlue\"};"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final int NUM_COLORS \u003d COLORS.length;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static int colorIndex \u003d 0;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label matricNo;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label timetable;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        bindListeners(person);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets a random unused color for the new tagName, or returns the corresponding color of the old tagName"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the color of the tag"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!tagColors.containsKey(tagName)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "            tagColors.put(tagName, COLORS[colorIndex]);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "            updateColorIndex();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return tagColors.get(tagName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Updates the color index to pick a new color for the new tag."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static void updateColorIndex() {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (colorIndex \u003d\u003d NUM_COLORS - 1) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "            colorIndex \u003d 0;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "            colorIndex++;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     * Binds the individual UI elements to observe their respective {@code Person} properties"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that they will be notified of any changes."
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    private void bindListeners(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        name.textProperty().bind(Bindings.convert(person.nameProperty()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        gender.textProperty().bind(Bindings.convert(person.genderProperty()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        matricNo.textProperty().bind(Bindings.convert(person.matricNoProperty()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        address.textProperty().bind(Bindings.convert(person.addressProperty()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        email.textProperty().bind(Bindings.convert(person.emailProperty()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.textProperty().bind(Bindings.convert(person.timetableProperty()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.getChildren().clear();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "            initTags(person);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the tags for person list"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initTags(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: \" + getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "                tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        );"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "CindyTsai1": 3,
      "April0616": 55,
      "-": 83
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonInfoOverview.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * A UI component that displays a person\u0027s data on the main panel"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class PersonInfoOverview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String FXML \u003d \"PersonInfoOverview.fxml\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ReadOnlyPerson person;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label matricNo;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonInfoOverview() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.person \u003d null;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadDefaultPerson();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Loads the default person when the app is first started"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void loadDefaultPerson() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        name.setText(\"No person selected\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        gender.setText(\"\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        matricNo.setText(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        address.setText(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        birthday.setText(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        remark.setText(\"\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Updates info with person selected"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void loadPerson(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        name.textProperty().bind(Bindings.convert(person.nameProperty()));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        gender.textProperty().bind(Bindings.convert(person.genderProperty()));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        matricNo.textProperty().bind(Bindings.convert(person.matricNoProperty()));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        address.textProperty().bind(Bindings.convert(person.addressProperty()));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        email.textProperty().bind(Bindings.convert(person.emailProperty()));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.person);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 56,
      "CindyTsai1": 2,
      "April0616": 4,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (event.isError) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            setErrorStyle();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            setDefaultStyle();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void setDefaultStyle() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        resultDisplay.getStyleClass().remove(\"error\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void setErrorStyle() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cString\u003e style \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (style.contains(\"error\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        style.add(\"error\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 21,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StatusBar totalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public StatusBarFooter(String saveLocation, int totalPersons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        setTotalPersons(totalPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(\"./\" + saveLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void setTotalPersons(int totalPersons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Platform.runLater(() -\u003e this.totalPersons.setText(totalPersons + \" person(s) in address book\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.syncStatus.setText(status));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        setTotalPersons(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 8,
      "April0616": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.MasterTagListHasAnUnusedTagEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * An UI component that displays all the {@code Tags} in the {@code AddressBook} ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class TagListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static final String FXML \u003d \"TagListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ObservableList\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public TagListPanel (ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTags(tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //bindListeners(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void updateTagList (ObservableList\u003cTag\u003e newtagList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTags(newtagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Initializes the tags for tag list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void initTags (ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d tagList.stream().collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagSet.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tagLabel.setStyle(\"-fx-background-color: Gray \");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  Update the Tag List panel which has unused tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void updateTagListWithUnusedTag (ObservableList\u003cTag\u003e tagList, Set\u003cTag\u003e outdatedTags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d tagList.stream().collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTagsWithUnusedTags(outdatedTags, tagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Initializes the tags for a tag list which contains unused tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and gives a different color to distinguish unused tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void initTagsWithUnusedTags (Set\u003cTag\u003e outdatedTags, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagSet.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (outdatedTags.contains(tag)) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: LightCoral  \");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: Gray \");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent (AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        updateTagList(event.data.getTagList());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void handleMasterTagListHasUnusedTagEvent (MasterTagListHasAnUnusedTagEvent event) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        updateTagListWithUnusedTag(tagList, event.outdatedTags);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 85,
      "April0616": 1,
      "-": 19
    }
  },
  {
    "path": "src/test/java/guitests/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends AddressBookGuiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //clicking on info display should still open help"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        runCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String MATRIC_NO_FIELD_ID \u003d \"#matricNo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TIMETABLE_FIELD_ID \u003d \"#timetable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String REMARK_FIELD_ID \u003d \"#remark\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Label genderLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Label matricNoLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label addressLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final Label timetableLabel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Label remarkLabel;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private final Label birthdayLabel;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.genderLabel \u003d getChildNode(GENDER_FIELD_ID);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.matricNoLabel \u003d getChildNode(MATRIC_NO_FIELD_ID);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressLabel \u003d getChildNode(ADDRESS_FIELD_ID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetableLabel \u003d getChildNode(TIMETABLE_FIELD_ID);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remarkLabel \u003d getChildNode(REMARK_FIELD_ID);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.birthdayLabel \u003d getChildNode(BIRTHDAY_FIELD_ID);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String getGender() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return genderLabel.getText();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String getMatricNo() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNoLabel.getText();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddress() {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressLabel.getText();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public String getBirthday() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthdayLabel.getText();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getTimetable() {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetableLabel.getText();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String getRemark() {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remarkLabel.getText();"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "CindyTsai1": 7,
      "April0616": 21,
      "-": 71
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TOTAL_PERSONS_ID \u003d \"#totalPersons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final StatusBar totalPersonsNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.totalPersonsNode \u003d getChildNode(TOTAL_PERSONS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the text of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getTotalPersons() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return totalPersonsNode.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 10,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : UniFy\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/TimetableParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseUrl;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_INVALID_SHORT_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableParserUtilTest {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_URL \u003d \"https://www.google.com\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_URL_NOT_URL \u003d \"hello123\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_SHORT_URL \u003d \"http://modsn.us/abc\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_EMPTY \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_ALL_TYPES \u003d \"http://modsn.us/BkDgl\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_invalidUrl_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_URL);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_notUrl_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_URL_NOT_URL);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_invalidShortUrl_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_validUrlEmptyTimetable_success() throws Exception {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo emptyTimetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(emptyTimetable, parseUrl(VALID_URL_EMPTY));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_validUrl_success() throws Exception {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo emptyTimetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(emptyTimetable, parseUrl(VALID_URL_ALL_TYPES));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 55,
      "-": 12
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void showMapOf(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void showDirectionsTo(ReadOnlyPerson target, Address address) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException,"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                PersonNotFoundException, TagNotFoundException {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void checkMasterTagListHasAllTagsUsed () {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(new Person(person));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 18,
      "April0616": 4,
      "-": 182
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MATRIC_NO_AMY \u003d \"A0133331K\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MATRIC_NO_BOB \u003d \"A0162555J\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"07071997\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"08081998\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String VALID_TIMETABLE_AMY \u003d \"http://modsn.us/ljWdc\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String VALID_TIMETABLE_BOB \u003d \"http://modsn.us/0ECRP\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_REMARK_COFFEE \u003d \"like to drink coffee\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_REMARK_CAP \u003d \"CAP 5.0\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NO + VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NO + VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String TIMETABLE_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String TIMETABLE_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"male\u0026\"; // \u0027\u0026\u0027 not allowed in genders"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // missing \u0027A\u0027 at the start of the string in matric numbers"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String INVALID_MATRIC_NO_DESC \u003d \" \" + PREFIX_MATRIC_NO + \"30132222K\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_ADDRESS_DESC \u003d \" \" + PREFIX_ADDRESS; // empty string not allowed for addresses"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // \u0027/\u0027 not allowed in birthdays"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"23/05/1997\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String INVALID_TIMETABLE_DESC \u003d \" \" + PREFIX_TIMETABLE + \"https://www.google.com\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String INVALID_SHORT_URL_DESC \u003d \" \" + PREFIX_TIMETABLE + \"http://modsn.us/ABC\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Remark REMARK_COFFEE \u003d new Remark(VALID_REMARK_COFFEE);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Remark REMARK_CAP \u003d new Remark(VALID_REMARK_CAP);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showFirstPersonOnly(Model model) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        final String[] splitName \u003d person.getName().fullName.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(splitName[0])));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model.getFilteredPersonList().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "CindyTsai1": 12,
      "April0616": 22,
      "-": 122
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d deleteCommand.generateResultMsg(deletePersonList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validTagUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d Stream.of(new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(tagsToDelete);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_TAG_SUCCESS;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.deleteTag(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidTagUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e wrongTag \u003d Stream.of(new Tag(\"nonexistent\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(wrongTag);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e someWrongTags \u003d Stream.of(new Tag(\"wrongtag\"), new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand2 \u003d prepareCommand(someWrongTags);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand2, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d deleteCommand.generateResultMsg(deletePersonList);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validTagFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d Stream.of(new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(tagsToDelete);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d DeleteCommand.MESSAGE_DELETE_TAG_SUCCESS;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.deleteTag(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidTagFilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e wrongTag \u003d Stream.of(new Tag(\"nonexistent\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(wrongTag);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e someWrongTags \u003d Stream.of(new Tag(\"wrongtag\"), new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand2 \u003d prepareCommand(someWrongTags);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand2, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e firstSet \u003d Stream.of(new Tag(\"word\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e secondSet \u003d Stream.of(new Tag(\"other\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e thirdSet \u003d Stream.of(new Tag(\"multiple\"), new Tag(\"words\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommandTags \u003d new DeleteCommand(firstSet);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteSecondCommandTags \u003d new DeleteCommand(secondSet);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteThirdCommandTags \u003d new DeleteCommand(thirdSet);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommandTags.equals(deleteFirstCommandTags));"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommandTagCopy \u003d new DeleteCommand(firstSet);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommandTags.equals(deleteFirstCommandTagCopy));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(1));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags \u003d\u003d null);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(deleteSecondCommandTags));"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(deleteThirdCommandTags));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code DeleteCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns a {@code DeleteCommand} with the parameter {@code tagSet}."
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private DeleteCommand prepareCommand(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(tagSet);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model.getFilteredPersonList().isEmpty();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 80,
      "April0616": 9,
      "-": 131
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_NONEXISTENT_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_unfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag oldTag \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TAG_SUCCESS, oldTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag oldTag \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_TAG_SUCCESS, oldTag);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_invalidTagUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag invalidTag \u003d new Tag(\"idontevenexistlolololol\");"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(invalidTag, newTag);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_invalidTagFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag invalidTag \u003d new Tag(\"idontevenexistlolololol\");"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(invalidTag, newTag);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        final EditCommand standardCommandForTags \u003d new EditCommand(new Tag(\"old\"), new Tag(\"new\"));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(standardCommandForTags.equals(new EditCommand(new Tag(\"old\"), new Tag(\"new\"))));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(standardCommandForTags.equals(standardCommandForTags));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(null));"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different old tag -\u003e return false"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"different\"), new Tag(\"new\"))));"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different new tag -\u003e return false"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"old\"), new Tag(\"different\"))));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different everything -\u003e return false"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"absolutely\"), new Tag(\"different\"))));"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns an {@code EditCommand} for person with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(index, descriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns an {@code EditCommand} for tag with parameters {@code oldTag} and {@code newTag}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private EditCommand prepareCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 3,
      "nbriannl": 67,
      "April0616": 5,
      "-": 197
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different matricNo -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMatricNo(VALID_MATRIC_NO_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //different birthday -\u003e returns false"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 4,
      "April0616": 6,
      "-": 63
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GMapsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code GMapsCommand}."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandTest {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_SELECT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showMapOf(personToFind);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(gMapsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_SELECT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showMapOf(personToFind);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(gMapsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexValidAddressUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showDirectionsTo(personToFind, address);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexValidAddressFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showDirectionsTo(personToFind, address);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address1 \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address2 \u003d new Address(\"NTU\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndex \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithDiffIndex \u003d new GMapsCommand(INDEX_SECOND_PERSON, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexAndAddress \u003d new GMapsCommand(INDEX_FIRST_PERSON, address1);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexAndDiffAddress \u003d new GMapsCommand(INDEX_FIRST_PERSON, address2);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithDiffIndexAndDiffAddress \u003d new GMapsCommand(INDEX_SECOND_PERSON, address2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(commandWithIndex.equals(commandWithIndex));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexCopy \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(commandWithIndex.equals(commandWithIndexCopy));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex \u003d\u003d null);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different index or address -\u003e returns false"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithDiffIndex));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithIndexAndAddress));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithIndexAndDiffAddress));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithDiffIndexAndDiffAddress));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns a {@code GMapsCommand} with the parameter {@code index}, and {@code address}."
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private GMapsCommand prepareCommand(Index index, Address address) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gmapsCommand \u003d new GMapsCommand(index , address);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        gmapsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return gmapsCommand;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model.getFilteredPersonList().isEmpty();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 109,
      "April0616": 4,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_CAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_COFFEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_addRemark_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withRemark(\"remark example\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_deleteRemark_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedPerson.setRemark(new Remark(\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "               .withRemark(\"Some remark\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"Some remark\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addFirstPersonCoffeeRemark \u003d new RemarkCommand(INDEX_FIRST_PERSON, REMARK_COFFEE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addFirstPersonCapRemark \u003d new RemarkCommand(INDEX_FIRST_PERSON, REMARK_CAP);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addSecondPersonCoffeeRemark \u003d new RemarkCommand(INDEX_SECOND_PERSON, REMARK_COFFEE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonCoffeeRemark.equals(addFirstPersonCoffeeRemark));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonCapRemark.equals(addFirstPersonCapRemark));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCapRemark \u003d\u003d null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCoffeeRemark.equals(addSecondPersonCoffeeRemark));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCoffeeRemark.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private RemarkCommand prepareCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remarkCommand;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 119,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SuggestCommand}."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_suggest_success() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String command \u003d \"edit\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, command);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // assert that suggest command is executed"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            new SuggestCommand(command).execute();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 18,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // multiple matric numbers - last matric number accepted"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_AMY + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // multiple birthdays - last birthday accepted"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTimetable(VALID_TIMETABLE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTimetable(VALID_TIMETABLE_AMY).withTags().build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // missing gender prefix"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + VALID_GENDER_BOB"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // missing matricNo prefix"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_MATRIC_NO_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing phone prefix"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + VALID_PHONE_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing email prefix"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + VALID_EMAIL_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing address prefix"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // missing timetable prefix"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + VALID_TIMETABLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // missing birthday prefix"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_BIRTHDAY_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_GENDER_BOB"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_MATRIC_NO_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_BIRTHDAY_BOB + VALID_TIMETABLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_GENDER_DESC"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid matricNo"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_MATRIC_NO_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + INVALID_ADDRESS_DESC"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid timetable"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + INVALID_TIMETABLE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_BIRTHDAY_DESC + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + INVALID_ADDRESS_DESC + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 12,
      "CindyTsai1": 67,
      "April0616": 78,
      "-": 97
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Remark remark \u003d new Remark(\"Likes to drink tea.\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + \" \" + remark.value);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                                    + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_list() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_add() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_SECONDARY + \" \""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_clear() throws Exception {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SECONDARY) instanceof ClearCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SECONDARY + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_delete() throws Exception {"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                DeleteCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryOne_edit() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_SECONDARY_ONE + \" \""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryTwo_edit() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_SECONDARY_TWO + \" \""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_exit() throws Exception {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_SECONDARY) instanceof ExitCommand);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_SECONDARY + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_find() throws Exception {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                FindCommand.COMMAND_SECONDARY + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_history() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SECONDARY) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SECONDARY + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryOne_list() throws Exception {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_ONE) instanceof ListCommand);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_ONE + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryTwo_list() throws Exception {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_TWO) instanceof ListCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_TWO + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_select() throws Exception {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                SelectCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 73,
      "April0616": 22,
      "-": 215
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsOnePerson_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersons_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1, 2, 3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsNoWhiteSpace_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1,3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsDuplicatedIndexes_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1, 1, 3, 3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsManyWhiteSpaces_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"  1  ,  2  , 3 \", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_invalidArgsMultiplePersonsNoComma_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"  1 2 3 \","
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_invalidArgsMultiplePersonsManyWhiteSpacesLessComma_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"  1, 2 3 \","
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validArgsTag_returnsDeleteCommand() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d Stream.of(new Tag(\"tag\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" t/tag\", new DeleteCommand(expectedTagSet));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet2 \u003d Stream.of(new Tag(\"tag\"), new Tag(\"tags\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" t/tag t/tags\", new DeleteCommand(expectedTagSet2));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidArgsTag_failure() throws Exception {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/*\","
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/tag t/*\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/* t/*\","
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"0, -1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"-1, -2, -3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 23,
      "April0616": 62,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Only Edit Command on a Person considers the preamble."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  The preamble is the text before the first valid prefix, which in this case, is the index."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRIC_NO_DESC, MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid matricNo"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_ADDRESS_DESC, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // invalid address"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS); // invalid birthday"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender followed by valid matricNo"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC + MATRIC_NO_DESC_AMY, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid gender followed by invalid gender"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + GENDER_DESC_BOB + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid matricNo followed by invalid matricNo"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + MATRIC_NO_DESC_BOB + INVALID_MATRIC_NO_DESC,"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_GENDER_DESC + INVALID_MATRIC_NO_DESC"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_PHONE_AMY + INVALID_BIRTHDAY_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parseTagEdit_invalidValue_failure() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ new/\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ok new/\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ new/ok\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/* new/*\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/* new/ok\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parseTagEdit_validValue_sucess() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(new Tag(\"old\"), new Tag(\"new\"));"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" old/old new/new \", expectedCommand);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + GENDER_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withMatricNo(VALID_MATRIC_NO_BOB)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // matricNo"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMatricNo(VALID_MATRIC_NO_AMY).build();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + PHONE_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + TAG_DESC_FRIEND + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 23,
      "nbriannl": 19,
      "April0616": 49,
      "-": 200
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GMapsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GMapsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private GMapsCommandParser parser \u003d new GMapsCommandParser();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndexValidAddress_failure() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1 a/NUS\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndexInvalidAddress_failure() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1 a/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"a/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidAddress_failure() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"1 a/ \", Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validValueWithoutAddress_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand expectedCommand \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" 1\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validValueWithAddress_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand expectedCommand \u003d new GMapsCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" 1 a/NUS\", expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 53,
      "-": 11
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"female\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String INVALID_MATRIC_NO \u003d \"45663445K\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_TIMETABLE \u003d \"https://www.google.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String VALID_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String VALID_MATRIC_NO \u003d \"A0162533K\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIMETABLE \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseName(null);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseName(Optional.of(INVALID_NAME));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValue_returnsName() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, actualName.get());"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseGender(null);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseGender(Optional.of(INVALID_GENDER));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(ParserUtil.parseGender(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_validValue_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Optional\u003cGender\u003e actualGender \u003d ParserUtil.parseGender(Optional.of(VALID_GENDER));"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedGender, actualGender.get());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseMatricNo(null);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseMatricNo(Optional.of(INVALID_MATRIC_NO));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(ParserUtil.parseMatricNo(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_validValue_returnsMatricNo() throws Exception {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "        MatricNo expectedMatricNo \u003d new MatricNo(VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Optional\u003cMatricNo\u003e actualMatricNo \u003d ParserUtil.parseMatricNo(Optional.of(VALID_MATRIC_NO));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedMatricNo, actualMatricNo.get());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parsePhone(null);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValue_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, actualPhone.get());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseAddress(null);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValue_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, actualAddress.get());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseEmail(null);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValue_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, actualEmail.get());"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ParserUtil.parseTimetable(null);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ParserUtil.parseTimetable(Optional.of(INVALID_TIMETABLE));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(ParserUtil.parseTimetable(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_validValue_returnsTimetable() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable expectedTimetable \u003d new Timetable(VALID_TIMETABLE);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Optional\u003cTimetable\u003e actualTimetable \u003d ParserUtil.parseTimetable(Optional.of(VALID_TIMETABLE));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedTimetable, actualTimetable.get());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 26,
      "April0616": 52,
      "-": 196
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_COFFEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_COFFEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String REMARK_EMPTY \u003d \" \" + PREFIX_REMARK + \" \";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_remarkSpecified_success() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //have remarks"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + REMARK_EMPTY + VALID_REMARK_COFFEE;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //no remarks"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(targetIndex, new Remark(\"\"));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_noFieldSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 34,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_validCommand_returnsSuggestCommand() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, \"edit\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character at the back of the commandWord"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"editt\", expectedMessage);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character at the front of the commandWord"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"eedit\", expectedMessage);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character in the middle of the commandWord"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"ediit\", expectedMessage);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character at the back of the commandWord"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edi\", expectedMessage);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character at the front of the commandWord"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"dit\", expectedMessage);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character in the middle of the commandWord"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edt\", expectedMessage);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character in the middle of the commandWord"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"eidt\", expectedMessage);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character at the back of the commandWord"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edti\", expectedMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character at the front of the commandWord"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"deit\", expectedMessage);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character in the middle of the commandWord"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edet\", expectedMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character at the back of the commandWord"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edip\", expectedMessage);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character at the front of the commandWord"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"adit\", expectedMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_invalidCommand_returnsfailure() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //suggested command not found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"amend\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Asserts that the parsing of {@code command} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String command, String expectedMessage) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            parser.parse(command).execute();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 68,
      "-": 10
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"\")); // empty string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"1324\")); // less than 8 digits"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"dgd\")); // non-numeric"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"23/05/1997\")); // invalid slash"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"23 05 1997\")); // invalid space"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"99999999\")); //invalid dates"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"00000000\")); //invalid dates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // valid birthdays"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"23051997\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 18,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid Gender"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\"\")); // empty string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\" \")); // spaces only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\"apple\")); // unrelated description"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidGender(\"male\")); // first letter not uppercase"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid Gender"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Male\")); // GENDER_VALIDATION_WORD1"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidGender(\"Female\")); // GENDER_VALIDATION_WORD2"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 22,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatricNoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class MatricNoTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidMatricNo() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid MatricNo numbers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"\")); // empty string"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\" \")); // spaces only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A016253K\")); // not exactly 9-digit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"40162533J\")); // not start with \u0027A\u0027 but a number"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"B0162533J\")); // not start with \u0027A\u0027 but a letter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A90p3041F\")); // alphabets within 2nd-8th digits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A014 2333H\")); // spaces within digits"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A01423332\")); // not end with a letter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid MatricNo numbers"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0172631H\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0112331K\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"a0172631h\")); //case-insensitive"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0172631h\")); //case-insensitive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"a0172631H\")); //case-insensitive"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 27,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark likeCoffeeRemark \u003d new Remark(\"Likes to drink coffee.\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark capFiveRemark \u003d new Remark(\"Got CAP 5.0.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(likeCoffeeRemark.equals(likeCoffeeRemark));"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark copy \u003d new Remark(capFiveRemark.value);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(capFiveRemark.equals(copy));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(capFiveRemark.equals(1));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(capFiveRemark \u003d\u003d null);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(likeCoffeeRemark.equals(capFiveRemark));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 29,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimetableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_WEEK_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableSlot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_DAY \u003d \"Dayday\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_WEEK_TYPE \u003d \"No Week\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_TIME \u003d \"080q\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_EMPTY \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL \u003d \"http://modsn.us/TDSEt\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_TYPE \u003d \"Odd Week\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_DAY \u003d \"Monday\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIME \u003d \"0800\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIME_CHECK \u003d \"0900\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_DAY_CHECK \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_TYPE_CHECK \u003d \"Even Week\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_EVERY \u003d \"Every Week\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void isValidUrl() throws Exception {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid urls"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"\")); // empty string"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\" \")); // spaces only"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"abcde12345\")); // string"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"https://www.youtube.com/\")); // other url"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"http://modsn.us\")); // invalid request"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"http://mods.us/TDSEt\")); // invalid domain name"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // valid urls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(\"http://modsn.us/TEt\")); // bad short url, but still valid"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(VALID_URL)); // valid url"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(VALID_URL_EMPTY)); // valid url, empty timetable"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlot() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableSlot slotToUpdate \u003d new TimetableSlot();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        slotToUpdate.setLesson();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(slotToUpdate, new TimetableSlot());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableDay() throws Exception {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableDay dayToUpdate \u003d new TimetableDay();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(dayToUpdate, dayToUpdate);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", dayToUpdate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        dayToUpdate.updateSlotsWithLesson(VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(dayToUpdate, new TimetableDay());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(dayToUpdate.doesSlotHaveLesson(VALID_TIME));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(dayToUpdate.doesSlotHaveLesson(VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableWeek() throws Exception {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableWeek weekToUpdate \u003d new TimetableWeek();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(weekToUpdate, weekToUpdate);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", weekToUpdate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        weekToUpdate.updateSlotsWithLesson(VALID_DAY, VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(weekToUpdate, new TimetableWeek());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(weekToUpdate.doesSlotHaveLesson(VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(weekToUpdate.doesSlotHaveLesson(VALID_DAY_CHECK, VALID_TIME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(weekToUpdate.doesSlotHaveLesson(VALID_DAY, VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableInfo() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo timetableToUpdate \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(timetableToUpdate, timetableToUpdate);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", timetableToUpdate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableToUpdate.updateSlotsWithLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(timetableToUpdate, new TimetableInfo());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE_CHECK, VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY_CHECK, VALID_TIME));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidWeekType_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_WEEK_TYPE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(INVALID_WEEK_TYPE, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_validEveryWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(\"Please specify a week type!\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_EVERY, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidDay_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, INVALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidTime_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, INVALID_TIME);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_validQuery_success() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 140,
      "-": 5
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor.setMatricNo(person.getMatricNo());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        descriptor.setTimetable(person.getTimetable());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        descriptor.setBirthday(person.getBirthday());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"name is expected to be unique.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseGender(Optional.of(gender)).ifPresent(descriptor::setGender);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"gender is expected to be unique.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code MatricNo} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public EditPersonDescriptorBuilder withMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseMatricNo(Optional.of(matricNo)).ifPresent(descriptor::setMatricNo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"matric number is expected to be unique.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"phone is expected to be unique.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"email is expected to be unique.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Sets the {@code Timetable} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public EditPersonDescriptorBuilder withTimetable(String url) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ParserUtil.parseTimetable(Optional.of(url)).ifPresent(descriptor::setTimetable);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"tags are expected to be unique.\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            ParserUtil.parseBirthday(Optional.of(birthday)).ifPresent(descriptor::setBirthday);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "CindyTsai1": 13,
      "April0616": 24,
      "-": 111
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_MATRIC_NO \u003d \"A0134118K\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"23051997\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String DEFAULT_TIMETABLE_URL \u003d \"http://modsn.us/HXDrJ\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            Name defaultName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Gender defaultGender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "            MatricNo defaultMatricNo \u003d new MatricNo(DEFAULT_MATRIC_NO);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            Timetable defaultTimetable \u003d new Timetable(DEFAULT_TIMETABLE_URL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person \u003d new Person(defaultName, defaultGender, defaultMatricNo, defaultPhone, defaultEmail,"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    defaultAddress, defaultTimetable, defaultRemark, defaultTags, defaultBirthday);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Default person\u0027s values are invalid.\");"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(ReadOnlyPerson personToCopy) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d new Person(personToCopy);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setName(new Name(name));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"name is expected to be unique.\");"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"gender is expected to be unique.\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person.setMatricNo(new MatricNo(matricNo));"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"matric number is expected to be unique.\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.person.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setTags(SampleDataUtil.getTagSet(tags));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"tags are expected to be unique.\");"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setAddress(new Address(address));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"phone is expected to be unique.\");"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setEmail(new Email(email));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"email is expected to be unique.\");"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.person.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonBuilder withTimetable(String url) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.person.setTimetable(new Timetable(url));"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalArgumentException(\"timetable is expected to be unique.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 11,
      "CindyTsai1": 14,
      "April0616": 40,
      "-": 117
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        sb.append(PREFIX_MATRIC_NO + person.getMatricNo().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + person.getBirthday().date + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        sb.append(PREFIX_TIMETABLE + person.getTimetable().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 2,
      "April0616": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0172633J\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"85355255\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withTags(\"friends\").withBirthday(\"23051997\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0173333J\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withBirthday(\"06061996\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0185633J\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"07071997\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0162234J\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withBirthday(\"09091999\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0144433K\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"10102000\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0182342J\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"04041994\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0182323J\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"03031993\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withRemark(\"Likes to drink\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0132323W\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withBirthday(\"01011991\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0162530W\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withBirthday(\"02021992\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(VALID_GENDER_AMY).withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                assert false : \"not possible\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 19,
      "April0616": 14,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private PersonAddressDisplayMapEvent personAddressDisplayMapEventStub;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private PersonAddressDisplayDirectionsEvent personAddressDisplayDirectionsEventStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        personAddressDisplayMapEventStub \u003d new PersonAddressDisplayMapEvent(new Person(ALICE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        personAddressDisplayDirectionsEventStub \u003d new PersonAddressDisplayDirectionsEvent(new Person(ALICE),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Address(\"Blk 123 Yishun 61\"));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // associated web page of a person, should not be loaded"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        postNow(personAddressDisplayMapEventStub);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedGMapsUrl \u003d new URL("
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \"https://www.google.com.sg/maps/search/123,%20Jurong%20West%20Ave%206,%20?dg\u003ddbrw\u0026newdg\u003d1\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertEquals(expectedGMapsUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        postNow(personAddressDisplayDirectionsEventStub);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedGMapsDirectionsUrl \u003d new URL("
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \"https://www.google.com.sg/maps/dir/Blk%20123%20Yishun%2061/123,\""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        + \"%20Jurong%20West%20Ave%206,%20#08-111\");"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertEquals(expectedGMapsDirectionsUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "nbriannl": 22,
      "-": 50
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // changes made to Person reflects on card"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setName(ALICE.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setGender(ALICE.getGender());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setMatricNo(ALICE.getMatricNo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setAddress(ALICE.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setEmail(ALICE.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setPhone(ALICE.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            personWithTags.setTimetable(ALICE.getTimetable());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setRemark(ALICE.getRemark());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setTags(ALICE.getTags());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            personWithTags.setBirthday(ALICE.getBirthday());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "April0616": 3,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String RELATIVE_PATH \u003d \"./\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final Integer STUB_PERSON_TOTAL \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TOTAL_PERSONS_TEXT \u003d \" person(s) in address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, STUB_PERSON_TOTAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                STUB_PERSON_TOTAL + TOTAL_PERSONS_TEXT);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                STUB_PERSON_TOTAL + TOTAL_PERSONS_TEXT);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                        String expectedTotalPersons) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedTotalPersons, statusBarFooterHandle.getTotalPersons());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 10,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/testutil/GuiTestAssert.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * A set of assertion methods useful for writing GUI tests."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class GuiTestAssert {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getId(), actualCard.getId());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedCard.getGender(), actualCard.getGender());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedCard.getMatricNo(), actualCard.getMatricNo());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getAddress(), actualCard.getAddress());"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getEmail(), actualCard.getEmail());"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getName(), actualCard.getName());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getPhone(), actualCard.getPhone());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedCard.getTimetable(), actualCard.getTimetable());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedCard.getRemark(), actualCard.getRemark());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCard.getTags(), actualCard.getTags());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedCard.getBirthday(), actualCard.getBirthday());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCardDisplaysPerson(ReadOnlyPerson expectedPerson, PersonCardHandle actualCard) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getName().fullName, actualCard.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedPerson.getGender().value, actualCard.getGender());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedPerson.getMatricNo().value, actualCard.getMatricNo());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getPhone().value, actualCard.getPhone());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getEmail().value, actualCard.getEmail());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getAddress().value, actualCard.getAddress());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedPerson.getBirthday().date, actualCard.getBirthday());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedPerson.getTimetable().value, actualCard.getTimetable());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedPerson.getRemark().value, actualCard.getRemark());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPerson.getTags().stream().map(tag -\u003e tag.tagName).collect(Collectors.toList()),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                actualCard.getTags());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, ReadOnlyPerson... persons) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c persons.length; i++) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * in the correct order."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List\u003cReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(personListPanelHandle, persons.toArray(new ReadOnlyPerson[0]));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}."
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        int numberOfPeople \u003d personListPanelHandle.getListSize();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(size, numberOfPeople);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expected, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 2,
      "April0616": 6,
      "-": 73
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson toAdd \u003d AMY;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using alias,"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using secondary keyword,"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_SECONDARY + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using mixed case keyword,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"   \" + \"aDd\" + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail is a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(ReadOnlyPerson)"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except gender -\u003e added */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_BOB + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except matricNo -\u003e added */"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except timetable -\u003e added */"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e added */"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getFilteredPersonList().size()"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getPersonListPanel().isAnyCardSelected();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add to address book with shorthand alias -\u003e added */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(command, AMY);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add to address book with secondary keyword -\u003e added */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_SECONDARY + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(command, AMY);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: missing gender -\u003e rejected */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: missing matricNo -\u003e rejected */"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing phone -\u003e rejected */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing email -\u003e rejected */"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing address -\u003e rejected */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: missing timetable -\u003e rejected */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: missing birthday -\u003e rejected */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(command, String.format(SuggestCommand.MESSAGE_SUCCESS, \"add\"));"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_GENDER_DESC + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid matricNo -\u003e rejected */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + INVALID_MATRIC_NO_DESC + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(command, MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + INVALID_ADDRESS_DESC + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid timetable -\u003e rejected */"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(command, Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid short url -\u003e rejected */"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(command, Timetable.MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_BIRTHDAY_DESC + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "     * display box displays {@code expectedResultMessage} and the model related components equal to"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 34,
      "CindyTsai1": 75,
      "April0616": 74,
      "-": 236
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear non-empty address book with alias, command with leading spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * and trailing alphanumeric characters and spaces -\u003e cleared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear non-empty address book with secondary keyword, command with leading spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * and trailing alphanumeric characters and spaces -\u003e cleared"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_SECONDARY + \" ab12   \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear address book with alias -\u003e cleared */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear address book with secondary keyword-\u003e cleared */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: mixed case command word -\u003e cleared */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"ClEaR\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"claer\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"clear\"));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 12,
      "CindyTsai1": 5,
      "-": 110
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedResultMessage \u003d DeleteCommand.generateResultMsg(deletePersonList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: delete the first person in the list using alias,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"     \" + DeleteCommand.COMMAND_ALIAS + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: delete the first person in the list using secondary keyword,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"     \" + DeleteCommand.COMMAND_SECONDARY + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: delete the first person in the list using mixed case keyword,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"DelETE 1\", expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedResultMessage \u003d DeleteCommand.generateResultMsg(deletePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Invalid commands with aliases */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" -1\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Invalid commands with secondary keyword */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" 0\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" -1\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_SECONDARY + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_SECONDARY + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"Deleete\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"delete\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyPerson removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"targetPerson is retrieved from model.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedResultMessage \u003d DeleteCommand.generateResultMsg(deletePersonList);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 26,
      "CindyTsai1": 7,
      "April0616": 16,
      "-": 225
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_ADDRESS_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and alias, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_ALIAS + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and secondary keyword, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_SECONDARY_ONE + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and secondary keyword, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_SECONDARY_TWO + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit a person with new values same as existing values, using alias -\u003e edited */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit a person with new values same as existing values, using secondary keyword -\u003e edited */"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_SECONDARY_ONE + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB  + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_GENDER_DESC,"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid matricNo -\u003e rejected */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_MATRIC_NO_DESC,"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid address -\u003e rejected */"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_ADDRESS_DESC,"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "                Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid timetable -\u003e rejected */"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TIMETABLE_DESC,"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid short url -\u003e rejected */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_SHORT_URL_DESC,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card update accordingly depending on the card at"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 32,
      "CindyTsai1": 25,
      "nbriannl": 2,
      "April0616": 30,
      "-": 283
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: find multiple persons in"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: find multiple persons in address book using alias, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + FindCommand.COMMAND_ALIAS + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: find multiple persons in address book using secondary keyword,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e 2 persons found"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + FindCommand.COMMAND_SECONDARY + \" \" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Carl\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords -\u003e 2 persons found */"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Benson Daniel\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords in reversed order -\u003e 2 persons found */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 keywords with 1 repeat -\u003e 2 persons found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson Daniel\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find multiple persons in address book, 2 matching keywords and 1 non-matching keyword"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel Benson NonMatchingKeyWord\";"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" MeIeR\";"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: mixed case command word -\u003e 1 person found */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"FiNd Meier\";"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 0 persons found */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mei\";"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Meiers\";"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Mark\";"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find address of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find email of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" Daniel\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"fnid\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"find\"));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 19,
      "CindyTsai1": 5,
      "-": 197
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"SeLeCt 1\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the first card in the person list using alias, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the first card in the person list using secondary keyword,"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e selected"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + SelectCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the last card in the person list, using alias -\u003e selected */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d SelectCommand.COMMAND_ALIAS + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the last card in the person list, using secondary keyword -\u003e selected */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d SelectCommand.COMMAND_SECONDARY + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"salect\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"select\"));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the selected person, and the model related components equal to the current model."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar remain unchanged. The resulting"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card will be verified if the current selected card and the card at"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} are different."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 14,
      "CindyTsai1": 6,
      "-": 149
    }
  }
]
