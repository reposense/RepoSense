[
  {
    "path": "README.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "# UniFy"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:relfileprefix: docs/]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://travis-ci.org/CS2103AUG2017-W09-B1/main[image:https://travis-ci.org/CS2103AUG2017-W09-B1/main.svg?branch\u003dmaster[\"Build Status\"]]"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://ci.appveyor.com/project/zacharytang/main[image:https://ci.appveyor.com/api/projects/status/1kk36eq1wha8tcut?svg\u003dtrue[Build status]]"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://coveralls.io/github/CS2103AUG2017-W09-B1/main?branch\u003dmaster[image:https://coveralls.io/repos/github/CS2103AUG2017-W09-B1/main/badge.svg?branch\u003dmaster[Coverage Status]]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://www.codacy.com/app/zacharytang/main?utm_source\u003dgithub.com\u0026amp;utm_medium\u003dreferral\u0026amp;utm_content\u003dCS2103AUG2017-W09-B1/main\u0026amp;utm_campaign\u003dBadge_Grade)[image:https://api.codacy.com/project/badge/Grade/67e717e8e66245b9881839446b7fb464[Codacy Badge]]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::docs/images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::docs/images/UiDark.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::images/Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::images/UiDark.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "__Unifying your University Contact Information, and more. For You.__"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* This is a desktop Address Book application for University students, particularly those from NUS (National University of Singapore)."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Manage the many people you meet in University, keep track of your friends\u0027 Birthdays, view your friend\u0027s timetables, plus much more!"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Most of your user interactions are via command line, while there exists a GUI (Graphical User Interface)."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Site Map"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cUserGuide#, User Guide\u003e\u003e"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cDeveloperGuide#, Developer Guide\u003e\u003e"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cAboutUs#, About Us\u003e\u003e"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "* \u003c\u003cContactUs#, Contact Us\u003e\u003e"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d For Developers"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* This Java application is *written in OOP fashion*. The code base is *reasonably well-written* and *significantly big* (around 6 KLoC)."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Acknowledgements"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "* Some parts of this sample application were inspired by the excellent http://code.makery.ch/library/javafx-8-tutorial/[Java FX tutorial] by"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "_Marco Jakob_."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Source code is based on the  https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Licence : link:LICENSE[MIT]"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 8,
      "nbriannl": 11,
      "April0616": 2,
      "-": 24
    }
  },
  {
    "path": "docs/AboutUs.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d About Us"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":relfileprefix: team/"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "UniFy was developed by team W09-B1 +"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "We are a team based in the http://www.comp.nus.edu.sg[School of Computing, National University of Singapore]."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Project Team"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Fan Yuting"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::yuting.JPG[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://github.com/April0616[github]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://cs2103aug2017-w09-b1.github.io/main/team/April0616.html[portfolio]]"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "Responsibilities: UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Labayna Neil Brian Narido"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::nbriannl.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[http://github.com/nbriannl[github]]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://cs2103aug2017-w09-b1.github.io/main/team/nbriannl.html[Portfolio]]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Responsibilities: Model"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Tsai Yu Hsuan"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::cindytsai1.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[http://github.com/CindyTsai1[github]]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://cs2103aug2017-w09-b1.github.io/main/team/cindytsai1.html[Portfolio]]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Responsibilities: Storage"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Zachary Tang"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::zacharytang.jpg[width\u003d\"150\", align\u003d\"left\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://github.com/zacharytang[github]]"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "{empty}[https://cs2103aug2017-w09-b1.github.io/main/team/zacharytang.html[Portfolio]]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "Role: Developer +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Responsibilities: Logic"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 13,
      "CindyTsai1": 2,
      "nbriannl": 5,
      "April0616": 4,
      "-": 27
    }
  },
  {
    "path": "docs/DeveloperGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d UniFy - Developer Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "By: `Team W09-B1`      Since: `Aug 2017`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "Welcome to UniFy !"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "UniFy is a command-line application which provides a convenient way to store students\u0027 contact information. It is customised for NUS students, allowing them to efficiently manage their contact lists. This developer guide provides information that helps you to get started as a UniFy contributor, and aids you even if you are an experienced contributor."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The developer guide consists of the following sections."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#settingup[Setting up]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#design[Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#implementation[Implementation]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#testing[Testing]"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#devops[Dev Ops]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#appendixa[Appendices]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Setting up"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Prerequisites"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ". *JDK `1.8.0_60`* or later"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This app will only work with later versions of Java 8."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ". *IntelliJ* IDE"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "IntelliJ has Gradle and JavaFx plugins installed by default. +"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Please do not disable them. If you have disabled them, go to `File` \u003e `Settings` \u003e `Plugins` to re-enable them."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Setting up UniFy in your computer"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ". Fork this repo, and clone the fork to your computer"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ". Open IntelliJ (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project dialog first)"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ". Set up the correct JDK version for Gradle"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `Configure` \u003e `Project Defaults` \u003e `Project Structure`"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ".. Click `New...` and find the directory of the JDK"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Import Project`"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ". Locate the `build.gradle` file and select it. Click `OK`"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `Open as Project`"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ". Click `OK` to accept the default settings"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". Open your console and run the command `gradlew processResources` (Mac/Linux: `./gradlew processResources`). It should finish with the `BUILD SUCCESSFUL` message. +"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "This will generate all resources required by the application and tests."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Verifying the setup"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". Run the `seedu.address.MainApp`"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". Try out a few commands"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ". link:#testing[Run the tests] to ensure they all pass."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Doing configurations before writing code"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Configuring the coding style"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Our UniFy project follows https://github.com/oss-generic/process/blob/master/codingStandards/CodingStandard-Java.adoc[oss-generic coding standards]. IntelliJ\u0027s default style is mostly compliant with ours but it uses a different import order from ours. To rectify,"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ". Go to `File` \u003e `Settings...` (Windows/Linux), or `IntelliJ IDEA` \u003e `Preferences...` (macOS)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ". Select `Editor` \u003e `Code Style` \u003e `Java`"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ". Click on the `Imports` tab to set the order"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "* For `Class count to use import with \u0027\\*\u0027` and `Names count to use static import with \u0027*\u0027`: Set to `999` to prevent IntelliJ from contracting the import statements"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* For `Import Layout`: The order is `import static all other imports`, `import java.\\*`, `import javax.*`, `import org.\\*`, `import com.*`, then `import all other imports`. Add a `\u003cblank line\u003e` between each `import`"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Optionally, you can follow the \u003c\u003cUsingCheckstyle#, UsingCheckstyle.adoc\u003e\u003e document to configure Intellij to check style-compliance automatically as you write code."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Setting up Continuous Integration (CI)"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You would have to set up `Travis` to perform CI for your fork. You can check \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e to learn how to set it up."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Optionally, you can set up `AppVeyor` as a second CI (check \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e)."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Having both `Travis` and `AppVeyor` ensures your App works on both Unix-based platforms and Windows-based platforms (Travis is Unix-based and AppVeyor is Windows-based)"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Getting started with coding"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "When you are ready to start coding, you can get some sense of the overall design by reading the link:#architecture[Architecture] section."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Design"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Architecture"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "image::Architecture.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.1 : Architecture Diagram_"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The *_Architecture Diagram_* given above explains the high-level design of the App. A quick overview of each component is given below."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You can find the `.pptx` files used to create diagrams in this developer guide in the link:{repoURL}/docs/diagrams/[diagrams] folder. To update a diagram, modify the diagram in the pptx file, select the objects of the diagram, and choose `Save as picture`."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Main"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "`Main` has only one class called link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp`]. It is responsible for,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Launching app: Initializes the components in the correct sequence, and connects them up with each other."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Shutting down: Shuts down the components and invokes cleanup method where necessary."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Commons"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "link:#common-classes[*`Commons`*] represents a collection of classes used by multiple other components. These classes can be found in the `seedu.addressbook.commons` package. The following two classes play important roles at the architecture level."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `EventsCenter` : This class (written using https://github.com/google/guava/wiki/EventBusExplained[Google\u0027s Event Bus library]) is used by components to communicate with other components using events."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `LogsCenter` : This class is used by many classes to write log messages to the App\u0027s log file."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Four main components"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "The rest of the App consists of four components."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#ui-component[*`UI`*] : The User Interface (UI) of the App."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#logic-component[*`Logic`*] : The execution of command."
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#model-component[*`Model`*] : The storage of the data of the App in-memory."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* link:#storage-component[*`Storage`*] : The saving and retrieving of data from the hard disk."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "Each of the four components"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "* Defines its _API_ in an `interface` with the same name as the Component."
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "* Exposes its functionality using a `{Component Name}Manager` class."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "For example, the `Logic` component (_Fig 3.1.2_) defines it\u0027s API in the `Logic.java` interface and exposes its functionality using the `LogicManager.java` class."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.2 : Class Diagram of the Logic Component_"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Events-Driven nature of the design"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "The _Sequence Diagram_ below shows how the components interact for the scenario where the user issues the command `delete 1`."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePerson.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.3a : Component interactions for `delete 1` command (part 1)_"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the `Model` simply raises a `AddressBookChangedEvent` when the Address Book data are changed, instead of asking the `Storage` to save the updates to the hard disk."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "The diagram below shows how the `EventsCenter` reacts to that event, which eventually results in the updates being saved to the hard disk and the status bar of the UI being updated to reflect the \u0027Last Updated\u0027 time."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "image::SDforDeletePersonEventHandling.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.1.3b : Component interactions for `delete 1` command (part 2)_"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Note how the event is propagated through the `EventsCenter` to the `Storage` and `UI` without `Model` having to be coupled to either of them. This shows you how this Event Driven approach helps us reduce direct coupling between components."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "The sections below give more details of each component."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d UI component"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "image::UiClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.2.1 : Structure of the UI Component_"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/ui/Ui.java[`Ui.java`]"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The UI consists of a `MainWindow` that is made up of several parts such as `CommandBox`, `ResultDisplay`, `PersonListPanel`, `StatusBarFooter`, and `BrowserPanel`. All these, including the `MainWindow`, inherit from the abstract `UiPart` class."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The `UI` component uses JavaFx UI framework. The layout of these UI parts are defined in matching `.fxml` files that are in the `src/main/resources/view` folder. For example, the layout of the link:{repoURL}/src/main/java/seedu/address/ui/MainWindow.java[`MainWindow`] is specified in link:{repoURL}/src/main/resources/view/MainWindow.fxml[`MainWindow.fxml`]."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "The `UI` component,"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "* Executes user commands using the `Logic` component."
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "* Binds itself to some data in the `Model` so that the UI can auto-update when data in the `Model` change."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "* Responds to events raised from various parts of the App and updates the UI accordingly."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logic component"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.1 : Structure of the Logic Component_"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.2 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 3.3.1_"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "*API* :"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ".  `Logic` uses the `AddressBookParser` class to parse the user command."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ".  This results in a `Command` object which is executed by the `LogicManager`."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ".  The command execution can affect the `Model` (e.g. adding a person) and/or raise events."
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ".  The result of the command execution is encapsulated as a `CommandResult` object which is passed back to the `UI`."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "Given below is the Sequence Diagram for interactions within the `Logic` component for the `execute(\"delete 1\")` API call."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "image::DeletePersonSdForLogic.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.3.3 : Interactions Inside the Logic Component for the `delete 1` Command_"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Model component"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "image::ModelClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.4.1 : Structure of the Model Component_"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/model/Model.java[`Model.java`]"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "The `Model`,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "* stores a `UserPref` object that represents the user\u0027s preferences."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "* stores the Address Book data."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* exposes an unmodifiable `ObservableList\u003cReadOnlyPerson\u003e` that can be \u0027observed\u0027 e.g. the UI can be bound to this list so that the UI automatically updates when the data in the list change."
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "* does not depend on any of the other three components."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Storage component"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "image::StorageClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.5.1 : Structure of the Storage Component_"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "*API* : link:{repoURL}/src/main/java/seedu/address/storage/Storage.java[`Storage.java`]"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "The `Storage` component,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* can save `UserPref` objects in json format and read it back."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "* can save the Address Book data in xml format and read it back."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Implementation"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "This section describes some noteworthy details on how certain features are implemented."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Undo/Redo Command mechanism"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The undo/redo mechanism is designed to suit the needs of students who might accidentally execute a undesired command. It is facilitated by an `UndoRedoStack`, which resides inside `LogicManager`. It supports undoing and redoing of commands that modifies the state of the address book (e.g. `add`, `edit`). Such commands will inherit from `UndoableCommand`."
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "`UndoRedoStack` only deals with `UndoableCommands`. Commands that cannot be undone will inherit from `Command` instead. You will be able to see the inheritance diagram for commands below (_Fig 4.1.1_)."
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "image::LogicCommandClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.1 : Structure of Commands in the Logic Component. This diagram shows finer details concerning `XYZCommand` and `Command` in Figure 3.3.1_"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "As you can see from the diagram, `UndoableCommand` adds an extra layer between the abstract `Command` class and concrete commands that can be undone, such as the `DeleteCommand`. Note that extra tasks need to be done when executing a command in an _undoable_ way, such as saving the state of the address book before execution. `UndoableCommand` contains the high-level algorithm for those extra tasks while the child classes implements the details of how to execute the specific command. The technique of putting the high-level algorithm in the parent class and lower-level steps of the algorithm in child classes is also known as the https://www.tutorialspoint.com/design_pattern/template_pattern.htm[template pattern]."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are implemented this way:"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... list logic ..."
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "With the extra layer, the commands that are undoable are implemented this way:"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class UndoableCommand extends Command {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... undo logic ..."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        executeUndoableCommand();"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        // ... delete logic ..."
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "When the user has just launched the application. The `UndoRedoStack` will be empty at the beginning."
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "The user executes a new `UndoableCommand`, `delete 5`, to delete the 5th person in the address book. You can find that he current state of the address book is saved before the `delete 5` command executes. The `delete 5` command will then be pushed onto the `undoStack` (the current state is saved together with the command)."
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoStartingStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2a : The most recent undoable command is pushed into the undoStack_"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "As the user continues to use the program, more commands are added into the `undoStack`. For example, the user may execute `add n/David ...` to add a new person."
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand1StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2b : More commands are added into the undoStack_"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "If a command fails its execution, it will not be pushed to the `UndoRedoStack` at all."
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides that adding the person was a mistake, and decides to undo that action using `undo`."
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "We will pop the most recent command out of the `undoStack` and push it back to the `redoStack`. We will restore the address book to the state before the `add` command executed."
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoExecuteUndoStackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2c : The command on the top will be popped and pushed into the redoStack_"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "If the `undoStack` is empty, then there are no other commands left to be undone, and an `Exception` will be thrown when popping the `undoStack`."
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "The following sequence diagram shows how the undo operation works:"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.3 : The sequence diagram for the undo function_"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "The redo does the exact opposite (pops from `redoStack`, push to `undoStack`, and restores the address book to the state after the command is executed)."
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "If the `redoStack` is empty, then there are no other commands left to be redone, and an `Exception` will be thrown when popping the `redoStack`."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": "The user now decides to execute a new command, `clear`. As before, `clear` will be pushed into the `undoStack`. This time the `redoStack` is no longer empty. It will be purged as it no longer make sense to redo the `add n/David` command (this is the behavior that most modern desktop applications follow)."
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand2StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2d : When a new command is pushed into undoStack, the redoStack is purged_"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "Commands that are not undoable are not added into the `undoStack`. For example, `list`, which inherits from `Command` rather than `UndoableCommand`, will not be added after execution:"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoNewCommand3StackDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.2e : The list command is not added to the undoStack_"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "The following activity diagram summarize what happens inside the `UndoRedoStack` when a user executes a new command:"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "image::UndoRedoActivityDiagram.png[width\u003d\"200\"]"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.1.4 : Activity diagram when a new command is executed_"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Implementation of `UndoableCommand` +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** A new abstract method `executeUndoableCommand()` is added. +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This does not lose any undone/redone functionality as it is now part of the default behaviour. Classes that deal with `Command` will not know that `executeUndoableCommand()` exist. +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It would be hard for new developers to understand the template pattern. +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** An override `execute()` method is added. +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This does not involve the template pattern, so it is easier for new developers to understand. +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Classes that inherit from `UndoableCommand` must remember to call `super.execute()` to gain the ability to undo/redo."
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Execution of undo \u0026 redo commands +"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** The entire address book is saved. +"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It is easy to implement. +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This may have performance issues in terms of memory usage. +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "**Alternative 2:** Individual command knows how to undo/redo by itself. +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This uses less memory (e.g. for `delete`, just save the person being deleted). +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Cons:** Each individual command might be hard to implemented correctly."
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Type of commands that can be undone/redone +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Only commands that modifies the address book (`add`, `clear`, `edit`) is included. +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** The view can easily be re-modified as no data are lost (We only revert changes that are hard to change back). +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** User might think that undo also applies when the list is modified (undoing filtering for example), only to realize that it does not do that, after executing `undo`. +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** All the commands are included. +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** The view might be more intuitive for the user. +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Cons:** User has no way of skipping such commands if he or she just wants to reset the state of the address book and not the view. +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "**Aspect:** Data structure to support the undo/redo commands +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Separate stack for undo and redo are used. +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is easy to understand for new Computer Science undergraduates, who are likely to be the new incoming developers of our project. +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "**Cons:** Logic is duplicated twice. For example, when a new command is executed, we must remember to update both `HistoryManager` and `UndoRedoStack`. +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** `HistoryManager` is used for undo/redo. +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "**Pros:** We do not need to maintain a separate stack, and just reuse what is already in the codebase. +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This would require dealing with commands that have already been undone: We must remember to skip these commands. Violates Single Responsibility Principle and Separation of Concerns as `HistoryManager` now needs to do two different things. +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::timetable[]"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Timetables Attribute"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Users are able to store timetables by supplying a shortened NUSMods URL when adding a person. You will be able to understand how NUSMods URLs are being parsed and how the timetable information is being extracted. This need is especially crucial for NUS students who require friends\u0027 timetables in order to find out a time to meet up."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Retrieval of Lesson Information"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "NUSMods URLs are in the format of `.../timetable/ACAD_YEAR/SEM?MODULE_CODE[LESSON_TYPE]\u003dLESSON_NO\u0026...`  We use `TimetableParserUtil:expandUrl()` to get an expanded URL from shortened URL provided, then parse the expanded URL accordingly to obtain lesson data."
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Lessons for each module are stored in `ModuleInfoFromUrl`, which is then represented in `TimetableInfoFromUrl`."
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "https://github.com/nusmodifications/nusmods-api[NUSMods API] is used to retrieve data related to lessons parsed from URLs. JSON objects representing each module is retrieved and"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "cast to a `Map` using http://wiki.fasterxml.com/JacksonHome[Jackson library]. Lesson data is then retrieved as a list of `Lesson` objects."
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "----"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// read JSON as map"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// retrieve lesson data"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d mappedJson.get(\"Timetable\");"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    Lesson lessonToAdd \u003d new Lesson(...);"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "----"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "`TimetableParserUtil` in `commons.util.timetable` contains all utility methods for parsing of NUSMods URLs and conversion between terms parsed from URLs and terms used in NUSMods API."
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Representation of Timetables"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Storing of timetables is facilitated by an immutable `Timetable` object, which is a component of `Person`. The information regarding the timings of each lesson is stored in a single `TimetableInfo` object within `Timetable`."
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "More specific information for a person\u0027s lessons is abstracted further as follows:"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Information for odd/even weeks are stored by two `TimetableWeek` objects within `TimetableInfo`"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Each day of the timetable (Monday to Friday) is represented by five `TimetableDay` objects in `TimetableWeek`"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* To represent each timeslot in `TimetableDay`, a `TimetableSlot` class is used to represent a 30 minute interval. 32 instances of `TimetableSlot` are used to represent a full day from 0800 to 0000"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "The following UML diagram represents the implementation of the classes."
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::TimetableClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.2.2.1 : Timetable class diagram (XYZComponent refers to all other components that `Person` is composed of, the class diagram is not complete)_"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Displaying of Timetables"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Displaying of timetables is facilitated using a single `TimetableDisplay` component, which resides above `BrowserPanel`. Both these"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "components are contained within `InfoPanel`, which handles specific events to bring either panel to the front."
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Upon execution of a `whenfree` command, the following happens:"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ". `TimetableCommandParser` parses the input to determine which timetables to display."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".. If no arguments are passed, empty `ArrayList\u003cIndex\u003e` is used."
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".. Otherwise, arguments are parsed into their respective `Index` and stored in an `ArrayList\u003cIndex\u003e`."
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ". A new `TimetableCommand` is constructed, using the list created by the parser."
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ". When `TimetableCommand:execute()` is called, the list of `Index`, is used to obtain the `ReadOnlyPerson` to display,"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "and stores it in a `List\u003cReadOnlyPerson\u003e`."
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ". A `TimetableDisplayEvent` is then posted with the list of people to be displayed."
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ". The event is then handled by the `InfoPanel`, which creates a new `TimetableDisplay` component and brings it to the front."
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".. Each `Timetable` to be displayed is obtained from the list of people from the `TimetableDisplayEvent` handled."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".. When `TimetableDisplay` component is created, `fillInitialGrid()` first populates the timetable with empty slots."
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".. After which, each `Timetable` is added to the grid by `fillSingleTimetable()`."
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Execution of a `select` command is similar, except that a `PersonSelectedEvent` is handled instead of a `TimetableDisplayEvent`"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Aspect:** Representation of timetables +"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Abstraction of timetable grid using classes for weeks/days/slots is used. +"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is easily extendable to include new functionality e.g. lessons that occur in each slot. +"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This requires many method call chains to update and query timetable, might not be intuitive for new programmers. It is hard to iterate through entire timetable. +"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** A 3D array to represent the entire timetable is used. +"
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It is simple and easy to understand,  easy to iterate through. +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This does not follow OOP concepts, and cannot be extended to implement new functionalities. +"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 3:** Individual lesson timings and information are stored. +"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** Building the timetable is not required. +"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Queries are inefficient if a timing has a lesson, needs to iterate through every lesson stored."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** The use of Shortened URLs versus full-length URLs +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Only short URLs are accepted. +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** There is no need to deal with multiple types of URL. +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This is less user friendly as users need to supply specific type of URL. +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Both shortened and full-length NUSMods URLs are accepted. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is more user friendly as any type of NUSMods URL is accepted. +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This is much harder to detect malformed URL as parsing data does not detect errors in lesson tokens in URL. Shortened URL gives 403 response on bad URL."
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Aspect:** Behaviour of app when there is no internet connection +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1(current choice):** Only store timetable URLs, and query each time app is launched. If no internet, start with empty timetable. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** Storage needed is minimal, as only a single string is stored for each person. +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Startup of app can be slow if there is a large number of persons. +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Store timetable information after retrieval from NUSMods once. +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** We only need to retrieve lesson information once per person. +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** Storage of entire timetables can be very costly, and storage can be expensive with a large number of contacts."
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// end::timetable[]"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::deletetag[]"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Delete Command [Tag] Mechanism"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deleting a tag means deleting a specified tag in all persons who contain that tag, as well as deleting the tag from the master list of tags in the Address Book."
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This is significantly different from deleting a tag for a person via the `edit` command."
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "There is a need for this because a user would like to delete a tag that is no longer relevant or is outdated."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To delete a particular tag across multiple contacts, by editing each contact, would be a tedious process, hence, the addition of this feature."
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In this section, you will be able to understand how tags are deleted from all persons tagged with that tag, and how we use the same command word `delete`"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to both delete one or more persons or delete one or more tags."
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In general, the ability to delete a tag was implemented by modifying the existing `delete` command."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This modification involves:"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Detection of the type of deletion in the DeleteCommandParser"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Overloading the DeleteCommand constructor"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Executing the respective logic based on which attributes in `DeleteCommand` are present/non-null."
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "As a result of this modification, `delete` can execute a delete on tags, or a delete on persons, depending on the parameters provided."
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Detection of the Deletion Type"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For both types of `delete` commands, the same `delete` command word is used but the parameters provided in the command line are different."
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The two types of commands are distinguished by the `preamble` of the parameter arguments after the word `delete`, when tokenized against the `t/` prefix for tags."
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Preamble for"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete INDEX [MORE INDEXES]...` (Delete Person(s)) : A *digit* String"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete t/TAG [t/TAG]` (Delete Tag(s)) :  A *blank* String"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The implementation of this parse is shown below:"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (preamble.equals(\"\")) {"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // there exists \u0027t/\u0027"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommandForTag \u003d parseForTags(argMultimap);"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (deleteCommandForTag !\u003d null) {"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return deleteCommandForTag; \u003c1\u003e"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommandForPerson \u003d parseForPersonIndexes(args, preamble);"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (deleteCommandForPerson !\u003d null) {"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return deleteCommandForPerson; \u003c2\u003e"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Overloading the DeleteCommand constructor"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "With reference to the previous code snippet the type of `DeleteCommand` returned during the parse is also different."
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "They differ by the types of the parameters."
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c1\u003e A `deleteCommandForTag` which is a `new DeleteCommand(Set\u003cTag\u003e)` is returned when deleting one or more tags."
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c2\u003e A `deleteCommandForPerson` which is a `new DeleteCommand(Index)` or a `new DeleteCommand(ArrayList\u003cIndex\u003e)` is returned when deleting one or more persons."
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following code shows the respective object construction of the different types of DeleteCommand."
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Depending on the constructor method called, *either* the `targetIndexes` attribute *or* the `targetTags` will be made null,"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "which will lead on to the next section about command execution."
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Index targetIndexes;"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Set\u003cTag\u003e targetTags;"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Set\u003cTag\u003e targetTags) {"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndexes \u003d null;"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d targetTags;"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        targetIndexes.add(targetIndex);"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Execution depending on which attributes are present."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_If_ `targetIndexes` is present/non-null, execute the logic for deleting a person, _else_ execute the logic for deleting a tag."
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This trivial implementation is show below. The distinct command execution of the deleting of tags and the"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "delete of person(s) have been abstracted to apply SLAP (Single Level of Abstraction Per method)."
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (targetTags \u003d\u003d null \u0026\u0026 targetIndexes !\u003d null) {"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return executeCommandForPersons();"
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return executeCommandForTag();"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Command Logic"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The delete command undergoes a typical command execution in the `Logic` Component. Refer to Figure 3.3.3."
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following sequence diagram shows the interactions with the `Model` Component."
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Not shown in Figure 4.3.4.1, `listTags` are checked against `listOfExistingTags`, i.e. all tags"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to be deleted are checked whether each of them already exist in the address book. If this check fails, an exception is thrown."
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The sequence diagram demonstrates a *successful* deletion, hence this aspect of the logic is omitted for clarity."
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::DeleteCommandForTagSequenceDiagram1.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.3.4.1 : The tags parsed are put into an ArrayList and iterated through for deletion_"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::DeleteCommandForTagSequenceDiagram2.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.3.4.2 : How each tag is removed from the Address Book and each Person\u0027s list of tags_"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Aspect:** Implementation of Delete Tags +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** The existing `delete` command is modified. +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Pros:** The same command word `delete` is used which is an intuitive way to invoke a deletion of some object (person or tag).  +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Cons:** The `DeleteCommand` class is no longer responsible for deletion of a person *only* but is now responsible for deleting a tag as well."
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Modifying the command via overriding constructors, adding new attributes and modifying the parse may seem too convoluted a solution."
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This Violates Single Responsibility Principle and Separation of Concerns as `DeleteCommand` now needs to do two different things."
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Also, users who are used to the previous version of the command may not appreciate the new change, especially if it causes new bugs. +"
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** A new command `deletetag` is created. +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Pros:** The implementation of a new command is simple. This does not involve any major modification of the existing parse and command logic. +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Cons:** `deletetag t/tag` is not as intuitive in the command line interface especially to new or casual users. Users may try `delete t/tag` out of instinct and we would need to inform or prompt users of the `deletetag` command."
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Execution of delete command +"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** On the `Logic` level, we iterate through an array of tags and invoke a Model method `deleteTag(Tag tag)` on each tag.  +"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Pros:** This maintains consistency with the Model API that deals with objects in singular amounts. _(At the time of coding. See Note below.)_ +"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This requires a loop to delete the tags. +"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** On the `Logic` level, we invoke a method `deleteTags(tagSet)` on a Set\u003cTag\u003e  and implement `deleteTags(Set\u003cTag\u003e tagSet)` in the Model component. +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** The code will be easier for future contributors to understand. +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This does not maintain consistency of the API."
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "(**Note:** Pull Request #79 Delete multiple persons, chooses Alternative 2 as its design consideration with `deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets)` implemented"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "in the Model Component.)"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::deletetag[]"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::edittag[]"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Edit Command [Tag] Mechanism"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Editing a tag means editing a specified tag (the old tag) in all persons who contain that tag,"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "as well as editing the tag from the master list of tags in the Address Book."
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This is significantly different from editing a person\u0027s tag via the `edit` command."
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "There is a need for this because a user would like to edit a tag for multiple people containing that tag."
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "To edit a particular tag across multiple contacts, by editing each contact, would be a tedious process, hence, the addition of this feature."
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In this section, you will see that the implementation of editing a tag is very similar to deleting a tag."
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The existing `edit` command was also modified, to allow `edit` to execute a edit on tags, or a edit on persons,"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "depending on the parameters provided."
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "It differs from `delete` tag in terms of executing the respective logic of person or tag."
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Instead of checking which attributes of `EditCommand` are present/non-null, a boolean variable determine which command logic to execute"
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Detection of the Edit Type"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The concept of using the preamble, as seen in `DeleteCommandParser`, is also used in `EditCommandParser`."
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Preamble for"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit INDEX ...` (Edit Person) : A *digit* String"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit old/TAG new/TAG` (Edit Tag) :  A *blank* String"
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The implementation of this parse is shown below. Similarly, SLAP (Single Level of Abstraction Per method) is applied by"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "abstracting the distinct parsing between edit a person and editing a tag:"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (preamble.matches(\"\")) {"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return parseForTags(argsMultimap); \u003c1\u003e"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else if (preamble.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return parseForPersonDetails(argsMultimap); \u003c2\u003e"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Overloading the EditCommand constructor"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "With reference to the previous code snippet the type of `EditCommand` returned during the parse is also different."
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The parameter type of the EditCommand is different."
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003c1\u003e A `new EditCommand(Tag, Tag)` from the method parseForTags(argsMultimap) is returned."
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003c2\u003e A `new EditCommand(Index, EditPersonDescriptor)` from the method parseForPersonDetails(argsMultimap) is returned."
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following code shows the respective object construction of the different types of EditCommand."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Depending on the constructor method called, the irrelevant attributes will be made null."
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The boolean variable `isEditForPerson` is assigned the value `true` when the edit command is for editing a person, and `false` if it is for editing a tag."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final boolean isEditForPerson;"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag oldTag;"
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag newTag;"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d true;"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d null;"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d null;"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(newTag);"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d false;"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d oldTag;"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d newTag;"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Logic Execution depending on which attributes are present."
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_If_ `isEditForPerson` is present, execute the logic for editing a person, _else_ execute the logic for editing a tag."
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This trivial implementation is show below. The distinct command execution of the editing of tags and the"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "editing of person(s) have been abstracted to apply SLAP (Single Level of Abstraction Per method)."
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    if (isEditForPerson) {"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return executeCommandForPerson();"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    } else {"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return executeCommandForTag();"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Command Logic"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The edit command undergoes a typical command execution in the `Logic` Component. Refer to Figure 3.3.3."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following sequence diagram shows the interactions with the `Model` Component."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::EditCommandForTagSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.4.4.1 : How each tag is edited from the Address Book and each Person\u0027s list of tags_"
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Aspect:** Implementation of Edit Tags."
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The design considerations are similar to the to Implementation of Delete Tags. +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Modifying the existing `edit` command was picked over creating a new command `edittag`"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::edittag[]"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::TagColorMap[]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Tag Colouring Mechanism"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Tag labels appear in various `UI` components: `PersonCard`, `TagListPanel` and `PersonInfoPanel`. +"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In order for a tag to have the same color across all components, there was a need for the `UI` Components"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to keep track of what colors have been used and which color was a tag tied to. +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You will be able to understand how a Singleton class `TagColorMap` was implemented."
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::ClassDiagramTagColorMap.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.5.1 : The class diagram for TagColorMap_"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "As a result of this singleton class, coloring tags on initialisation is made extremely easy,"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "since `TagColorMap` provided `UI` components an easy way to access the color mapping of tags and"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "color the tags accordingly in the application, from anywhere in the code base."
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The following code is common in `PersonCard.java`, `TagListPanel.java`, `PersonInfoPanel.java`"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "as all the these components require rendering tags, especially in the `initTags` method shown below."
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "private void initTags(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tagLabel.setStyle(\"-fx-background-color: \" + TagColorMap.getInstance().getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    );"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "**Aspects:** Implementation Coloring of Tag +"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** A singleton class TagColorMap to provide colors, and mapping of tags to colors is used. +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is easy to implement and easy to access from any UI Component. +"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This increases coupling across the code base. Difficult to replace TagColorMap with a stub when doing tests. +"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** TagColorMap as a class attribute of MainWindow is used and is passed as a parameter to the constructors of relevant UI components.  +"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is a naive method and straightforward to implement. +"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This requires a large amount of modification of existing code base of the `UI` component."
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::TagColorMap[]"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::remarkCommand[]"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Remark Command Mechanism"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "April0616"
        },
        "content": "The remark command allows user to modify the remark of a contact, and it supports adding, editing and deleting remarks. +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "April0616"
        },
        "content": "It is different from adding the tags using `AddCommand` as you should notice that it is used to store the unique information of the contact. +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "We are implementing this `Remark Command` because NUS students see a need to add additional information to their contacts as a reminder to themselves, such as `owesMoney` to someone."
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Generally, the implementation of this command is similar to `EditCommand`."
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "April0616"
        },
        "content": "These main classes are added to implement this enhancement:"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `Remark`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `RemarkCommand`"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `RemarkCommandParser`"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "April0616"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "April0616"
        },
        "content": "These main classes are significantly edited to implement this enhancement:"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `AddressBookParser`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PersonListCard`"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PersonCardHandle`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `XmlAdaptedPerson`"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `Person`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `EditCommand`"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `AddCommand`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "April0616"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "April0616"
        },
        "content": "Instead of typing the command `remark`, an alternative would be `rm`. +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "April0616"
        },
        "content": "The alias is added to the `RemarkCommand Class`. +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "April0616"
        },
        "content": "The added remark will be displayed on the last line of the person card. +"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "April0616"
        },
        "content": "If a person is newly added to the personList by `AddCommand`, its remark field will be an empty string. +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In the `EditCommand` class, a new attribute `updatedRemark` is added to the person, and it is independent from `editPersonDescriptor`."
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of Remark Command"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 1]** _Logic:_ Teach the app to accept `remark` which does nothing"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 2]** _Logic:_ Teach the app to accept `remark` arguments"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 3]** _Ui:_ Add a placeholder for `remark` in `PersonCard`"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 4]** _Model:_ Add `Remark` class"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 5]** _Model:_ Modify `ReadOnlyPerson` to support a `Remark` field"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 6]** _Storage:_ Add `Remark` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 7]** _Ui:_ Connect `Remark` field to `PersonCard`"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 8]** _Logic:_ Implement `RemarkCommand#execute()` logic"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Codes and Diagrams"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "April0616"
        },
        "content": "The following diagram shows the high-level sequence diagram of the `RemarkCommand` for you:"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandHighLevelSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.6.2.1 : High-level sequence diagram_"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "April0616"
        },
        "content": "`RemarkCommand` extends `UndoableCommand`, which is an abstract subclass of abstract class command, so the user can also undo the added remark."
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "April0616"
        },
        "content": "The class inheritance diagram is shown below:"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandClassInheritanceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.6.2.2 : Class Inheritance Diagram_"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/*"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the remark of a person to the address book."
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "April0616"
        },
        "content": "After `RemarkCommand` is executed, the new data will be saved to the AddressBook. The logic component sequence diagram is shown below:"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandLogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.6.2.3 : Logic Component Sequence Diagram_"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "April0616"
        },
        "content": "We create a new `Remark` attribute, and the `Person` class is linked to it. Its model component class diagram is shown below:"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::RemarkCommandComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.6.2.4 : Component Class Diagram_"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cTimetable\u003e timetable;"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // ..."
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspects:** UI Display of Remark +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1(current choice):** The remark of the specified contact at the end of the personCard is displayed. +"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This has the consistent format with other fields in the person card. +"
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This does not highlight the remark so that the user might hardly notice the additional remark information. +"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** The Remark is displayed next to the name. +"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This would be able to better reminds the user of the added remark information. Also, the font-size is larger that is easier to read. +"
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This does not have the consistent formatting with other fields in the person card. If the remark is too long, it will be poorly displayed as well."
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspects:** The command nature of Remark +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1(current choice):** A RemarkCommand to add remarks to a contact is used. +"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** It is not the compulsory field when a person is added as most people do not add remarks to a newly added contact. +"
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It is an extra command for the user to remember. +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** AddCommand and EditCommand are used for adding and editing of the remark. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** The command lines are more intuitive for the user. +"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Cons:** The remark is perceived as a compulsory field of personal information for that contact, but this is not true."
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::remarkCommand[]"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::photoCommand[]"
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Photo Command Mechanism"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "April0616"
        },
        "content": "The photo command allows users to assign photos to their contacts, and it also supports adding, editing and deleting photos as the remark command."
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You will be able to understand how it accepts the absolute path in the user\u0027s computer and copies the original photo to the default folder of the file."
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "We are implementing this `PhotoCommand` as NUS students may want to keep themselves reminded of how their contacts look like."
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "April0616"
        },
        "content": "These classes are added to implement this enhancement:"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PhotoPath`"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PhotoCommand`"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PhotoCommandParser`"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PhotoPathNotFoundException`"
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `DuplicationPhotoPathException`"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `UniquePhotoPathList`"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `XmlAdaptedPhotoPath`"
      },
      {
        "lineNumber": 962,
        "author": {
          "gitId": "April0616"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 963,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 964,
        "author": {
          "gitId": "April0616"
        },
        "content": "These classes are edited to implement this enhancement:"
      },
      {
        "lineNumber": 965,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 966,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `AddressBook`"
      },
      {
        "lineNumber": 967,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `FileUtil`"
      },
      {
        "lineNumber": 968,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `AddCommand`"
      },
      {
        "lineNumber": 969,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `EditCommand`"
      },
      {
        "lineNumber": 970,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `PersonInfoPanel`"
      },
      {
        "lineNumber": 971,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `XmlAdaptedPerson`"
      },
      {
        "lineNumber": 972,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `Person`"
      },
      {
        "lineNumber": 973,
        "author": {
          "gitId": "April0616"
        },
        "content": "* ..."
      },
      {
        "lineNumber": 974,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 975,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 976,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 977,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 978,
        "author": {
          "gitId": "April0616"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 979,
        "author": {
          "gitId": "April0616"
        },
        "content": "Instead of typing the command `photo`, an alternative would be `ph`. +"
      },
      {
        "lineNumber": 980,
        "author": {
          "gitId": "April0616"
        },
        "content": "The alias is added to the `PhotoCommand` Class. +"
      },
      {
        "lineNumber": 981,
        "author": {
          "gitId": "April0616"
        },
        "content": "The added photo will be displayed on the `PersonInfoPanel`. +"
      },
      {
        "lineNumber": 982,
        "author": {
          "gitId": "April0616"
        },
        "content": "If a `photoPath` is newly added to the photoList by `PhotoCommand`, it will be saved to the default folder and linked to the specified contact. +"
      },
      {
        "lineNumber": 983,
        "author": {
          "gitId": "April0616"
        },
        "content": "If a `photoPath` is removed from one contact, the link between the photo and the contact will be removed, but the photo file"
      },
      {
        "lineNumber": 984,
        "author": {
          "gitId": "April0616"
        },
        "content": "are still kept inside the folder until the next time the user starts the application in case the user wants to undo the command. +"
      },
      {
        "lineNumber": 985,
        "author": {
          "gitId": "April0616"
        },
        "content": "Up to now, the photo command hasn\u0027t supported the `RedoCommand`."
      },
      {
        "lineNumber": 986,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 987,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of Photo Command"
      },
      {
        "lineNumber": 988,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 989,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 1]** _Logic:_ Create the `photoCommandParser` class to parse the input."
      },
      {
        "lineNumber": 990,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 991,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 2]** _Logic:_ Teach the app to accept `photoPath` arguments"
      },
      {
        "lineNumber": 992,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 993,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 3]** _Ui:_ Add a Shape `Circle` for displaying the photo in `personInfoPanel`"
      },
      {
        "lineNumber": 994,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 995,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 4]** _Model:_ Add `PhotoPath` class"
      },
      {
        "lineNumber": 996,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 997,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 5]** _Model:_ Modify `ReadOnlyPerson` to support a `photoPath` field"
      },
      {
        "lineNumber": 998,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 999,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 6]** _Storage:_ Add the `photoPath` field to `XmlAdaptedPerson` class"
      },
      {
        "lineNumber": 1000,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1001,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 7]** _Ui:_ Connect the `photoPath` field to `PersonInfoPanel` class, display the contact photo"
      },
      {
        "lineNumber": 1002,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1003,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 8]** _Logic:_ Implement `PhotoCommand#execute()` logic"
      },
      {
        "lineNumber": 1004,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1005,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 9]** _Commons:_ Implement related methods in `FileUtil`"
      },
      {
        "lineNumber": 1006,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1007,
        "author": {
          "gitId": "April0616"
        },
        "content": "**[Step 10]** _Models:_ Implement how to initialize the `UniquePhotoPathList` and delete unused photo in `AddressBook` class"
      },
      {
        "lineNumber": 1008,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1009,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1010,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Codes and Diagrams"
      },
      {
        "lineNumber": 1011,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1012,
        "author": {
          "gitId": "April0616"
        },
        "content": "The interactions between multiple objects are complicated, so the following diagram shows the simplified high-level sequence diagram for you:"
      },
      {
        "lineNumber": 1013,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1014,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::PhotoCommand_highLevelSequenceDiagrams.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1015,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.7.2.1 : High-level Sequence Diagram_"
      },
      {
        "lineNumber": 1016,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1017,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1018,
        "author": {
          "gitId": "April0616"
        },
        "content": "For the logic component part, the `PhotoCommandParser` is created by the `AddressBookParser`, and the `PhotoCommand` is created by the `PhotoCommandParser`."
      },
      {
        "lineNumber": 1019,
        "author": {
          "gitId": "April0616"
        },
        "content": "The logic component class diagram is shown below:"
      },
      {
        "lineNumber": 1020,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1021,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::PhotoCommand_logicComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1022,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.7.2.2 : Logic Component Class Diagram_"
      },
      {
        "lineNumber": 1023,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1024,
        "author": {
          "gitId": "April0616"
        },
        "content": "Also, the `PhotoCommand` class inherits from the `UndoableCommand` class."
      },
      {
        "lineNumber": 1025,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 1026,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1027,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1028,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1029,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1030,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the photo path of the specified person."
      },
      {
        "lineNumber": 1031,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 1032,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 1033,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 1034,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 1035,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1036,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1037,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "As shown in Figure 4.7.2.3, the `AddressBook` consists of one `UniqueTagList`, one `UniquePersonList`, and one `UniquePhotoPathList`."
      },
      {
        "lineNumber": 1038,
        "author": {
          "gitId": "April0616"
        },
        "content": "The `UniquePhotoPathList` acts as a container for `PhotoPath` objects."
      },
      {
        "lineNumber": 1039,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1040,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::PhotoCommand_modelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1041,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.7.2.3 : Model Component Class Diagram_"
      },
      {
        "lineNumber": 1042,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1043,
        "author": {
          "gitId": "April0616"
        },
        "content": "We create a new `PhotoPath` attribute, and the `Person` class is linked to it."
      },
      {
        "lineNumber": 1044,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1045,
        "author": {
          "gitId": "April0616"
        },
        "content": "The implementation is shown below."
      },
      {
        "lineNumber": 1046,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1047,
        "author": {
          "gitId": "April0616"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1048,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1049,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 1050,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents the path of a person\u0027s photo in the address book."
      },
      {
        "lineNumber": 1051,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 1052,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoPath {"
      },
      {
        "lineNumber": 1053,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1054,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String FILE_SAVED_PARENT_PATH \u003d \"src/main/resources/images/contactPhotos/\";"
      },
      {
        "lineNumber": 1055,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_APP_PHOTOPATH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 1056,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"The app photo path should be a string starting with \u0027\""
      },
      {
        "lineNumber": 1057,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + FILE_SAVED_PARENT_PATH"
      },
      {
        "lineNumber": 1058,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"\u0027, following by the file name with a valid extension, like\u0027photo.jpg\u0027.\\n\""
      },
      {
        "lineNumber": 1059,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"The valid extensions are \u0027jpg\u0027, \u0027jpeg\u0027, \u0027png\u0027, \u0027gif\u0027 or \u0027bmp\u0027.\";"
      },
      {
        "lineNumber": 1060,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1061,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 1062,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1063,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //..."
      },
      {
        "lineNumber": 1064,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 1065,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1066,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1067,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 1068,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1069,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1070,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1071,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspects:** The way the contact photo saved in users\u0027 computers is retrieved. +"
      },
      {
        "lineNumber": 1072,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Users are required to specify the absolute path of the photo. +"
      },
      {
        "lineNumber": 1073,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** This might be inconvenient as users need additional steps to get the absolute file of the photo. +"
      },
      {
        "lineNumber": 1074,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Cons:** The image file is specified accurately by using the command line. +"
      },
      {
        "lineNumber": 1075,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** Users are provided a pop-up window to choose the photo. +"
      },
      {
        "lineNumber": 1076,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Pros:** It is more convenient for the user to choose the file. +"
      },
      {
        "lineNumber": 1077,
        "author": {
          "gitId": "April0616"
        },
        "content": "**Cons:** This becomes no more a command-line input in this command-line application."
      },
      {
        "lineNumber": 1078,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 1079,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::photoCommand[]"
      },
      {
        "lineNumber": 1080,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1081,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::birthday[]"
      },
      {
        "lineNumber": 1082,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Birthday Attribute"
      },
      {
        "lineNumber": 1083,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1084,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Users are able to store birthdays by inputting in the format of DDMMYYYY when adding a person. You will be able to understand how Birthday is being stored and parsed over."
      },
      {
        "lineNumber": 1085,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This allows the user to get a list of people having the same birthday month."
      },
      {
        "lineNumber": 1086,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1087,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In general, the ability to store a person\u0027s birthday was implemented via an _augmentation_ of the component of `Person`."
      },
      {
        "lineNumber": 1088,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1089,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Representation of Birthdays"
      },
      {
        "lineNumber": 1090,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1091,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Storing of birthdays is facilitated by an immutable `Birthday` object, which is a component of `Person`."
      },
      {
        "lineNumber": 1092,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1093,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The following are the main classes edited to implement this:"
      },
      {
        "lineNumber": 1094,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1095,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddCommand"
      },
      {
        "lineNumber": 1096,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* AddCommandParser"
      },
      {
        "lineNumber": 1097,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* EditCommand"
      },
      {
        "lineNumber": 1098,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* EditCommandParser"
      },
      {
        "lineNumber": 1099,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Person"
      },
      {
        "lineNumber": 1100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* PersonListCard, PersonCardHandle"
      },
      {
        "lineNumber": 1101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* XmlAdaptedPerson"
      },
      {
        "lineNumber": 1102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The following UML diagram represents the implementation of the classes in the Model component."
      },
      {
        "lineNumber": 1105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::BirthdayModelComponentClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.8.1.1 : UML diagram for updated Model with Birthday_"
      },
      {
        "lineNumber": 1108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Validation of Birthdays"
      },
      {
        "lineNumber": 1110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "After the birthday is input, it will be checked if the date is valid."
      },
      {
        "lineNumber": 1111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The number of digits input will be checked first."
      },
      {
        "lineNumber": 1112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Then the year would be checked from the 20th century until now."
      },
      {
        "lineNumber": 1113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Range of day input will then be checked according to month."
      },
      {
        "lineNumber": 1114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 1118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 1120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 1121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 1122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            df.setLenient(false);"
      },
      {
        "lineNumber": 1123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            df.parse(test);"
      },
      {
        "lineNumber": 1124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 1125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 1126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 1127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1128,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    return false;"
      },
      {
        "lineNumber": 1130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1131,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1132,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1133,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Representation of birthdays +"
      },
      {
        "lineNumber": 1136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** The birthday of the specified contact is displayed as string of numbers with `/` separating the day, month and year. +"
      },
      {
        "lineNumber": 1137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is easy to implement as there is no need to alter the input. +"
      },
      {
        "lineNumber": 1138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It is difficult to recognise the date from the number displayed. +"
      },
      {
        "lineNumber": 1139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** The birthday is in the format of 25 Dec 1997. +"
      },
      {
        "lineNumber": 1140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It is simple and easy to understand. +"
      },
      {
        "lineNumber": 1141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It requires extra methods to change the format displayed."
      },
      {
        "lineNumber": 1142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::birthday[]"
      },
      {
        "lineNumber": 1143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 1145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Find Command [Filter] Mechanism"
      },
      {
        "lineNumber": 1146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Finding a person by filters means that users will be able to find a person using different fields of information. Currently, UniFy supports users to find a person by name, phone, email, address, tags and birthday month. This allows users to have more flexibility in the way they search for their contacts. +"
      },
      {
        "lineNumber": 1148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Only persons who match all keywords in all fields will be returned. You will be able to understand how the result of the find command is determined."
      },
      {
        "lineNumber": 1149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In general, the ability to find persons by filters was implemented by modifying the existing `find` command."
      },
      {
        "lineNumber": 1151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The modification involves:"
      },
      {
        "lineNumber": 1153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Parsing of user input in the FindCommandParser"
      },
      {
        "lineNumber": 1155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Searching of different fields for the person list in the FindCommand"
      },
      {
        "lineNumber": 1156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Parsing of user input"
      },
      {
        "lineNumber": 1158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The input will be tokenized against the `n/`, `p/`, `e/`, `a/`, `t/` and `b/` prefixes which are for name, phone, email, address, tags and birthday month respectively. This can be done by the `ArgumentTokenizer` class. +"
      },
      {
        "lineNumber": 1160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The user input will be parsed as an ArrayList with prefixes and keywords separated. If the index of `n/` is 1, the keywords for the name field will be at the index of 2 in the ArrayList. +"
      },
      {
        "lineNumber": 1161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The implementation of this parse is shown below:"
      },
      {
        "lineNumber": 1163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "----"
      },
      {
        "lineNumber": 1166,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "if (argsMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 1167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    nameList \u003d argsMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 1168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    predicate.add(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 1169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    predicate.add(nameList);"
      },
      {
        "lineNumber": 1170,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1171,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1173,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Since the field of `b/` only takes in birthday month, a small check is implemented to determine the validity of the keyword input. The birthday month is checked to only contain integer and be within the range of 1 to 12."
      },
      {
        "lineNumber": 1174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The implementation of this check is shown below:"
      },
      {
        "lineNumber": 1176,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1177,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1178,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// checks if birthday month contains non-integers, and returns \"Keyword input must be in integer.\""
      },
      {
        "lineNumber": 1180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "if (!birthdayList.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 1181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    throw new ParseException(FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONNUMBER);"
      },
      {
        "lineNumber": 1182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1183,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// checks if birthday month in out of bound, and returns \"Month %1$s does not exist.\""
      },
      {
        "lineNumber": 1184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "} else if (Integer.parseInt(birthdayList.trim()) \u003e 12 || Integer.parseInt(birthdayList.trim()) \u003c 1) {"
      },
      {
        "lineNumber": 1185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    throw new ParseException(String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONEXIST, birthdayList.trim()));"
      },
      {
        "lineNumber": 1186,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1187,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "} else if (birthdayList.trim().length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 1188,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    throw new ParseException(String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_INVALID, birthdayList.trim()));"
      },
      {
        "lineNumber": 1189,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1190,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1191,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1192,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Searching of Persons using several fields of information"
      },
      {
        "lineNumber": 1193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The search is done using the following steps."
      },
      {
        "lineNumber": 1195,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". The code searches persons matching the keyword in the name field, followed by the rest of the fields."
      },
      {
        "lineNumber": 1197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". The persons matching the keyword will be added into a HashMap\u003cString, Integer\u003e that stores the name of the person and the number of times the person matches the keywords."
      },
      {
        "lineNumber": 1198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". The persons are then added to a new ArrayList if the number of times the person matches the keywords equals to the number of keywords input."
      },
      {
        "lineNumber": 1199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". The ArrayList containing names of persons, having information that matches all keywords in respective fields, will be updated in the filtered list."
      },
      {
        "lineNumber": 1200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ". The find result displayed to users."
      },
      {
        "lineNumber": 1201,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1202,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The implementation of person\u0027s phone being searched is shown below:"
      },
      {
        "lineNumber": 1203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 1204,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1205,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public ArrayList\u003cString\u003e findPersonsWithPhone(String phone) {"
      },
      {
        "lineNumber": 1206,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // Get the list of persons in UniFy"
      },
      {
        "lineNumber": 1207,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 1208,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1209,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    String[] phoneKeyword \u003d phone.split(\" \");"
      },
      {
        "lineNumber": 1210,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1211,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // Keeping track of the number of keywords input in total"
      },
      {
        "lineNumber": 1212,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    count +\u003d phoneKeyword.length;"
      },
      {
        "lineNumber": 1213,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    ArrayList\u003cString\u003e phoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 1215,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 1217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (String keyword : phoneKeyword) {"
      },
      {
        "lineNumber": 1218,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            String phones \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 1219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1220,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            // keyword is a subset of phones (do not have to match fully)"
      },
      {
        "lineNumber": 1221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (phones.contains(keyword)) {"
      },
      {
        "lineNumber": 1222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                phoneList.add(person.getName().toString());"
      },
      {
        "lineNumber": 1223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1225,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1226,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    return phoneList;"
      },
      {
        "lineNumber": 1227,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1228,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1229,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1230,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The implementation of tracking the number of times a person being matched is shown below:"
      },
      {
        "lineNumber": 1231,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 1232,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1233,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// if phone prefix is input"
      },
      {
        "lineNumber": 1234,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "if (predicates.equals(PREFIX_PHONE.getPrefix())) {"
      },
      {
        "lineNumber": 1235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // Result from the code above"
      },
      {
        "lineNumber": 1237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    ArrayList\u003cString\u003e personsWithPhone \u003d findPersonsWithPhone(predicate.get(i + 1));"
      },
      {
        "lineNumber": 1238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    for (int j \u003d 0; j \u003c personsWithPhone.size(); j++) {"
      },
      {
        "lineNumber": 1240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1241,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // if it is the first time this person is being searched, add the person in with time of matches \u003d 1"
      },
      {
        "lineNumber": 1242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (!predicateMap.containsKey(personsWithPhone.get(j))) {"
      },
      {
        "lineNumber": 1243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicateMap.put(personsWithPhone.get(j), 1);"
      },
      {
        "lineNumber": 1244,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicateList.add(personsWithPhone.get(j));"
      },
      {
        "lineNumber": 1245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1246,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // if the person is searched before, increase the time of matches by 1"
      },
      {
        "lineNumber": 1247,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 1248,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicateMap.put(personsWithPhone.get(j), predicateMap.remove(personsWithPhone.get(j)) + 1);"
      },
      {
        "lineNumber": 1249,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1250,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1253,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1254,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Command Logic"
      },
      {
        "lineNumber": 1255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The following is the logic component class diagram for `FindCommand`"
      },
      {
        "lineNumber": 1257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::FindCommandLogicComponentSequenceDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 1259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 4.9.3.1 : FindCommand Logic Component Class Diagram_"
      },
      {
        "lineNumber": 1260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1261,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1262,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Implementation of find command +"
      },
      {
        "lineNumber": 1264,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** Only the persons matching all keywords are returned. +"
      },
      {
        "lineNumber": 1265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This aligns with the purpose of implementing this enhancement to allow users to refine and limit their search by inputting more keywords in different fields. +"
      },
      {
        "lineNumber": 1266,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** It is harder to implement as we need to keep track of how many times a person is being matched. +"
      },
      {
        "lineNumber": 1267,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** All persons matching one or more keywords are returned. +"
      },
      {
        "lineNumber": 1268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** It is simple to implement. +"
      },
      {
        "lineNumber": 1269,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** By typing more keywords in different fields, more persons matching one of the keywords will be returned which defeats the purpose of having this enhancement."
      },
      {
        "lineNumber": 1270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 1271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1272,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 1273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Suggest Command Mechanism"
      },
      {
        "lineNumber": 1274,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This feature will conduct spelling check if the command input does not match any of the existing commands. It will prompt an error message suggesting the correct spelling of the command word. You will be able to understand how the code determines the correct spelling. +"
      },
      {
        "lineNumber": 1276,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This is implemented because there is many commands to remember in UniFy and we suspect users might have typos during their usage."
      },
      {
        "lineNumber": 1277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "In general, the ability of this command was implemented by adding a SuggestCommand class."
      },
      {
        "lineNumber": 1279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1280,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation of Suggest Command"
      },
      {
        "lineNumber": 1281,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1282,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "`SuggestCommand` class calls the `UniqueCommandList` class to determine the possible correct spellings and to retrieve the list of command words existing in the address book."
      },
      {
        "lineNumber": 1283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1284,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "We have identified a few spelling mistakes that our users might make."
      },
      {
        "lineNumber": 1285,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1286,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Two alphabets swapping positions"
      },
      {
        "lineNumber": 1287,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* One extra alphabet added"
      },
      {
        "lineNumber": 1288,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* One alphabet lacking"
      },
      {
        "lineNumber": 1289,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* One alphabet mistyped"
      },
      {
        "lineNumber": 1290,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1291,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The implementation of the determination of possible spellings is shown below:"
      },
      {
        "lineNumber": 1292,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[source, java]"
      },
      {
        "lineNumber": 1293,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "----"
      },
      {
        "lineNumber": 1294,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public static TreeSet\u003cString\u003e getPossibleCommandList(String command) {"
      },
      {
        "lineNumber": 1295,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    possibleCommandList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 1296,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1297,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // Swapping i with i+1"
      },
      {
        "lineNumber": 1298,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    for (int i \u003d 1; i \u003c command.length() - 1; i++) {"
      },
      {
        "lineNumber": 1299,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        possibleCommandList.add(command.substring(0, i) + command.charAt(i + 1) + command.charAt(i) + command.substring(i + 2));"
      },
      {
        "lineNumber": 1300,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1301,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1302,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // deleting one char, skipping i"
      },
      {
        "lineNumber": 1303,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    for (int i \u003d 0; i \u003c command.length(); i++) {"
      },
      {
        "lineNumber": 1304,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        possibleCommandList.add(command.substring(0, i) + command.substring(i + 1));"
      },
      {
        "lineNumber": 1305,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1306,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1307,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // inserting one char"
      },
      {
        "lineNumber": 1308,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    for (int i \u003d 0; i \u003c command.length() + 1; i++) {"
      },
      {
        "lineNumber": 1309,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (char j \u003d \u0027a\u0027; j \u003c\u003d \u0027z\u0027; j++) {"
      },
      {
        "lineNumber": 1310,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            possibleCommandList.add(command.substring(0, i) + j + command.substring(i));"
      },
      {
        "lineNumber": 1311,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            // replacing one char"
      },
      {
        "lineNumber": 1312,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (i \u003c command.length()) {"
      },
      {
        "lineNumber": 1313,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                possibleCommandList.add(command.substring(0, i) + j + command.substring(i + 1));"
      },
      {
        "lineNumber": 1314,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 1315,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 1316,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 1317,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    return possibleCommandList;"
      },
      {
        "lineNumber": 1318,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 1319,
        "author": {
          "gitId": "April0616"
        },
        "content": "----"
      },
      {
        "lineNumber": 1320,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 1321,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Design Considerations"
      },
      {
        "lineNumber": 1322,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1323,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Aspect:** Implementation of suggest command +"
      },
      {
        "lineNumber": 1324,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 1 (current choice):** An error message suggesting the correct spelling for the command word is returned. +"
      },
      {
        "lineNumber": 1325,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This is easier to implement without modification of other command classes. +"
      },
      {
        "lineNumber": 1326,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This would still require the user to correct his spelling error by himself. +"
      },
      {
        "lineNumber": 1327,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Alternative 2:** The suggested command is conducted then prompt to ask if the user is intending to conduct such an action. +"
      },
      {
        "lineNumber": 1328,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Pros:** This does not require the user to retype to correct his spelling error. +"
      },
      {
        "lineNumber": 1329,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "**Cons:** This is harder to implement and if the user do not intent to conduct the suggested command action, the user has to do an extra step to undo the command, which might be inconvenient."
      },
      {
        "lineNumber": 1330,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 1331,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1332,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Logging"
      },
      {
        "lineNumber": 1333,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1334,
        "author": {
          "gitId": "-"
        },
        "content": "We are using `java.util.logging` package for logging. The `LogsCenter` class is used to manage the logging levels and logging destinations."
      },
      {
        "lineNumber": 1335,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1336,
        "author": {
          "gitId": "-"
        },
        "content": "* The logging level can be controlled using the `logLevel` setting in the configuration file (See link:#configuration[Configuration])"
      },
      {
        "lineNumber": 1337,
        "author": {
          "gitId": "-"
        },
        "content": "* The `Logger` for a class can be obtained using `LogsCenter.getLogger(Class)` which will log messages according to the specified logging level"
      },
      {
        "lineNumber": 1338,
        "author": {
          "gitId": "-"
        },
        "content": "* Currently log messages are output through: `Console` and to a `.log` file."
      },
      {
        "lineNumber": 1339,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1340,
        "author": {
          "gitId": "-"
        },
        "content": "*Logging Levels*"
      },
      {
        "lineNumber": 1341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1342,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::you[]"
      },
      {
        "lineNumber": 1343,
        "author": {
          "gitId": "-"
        },
        "content": "* `SEVERE` : Critical problem detected which may possibly cause the termination of the application"
      },
      {
        "lineNumber": 1344,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `WARNING` : Problems detected that does not affect the usage of app, but requires to continue with caution"
      },
      {
        "lineNumber": 1345,
        "author": {
          "gitId": "-"
        },
        "content": "* `INFO` : Information showing the noteworthy actions by the App"
      },
      {
        "lineNumber": 1346,
        "author": {
          "gitId": "-"
        },
        "content": "* `FINE` : Details that is not usually noteworthy but may be useful in debugging e.g. print the actual list instead of just its size"
      },
      {
        "lineNumber": 1347,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::you[]"
      },
      {
        "lineNumber": 1348,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1349,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Configuration"
      },
      {
        "lineNumber": 1350,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1351,
        "author": {
          "gitId": "-"
        },
        "content": "Certain properties of the application can be controlled (e.g App name, logging level) through the configuration file (default: `config.json`)."
      },
      {
        "lineNumber": 1352,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1353,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Documentation"
      },
      {
        "lineNumber": 1354,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1355,
        "author": {
          "gitId": "-"
        },
        "content": "We use asciidoc for writing documentation."
      },
      {
        "lineNumber": 1356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1357,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1358,
        "author": {
          "gitId": "-"
        },
        "content": "We chose asciidoc over Markdown because asciidoc, although a bit more complex than Markdown, provides more flexibility in formatting."
      },
      {
        "lineNumber": 1359,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1360,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Editing Documentation"
      },
      {
        "lineNumber": 1361,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1362,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You can see \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to learn how to render `.adoc` files locally to preview the end result of your edits."
      },
      {
        "lineNumber": 1363,
        "author": {
          "gitId": "-"
        },
        "content": "Alternatively, you can download the AsciiDoc plugin for IntelliJ, which allows you to preview the changes you have made to your `.adoc` files in real-time."
      },
      {
        "lineNumber": 1364,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1365,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Publishing Documentation"
      },
      {
        "lineNumber": 1366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1367,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You can see \u003c\u003cUsingTravis#deploying-github-pages, UsingTravis.adoc\u003e\u003e to learn how to deploy GitHub Pages using Travis."
      },
      {
        "lineNumber": 1368,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1369,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Converting Documentation to PDF format"
      },
      {
        "lineNumber": 1370,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1371,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://www.google.com/chrome/browser/desktop/[Google Chrome] for converting documentation to PDF format, as Chrome\u0027s PDF engine preserves hyperlinks used in webpages."
      },
      {
        "lineNumber": 1372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1373,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to convert the project documentation files to PDF format."
      },
      {
        "lineNumber": 1374,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1375,
        "author": {
          "gitId": "-"
        },
        "content": ".  Follow the instructions in \u003c\u003cUsingGradle#rendering-asciidoc-files, UsingGradle.adoc\u003e\u003e to convert the AsciiDoc files in the `docs/` directory to HTML format."
      },
      {
        "lineNumber": 1376,
        "author": {
          "gitId": "-"
        },
        "content": ".  Go to your generated HTML files in the `build/docs` folder, right click on them and select `Open with` -\u003e `Google Chrome`."
      },
      {
        "lineNumber": 1377,
        "author": {
          "gitId": "-"
        },
        "content": ".  Within Chrome, click on the `Print` option in Chrome\u0027s menu."
      },
      {
        "lineNumber": 1378,
        "author": {
          "gitId": "-"
        },
        "content": ".  Set the destination to `Save as PDF`, then click `Save` to save a copy of the file in PDF format. For best results, use the settings indicated in the screenshot below."
      },
      {
        "lineNumber": 1379,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1380,
        "author": {
          "gitId": "-"
        },
        "content": "image::chrome_save_as_pdf.png[width\u003d\"300\"]"
      },
      {
        "lineNumber": 1381,
        "author": {
          "gitId": "-"
        },
        "content": "_Figure 5.6.1 : Saving documentation as PDF files in Chrome_"
      },
      {
        "lineNumber": 1382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1383,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Testing"
      },
      {
        "lineNumber": 1384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1385,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Running Tests"
      },
      {
        "lineNumber": 1386,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1387,
        "author": {
          "gitId": "-"
        },
        "content": "There are three ways to run tests."
      },
      {
        "lineNumber": 1388,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1389,
        "author": {
          "gitId": "-"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 1390,
        "author": {
          "gitId": "-"
        },
        "content": "The most reliable way to run tests is the 3rd one. The first two methods might fail some GUI tests due to platform/resolution-specific idiosyncrasies."
      },
      {
        "lineNumber": 1391,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1392,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 1: Using IntelliJ JUnit test runner*"
      },
      {
        "lineNumber": 1393,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1394,
        "author": {
          "gitId": "-"
        },
        "content": "* To run all tests, right-click on the `src/test/java` folder and choose `Run \u0027All Tests\u0027`"
      },
      {
        "lineNumber": 1395,
        "author": {
          "gitId": "-"
        },
        "content": "* To run a subset of tests, you can right-click on a test package, test class, or a test and choose `Run \u0027ABC\u0027`"
      },
      {
        "lineNumber": 1396,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1397,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 2: Using Gradle*"
      },
      {
        "lineNumber": 1398,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1399,
        "author": {
          "gitId": "-"
        },
        "content": "* Open a console and run the command `gradlew clean allTests` (Mac/Linux: `./gradlew clean allTests`)"
      },
      {
        "lineNumber": 1400,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1401,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 1402,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e for more info on how to run tests using Gradle."
      },
      {
        "lineNumber": 1403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1404,
        "author": {
          "gitId": "-"
        },
        "content": "*Method 3: Using Gradle (headless)*"
      },
      {
        "lineNumber": 1405,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1406,
        "author": {
          "gitId": "-"
        },
        "content": "Thanks to the https://github.com/TestFX/TestFX[TestFX] library we use, our GUI tests can be run in the _headless_ mode. In the headless mode, GUI tests do not show up on the screen. That means the developer can do other things on the Computer while the tests are running."
      },
      {
        "lineNumber": 1407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1408,
        "author": {
          "gitId": "-"
        },
        "content": "To run tests in headless mode, open a console and run the command `gradlew clean headless allTests` (Mac/Linux: `./gradlew clean headless allTests`)"
      },
      {
        "lineNumber": 1409,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1410,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Types of tests"
      },
      {
        "lineNumber": 1411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1412,
        "author": {
          "gitId": "-"
        },
        "content": "We have two types of tests:"
      },
      {
        "lineNumber": 1413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1414,
        "author": {
          "gitId": "-"
        },
        "content": ".  *GUI Tests* - These are tests involving the GUI. They include,"
      },
      {
        "lineNumber": 1415,
        "author": {
          "gitId": "-"
        },
        "content": ".. _System Tests_ that test the entire App by simulating user actions on the GUI. These are in the `systemtests` package."
      },
      {
        "lineNumber": 1416,
        "author": {
          "gitId": "-"
        },
        "content": ".. _Unit tests_ that test the individual components. These are in `seedu.address.ui` package."
      },
      {
        "lineNumber": 1417,
        "author": {
          "gitId": "-"
        },
        "content": ".  *Non-GUI Tests* - These are tests not involving the GUI. They include,"
      },
      {
        "lineNumber": 1418,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Unit tests_ targeting the lowest level methods/classes. +"
      },
      {
        "lineNumber": 1419,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.commons.StringUtilTest`"
      },
      {
        "lineNumber": 1420,
        "author": {
          "gitId": "-"
        },
        "content": "..  _Integration tests_ that are checking the integration of multiple code units (those code units are assumed to be working). +"
      },
      {
        "lineNumber": 1421,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.storage.StorageManagerTest`"
      },
      {
        "lineNumber": 1422,
        "author": {
          "gitId": "-"
        },
        "content": "..  Hybrids of unit and integration tests. These test are checking multiple code units as well as how the are connected together. +"
      },
      {
        "lineNumber": 1423,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. `seedu.address.logic.LogicManagerTest`"
      },
      {
        "lineNumber": 1424,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1426,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Troubleshooting Testing"
      },
      {
        "lineNumber": 1427,
        "author": {
          "gitId": "-"
        },
        "content": "**Problem: `HelpWindowTest` fails with a `NullPointerException`.**"
      },
      {
        "lineNumber": 1428,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1429,
        "author": {
          "gitId": "-"
        },
        "content": "* Reason: One of its dependencies, `UserGuide.html` in `src/main/resources/docs` is missing."
      },
      {
        "lineNumber": 1430,
        "author": {
          "gitId": "-"
        },
        "content": "* Solution: Execute Gradle task `processResources`."
      },
      {
        "lineNumber": 1431,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1432,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Dev Ops"
      },
      {
        "lineNumber": 1433,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1434,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Building Automation"
      },
      {
        "lineNumber": 1435,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1436,
        "author": {
          "gitId": "-"
        },
        "content": "See \u003c\u003cUsingGradle#, UsingGradle.adoc\u003e\u003e to learn how to use Gradle for build automation."
      },
      {
        "lineNumber": 1437,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1438,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Continuous Integration"
      },
      {
        "lineNumber": 1439,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1440,
        "author": {
          "gitId": "-"
        },
        "content": "We use https://travis-ci.org/[Travis CI] and https://www.appveyor.com/[AppVeyor] to perform _Continuous Integration_ on our projects. See \u003c\u003cUsingTravis#, UsingTravis.adoc\u003e\u003e and \u003c\u003cUsingAppVeyor#, UsingAppVeyor.adoc\u003e\u003e for more details."
      },
      {
        "lineNumber": 1441,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1442,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Making a Release"
      },
      {
        "lineNumber": 1443,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1444,
        "author": {
          "gitId": "-"
        },
        "content": "Here are the steps to create a new release."
      },
      {
        "lineNumber": 1445,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1446,
        "author": {
          "gitId": "-"
        },
        "content": ".  Update the version number in link:{repoURL}/src/main/java/seedu/address/MainApp.java[`MainApp.java`]."
      },
      {
        "lineNumber": 1447,
        "author": {
          "gitId": "-"
        },
        "content": ".  Generate a JAR file \u003c\u003cUsingGradle#creating-the-jar-file, using Gradle\u003e\u003e."
      },
      {
        "lineNumber": 1448,
        "author": {
          "gitId": "-"
        },
        "content": ".  Tag the repo with the version number. e.g. `v0.1`"
      },
      {
        "lineNumber": 1449,
        "author": {
          "gitId": "-"
        },
        "content": ".  https://help.github.com/articles/creating-releases/[Create a new release using GitHub] and upload the JAR file you created."
      },
      {
        "lineNumber": 1450,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1451,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Managing Dependencies"
      },
      {
        "lineNumber": 1452,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1453,
        "author": {
          "gitId": "-"
        },
        "content": "A project often depends on third-party libraries. For example, Address Book depends on the http://wiki.fasterxml.com/JacksonHome[Jackson library] for XML parsing. Managing these _dependencies_ can be automated using Gradle. For example, Gradle can download the dependencies automatically, which is better than these alternatives. +"
      },
      {
        "lineNumber": 1454,
        "author": {
          "gitId": "-"
        },
        "content": "a. Include those libraries in the repo (this bloats the repo size) +"
      },
      {
        "lineNumber": 1455,
        "author": {
          "gitId": "-"
        },
        "content": "b. Require developers to download those libraries manually (this creates extra work for developers)"
      },
      {
        "lineNumber": 1456,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1457,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1458,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Cases"
      },
      {
        "lineNumber": 1459,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1460,
        "author": {
          "gitId": "-"
        },
        "content": "(For all use cases below, the *System* is the `AddressBook` and the *Actor* is the `user`, unless specified otherwise)"
      },
      {
        "lineNumber": 1461,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1462,
        "author": {
          "gitId": "-"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1463,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Use case: Delete person"
      },
      {
        "lineNumber": 1464,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1465,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1466,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1467,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1468,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1469,
        "author": {
          "gitId": "April0616"
        },
        "content": "3.  User requests to delete the specific person(s) in the list"
      },
      {
        "lineNumber": 1470,
        "author": {
          "gitId": "April0616"
        },
        "content": "4.  AddressBook deletes the person(s)"
      },
      {
        "lineNumber": 1471,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1472,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1473,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1474,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1475,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1476,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1477,
        "author": {
          "gitId": "-"
        },
        "content": "* 2a. The list is empty."
      },
      {
        "lineNumber": 1478,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1479,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1480,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1481,
        "author": {
          "gitId": "April0616"
        },
        "content": "* 3a. One of the given indexes is invalid."
      },
      {
        "lineNumber": 1482,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1483,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1484,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1485,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1486,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1487,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1488,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1489,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit a specific tag word"
      },
      {
        "lineNumber": 1490,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1491,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1492,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1493,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests to edit a tag"
      },
      {
        "lineNumber": 1494,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "2.  AddressBook shows the tag about to be edited"
      },
      {
        "lineNumber": 1495,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3.  User requests to a new word to replace the current tag"
      },
      {
        "lineNumber": 1496,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "4.  AddressBook edits the tag word"
      },
      {
        "lineNumber": 1497,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1498,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1499,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1500,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1501,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1502,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1503,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. The tag does not exist"
      },
      {
        "lineNumber": 1504,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1505,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1506,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1507,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3b. The new word to replace the given tag is an existing tag"
      },
      {
        "lineNumber": 1508,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1509,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1510,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3b1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1511,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1512,
        "author": {
          "gitId": "-"
        },
        "content": "Use case resumes at step 2."
      },
      {
        "lineNumber": 1513,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1514,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1515,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Type an incorrect command"
      },
      {
        "lineNumber": 1516,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1517,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1518,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1519,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests with an incorrect command"
      },
      {
        "lineNumber": 1520,
        "author": {
          "gitId": "April0616"
        },
        "content": "2.  AddressBook shows the suggested command based on user\u0027s misspelling or prompts help if the incorrect command cannot be identified"
      },
      {
        "lineNumber": 1521,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3.  User requests with a correct command"
      },
      {
        "lineNumber": 1522,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1523,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1524,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1525,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1526,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Edit person"
      },
      {
        "lineNumber": 1527,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1528,
        "author": {
          "gitId": "-"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1529,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1530,
        "author": {
          "gitId": "-"
        },
        "content": "1.  User requests to list persons"
      },
      {
        "lineNumber": 1531,
        "author": {
          "gitId": "-"
        },
        "content": "2.  AddressBook shows a list of persons"
      },
      {
        "lineNumber": 1532,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "3.  User requests to edit the details of the person identified by the index number in the listing"
      },
      {
        "lineNumber": 1533,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "4.  AddressBook edits the details of the identified person"
      },
      {
        "lineNumber": 1534,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1535,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1536,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1538,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1539,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1540,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 1a. AddressBook detects an error in the entered command"
      },
      {
        "lineNumber": 1541,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1542,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1543,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 1a1. AddressBook requests for the correct command"
      },
      {
        "lineNumber": 1544,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1545,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resumes at step 2"
      },
      {
        "lineNumber": 1546,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1547,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. AddressBook detects an error in the entered command"
      },
      {
        "lineNumber": 1548,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1549,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1550,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3a1. AddressBook requests for the correct command"
      },
      {
        "lineNumber": 1551,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1552,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1553,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** 3a2. User enters new command"
      },
      {
        "lineNumber": 1554,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1555,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resumes from step 4."
      },
      {
        "lineNumber": 1556,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1557,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[discrete]"
      },
      {
        "lineNumber": 1558,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Use case: Undo"
      },
      {
        "lineNumber": 1559,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1560,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*MSS*"
      },
      {
        "lineNumber": 1561,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1562,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "1.  User requests to undo previous action"
      },
      {
        "lineNumber": 1563,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "2.  AddressBook search for the previous action done"
      },
      {
        "lineNumber": 1564,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "3. AddressBook undo the previous action"
      },
      {
        "lineNumber": 1565,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1566,
        "author": {
          "gitId": "-"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1567,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1568,
        "author": {
          "gitId": "-"
        },
        "content": "*Extensions*"
      },
      {
        "lineNumber": 1569,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1570,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1571,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. The previous command is undoable."
      },
      {
        "lineNumber": 1572,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "+"
      },
      {
        "lineNumber": 1573,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case resume at step 2."
      },
      {
        "lineNumber": 1574,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1575,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* 3a. All previous commands are undoable."
      },
      {
        "lineNumber": 1576,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1577,
        "author": {
          "gitId": "-"
        },
        "content": "[none]"
      },
      {
        "lineNumber": 1578,
        "author": {
          "gitId": "-"
        },
        "content": "** 3a1. AddressBook shows an error message."
      },
      {
        "lineNumber": 1579,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 1580,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Use case ends."
      },
      {
        "lineNumber": 1581,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1582,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1583,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1584,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1585,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Non Functional Requirements"
      },
      {
        "lineNumber": 1586,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1587,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should work on any link:#mainstream-os[mainstream OS] as long as it has Java `1.8.0_60` or higher installed."
      },
      {
        "lineNumber": 1588,
        "author": {
          "gitId": "-"
        },
        "content": ".  Should be able to hold up to 1000 persons without a noticeable sluggishness in performance for typical usage."
      },
      {
        "lineNumber": 1589,
        "author": {
          "gitId": "-"
        },
        "content": ".  A user with above average typing speed for regular English text (i.e. not code, not system admin commands) should be able to accomplish most of the tasks faster using commands than using the mouse."
      },
      {
        "lineNumber": 1590,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Have a user interface that is visible for use indoors as well as outdoors"
      },
      {
        "lineNumber": 1591,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  A user who is not very tech savvy will be able to familiar in using the application within 2 hours of use."
      },
      {
        "lineNumber": 1592,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Only the user himself can access his address book"
      },
      {
        "lineNumber": 1593,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be able to easily find a person within a large amount of contacts in terms of robustness in searching capability (i.e. the use of multiple filters)"
      },
      {
        "lineNumber": 1594,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be able to recover the address book data in case of loss of data"
      },
      {
        "lineNumber": 1595,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  User guide is clear and concise"
      },
      {
        "lineNumber": 1596,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be as responsive as possible (a maximum of 0.3 millisecond)"
      },
      {
        "lineNumber": 1597,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Should be possible to upgrade to it from any previous version when a new version is released"
      },
      {
        "lineNumber": 1598,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1599,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1600,
        "author": {
          "gitId": "-"
        },
        "content": "[appendix]"
      },
      {
        "lineNumber": 1601,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Glossary"
      },
      {
        "lineNumber": 1602,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1603,
        "author": {
          "gitId": "-"
        },
        "content": "[[mainstream-os]]"
      },
      {
        "lineNumber": 1604,
        "author": {
          "gitId": "-"
        },
        "content": "Mainstream OS"
      },
      {
        "lineNumber": 1605,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1606,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1607,
        "author": {
          "gitId": "-"
        },
        "content": "Windows, Linux, Unix, OS-X"
      },
      {
        "lineNumber": 1608,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1609,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1610,
        "author": {
          "gitId": "-"
        },
        "content": "[[private-contact-detail]]"
      },
      {
        "lineNumber": 1611,
        "author": {
          "gitId": "-"
        },
        "content": "Private contact detail"
      },
      {
        "lineNumber": 1612,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1613,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1614,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A contact detail that is not meant to be shared with others."
      },
      {
        "lineNumber": 1615,
        "author": {
          "gitId": "-"
        },
        "content": "...."
      },
      {
        "lineNumber": 1616,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 1617,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[bright-coloured-mode]]"
      },
      {
        "lineNumber": 1618,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Bright coloured mode"
      },
      {
        "lineNumber": 1619,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1620,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Using brighter colours for the user interface to make the AddressBook more visible under the sun."
      },
      {
        "lineNumber": 1621,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1622,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1623,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[attribute]]"
      },
      {
        "lineNumber": 1624,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Attribute"
      },
      {
        "lineNumber": 1625,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1626,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1627,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A characteristic of a person that is common across all people (e.g. Relationship/Marital Status, Birthday, Gender, Age)."
      },
      {
        "lineNumber": 1628,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1629,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1630,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[[suggested]]"
      },
      {
        "lineNumber": 1631,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Suggested (a command)"
      },
      {
        "lineNumber": 1632,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 1633,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      },
      {
        "lineNumber": 1634,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The app will conduct the suggested command based on the detection of a misspelling of a command (e.g. find is suggested when fnid is spelled)."
      },
      {
        "lineNumber": 1635,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "...."
      },
      {
        "lineNumber": 1636,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1637,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[[preamble]]"
      },
      {
        "lineNumber": 1638,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Preamble"
      },
      {
        "lineNumber": 1639,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 1640,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "...."
      },
      {
        "lineNumber": 1641,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "A short marker used to synchronize a transmission by indicating the end of the header information and the start of the data."
      },
      {
        "lineNumber": 1642,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "...."
      }
    ],
    "authorContributionMap": {
      "zacharytang": 62,
      "CindyTsai1": 465,
      "nbriannl": 395,
      "April0616": 237,
      "-": 483
    }
  },
  {
    "path": "docs/LearningOutcomes.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d Learning Outcomes"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc: macro"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toclevels: 1"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnumlevels: 1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":repoURL: https://github.com/se-edu/addressbook-level4/tree/master"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "After studying this code and completing the corresponding exercises, you should be able to,"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "toc::[]"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use High-Level Designs `[LO-HighLevelDesign]`"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e describes the high-level design using an _Architecture Diagrams_ and high-level sequence diagrams."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/[se-edu/se-book: Design: Architecture]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/design/introduction/multilevelDesign/[se-edu/se-book: Design: Introduction: Multi-Level Design]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Event-Driven Programming `[LO-EventDriven]`"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Note how the \u003c\u003cDeveloperGuide#architecture, Developer Guide\u003e\u003e uses events to communicate with components without needing a direct coupling. Also note how the link:{repoURL}/src/main/java/seedu/address/commons/core/index/EventsCenter.java[`EventsCenter.java`] acts as an event dispatcher to facilitate communication between event creators and event consumers."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/architecture/architecturalStyles/eventDriven/[se-edu/se-book: Design: Architecture: Architecture Styles: Event-Driven Architectural Style]"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use API Design `[LO-ApiDesign]`"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "Note how components of AddressBook have well-defined APIs. For example, the API of the `Logic` component is given in the link:{repoURL}/src/main/java/seedu/address/logic/Logic.java[`Logic.java`]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "image:LogicClassDiagram.png[width\u003d\"800\"]"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/reuse/apis/[se-edu/se-book: Implementation: Reuse: APIs]"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Assertions `[LO-Assertions]`"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "Note how the AddressBook app uses Java ``assert``s to verify assumptions."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/assertions/[se-edu/se-book: Implementation: Error Handling: Assertions]"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more assertions"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "* Make sure assertions are enabled in your IDE by forcing an assertion failure (e.g. add `assert false;` somewhere in the code and run the code to ensure the runtime reports an assertion failure)."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "* Add more assertions to AddressBook as you see fit."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Logging `[LO-Logging]`"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cDeveloperGuide#logging, how the AddressBook app uses Java\u0027s `java.util.log` package to do logging\u003e\u003e."
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/logging/[se-edu/se-book: Implementation: Error Handling: Logging]"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Add more logging"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "Add more logging to AddressBook as you see fit."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Defensive Coding `[LO-DefensiveCoding]`"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "Note how AddressBook uses the `ReadOnly*` interfaces to prevent objects being modified by clients who are not supposed to modify them."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/errorHandling/defensiveProgramming/[se-edu/se-book: Implementation: Error Handling: Defensive Programming]"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: identify more places for defensive coding"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "Analyze the AddressBook code/design to identify,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "* where defensive coding is used"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "* where the code can be more defensive"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Build Automation `[LO-BuildAutomation]`"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingGradle#, how the AddressBook app uses Gradle to automate build tasks\u003e\u003e."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/what/[se-edu/se-book: Implementation: Integration: Build Automation: What]"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to run tasks"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "* Use gradle to do these tasks: Run all tests in headless mode, build the jar file."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use gradle to manage dependencies"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how the build script `build.gradle` file manages third party dependencies such as ControlsFx. Update that file to manage a third-party library dependency."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Continuous Integration `[LO-ContinuousIntegration]`"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "Note \u003c\u003cUsingTravis#, how the AddressBook app uses Travis to perform Continuous Integration\u003e\u003e. (https://travis-ci.org/se-edu/addressbook-level4[image:https://travis-ci.org/se-edu/addressbook-level4.svg?branch\u003dmaster[Build Status]])"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/integration/buildAutomation/continuousIntegrationDeployment/[se-edu/se-book: Implementation: Integration: Build Automation: CI \u0026 CD]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use Travis in your own project"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "* Set up Travis to perform CI on your own fork."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Code Coverage `[LO-CodeCoverage]`"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "Note how our CI server \u003c\u003cUsingTravis#, Travis uses Coveralls to report code coverage\u003e\u003e. (https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[image:https://coveralls.io/repos/github/se-edu/addressbook-level4/badge.svg?branch\u003dmaster[Coverage Status]]) After setting up Coveralls for your project, you can visit Coveralls website to find details about the coverage of code pushed to your repo. https://coveralls.io/github/se-edu/addressbook-level4?branch\u003dmaster[Here] is an example."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testCoverage/[se-edu/se-book: QA: Testing: Test Coverage]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use the IDE to measure coverage locally"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the IDE to measure code coverage of your tests."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Test Case Design Heuristics `[LO-TestCaseDesignHeuristics]`"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "The link:{repoURL}/src/test/java/seedu/address/commons/util/StringUtilTest.java[`StringUtilTest.java`]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "class gives some examples of how to use _Equivalence Partitions_, _Boundary Value Analysis_, and _Test Input Combination Heuristics_ to improve the efficiency and effectiveness of test cases testing the link:../src/main/java/seedu/address/commons/util/StringUtil.java[`StringUtil.java`] class."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testCaseDesign/[se-edu/se-book: QA: Test Case Design]"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Apply Test Case Design Heuristics to other places"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "* Use the test case design heuristics mentioned above to improve test cases in other places."
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write Integration Tests `[LO-IntegrationTests]`"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "Consider the link:{repoURL}/src/test/java/seedu/address/storage/StorageManagerTest.java[`StorageManagerTest.java`] class."
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "* Test methods `prefsReadSave()` and `addressBookReadSave()` are integration tests. Note how they simply test if The `StorageManager` class is correctly wired to its dependencies."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "* Test method `handleAddressBookChangedEvent_exceptionThrown_eventRaised()` is a unit test because it uses _dependency injection_ to isolate the SUT `StorageManager#handleAddressBookChangedEvent(...)` from its dependencies."
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "Compare the above with link:{repoURL}/src/test/java/seedu/address/logic/LogicManagerTest.java[`LogicManagerTest`]. Some of the tests in that class (e.g. `execute_*` methods) are neither integration nor unit tests. They are _integration + unit_ tests because they not only check if the LogicManager is correctly wired to its dependencies, but also checks the working of its dependencies. For example, the following two lines test the `LogicManager` but also the `Parser`."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "[source,java]"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "@Test"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "public void execute_invalidCommandFormat_throwsParseException() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    ..."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    assertParseException(invalidCommand, MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    assertHistoryCorrect(invalidCommand);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "----"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write unit and integration tests for the same method."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "* Write a unit test for a high-level method somewhere in the code base (or a new method you wrote)."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "* Write an integration test for the same method."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Write System Tests `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "Note how tests below `src/test/java/systemtests` package (e.g link:{repoURL}/src/test/java/systemtests/AddCommandSystemTest.java[`AddCommandSystemTest.java`]) are system tests because they test the entire system end-to-end."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/testing/testingTypes/[se-edu/se-book: QA: Testing: Testing Types]"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more system tests"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "* Write system tests for the new features you add."
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Automate GUI Testing `[LO-AutomateGuiTesting]`"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses TextFX library to automate GUI testing, including \u003c\u003cDeveloperGuide#headless-gui-testing, _headless_ GUI testing\u003e\u003e."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Write more automated GUI tests"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "* Covered by `[LO-SystemTesting]`"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Apply Design Patterns `[LO-DesignPatterns]`"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "Here are some example design patterns used in the code base."
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "* *Singleton Pattern* : link:{repoURL}/src/main/java/seedu/address/commons/core/EventsCenter.java[`EventsCenter.java`] is Singleton class. Its single instance can be accessed using the `EventsCenter.getInstance()` method."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "* *Facade Pattern* : link:{repoURL}/src/main/java/seedu/address/storage/StorageManager.java[`StorageManager.java`] is not only shielding the internals of the Storage component from outsiders, it is mostly redirecting method calls to its internal components (i.e. minimal logic in the class itself). Therefore, `StorageManager` can be considered a Facade class."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "* *Command Pattern* : The link:{repoURL}/src/main/java/seedu/address/logic/commands/Command.java[`Command.java`] and its sub classes implement the Command Pattern."
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "* *Observer Pattern* : The \u003c\u003cDeveloperGuide#events-driven-nature-of-the-design, event driven mechanism\u003e\u003e used by this code base employs the Observer pattern. For example, objects that are interested in events need to have the `@Subscribe` annotation in the class (this is similar to implementing an `\\\u003c\u003cObserver\u003e\u003e` interface) and register with the `EventsCenter`. When something noteworthy happens, an event is raised and the `EventsCenter` notifies all relevant subscribers. Unlike in the Observer pattern in which the `\\\u003c\u003cObservable\u003e\u003e` class is notifying all `\\\u003c\u003cObserver\u003e\u003e` objects, here the `\\\u003c\u003cObservable\u003e\u003e` classes simply raises an event and the `EventsCenter` takes care of the notifications."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "* *MVC Pattern* :"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "** The \u0027View\u0027 part of the application is mostly in the `.fxml` files in the `src/main/resources/view` folder."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "** `Model` component contains the \u0027Model\u0027. However, note that it is possible to view the `Logic` as the model because it hides the `Model` behind it and the view has to go through the `Logic` to access the `Model`."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "** Sub classes of link:{repoURL}/src/main/java/seedu/address/ui/UiPart.java[`UiPart`] (e.g. `PersonListPanel` ) act as \u0027Controllers\u0027, each controlling some part of the UI and communicating with the \u0027Model\u0027 (via the `Logic` component which sits between the \u0027Controller\u0027 and the \u0027Model\u0027)."
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "* *Abstraction Occurrence Pattern* : Not currently used in the app."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/designPatterns/[se-edu/se-book: Design: Design Patterns]"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Discover other possible applications of the patterns"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "* Find other possible applications of the patterns to improve the current design. e.g. where else in the design can you apply the Singleton pattern?"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "* Discuss pros and cons of applying the pattern in each of the situations you found in the previous step."
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Find more applicable patterns"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "* Learn other _Gang of Four_ Design patterns to see if they are applicable to the app."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Use Static Analysis `[LO-StaticAnalysis]`"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "Note how this project uses the http://checkstyle.sourceforge.net/[CheckStyle] static analysis tool to confirm compliance with the coding standard."
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "*Resources*"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "* https://se-edu.github.io/se-book/qualityAssurance/staticAnalysis/[se-edu/se-book: QA: Static Analysis]"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Use CheckStyle locally to check style compliance"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "* Install the CheckStyle plugin for your IDE and use it to check compliance of your code with our style rules (given in `/config/checkstyle/checkstyle.xml`)."
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "\u0027\u0027\u0027"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Do Code Reviews `[LO-CodeReview]`"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* Note how some PRs in this project have been reviewed by other developers. Here is an https://github.com/se-edu/addressbook-level4/pull/147[example]."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "* Also note how we have used https://www.codacy.com[Codacy] to do automate some part of the code review workload (https://www.codacy.com/app/damith/addressbook-level4?utm_source\u003dgithub.com\u0026utm_medium\u003dreferral\u0026utm_content\u003dse-edu/addressbook-level4\u0026utm_campaign\u003dBadge_Grade[image:https://api.codacy.com/project/badge/Grade/fc0b7775cf7f4fdeaf08776f3d8e364a[Codacy Badge]])"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exercise: Review a PR"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "* Review PRs created by team members."
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 265
    }
  },
  {
    "path": "docs/UserGuide.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d UniFy - User Guide"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ":experimental:"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "By: `CS2103AUG2017-W09-B1`      Since: `AUG 2017`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d Introduction"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//tag::intro[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Thank you for downloading **UniFy**! We\u0027re glad that you\u0027ve chosen us to help you manage your hectic university life."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**UniFy** is a personal assistant to your everyday life in NUS. It helps you maintain your numerous groups,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "tells you when your friends are free for lunch, and finds common time for project meetings. It even helps you find directions to"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "wherever your friends might be!"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "We know that time is precious for university students, so we made **UniFy** as simple to use as possible. You only need commands"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "to use **UniFy**, no more searching for hidden buttons or navigating unfamiliar pages!"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Excited? Let\u0027s get started!"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// end::intro[]"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d Quick Start"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Make sure you have Java version `1.8.0_60` or later installed in your Computer."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "Having any Java version is not enough. +"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "This app will not work with earlier versions of Java 8."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ".  Download the latest `UniFy.jar` link:https://github.com/CS2103AUG2017-W09-B1/main/releases[here]."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ".  Copy the file to the folder you want to use as the home folder for UniFy."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ".  Double-click the file to start the app. The GUI should appear in a few seconds."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::Ui.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "_Figure 2.1 : UniFy\u0027s Interface Light Theme_"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "+"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::UiDark.png[width\u003d\"790\"]"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "_Figure 2.2 : UniFy\u0027s Interface Dark Theme_"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "+"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ".  Type the command in the command box and press kbd:[Enter] to execute it. +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "e.g. typing *`help`* and pressing kbd:[Enter] will open the help window."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ".  Some example commands you can try:"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "* *`list`* : lists all contacts"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "* **`add`**`n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/etYEX` : adds a contact named `John Doe` to the Address Book"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "* **`delete`**`3` : deletes the 3rd contact shown in the current list"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *`undo`* : undo the previous command"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "* *`exit`* : exits the app"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ". Now you can explore the rest of UniFy! Refer to the link:#commands[Commands] section below for details of each command."
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Commands"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "*Command Format*"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "In this User Guide and in the message box in UniFy, you can see how to type a command by"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "referring to the Command Format provided for you. +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Understanding the Command Format is easy! Let us explain:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Commands always start with a command word."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add`, `delete`, `clear`, `edit`"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* `INDEX` refers to the index number shown in the last generated listing of people."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `INDEX` *must be a positive integer* e.g.: 1, 2, 3, ..."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Words in `UPPER_CASE` are *parameters* you have to give to the command. Each *parameter* is assigned and preceded by a *prefix*: a letter followed by a `/` +"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add n/*NAME*` +"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   `NAME` is a *parameter* you have to give to the `add` command, assigned to the `n/` *prefix* +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   If the *parameter* you want to provide is John Doe, the command will be `add n/*John Doe*`."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items in square brackets are optional"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `add n/NAME *[t/TAG]*` +"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "   You can use the `add` command as `add n/John Doe t/friend` or as `add n/John Doe`."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items with `…`​ after them can be used multiple times including zero times"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `[t/TAG]...` can be used as `{nbsp}` (i.e. 0 times), `t/friend`, `t/friend t/family` etc."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Items can be in any order"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** If the Command Format specifies `n/NAME p/PHONE_NUMBER`, `p/PHONE_NUMBER n/NAME` is also acceptable."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Commands have alternative keywords than can be used in place of them."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: You can type `wipe` or `c` instead of `clear` to execute the same command."
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can view a summary of all commands \u003c\u003cCommand Summary (v1.5), here\u003e\u003e,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "and a table of all alternative keywords for commands \u003c\u003cCommand Alternatives Reference Table, here\u003e\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Viewing help : `help`"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Unsure what to do inside UniFy? Call for help with this simple command._"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "To view the user guide, you can use this command at any time. The user guide will be opened in a new windo +"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `help` +"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: kbd:[F1]"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::birthday[]"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Adding a person: `add`"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_First thing to do with UniFy is to start adding the various people you\u0027ve met in University, as well as important people like your family._"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Adding a person manually"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Add contact information you want to remember! Your group mate\u0027s timetable, your friend\u0027s birthday. Tag your"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "module mates with appropriate tags too!_"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Use this to add a person to *UniFy* +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `add n/NAME [g/GENDER] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [m/MATRIC_NUMBER] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `a` , `insert` +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "image::PersonCard.png[]"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Figure 3.2.1 : A person with various contact information_"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "You can view the contacts you have added in UniFy in the form of _cards_."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Here are the following information a person can have: +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Name*"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "** `Name` field is compulsory while others are not."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Gender*"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** `GENDER` is either Male/Female or M/F _(case insensitive)_."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Phone number*"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Email*"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Address*"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Matriculation number* _(Added since v1.2)_"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** `MATRIC_NUMBER` should be a 9-character string starting with \u0027A or a\u0027, followed by 7 digits, and ending with a letter."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Birthday* _(Added since v1.2)_"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** The format for `BIRTHDAY` is DDMMYYYY."
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Timetable* via an NUSMods shortlink _(Added since v1.2)_"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "** The full link is not allowed."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*** Example of a shortlink: http://modsn.us/AC71u"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* *Tags*"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "** A person can have any number of tags."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Tags are alphanumeric and without spaces."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `add n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/etYEX`"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `add n/Betsy Crowe g/Female p/1234567 e/betsycrowe@example.com a/Newgate Prison t/friend t/criminal`"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `add n/Amy Tan g/F p/82974823 e/amy_tan@example.com a/PGP m/a0142323T`"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add n/Betty g/F p/12345678 e/betty@example.com b/23051998`"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add n/Jasmine p/12345678`"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::birthday[]"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::add[]"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::photoCommand[]"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Adding/Deleting a Photo for a person : `photo` _(For WINDOWS System Since v1.4)_"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_When you study too much, sometimes, you forget how someone looks like._"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can add or remove a photo to an existing person in the address book. +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Add photo)_ `photo INDEX ph/PHOTO PATH` +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Delete photo)_ `photo INDEX` or `photo INDEX ph/` +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `ph`"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::photo_command.png[width\u003d790]"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_Figure 3.3 : Add your favourite photo of someone to their contact!_"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "* For now, this command only works under WINDOWS Operating System."
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Edits the photo of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": "* The photo path of the person will be updated."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "* When adding a photo to the person, the photo will be saved to the default folder."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "* When removing the photo, only the path of the photo will be removed from the person."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "* All the unused photo will be deleted from the app the next time you start the application."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[IMPORTANT]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "Ensure that format of the path to the photo is correct and the photo exists in the specified place."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "`photo 1 ph/ C:\\Users\\User\\Files\\Amy_selfie.jpg` +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Add the picture \u0027Amy_selfie.jpg\u0027 in the specified location to the 1st person in the address book. +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "`photo 2` +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the photo path from the 2nd person in the last shown list."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "April0616"
        },
        "content": "`ph 1` +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the photo path from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::photoCommand[]"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::remarkCommand[]"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Giving remarks to a person : `remark` _(Since v1.1)_"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Sometimes you want to remind yourself how this person was like in a funny incident. Or you owe friends money for last night\u0027s supper. +"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Tags are too short, and your remarks for a person are more descriptive and unique. UniFy lets you add a remark to a person you can always look back on._"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "You can add remarks to any person in UniFy, keeping any special information you might want to remember. +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Add remark) `remark INDEX r/REMARK1 [r/REMARK2]...` +"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Delete remark): `remark INDEX` or `remark INDEX r/`"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Edits the remark of the person at the specified `INDEX`."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 2 r/Likes to drink coffee.` +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "April0616"
        },
        "content": "Adds \u0027Likes to drink coffee\u0027 remark to the 2nd person in the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 2 r/Likes to drink coffee. r/CAP 5.0` +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "April0616"
        },
        "content": "Adds \u0027Likes to drink coffee\u0027 and \u0027CAP5.0\u0027 remarks to the 2nd person in the address book."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 1 ` +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the remark from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "April0616"
        },
        "content": "`remark 1 r/` +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "April0616"
        },
        "content": "Removes the remark from the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::remarkCommand[]"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Listing all people : `list`"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "_Want to list all contacts for an overview?_"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Use this command to show a list of all persons stored. +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `list` +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `l` , `showall`, `viewall`"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::find[]"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Locating persons by filters : `find` _(Since v1.4)_"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Display your contacts how you like it. All of them? Just your classmates for a particular module? +"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Want to know who\u0027s birthday is in this month? Unify every common contact together and list them as one._"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "You can find people whose information contains all given keywords (inclusive) from each category. +"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `find [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY MONTH] [t/TAG]...` +"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Alternatives: `f` , `search`"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "* At least one field should be specified."
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "April0616"
        },
        "content": "* You can specify multiple keywords related to one field by using whitespace to split them."
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Persons matching at least one of the keywords will be returned."
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "* The search is case insensitive. e.g `hans` will match `Hans`"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* The order of the categories does not matter. e.g. `p/` can come before `t/`"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Mentioned attributes are searched."
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Partial words will be matched. e.g. `Han` will match `Hans`"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* MONTH should be inputted by numbers. e.g `12` searches for December babies"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Only one birthday month is to be input."
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Single digit months needs to be preceded by a 0 in front. e.g. `02` searches for those born in February"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Only the birthday month is searched."
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Typing with one of the prefix keyword empty will be considered as not searching for that prefix. e.g. `find n/an p/` will only return the persons containing `an` in their names"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `find n/ian zach` +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person with name including \u0027ian\u0027 and \u0027zach\u0027"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Joe t/friends` +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person with name including `Joe` and tagged by `friends`"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find t/friends p/1234` +"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person tagged by `friends`, and having phone numbers containing `1234`"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find t/jcfriends computing` +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns all persons in UniFy containing *both* \u0027JCfriends\u0027 and \u0027computing\u0027"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find b/12` +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns all persons in UniFy having birthdays in `December`"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::find[]"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Editing a person or a tag: `edit`"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a person"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Made a mistake? Someone changed their contact details? Edit it._"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can edit the details of an existing person in your address book, specified by their index +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `edit INDEX [n/NAME] [g/GENDER] [m/MATRIC_NO] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `e` , `modify`, `change`"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Edits the person at the specified `INDEX`."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* You must provide at least one of the optional fields."
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Editing tags is not cumulative! When editing tags, the person\u0027s existing tags will be replaced by the new ones you put in."
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** This also means you can remove all the person\u0027s tags by typing `t/` without specifying any tags after it."
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `edit 1 p/91234567 g/Male e/johndoe@example.com` +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "April0616"
        },
        "content": "Edits the phone number, gender and email address of the 1st person to be `91234567`, `Male` and `johndoe@example.com` respectively."
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `edit 2 n/Betsy Crower m/A0162522j b/14081998 t/` +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Edits the name, matriculation number and birthday of the 2nd person to be `Betsy Crower`, `A0162522j`, `14081998` and clears all existing tags."
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::edittag[]"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Editing a tag _(Since v1.2)_"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_When you need to edit module tags of classmates when advancing from a prerequisite module (e.g. CS1010 -\u003e CS1020),"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "changing each of their tag to an updated one is too tedious! UniFy lets you simply edit a particular tag for all contacts in one command._ +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can replace a tag to a new word for all people that have the specified tag +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `edit old/OLDTAG new/NEWTAG` +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `e` , `modify`, `change`"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* The tag that you want to replace has to be an existing tag."
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Tags are case-sensitive."
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit old/bestfriends new/enemies` +"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit old/CS1010 new/CS1020`"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[TIP]"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Editing a person\u0027s tag only edits the tag(s) for a *single* person. This command edits one tag name for *all* people."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::edittag[]"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Deleting multiple persons or tags: `delete`"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::deletePersons[]"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting multiple persons _(since v1.3)_"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Some people just have to go away in your life. Sometimes they leave you. Delete these people out of UniFy as well._"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "By specifying an index or multiple indexes, you can delete specified people in the most recent listing from the address book. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete INDEX1, INDEX2, INDEX3...`(separated by commas) +"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete INDEX1 INDEX2 INDEX3...` (separated by whitespaces) +"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "April0616"
        },
        "content": "* UniFy accepts duplicated indexes. If you type `delete 3, 3, 4`, the 3rd and 4th persons will be deleted."
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "April0616"
        },
        "content": "* When you delete your contacts, their contact photos will also be deleted."
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "`delete 2` +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "Deletes the 2nd person in the address book."
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete 2, 3, 4` +"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "April0616"
        },
        "content": "Deletes the 2nd, 3rd, 4th persons in the address book."
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "April0616"
        },
        "content": "`delete 1 5` +"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "April0616"
        },
        "content": "Deletes the 1st and 5th persons in the results of the `find` command."
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::deletePersons[]"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::deletetag[]"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Deleting a Tag (or multiple Tags) _(Since v1.1)_"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You have just finished a project in a module. Having the \u0027groupmate\u0027 tag to your project mates seems rude for you since"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "the project is already over."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Instead of going through each member one by one, delete that particular \u0027groupmate\u0027 tag in one go!_"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You specify a tag and it will be deleted from all people who originally had that tag +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `delete t/TAG...` +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The tag specified is case-sensitive."
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* You can delete multiple tags with one delete command."
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The tag (or all the tags) specified must already exist in the address book."
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`delete t/friends` +"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the tag \u0027friends\u0027 from all people containing the tag \u0027friends\u0027 in the address book."
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`delete t/module1 t/module2` +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deletes the tags \u0027module1\u0027 and \u0027module2\u0027 from all people containing one of the tag, or both of the tags in the address book. +"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::deletetag[]"
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Selecting a person : `select`"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can select a person, identified by the number used in the last person listing. +"
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `select INDEX` +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `s`, `choose`"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Selects the person and displays the information for the person at the specified `INDEX`."
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "-"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "`select 2` +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 2nd person in the address book."
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "April0616"
        },
        "content": "`s 1` +"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "Selects the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::timetable[]"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Viewing combined timetables : `whenfree` _(Since v1.5)_"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_\"When are all of you free?\" is an extremely common question in University. Let us solve that._"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can view the combined timetables of a group of people, selected by indexes. +"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `whenfree [INDEX]...`"
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::whenfree.png[width\u003d800]"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_Figure 3.10 : View the combined timetables of your contacts easily_"
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "The cells that are filled with another colour are the times when somebody has a lesson +"
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Coming in v2.0)_: View who has lessons at each timeslot, and what lessons they have!"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* `whenfree 1 2` +"
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Displays a combined timetable for the 1st and 2nd person in the address book."
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `whenfree` +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Displays a combined timetable for all listed users."
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Creates a combined timetable representing all the persons chosen."
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* If no index is specified, displays the timetable representing all the persons currently listed."
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// end::timetable[]"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::gmaps[]"
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Opening a Google Maps view of an address : `gmaps` _(Since v1.3)_"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You are meeting your group mate at his house. But where is his house on the map?_"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "For a person specified by an index, opens a Google Maps view of the person\u0027s address. +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "If you specify an address, gives the Google Maps directions from the given address to the person\u0027s location. +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `gmaps INDEX [a/ADDRESS]` +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `g`, `map`, `maps`"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 2` +"
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps view for the address of the 2nd person listed in the address book."
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `find n/Betsy` +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 1` +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps view for the address of the 1st person in the results of the `find` command."
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`gmaps 2 a/Blk 632 Yishun St 61` +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Opens the Google Maps directions from Blk 632 Yishun St 61 to the address of the 2nd person listed in the address book."
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::gmaps[]"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::theme[]"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Changing the theme of UniFy : `theme`"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "____"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_Don\u0027t like how UniFy looks? Why not change it?_"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "____"
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can change the theme of *UniFy* to any theme that you have installed. +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `theme THEME_NAME` +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `th`, `changetheme`"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*UniFy* comes with two themes pre-installed, `dark` and `light`. More themes will be made available in the near future!"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::theme[]"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Listing entered commands : `history`"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_What have you been doing? Check the past._"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "-"
        },
        "content": "Lists all the commands that you have entered in reverse chronological order. +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `history` +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `h` , `past`"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "-"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "-"
        },
        "content": "Pressing the kbd:[\u0026uarr;] and kbd:[\u0026darr;] arrows will display the previous and next input respectively in the command box."
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "-"
        },
        "content": "// tag::undoredo[]"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Undoing previous command : `undo`"
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You made a mistake, deleted some one by accident. Do not fret. UniFy is forgiving, undo your mistakes._"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "-"
        },
        "content": "Restores the address book to the state before the previous _undoable_ command was executed. +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `undo` +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `u`"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "April0616"
        },
        "content": "****"
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Undoable commands: those commands that modify the address book\u0027s content (`add`, `delete`, `edit`, `photo` and `clear`)."
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "April0616"
        },
        "content": "****"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete 1 2` +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "April0616"
        },
        "content": "`undo` (reverses the `delete 1 2` command, but will not recover their contact photos) +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "-"
        },
        "content": "* `select 1` +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "-"
        },
        "content": "`list` +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "-"
        },
        "content": "The `undo` command fails as there are no undoable commands executed previously."
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Redoing the previously undone command : `redo`"
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_It is OK. You wanted to delete that person anyways._"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "-"
        },
        "content": "Reverses the most recent `undo` command. +"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `redo` +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `r`"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "April0616"
        },
        "content": "****"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "April0616"
        },
        "content": "* PhotoCommand can only support `undo` command but not `redo` command."
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "April0616"
        },
        "content": "****"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete 1, 2` +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "April0616"
        },
        "content": "`undo` (reverses the `delete 1, 2` command) +"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "April0616"
        },
        "content": "`redo` (reapplies the `delete 1, 2` command) +"
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "-"
        },
        "content": "The `redo` command fails as there are no `undo` commands executed previously."
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "-"
        },
        "content": "* `delete 1` +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "-"
        },
        "content": "`clear` +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `clear` command) +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "-"
        },
        "content": "`undo` (reverses the `delete 1` command) +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `delete 1` command) +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "-"
        },
        "content": "`redo` (reapplies the `clear` command) +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "-"
        },
        "content": "// end::undoredo[]"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Clearing all entries : `clear`"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "-"
        },
        "content": "Clears all entries from the address book. +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `clear` +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `c`, `wipe`"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Exiting the program : `exit`"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_You are done with what you need to do. Thank you for using UniFy._"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "-"
        },
        "content": "Exits the program. +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Format: `exit` +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Alternatives: `x` , `quit`"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d Saving the data"
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "-"
        },
        "content": "Address book data are saved in the hard disk automatically after any command that changes the data. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "-"
        },
        "content": "There is no need to save manually."
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d Upcoming Commands"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "We have exciting new features in the works to be excited for!"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::tempTag[]"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Adding a person with temporary tags _(Coming in v2.0)_"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "April0616"
        },
        "content": "____"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "April0616"
        },
        "content": "_Don\u0027t want to keep a tag forever? Let\u0027s set temporary tags!_"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "April0616"
        },
        "content": "____"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "-"
        },
        "content": "Adds a person to the address book +"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: `add n/NAME [g/GENDER p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [m/MATRIC_NUMBER] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]... [tmpt/NUM_OF_MONTHS/TEMPORARY TAG]...` +"
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "April0616"
        },
        "content": "Alternatives: `a` , `insert`"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "April0616"
        },
        "content": "Here is the temporary tag information a person can have: +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `NUM_OF_MONTHS` *must be a positive integer* eg: 1, 2, 3, ..."
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** `NUM_OF_MONTHS` specifies the number of months the temporary tag will last, after which it will disappear."
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*** Example: `tmpt/6/ATAPcolleague` tags the person with `ATAPcolleague`. After 6 months, the tag will disappear."
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// end::tempTag[]"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::v2.0[]"
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Adding a person using the information on social media _(Coming in v2.0)_"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Add someone from a module via Facebook? Add him seamlessly into UniFy!_"
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Adds a person to address book from the social media accounts +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: `add s/SOCIAL_MEDIA_TYPE SOCIAL_MEDIA_ID`"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* The name of social media type is case insensitive."
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add s/facebook John Doe`"
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* `add s/Instagram John Doe`"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::v2.0[]"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::oldContact[]"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Deleting old contacts _(Coming in v2.0)_"
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Some people you do not talk for months. Maybe a group mate from a previous module you never see ever again."
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "They drift away, and out of UniFy they go as well._"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Deletes the contacts which you have not viewed/edited/listed for a certain number of months. +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: `delete old/NUM_OF_MONTH` +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "April0616"
        },
        "content": "Alternatives: `d` , `remove`"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "April0616"
        },
        "content": "* The NUM_OF_MONTH *must be a positive integer* 1, 2, 3, ..."
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "-"
        },
        "content": "****"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "-"
        },
        "content": "Examples:"
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "April0616"
        },
        "content": "* `delete old/2` +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Deletes all the contacts which you have not viewed/edited/listed for the past 2 months."
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::oldContact[]"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::locations[]"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Listing persons who live nearby : `nearby` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_It is Summer break. Who is there to call for late night supper near your home?_"
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Shows a list of persons whose addresses are nearby a specified *address* within a specified radius. +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `nearby a/ADDRESS d/DISTANCE` +"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `n`, `nearme`, `closeby`, `neighbours` `neighbors`"
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `nearby a/Blk 123 Kent Ridge Drive d/500` +"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " Shows a list of people with address 500m away from Blk 123 Kent Ridge Drive."
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* The `DISTANCE` specified is in metres."
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Finding a central location among a group of persons : `central` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_\"Where is a good place for us to meet?\" UniFy everyone\u0027s location to find a central one._"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "After listing persons, shows the central location among the persons most recently listed +"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `central [a/ADDRESS] [INDEX]...` +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Alternatives: `ct`, `center`, `wheremeet`"
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Specifying an `ADDRESS` will include that address in calculating the central location."
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* If an `INDEX`, or more than one `INDEX` is specified, shows the central location among the specified people with these indexes. +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "****"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central` +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Shows the central location among the persons most recently listed."
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central a/Blk 123 Kent Ridge Drive` +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Shows the central location among the persons most recently listed and Blk 123 Kent Ridge Drive."
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list` +"
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central 1 5 6` +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows the central location among the persons most recently listed with Index 1, 5 and 6."
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `list t/jcfriends` +"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "`central` +"
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Shows the central locaton among the persons tagged as \u0027jcfriends\u0027."
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::locations[]"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::sortCommand[]"
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Sorting all persons : `sort` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "April0616"
        },
        "content": "_Sometimes, you just meet too many people in University. Don\u0027t worry, get all your contacts in order._"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "April0616"
        },
        "content": "Shows the list of all persons in the current list in your address book by arranging their names in alphabetical order. +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "April0616"
        },
        "content": "Format: +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Sort by name in ascending order)_ `sort ASC` +"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Sort by name in descending order)_ `sort DESC` +"
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "April0616"
        },
        "content": "Alternatives: `s` , `sortall`, `arrange`"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::sortCommand[]"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "April0616"
        },
        "content": "// tag::password[]"
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Setting a password for your address book : `password` _(Coming in v2.0)_"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::blurb[]"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Your privacy is important. Prevent others from viewing the contact details you possess._"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "____"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::blurb[]"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Sets or changes the password that allows access to the address book +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Format: `password pw/PASSWORD` +"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Alternatives: `p` , `code`"
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `PASSWORD` length is limited to 20 characters."
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Remove the password by putting `PASSWORD` as `PASSWORD`."
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Example: `password pw/PASSWORD` removes the password in UniFy."
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example:"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `password 123456789` +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Adds 123456789 as a password."
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `password` +"
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "To clear the password set."
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "April0616"
        },
        "content": "// end::password[]"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Adding/Deleting a Photo for a person : `photo` _(For Linux and Mac System Coming in v2.0)_"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Allows the photoCommand to work under Linux and Mac Operating System."
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Other features"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "_Here are some features in UniFy that are not in the form of commands, but good to know to aid in your productivity._"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// tag::suggest[]"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Command Suggestion _(Since v1.5)_"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "April0616"
        },
        "content": "Typing a misspelled word for a command will trigger the address book to suggest the correct phrasing for that command"
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "image::command_suggestion.png[width\u003d500]"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_Figure 5.1 : Typing the command `delet` will make UniFy reply `Do you mean delete?`_"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "// end::suggest[]"
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// tag::tagbar[]"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Tag Bar _(Since v1.5)_"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "You can easily view all existing tags as icons, displayed above the person card"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "image::tag_bar.png[width\u003d600]"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_Figure 5.2 : The tag bar is right above the information of the person displayed_"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[NOTE]"
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "For tags that are not in use for any people, they will be in grey and after all the other tags"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_(Coming in v2.0)_ You can click a tag and all people with that tag will be displayed!"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "// end::tagbar[]"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// tag::fontsize[]"
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Font Size _(Coming in v2.0)_"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "If you find the font too big or too small, the font size can be changed in *Appearance* -\u003e *Themes*"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "// end::fontsize[]"
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Footer Bar _(Coming in v2.0)_"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Clicking on a tag will display the number of people associated with that tag. +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "By default, the footer bar shows the total number of people stored."
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Google Maps Integration with Address _(Coming in v2.0)_"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Clicking on the address in the address book will open a Google Map map view of the address location."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d FAQ"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "-"
        },
        "content": "*Q*: How do I transfer my data to another Computer? +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*A*:"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".  In the folder that `UniFy.jar` is in, find the `data` folder"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".  Copy the `addressbook.xml` storage file inside"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".  Transfer that file to the other computer"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ".  Place it in the `data` folder of `UniFy.jar`, on the other computer"
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "****"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Command Summary (v1.5)"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Add* : `add n/NAME [g/GENDER] [p/PHONE_NUMBER] [e/EMAIL] [a/ADDRESS] [m/MATRIC_NUMBER] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `add n/John Doe g/Male p/98765432 e/johnd@example.com a/John street, block 123, #01-01 m/A0134232H tt/http://modsn.us/abCdE t/friend t/colleague`"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "-"
        },
        "content": "* *Clear* : `clear`"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Delete*"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Delete (Person)* : `delete INDEX1 INDEX2 INDEX3` +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `delete 1 2 3`"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Delete (Tag)* : `delete t/TAG...` +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `delete t/modulemate t/colleague`"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Edit*"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Edit (Person)* : `edit INDEX [n/NAME] [g/GENDER] [m/MATRIC_NO] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]...` +"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "e.g. `edit 2 n/James Lee e/jameslee@example.com b/19051994`"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Edit (Tag)* : `edit old/TAG new/TAG` +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "e.g. `edit tag/friends tag/enemy`"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Photo* : `photo INDEX ph/PHOTO_PATH` +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `photo 1 ph/ C:/desktop/photo.jpg`"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Delete Photo* : `photo INDEX` +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `photo 1`"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "April0616"
        },
        "content": "* *Remark* : `remark INDEX r/REMARK1 [r/REMARK2]...` +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "April0616"
        },
        "content": "e.g. `remark 2 r/Likes to drink coffee r/CAP 5.0`"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Delete Remark* : `remark INDEX` +"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `remark 2`"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Find* : `find [n/NAME] [t/Tag] [p/PHONE] [e/EMAIL] [b/BIRTHDAY MONTH] [a/ADDRESS]...` +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "e.g. `find n/James Jake`"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Google Maps* `gmaps INDEX` +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `gmaps 2`"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "** *Finding Directions* `gmaps INDEX a/ADDRESS` +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `gmaps 1 a/NUS`"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *View Combined Timetables* `whenfree INDEX [OTHER INDEXES]` +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `whenfree 1 4 5`"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* *Change Theme* `theme THEME NAME` +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "e.g. `theme light`"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "-"
        },
        "content": "* *List* : `list`"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "-"
        },
        "content": "* *Help* : `help`"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "-"
        },
        "content": "* *Select* : `select INDEX` +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "-"
        },
        "content": "e.g.`select 2`"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "-"
        },
        "content": "* *History* : `history`"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "-"
        },
        "content": "* *Undo* : `undo`"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "-"
        },
        "content": "* *Redo* : `redo`"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Command Alternatives Reference Table"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "_In alphabetical order_"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[width\u003d\"15%\", options\u003d\"header\",]"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|Command | Alternatives |-|-"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|add | a | insert |-"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|clear | c | wipe |-"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|delete | d | remove |-"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|edit | e | modify | change"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|exit | x | quit |-"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|find | f | search |-"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|gmaps | g | map | maps"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|help | kbd:[F1] |-|-"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|history | h | past |-"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|list | l | showall | viewall"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|photo | ph |-|-"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|redo | r |-|-"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|remark | rm |-|-"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|select| s | choose |-"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|theme | th | changetheme|-"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|whenfree | wf | timetable |-"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "|undo | u |-|-"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Version Notes"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.1"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `remark` command"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete` support for tags"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.2"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Added new person contact information fields"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Birthday"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Timetable"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Gender"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Matriculation Number"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `edit` support for tags"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Version 1.3"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `gmaps` command"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* `delete` support for multiple persons"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Auto-correct command suggested"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Display of person\u0027s information on `select`"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Version 1.4"
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Display of all tags"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Display of person\u0027s timetable on `select`"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Support for profile photo uploading"
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Support for `find` using more fields"
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Version 1.5"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Viewing of combined timetables"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Improve UI, add InfoPersonPanel"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Make add command fields optional"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Change the themes of the app"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "|\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 212,
      "CindyTsai1": 77,
      "nbriannl": 328,
      "April0616": 135,
      "-": 159
    }
  },
  {
    "path": "docs/team/April0616.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d Fan Yuting - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/tree/master"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Project: UniFy"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Introduction to UniFy"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "UniFy is a command-line application which provides a convenient way to store students\u0027 contact information."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "It is customised for NUS students, allowing them to efficiently manage their contact lists."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "The user interacts with it using a CLI, and it has a GUI created with JavaFX."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "It is written in Java, and has about 10 kLoC."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::UiDark.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "ifndef::env-github[]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::Ui.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::UiDark.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Code contributed*: [https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/main/April0616.md[Functional code]] [https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/test/April0616.md[Test code]] {give links to collated code files}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: PhotoCommand"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003dphotoCommand]"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "PhotoCommand is useful as it can remind the user of what his contacts look like."
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "Users can easily assign photos to their contacts by specifying the unique photo path in their computers."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "Also, the display picture of a contact can be easily changed or deleted by the PhotoCommand."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/96[#96], https://github.com/CS2103AUG2017-W09-B1/main/pull/150[#150])"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dphotoCommand]"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: RemarkCommand"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003dremarkCommand]"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "Existing tags are too short for the user to put down the noteworthy thing of a contact,"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "and the remark for a person are more descriptive and unique so that you can always look back on."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "The remark command is designed to be an undoable command, and a new attribute named \u0027Remark\u0027 is"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "added to the \u0027Person\u0027 class. The remark of a person will be displayed in the person information panel"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "if the user key in the select command."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/50[#50], https://github.com/CS2103AUG2017-W09-B1/main/pull/131[#131])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dremarkCommand]"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Gender \u0026 MatricNo attributes"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbirthday]"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/68[#68])"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Delete multiple persons"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletePersons]"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/79[#79])"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Improve User Interface (Restructure MainWindow and create PersonInfoPanel)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "image::Yuting_UI.png[width\u003d\"600\"]"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "(Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/133[#133])"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Temporary Tags"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtempTag]"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Delete Old Contacts"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "include::../UserGuide.adoc[tag\u003doldContact]"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Other enhancements and contributions"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Improve styles (Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/140/files[#140], https://github.com/CS2103AUG2017-W09-B1/main/pull/107[#107], https://github.com/CS2103AUG2017-W09-B1/main/pull/131[#131])"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Form team in Github and setup the team repository"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Do manual testing for UniFy and raised 15 issues (https://github.com/CS2103AUG2017-W09-B1/main/issues/171[#171], https://github.com/CS2103AUG2017-W09-B1/main/issues/187[#187], https://github.com/CS2103AUG2017-W09-B1/main/issues/188[#188], https://github.com/CS2103AUG2017-W09-B1/main/issues/190[#190], https://github.com/CS2103AUG2017-W09-B1/main/issues/193[#193], https://github.com/CS2103AUG2017-W09-B1/main/issues/194[#194], https://github.com/CS2103AUG2017-W09-B1/main/issues/196[#196], https://github.com/CS2103AUG2017-W09-B1/main/issues/197[#197], https://github.com/CS2103AUG2017-W09-B1/main/issues/198[#198], https://github.com/CS2103AUG2017-W09-B1/main/issues/199[#199], https://github.com/CS2103AUG2017-W09-B1/main/issues/200[#200], https://github.com/CS2103AUG2017-W09-B1/main/issues/202[#202], https://github.com/CS2103AUG2017-W09-B1/main/issues/203[#203], https://github.com/CS2103AUG2017-W09-B1/main/issues/204[#204], https://github.com/CS2103AUG2017-W09-B1/main/issues/251[#251])"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "* Do acceptance testing for another group (https://github.com/CS2103AUG2017-W11-B3/main[W11-b3]), find bugs (Issues https://github.com/CS2103AUG2017-W11-B3/main/issues/53[#53], https://github.com/CS2103AUG2017-W11-B3/main/issues/56[#56]), and give suggestions(https://github.com/CS2103AUG2017-W11-B3/main/issues/57[#57], https://github.com/CS2103AUG2017-W11-B3/main/issues/62[#62])"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Other Projects"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d FisheryApp"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "Build a software application for LSM4255 (Methods in Mathematical Biology) class in a team."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "This application allows students to participate in a fisheries management game to demonstrate the concepts of resource use,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "co-operation, and the tragedy of the commons."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Github Link*: [https://github.com/April0616/fishery-app[FisheryApp for LSM4255]] +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Blog Post Link* : [https://ryanchisholm.wordpress.com/2017/11/11/students-develop-fishery-management-game-for-teaching-the-tragedy-of-the-commons/[Professor Chisholm\u0027s Blog Post]]"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Algorithm Design Project"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "Analyze the application of Game theory and Nash-equilibrium for a dynamic multiplayer competition."
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "Design and implement the basic algorithm for evaluating the value of choices and providing the theoretically"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "best strategy in the competition. Write the basic source code for this mathematical tool for “iyingdi” website and its mobile app."
      }
    ],
    "authorContributionMap": {
      "April0616": 166,
      "-": 25
    }
  },
  {
    "path": "docs/team/cindytsai1.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d Tsai Yu Hsuan - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Project: UniFy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "UniFy is a desktop Address Book application for students from National University of Singapore."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "The user is able to manage the people he meets in University, such as keeping track of his friends\u0027 Birthdays, viewing his friend’s timetables."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Most of the user interactions are via CLI, while there exists a GUI created with JavaFX. It is written in Java and has"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "about 6kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The source code is based on the  https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Code contributed*: [https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/main/CindyTsai1.md[Functional code]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/test/CindyTsai1.md[Test code]] +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Birthday Attribute"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dbirthday]"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Users are able to store birthdays by inputting in the format of DDMMYYYY when adding a person. This allows the user to get a list of people having the same birthday month which is especially important for university students who celebrates friends\u0027 birthdays."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dbirthday]"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Find Command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This command allows users to find contacts easily using different fields of information, not limited to only the name field. It would be more flexible for users to find a person and it allows users to limit their search so as to find the correct person faster."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dfind]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Suggest Command"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "This command is implemented to prompt the error message to users so as to suggest users the correct command spelling. We believe this is useful as spelling errors are common and this enhancement serves as a guide for users."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dsuggest]"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Password command"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dpassword]"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Sort command"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dsortCommand]"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Other contributions (CS2103T)"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Make add command fields optional (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/154[#154])"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* UI: Change error message colour (Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/57[#57])"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Modified or added to test to maintain or increase coverage (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/86[#86], Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/268[#268])"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Storage backup (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/3[#3])"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d Other contributions (CS2101)"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Written by me, edited by Brian"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../UserGuide.adoc[tag\u003dv2.0]"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Edited the You Language and consistency"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dyou]"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "---"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Project:"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Worked CP2106 Independent Software Development Project (Orbital)"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 114,
      "nbriannl": 8,
      "-": 34
    }
  },
  {
    "path": "docs/team/nbriannl.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d Labayna Neil Brian Narido - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Purpose"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This project portfolio documents the software experience I have in the module CS2103/T (Software Engineering)."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "A section titled \u0027Documentation Contributions (For CS2101 Use)\u0027 contains *additional*"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "documentation contribution I would like the evaluators in CS2101 (Effective Communication for Computing Professionals) to"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "take additional note of."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "It is *not* for CS2103/T use."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Project: UniFy"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "UniFy is a desktop Address Book application for University students, particularly those from NUS (National University of Singapore)."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The user is able to manage the many people he meets in University, keep track of his friends\u0027 Birthdays, view his friend’s timetables, and much more."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Most of the user interactions are via Command Line Interface, while there exists a Graphical User Interface created with JavaFX. It is written in Java and has"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "about 8kLoC."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The source code is based on the https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*Code contributed*: [https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/main/nbriannl.md[Functional code]]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "[https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/test/nbriannl.md[Test code]] +"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Delete Tag"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003ddeletetag]"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Deleting a common tag present in multiple contact is tedious, therefore being able to delete a common tag is seen"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "as an essential feature by a busy University student seeking efficiency."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For example, a University Student, who wants to delete an irrelevant tag (such as \u0027ProjectGroupMate\u0027, when a project is completed),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "would want to delete the tag from every contact containing that tag. It would be very inefficient for him"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to find all his contacts with that tag, and edit each and every contact with a new set of tags, which excludes the"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "tag to be deleted."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003ddeletetag]"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Edit Tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dedittag]"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Editing a tag would be a common task a University Student would face."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "For example, he may have a clique of friends tagged as a particular module (e.g. CS2010). When all"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "his friends follow him to another module (e.g. CS3230), he would like to edit all his contacts\u0027 \u0027CS2010\u0027"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "tag to \u0027CS3230\u0027. He could edit each and every contact with a new set of tags, including the renamed tag, but it"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "would be extremely inefficient. Hence, this feature would be convenient and essential for the application."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dedittag]"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: GMaps Command To Find Location and Show Directions"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dgmaps]"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The target user, the NUS university student, would find himself wanting to meet his friends, either for leisure"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "or for group projects. If the meet up location is at the house of one of his friends, he would be able to use the application"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "to easily search for the location since he may have stored the friend\u0027s address in the application."
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Furthermore, if he is at some location, for example, at school, and would like to find the directions to his friend\u0027s house,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "he is able to quickly type a command to get directions to his friend\u0027s house from his location."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Tag Bar"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtagbar]"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Being able to see all tags that exist in the address book has many benefits to the User Experience. +"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "It is a useful overview of all the distinct groups of people he may want to he know he has in University, be it friends,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "classmates or teaching staff. +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "Moreover, users would be able to refer to the bar of tags to easily type in other commands in the application"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "(for example, finding contacts by tag, deleting and tag or editing a tag)."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "It is a quick overview to all the tags that are present in UniFy, as well as which tags"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "are present in the address book, but unused by any contact."
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Themes In UniFy and Theme Command in UniFy"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtheme]"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The 2 themes and the Theme Command adds on to the User Experience by providing variety to the user interface."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "This enhancement lays on the groundwork for future CSS stylesheets to be added in the application."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Enhancements Proposed: Location Related Commands"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dlocations]"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Pull Requests References For The Above Features"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Delete Tag: (Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/5[#5], https://github.com/CS2103AUG2017-W09-B1/main/pull/12[#12])"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Edit Tag: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/69[#69])"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* GMaps Command: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/74[#74])"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Tag Bar: (Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/88[#88], https://github.com/CS2103AUG2017-W09-B1/main/pull/152[#152],)"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Themes and Theme Command: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/134[#134])"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Fixed White Screen Bug (Trivial Fix, shared by peers): (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/75[#75])"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Major Edit Pass for User Guide (Audience-centric Language): (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/81[#81])"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Fix response of Person Overview to GMapsCommand: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/135[#135])"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Minor UI Adjustments: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/138[#138])"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Standardized Color Across All Tags in UI Using a Singleton class TagColorMap: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/143[#143])"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Fixed Person Info Panel (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/147[#147])"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Various Fixes For Final v1.5 Product"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** UI: (Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/183[#183], https://github.com/CS2103AUG2017-W09-B1/main/pull/185[#185],"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "https://github.com/CS2103AUG2017-W09-B1/main/pull/209[#209], https://github.com/CS2103AUG2017-W09-B1/main/pull/225[#225])"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Delete Tag: (Pull request: https://github.com/CS2103AUG2017-W09-B1/main/pull/219[#219])"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Birthday Attribute: (Pull requests: https://github.com/CS2103AUG2017-W09-B1/main/pull/220[#220], https://github.com/CS2103AUG2017-W09-B1/main/pull/234[#234],)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Edit Tag: (Pull request: https://github.com/CS2103AUG2017-W09-B1/main/pull/227[#227])"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Prompt Remark on too long a tag: (Pull request: https://github.com/CS2103AUG2017-W09-B1/main/pull/229[#229])"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** Updated SampleData for Manual Testing: (Pull request: https://github.com/CS2103AUG2017-W09-B1/main/pull/237[#237])"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "** GMaps Command: (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/239[#239])"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Modified or added to test to maintain or increase coverage"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "(Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/12[#12])"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d Documentation Contributions (For CS2101 Use)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d\u003d\u003d Added short blurb before most features in User Guide"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "include::../UserGuide.adoc[tag\u003dblurb]"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "---"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 171,
      "-": 39
    }
  },
  {
    "path": "docs/team/zacharytang.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d Zachary Tang Tjun Chii - Project Portfolio"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: ../images"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: ../stylesheets"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Project: UniFy"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "UniFy is a desktop Address Book application for University students, particularly those from NUS (National University of Singapore)."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The user is able to manage the many people he meets in University, keep track of his friends\u0027 Birthdays, view his friend’s timetables, and much more."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Most of the user interactions are via a command line interface, while there exists a graphic user interface created with JavaFX. It is written in Java and has"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "about 8kLoC."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "The source code is based on the  https://github.com/se-edu/addressbook-level4[AddressBook-Level4] project created by SE-EDU initiative."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Code contributed*: [https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/main/zacharytang.md[Functional code]]"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[https://github.com/CS2103AUG2017-W09-B1/main/blob/master/collated/test/zacharytang.md[Test code]] +"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Enhancement Added: Timetable Features"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Covers features relating to the saving of a person\u0027s timetables, and displaying of timetable information"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "**Code implemented**: Pull requests https://github.com/CS2103AUG2017-W09-B1/main/pull/54[#54],"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://github.com/CS2103AUG2017-W09-B1/main/pull/98[#98],"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "https://github.com/CS2103AUG2017-W09-B1/main/pull/129[#129]"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d External behavior"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dtimetable]"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d\u003d Justification"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "NUS students are the target audience of our application, and most planning of events or group meetings require the"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "usage of an individual\u0027s timetables. By implementing the storage of timetables and viewing of combined timetables, users will be"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "able to easily see when common free times between groups of people are."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "\u003d\u003d\u003d\u003d Implementation"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "---"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "#Start of Extract [from: Developer Guide]#"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "include::../DeveloperGuide.adoc[tag\u003dtimetable]"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Enhancement Proposed: Changing of font size"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dfontsize]"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d User Guide Contributions: Introduction"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#Start of Extract [from: User Guide]#"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "include::../UserGuide.adoc[tag\u003dintro]"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "#End of Extract#"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "---"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "\u003d\u003d\u003d Other contributions"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Integration of individual UI enhancement and fixes (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/136[#136],"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/141[#141])"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* UI: Display of selected person in main window (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/87[#87])"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* UI: Updated footer to include number of persons (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/14[#14])"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Added aliases for commands (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/13[#13],"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/2[#2])"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Maintained tests (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/218[#218],"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/211[#211],"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/181[#181])"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Maintained project documentation (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/262[#262],"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/240[#240])"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "* Maintained project repo page (Pull request https://github.com/CS2103AUG2017-W09-B1/main/pull/15[#15],"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/9[#9],"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " https://github.com/CS2103AUG2017-W09-B1/main/pull/1[#1])"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "\u003d\u003d Project:"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "* Worked CP2106 Independent Software Development Project (Orbital)"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 69,
      "nbriannl": 10,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/MainApp.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Application;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Version;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.ConfigUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.LogicManager;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.AddressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.JsonUserPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.Storage;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.StorageManager;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.UserPrefsStorage;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.storage.XmlAddressBookStorage;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.Ui;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.UiManager;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * The main entry point to the application."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class MainApp extends Application {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Version VERSION \u003d new Version(1, 5, 1, true);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(MainApp.class);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Ui ui;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Logic logic;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Storage storage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model model;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs userPrefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void init() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d[ Initializing AddressBook ]\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        super.init();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        config \u003d initConfig(getApplicationParameter(\"config\"));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefsStorage userPrefsStorage \u003d new JsonUserPrefsStorage(config.getUserPrefsFilePath());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefs \u003d initPrefs(userPrefsStorage);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStorage addressBookStorage \u003d new XmlAddressBookStorage(userPrefs.getAddressBookFilePath());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        storage \u003d new StorageManager(addressBookStorage, userPrefsStorage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        initLogging(config);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d initModelManager(storage, userPrefs);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        logic \u003d new LogicManager(model);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        ui \u003d new UiManager(logic, config, userPrefs);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        initEventsCenter();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    private String getApplicationParameter(String parameterName) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Map\u003cString, String\u003e applicationParameters \u003d getParameters().getNamed();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return applicationParameters.get(parameterName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code ModelManager} with the data from {@code storage}\u0027s address book and {@code userPrefs}. \u003cbr\u003e"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * The data from the sample address book will be used instead if {@code storage}\u0027s address book is not found,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an empty address book will be used instead if errors occur when reading {@code storage}\u0027s address book."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model initModelManager(Storage storage, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cReadOnlyAddressBook\u003e addressBookOptional;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook initialData;"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            addressBookOptional \u003d storage.readAddressBook();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!addressBookOptional.isPresent()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                logger.info(\"Data file not found. Will be starting with a sample AddressBook\");"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d addressBookOptional.orElseGet(SampleDataUtil::getSampleAddressBook);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Data file not in the correct format. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "            initialData \u003d new AddressBook();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ModelManager(initialData, userPrefs);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initLogging(Config config) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        LogsCenter.init(config);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code Config} using the file at {@code configFilePath}. \u003cbr\u003e"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * The default file path {@code Config#DEFAULT_CONFIG_FILE} will be used instead"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * if {@code configFilePath} is null."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Config initConfig(String configFilePath) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        Config initializedConfig;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        String configFilePathUsed;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        configFilePathUsed \u003d Config.DEFAULT_CONFIG_FILE;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        if (configFilePath !\u003d null) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Custom Config file specified \" + configFilePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            configFilePathUsed \u003d configFilePath;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using config file : \" + configFilePathUsed);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cConfig\u003e configOptional \u003d ConfigUtil.readConfig(configFilePathUsed);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d configOptional.orElse(new Config());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Config file at \" + configFilePathUsed + \" is not in the correct format. \""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default config properties\");"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedConfig \u003d new Config();"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update config file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            ConfigUtil.saveConfig(initializedConfig, configFilePathUsed);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedConfig;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a {@code UserPrefs} using the file at {@code storage}\u0027s user prefs file path,"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     * or a new {@code UserPrefs} with default configuration if errors occur when"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * reading from the file."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    protected UserPrefs initPrefs(UserPrefsStorage storage) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        String prefsFilePath \u003d storage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Using prefs file : \" + prefsFilePath);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs initializedPrefs;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cUserPrefs\u003e prefsOptional \u003d storage.readUserPrefs();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d prefsOptional.orElse(new UserPrefs());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DataConversionException e) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"UserPrefs file at \" + prefsFilePath + \" is not in the correct format. \""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "                    + \"Using default user prefs\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Problem while reading from the file. Will be starting with an empty AddressBook\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            initializedPrefs \u003d new UserPrefs();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        //Update prefs file in case it was missing to begin with or there are new/unused fields"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(initializedPrefs);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.warning(\"Failed to save config file : \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        return initializedPrefs;"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initEventsCenter() {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().registerHandler(this);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting AddressBook \" + MainApp.VERSION);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.start(primaryStage);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d [ Stopping Address Book ] \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        ui.stop();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "            storage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(\"Failed to save preferences \" + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(0);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleExitAppRequestEvent(ExitAppRequestEvent event) {"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        this.stop();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void main(String[] args) {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        launch(args);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 1,
      "-": 210
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Config.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Level;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Config values used by the app"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class Config {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_CONFIG_FILE \u003d \"config.json\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    // Config values customizable through config file"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String appTitle \u003d \"UniFy\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private Level logLevel \u003d Level.INFO;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private String userPrefsFilePath \u003d \"preferences.json\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAppTitle() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return appTitle;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAppTitle(String appTitle) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.appTitle \u003d appTitle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public Level getLogLevel() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return logLevel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setLogLevel(Level logLevel) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logLevel \u003d logLevel;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsFilePath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUserPrefsFilePath(String userPrefsFilePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsFilePath \u003d userPrefsFilePath;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof Config)) { //this handles null as well."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Config o \u003d (Config) other;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(appTitle, o.appTitle)"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(logLevel, o.logLevel)"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(userPrefsFilePath, o.userPrefsFilePath);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(appTitle, logLevel, userPrefsFilePath);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"App title : \" + appTitle);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nCurrent log level : \" + logLevel);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nPreference file Location : \" + userPrefsFilePath);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 1,
      "-": 71
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/MessageAlignmentFormatter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Container for whitespace strings used to align command usage messages"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class MessageAlignmentFormatter {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_EXAMPLE \u003d \"               \";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_PARAMETERS \u003d \"                   \";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_DELETE \u003d \"               \";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_GMAPS \u003d \"               \";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_PHOTO \u003d \"               \";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_THEME \u003d \"               \";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_REMARK \u003d \"                 \";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String FORMAT_ALIGNMENT_TO_EDIT \u003d \"           \";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/Messages.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Container for user visible messages."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class Messages {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_UNKNOWN_COMMAND \u003d \"Unknown command\";"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_COMMAND_FORMAT \u003d \"Invalid command format! \\n%1$s\";"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_INVALID_FILE_PATH \u003d \"Invalid file path! \\n%1$s\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Cannot find file here! \\n%1$s\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_PERSON_DISPLAYED_INDEX \u003d \"The person index provided is invalid\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_INVALID_TAG_PROVIDED \u003d \"One (or more) of the tags provided does not exist\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_THEME_NOT_FOUND \u003d \"Invalid Theme Name\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_ALREADY_IN_THEME \u003d \"You are already using this theme!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PERSONS_LISTED_OVERVIEW \u003d \"%1$d persons listed!\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAY_MONTH_SEARCHED \u003d \" [Born in %1$s]\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "nbriannl": 3,
      "April0616": 2,
      "-": 12
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/core/index/Index.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a zero-based or one-based index."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Index} should be used right from the start (when parsing in a new user input), so that if the current"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * component wants to communicate with another component, it can send an {@code Index} to avoid having to know what"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * base the other component is using for its index. However, after receiving the {@code Index}, that component can"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * convert it back to an int if the index will not be passed to a different component again."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Index {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private int zeroBasedIndex;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Index can only be created by calling {@link Index#fromZeroBased(int)} or"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@link Index#fromOneBased(int)}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private Index(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        if (zeroBasedIndex \u003c 0) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IndexOutOfBoundsException();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.zeroBasedIndex \u003d zeroBasedIndex;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getZeroBased() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getOneBased() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        return zeroBasedIndex + 1;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Creates a new {@code Index} using a zero-based index."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromZeroBased(int zeroBasedIndex) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(zeroBasedIndex);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Creates a new {@code Index} using a one-based index."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index fromOneBased(int oneBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Index(oneBasedIndex - 1);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Index // instanceof handles nulls"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.zeroBasedIndex \u003d\u003d ((Index) other).zeroBasedIndex); // state check"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/MasterTagListHasAnUnusedTagEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates that the master tag list has an unused tag not used by any person*/"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class MasterTagListHasAnUnusedTagEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final Set\u003cTag\u003e outdatedTags;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public MasterTagListHasAnUnusedTagEvent (Set\u003cTag\u003e outdatedTags) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.outdatedTags \u003d outdatedTags;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"The tag list is outdated. With outdated tags: \" + outdatedTags.toString();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 21,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonAddressDisplayDirectionsEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates a person\u0027s address as a map is to be displayed*/"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonAddressDisplayDirectionsEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final Address address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonAddressDisplayDirectionsEvent(ReadOnlyPerson person, Address address, int targetIndex) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.address \u003d address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Displaying location of \" + person.getName() + \": \" + person.getAddress()"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + \" from \" + address.toString();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 21,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/model/PersonAddressDisplayMapEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/** Indicates a person\u0027s address as a map is to be displayed*/"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonAddressDisplayMapEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final int targetIndex;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonAddressDisplayMapEvent (ReadOnlyPerson person, int targetIndex) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Displaying location of \" + person.getName() + \": \" + person.getAddress();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 17,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/ChangeThemeRequestEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "content": "//@@author nbriannl-reused"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates a request to jump to the list of persons"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class ChangeThemeRequestEvent extends BaseEvent {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final String themeToChangeTo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public ChangeThemeRequestEvent (String themeToChangeTo) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.themeToChangeTo \u003d themeToChangeTo;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "nbriannl": 7,
      "-": 14
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/NewResultAvailableEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Indicates that a new result is available."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class NewResultAvailableEvent extends BaseEvent {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String message;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public final boolean isError;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public NewResultAvailableEvent(String message, boolean isError) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.message \u003d message;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.isError \u003d isError;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.getClass().getSimpleName();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 8,
      "-": 17
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonHasBeenDeletedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Represents a deletion of a person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonHasBeenDeletedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson deletedPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonHasBeenDeletedEvent (ReadOnlyPerson deletedPerson) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.deletedPerson \u003d deletedPerson;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Person has been deleted: \" + deletedPerson.getName().toString();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 19,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonHasBeenModifiedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Represents a modification to a person."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class PersonHasBeenModifiedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson oldPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ReadOnlyPerson newPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public PersonHasBeenModifiedEvent (ReadOnlyPerson oldPerson, ReadOnlyPerson newPerson) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldPerson \u003d oldPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newPerson \u003d newPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Person has been modified: \" + newPerson.getName().toString();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 21,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/PersonSelectedEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a person being selected"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class PersonSelectedEvent extends BaseEvent {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final int index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonSelectedEvent(ReadOnlyPerson person, int index) {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return \"Person selected: \" + person.getName().toString();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 20,
      "nbriannl": 1,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/events/ui/TimetableDisplayEvent.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.events.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.BaseEvent;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a request to display timetables in the UI"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableDisplayEvent extends BaseEvent {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final List\u003cReadOnlyPerson\u003e personsToDisplay;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableDisplayEvent(List\u003cReadOnlyPerson\u003e personList) {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.personsToDisplay \u003d personList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StringBuilder msg \u003d new StringBuilder();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        msg.append(\"Timetables displayed for the selected people: \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ReadOnlyPerson person : personsToDisplay) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(\"[\");"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(person.getName().toString());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(\"] \");"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return msg.toString();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 31,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/exceptions/NoInternetConnectionException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Signals that there is no internet connection for reading from web APIs"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class NoInternetConnectionException extends Exception {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public NoInternetConnectionException(String message) {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(message);"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 11
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/FileUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.BufferedInputStream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.BufferedOutputStream;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.FileInputStream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.FileOutputStream;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Writes and reads files"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class FileUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String REGEX_VALID_IMAGE \u003d \"([^\\\\s]+(\\\\.(?i)(jpg|jpeg|png|gif|bmp))$)\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String CHARSET \u003d \"UTF-8\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks whether the file is a valid image file."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * A valid image file should have extension \"jpg\", \"jpeg\", \"png\", \"gif\" or \"bmp\"."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param photoPath of the image"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if it has specified extension"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Boolean isValidImageFile(String photoPath) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPath.matches(REGEX_VALID_IMAGE);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the extension of the file path by split the path string by regex \".\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param filePath"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return extension string"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static String getFileExtension(String filePath) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return \".\" + filePath.split(\"\\\\.\")[1];"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks whether the specified file is in the specified folder."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param filePath of the file to be checked"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param folderPath of the folder"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if the file is in the folder"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Boolean isInFolder(String filePath, String folderPath) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return filePath.startsWith(folderPath);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Copies all the contents from the file in original path to the one in destination path."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param oriPath of the file to be copied"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param destPath of the file to be pasted"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if the file is successfully copied to the specified place."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean copyFile(String oriPath, String destPath) throws IOException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //create a buffer to store content"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        byte[] buffer \u003d new byte[1024];"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //bufferedInputStream"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        FileInputStream fis \u003d new FileInputStream(oriPath);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "        BufferedInputStream bis \u003d new BufferedInputStream(fis);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //bufferedOutputStream"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        FileOutputStream fos \u003d new FileOutputStream(destPath);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        BufferedOutputStream bos \u003d new BufferedOutputStream(fos);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        int numBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        while (numBytes \u003e 0) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "            bos.write(buffer, 0, numBytes);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "            numBytes \u003d bis.read(buffer);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //close input,output stream"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        bis.close();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        bos.close();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes the file in the app if it exists."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param path of the file to be deleted"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void removeAppFile(String path) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File fileToDelete \u003d new File(path);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (fileToDelete.exists()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "            fileToDelete.delete();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks whether two files have the same content."
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param firstPath path of one file"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param secondPath path of another file"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if they have the same content, false otherwise"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IOException if an I/O error occurs reading from the stream"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean haveSameContent(String firstPath, String secondPath) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Path p1 \u003d Paths.get(firstPath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Path p2 \u003d Paths.get(secondPath);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        byte[] firstFileBytes \u003d new byte[0];"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "            firstFileBytes \u003d Files.readAllBytes(p1);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"An I/O error occurs reading from the stream.\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        byte[] secondFileBytes \u003d new byte[0];"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "            secondFileBytes \u003d Files.readAllBytes(p2);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"An I/O error occurs reading from the stream.\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return Arrays.equals(firstFileBytes, secondFileBytes);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isFileExists(File file) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return file.exists() \u0026\u0026 file.isFile();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createIfMissing(File file) throws IOException {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isFileExists(file)) {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            createFile(file);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a file if it does not exist along with its missing parent directories"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return true if file is created, false if file already exists"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean createFile(File file) throws IOException {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        if (file.exists()) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        createParentDirsOfFile(file);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        return file.createNewFile();"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the given directory along with its parent directories"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param dir the directory to be created; assumed not null"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if the directory or a parent directory cannot be created"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createDirs(File dir) throws IOException {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!dir.exists() \u0026\u0026 !dir.mkdirs()) {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IOException(\"Failed to make directories of \" + dir.getName());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates parent directories of file if it has a parent directory"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void createParentDirsOfFile(File file) throws IOException {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        File parentDir \u003d file.getParentFile();"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        if (parentDir !\u003d null) {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "            createDirs(parentDir);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     * Assumes file exists"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String readFromFile(File file) throws IOException {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        return new String(Files.readAllBytes(file.toPath()), CHARSET);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Writes given string to a file."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will create the file if it does not exist yet."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void writeToFile(File file, String content) throws IOException {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        Files.write(file.toPath(), content.getBytes(CHARSET));"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a string to a platform-specific file path"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param pathWithForwardSlash A String representing a file path but using \u0027/\u0027 as the separator"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return {@code pathWithForwardSlash} but \u0027/\u0027 replaced with {@code File.separator}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPath(String pathWithForwardSlash) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        checkArgument(pathWithForwardSlash.contains(\"/\"));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return pathWithForwardSlash.replace(\"/\", File.separator);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 109,
      "-": 90
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/StringUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.AppUtil.checkArgument;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.PrintWriter;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.StringWriter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Helper functions for handling strings."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtil {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Returns true if the {@code sentence} equals the {@code word}."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   Ignores case, but a full word match is required."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   \u003cbr\u003eexamples:\u003cpre\u003e"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc def\") \u003d\u003d true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"abc DEF\") \u003d\u003d true"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *       containsWordIgnoreCase(\"ABc def\", \"AB\") \u003d\u003d false //not a full word match"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *       \u003c/pre\u003e"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param sentence cannot be null"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param word cannot be null, cannot be empty, must be a single word"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static boolean containsWordIgnoreCase(String sentence, String word) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(sentence);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(word);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String preppedSentence \u003d sentence.trim();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] wordsInPreppedSentence \u003d preppedSentence.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String preppedWord \u003d word.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] wordsInPreppedWord \u003d preppedWord.split(\"\\\\s+\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        checkArgument(!wordsInPreppedWord[0].equals(\"\"), \"Word parameter cannot be empty\");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //checkArgument(preppedWord.split(\"\\\\s+\").length \u003d\u003d 1, \"Word parameter should be a single word\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //check if the names and the word have the same number of words"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (wordsInPreppedSentence.length !\u003d wordsInPreppedWord.length) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //check if all words in sentence matches all words in word"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c wordsInPreppedSentence.length; i++) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (!wordsInPreppedSentence[i].equalsIgnoreCase(wordsInPreppedWord[i])) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a detailed message of the t, including the stack trace."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getDetails(Throwable t) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(t);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        StringWriter sw \u003d new StringWriter();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        t.printStackTrace(new PrintWriter(sw));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        return t.getMessage() + \"\\n\" + sw.toString();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if {@code s} represents a non-zero unsigned integer"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. 1, 2, 3, ..., {@code Integer.MAX_VALUE} \u003cbr\u003e"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Will return false for any other non-null string input"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * e.g. empty string, \"-1\", \"0\", \"+1\", and \" 2 \" (untrimmed), \"3 0\" (contains whitespace), \"1 a\" (contains letters)"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code s} is null."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isNonZeroUnsignedInteger(String s) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(s);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            int value \u003d Integer.parseInt(s);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "            return value \u003e 0 \u0026\u0026 !s.startsWith(\"+\"); // \"+1\" is successfully parsed by Integer#parseInt(String)"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NumberFormatException nfe) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 38,
      "-": 41
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/Lesson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a lesson that a module has"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class Lesson {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String classNo;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String lessonType;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String weekType;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String day;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String startTime;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final String endTime;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Lesson(String classNo, String lessonType, String weekType,"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                  String day, String startTime, String endTime) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.classNo \u003d classNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.lessonType \u003d lessonType;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.weekType \u003d weekType;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.day \u003d day;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.startTime \u003d startTime;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.endTime \u003d endTime;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getClassNo() {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return classNo;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getLessonType() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return lessonType;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getWeekType() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return weekType;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getDay() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return day;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getStartTime() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return startTime;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getEndTime() {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return endTime;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/ModuleInfoFromUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents lesson for a specific module parsed from a NUSMods url"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class ModuleInfoFromUrl {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String modCode;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private HashMap\u003cString, String\u003e lessonInfo;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ModuleInfoFromUrl(String modCode) {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.modCode \u003d modCode;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        lessonInfo \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds information for a specific lesson"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void addLesson(String classType, String classNo) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        lessonInfo.put(classType, classNo);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getModCode() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return modCode;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public HashMap\u003cString, String\u003e getLessonInfo() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return lessonInfo;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof ModuleInfoFromUrl)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return this.modCode.equals(((ModuleInfoFromUrl) other).getModCode());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 48
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/TimetableInfoFromUrl.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents all timetable information parsed from a NUSMods url"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableInfoFromUrl {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ArrayList\u003cModuleInfoFromUrl\u003e moduleInfo;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableInfoFromUrl() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        moduleInfo \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ArrayList\u003cModuleInfoFromUrl\u003e getModuleInfoList() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return moduleInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Gets lessons for a specific module code. If module does not exist, creates a new ModuleInfoFromUrl object"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ModuleInfoFromUrl getModuleInfo(String moduleCodeToGet) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ModuleInfoFromUrl currentModule : moduleInfo) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (currentModule.getModCode().equals(moduleCodeToGet)) {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return currentModule;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return new ModuleInfoFromUrl(moduleCodeToGet);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds lesson information for a specific module to the timetable information."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void addModuleInfo(ModuleInfoFromUrl moduleInfoToAdd) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (moduleInfo.contains(moduleInfoToAdd)) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.set(moduleInfo.indexOf(moduleInfoToAdd), moduleInfoToAdd);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.add(moduleInfoToAdd);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 44
    }
  },
  {
    "path": "src/main/java/seedu/address/commons/util/timetable/TimetableParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_FRIDAY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_MONDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_THURSDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_TUESDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.DAY_WEDNESDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_INVALID_SHORT_URL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_BOTH;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_EVEN;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_ODD;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.isValidUrl;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.HttpURLConnection;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.Proxy;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import com.fasterxml.jackson.databind.JsonMappingException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import com.fasterxml.jackson.databind.ObjectMapper;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.exceptions.NoInternetConnectionException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Helper class that contains utilities to parse NUSMods urls."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableParserUtil {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_CLASS_TYPE \u003d \"Invalid class type provided!\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_WEEK_TYPE \u003d \"Invald week type!\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_TIME \u003d \"Invalid timing provided!\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_DAY \u003d \"Invalid day provided\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_ACAD_YEAR \u003d 4;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_MODULE_INFO \u003d 5;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_SEMESTER_INFO \u003d 0;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int INDEX_CLASS_INFO \u003d 1;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_BACKWARDS_SLASH \u003d \"/\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_QUESTION_MARK \u003d \"\\\\?\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_AMPERSAND \u003d \"\u0026\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_EQUALS_SIGN \u003d \"\u003d\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_LEFT_SQAURE_BRACKET \u003d \"%5B\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String SPLIT_RIGHT_SQUARE_BRACKET \u003d \"%5D\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes in a valid timetable URL and attempts to parse it"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static TimetableInfo parseUrl(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!isValidUrl(url)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String newUrl \u003d expandUrl(url);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return parseLongUrl(newUrl);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(\"Url cannot be accessed\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (NoInternetConnectionException nice) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // No internet connection, return empty timetable"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableInfo();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a full expanded NUSMods url"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfo parseLongUrl(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String acadYear;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String semester;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] splitUrl \u003d url.split(SPLIT_BACKWARDS_SLASH);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        acadYear \u003d splitUrl[INDEX_ACAD_YEAR];"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String toParse \u003d splitUrl[INDEX_MODULE_INFO];"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] modInfo \u003d toParse.split(SPLIT_QUESTION_MARK);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (modInfo.length !\u003d 2) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // No lesson info in url, return empty timetable"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableInfo();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        semester \u003d modInfo[INDEX_SEMESTER_INFO].substring(3);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfoFromUrl timetableInfo \u003d parseModuleInfo(modInfo[INDEX_CLASS_INFO]);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return constructTimetable(acadYear, semester, timetableInfo);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (JsonMappingException e) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Cannot retrieve info from NUSMODS API, return empty timetable"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableInfo();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a string of module info from an expanded NUSMods link"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns a hashmap where module code is the key, and values are a hashmap of class types and class numbers"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfoFromUrl parseModuleInfo(String modInfoFromString) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfoFromUrl modules \u003d new TimetableInfoFromUrl();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String[] classes \u003d modInfoFromString.split(SPLIT_AMPERSAND);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // Split a string of format \"MODULE_CODE[CLASS_TYPE]\u003dCLASS_NO\""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (String classInfo : classes) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Checks if class info exists"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (classInfo.split(SPLIT_LEFT_SQAURE_BRACKET).length !\u003d 2) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                continue;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String moduleCode \u003d classInfo.split(SPLIT_LEFT_SQAURE_BRACKET)[0];"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classType \u003d classInfo.split(SPLIT_LEFT_SQAURE_BRACKET)[1].split(SPLIT_RIGHT_SQUARE_BRACKET)[0];"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classNo \u003d classInfo.split(SPLIT_EQUALS_SIGN)[1];"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Add lesson to existing module information"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ModuleInfoFromUrl moduleInfo \u003d modules.getModuleInfo(moduleCode);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            moduleInfo.addLesson(classType, classNo);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            modules.addModuleInfo(moduleInfo);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return modules;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Uses NUSMods API to obtain all classes a module has, and returns it in"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * an arraylist of classes. Each class is represented by a hash map, storing the information about the class"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @return list of all lessons a module has"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static ArrayList\u003cLesson\u003e getLessonInfoFromApi(String acadYear, String semester, String modCode)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws ParseException, JsonMappingException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String uri \u003d \"http://api.nusmods.com/\" + acadYear + \"/\" + semester + \"/modules/\" + modCode + \".json\";"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ObjectMapper mapper \u003d new ObjectMapper();"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Grab lesson info from API and store as map"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            URL url \u003d new URL(uri);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            Map\u003cString, Object\u003e mappedJson \u003d mapper.readValue(url, HashMap.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            @SuppressWarnings(\"unchecked\")"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ArrayList\u003cHashMap\u003cString, String\u003e\u003e lessonInfo \u003d (ArrayList\u003cHashMap\u003cString, String\u003e\u003e)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    mappedJson.get(\"Timetable\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Parse info from API and creates arraylist of all lessons"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ArrayList\u003cLesson\u003e lessons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            for (HashMap\u003cString, String\u003e lesson : lessonInfo) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Lesson lessonToAdd \u003d new Lesson(lesson.get(\"ClassNo\"), lesson.get(\"LessonType\"),"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.get(\"WeekText\"), lesson.get(\"DayText\"),"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.get(\"StartTime\"), lesson.get(\"EndTime\"));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                lessons.add(lessonToAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return lessons;"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IOException exception) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(\"Cannot retrieve module information\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes a shortened URL and returns the full length URL as a string"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static String expandUrl(String shortenedUrl)"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IOException, ParseException, NoInternetConnectionException {"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        URL url \u003d new URL(shortenedUrl);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // open connection"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        HttpURLConnection httpUrlConnection \u003d (HttpURLConnection) url.openConnection(Proxy.NO_PROXY);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // Handle nusmods domain not being available"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        httpUrlConnection.setReadTimeout(500);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // stop following browser redirect"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        httpUrlConnection.setInstanceFollowRedirects(false);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // extract location header containing the actual destination URL"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String expandedUrl \u003d httpUrlConnection.getHeaderField(\"Location\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        httpUrlConnection.disconnect();"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (expandedUrl \u003d\u003d null) {"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new NoInternetConnectionException(\"No internet connection, starting with empty timetables\");"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else if (expandedUrl.equals(\"http://modsn.us\")) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new ParseException(MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return expandedUrl;"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Constructs a timetable array using information parsed from a url"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param acadYear academic year"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param semester semester"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetableInfo Class information parsed from url, stored by module code"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static TimetableInfo constructTimetable(String acadYear, String semester,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                    TimetableInfoFromUrl timetableInfo)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException, JsonMappingException {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo timetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cModuleInfoFromUrl\u003e lessonInfoByModules \u003d timetableInfo.getModuleInfoList();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ModuleInfoFromUrl moduleInfoFromTimetable : lessonInfoByModules) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            addModuleToTimetable(acadYear, semester, timetable, moduleInfoFromTimetable);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Adds all lessons for a specific module found in the timetable information parsed from URL"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Timings for every lesson from a specific module will be added to the timetable information"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param acadYear academic year"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param semester semester"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetable timetable to be updated"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param moduleInfo lessons for a module parsed from url"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static void addModuleToTimetable(String acadYear, String semester, TimetableInfo timetable,"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                             ModuleInfoFromUrl moduleInfo)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException, JsonMappingException {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cLesson\u003e lessons \u003d getLessonInfoFromApi(acadYear, semester, moduleInfo.getModCode());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        HashMap\u003cString, String\u003e lessonsForModule \u003d moduleInfo.getLessonInfo();"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (String classType : lessonsForModule.keySet()) {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Get all class type/number pairs and add to timetable"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            String classNo \u003d lessonsForModule.get(classType);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            addLessonToTimetable(timetable, lessons, classType, classNo);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Finds the timings for a lesson in the URL parsed info, and adds it to the timetable"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param timetable to be returned"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param lessons list of all lessons for a module"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param classType type of class parsed"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param classNo identifier for class parsed"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static void addLessonToTimetable(TimetableInfo timetable, ArrayList\u003cLesson\u003e lessons, String classType,"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                             String classNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (Lesson lesson : lessons) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (lessonExistsInParsedInfo(classType, classNo, lesson)) {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                timetable.updateSlotsWithLesson(lesson.getWeekType(), lesson.getDay(), lesson.getStartTime(),"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        lesson.getEndTime());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if lesson info that was parsed from URL is equivalent to a lesson"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static boolean lessonExistsInParsedInfo(String classType, String classNo, Lesson lesson)"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return parseSlotType(classType).equals(lesson.getLessonType()) \u0026\u0026 classNo.equals(lesson.getClassNo());"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /* ------------------------------------------- Helper methods ----------------------------------------------------*/"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts string representing day of class to integer representation"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns -1 if day cannot be found;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseDay(String day) throws IllegalValueException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (day) {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Monday\":"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_MONDAY;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Tuesday\":"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_TUESDAY;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Wednesday\":"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_WEDNESDAY;"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Thursday\":"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_THURSDAY;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Friday\":"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return DAY_FRIDAY;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Takes in String representing start/end timing of lessons, and returns respective index to be used for array"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseStartEndTime(String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return (int) Math.ceil(((Integer.parseInt(timing) - 800) * 2) / 100.0);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (NumberFormatException e) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts shortened slot type in URL to full slot-type string used in API"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static String parseSlotType(String slotType) throws IllegalValueException {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (slotType) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"LEC\":"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Lecture\";"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"TUT\":"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Tutorial\";"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"LAB\":"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Laboratory\";"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"SEM\":"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Seminar-Style Module Class\";"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"SEC\":"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Sectional Teaching\";"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"REC\":"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Recitation\";"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"TUT2\":"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Tutorial Type 2\";"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"TUT3\":"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return \"Tutorial Type 3\";"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_CLASS_TYPE);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Converts week type from string used in api to integer index for use in URL"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static int parseWeekType(String weekType) throws IllegalValueException {"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        switch (weekType) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Odd Week\":"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_ODD;"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Even Week\":"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_EVEN;"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case \"Every Week\":"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return WEEK_BOTH;"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_WEEK_TYPE);"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 344,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/Logic.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * API of the Logic component"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Logic {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the command and returns the result."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param commandText The command as entered by the user."
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the result of the command execution."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws CommandException If an error occurs during command execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException If an error occurs during parsing."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    CommandResult execute(String commandText) throws CommandException, ParseException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered list of persons */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void checkAllMasterListTagsAreBeingUsed ();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void setCurrentTheme(String theme);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "content": "    //@@author"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the list of input entered by the user, encapsulated in a {@code ListElementPointer} object */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    ListElementPointer getHistorySnapshot();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "nbriannl": 9,
      "-": 27
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/LogicManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.AddressBookParser;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * The main LogicManager of the app."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class LogicManager extends ComponentManager implements Logic {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(LogicManager.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Model model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private final CommandHistory history;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser addressBookParser;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UndoRedoStack undoRedoStack;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public LogicManager(Model model) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d new CommandHistory();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookParser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d new UndoRedoStack();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute(String commandText) throws CommandException, ParseException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"----------------[USER COMMAND][\" + commandText + \"]\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            Command command \u003d addressBookParser.parseCommand(commandText);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "            command.setData(model, history, undoRedoStack);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            undoRedoStack.push(command);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            return result;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        } finally {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            history.add(commandText);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getFilteredPersonList();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return model.getAddressBook().getTagList();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void checkAllMasterListTagsAreBeingUsed () {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        model.checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setCurrentTheme(String theme) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        model.setCurrentTheme(theme);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "content": "    //@@author"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public ListElementPointer getHistorySnapshot() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ListElementPointer(history.getHistory());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "nbriannl": 18,
      "April0616": 1,
      "-": 57
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/AddCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * Adds a person to the address book."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"add\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"a\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"insert\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Adds a person to the address book.\\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: \""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"NAME \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NO + \"MATRIC NO.] \""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_TIMETABLE + \"TIMETABLE_URL] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_NAME + \"John Doe \""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_GENDER + \"Male \""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_MATRIC_NO + \"A0162533K \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"98765432 \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_EMAIL + \"johnd@example.com \""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_ADDRESS + \"311, Clementi Ave 2, #02-25 \""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_BIRTHDAY + \"21051994 \""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + PREFIX_TIMETABLE + \"http://modsn.us/0YdMq \""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"New person added: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Person toAdd;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddCommand(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d new Person(person);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            model.addPerson(toAdd);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            EventsCenter.getInstance().post(new PersonSelectedEvent(toAdd, model.getAddressBook().getPersonList()"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    .size() - 1));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SUCCESS, toAdd));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 toAdd.equals(((AddCommand) other).toAdd));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "CindyTsai1": 11,
      "nbriannl": 3,
      "April0616": 4,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ClearCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Clears the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"clear\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"c\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"wipe\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Address book has been cleared!\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult executeUndoableCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        model.resetData(new AddressBook());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "April0616": 1,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/DeleteCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_DELETE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_PARAMETERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Deletes persons identified using their last displayed indexes from the address book,"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * or a tag identified by the tag name"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"delete\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"d\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"remove\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Deletes the persons identified using their last displayed indexes used in the last person listing.\\n\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_DELETE + \"OR the tag specified from all people containing the specific tag\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Parameters: INDEX... (must be positive integers)\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_PARAMETERS + \"OR  \" + PREFIX_TAG + \"TAG... (case-sensitive)\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" 1, 2, 3\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" 2 3 4\\n\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" \" + PREFIX_TAG + \"friend\\n\""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" \" + PREFIX_TAG + \"friend \" + PREFIX_TAG + \"enemy\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_DELETE_TAG_SUCCESS \u003d \"Deleted Tags\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final ArrayList\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Set\u003cTag\u003e targetTags;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand(Set\u003cTag\u003e targetTags) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndexes \u003d null;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetTags \u003d targetTags;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates a delete command which aims to delete one person."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param targetIndex of the specified person"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public DeleteCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndexes \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        targetIndexes.add(targetIndex);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates a delete command which aims to delete multiple persons."
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param targetIndexes is the list of all the indexes of the specified persons."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public DeleteCommand(ArrayList\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetTags \u003d null;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Executes the delete commands for persons or tags."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the CommandResult of the delete command"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws CommandException if the invalid persons or tags are provided"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetTags \u003d\u003d null \u0026\u0026 targetIndexes !\u003d null) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return executeCommandForPersons();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return executeCommandForTag();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Executes Delete Command for persons."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws CommandException when the person index provided is invalid"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private CommandResult executeCommandForPersons() throws CommandException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (Index index : targetIndexes) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "                throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ReadOnlyPerson personToDelete \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "            deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "            model.deletePersons(deletePersonList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"One of the target persons is missing\";"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new CommandResult(generateSuccessfulResultMsgForPerson(deletePersonList));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Command execution of {@code DeleteCommand} for a {@code Tag}"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private CommandResult executeCommandForTag () throws CommandException {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArrayList\u003cTag\u003e arrayTags \u003d new ArrayList\u003cTag\u003e(targetTags);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        List\u003cTag\u003e listOfExistingTags \u003d model.getAddressBook().getTagList();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!listOfExistingTags.containsAll(arrayTags)) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (Tag tagToBeDeleted: arrayTags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                model.deleteTag(tagToBeDeleted);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (TagNotFoundException tnfe) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                assert false : \"[Delete Tag] A tag is not found\";"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                assert false : \"[Delete Tag] A duplicate person is there\";"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                assert false : \"[Delete Tag] A person not found\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new CommandResult(generateResultMsgForTag(arrayTags));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generates the successful command result of the deletePersonList."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param deletePersonList of the deleted persons"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the string of the command result message"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static String generateSuccessfulResultMsgForPerson(ArrayList\u003cReadOnlyPerson\u003e deletePersonList) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "        int numOfPersons \u003d deletePersonList.size();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "        StringBuilder formatBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (numOfPersons \u003d\u003d 1) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"Deleted Person :\\n\");"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"Deleted Persons :\\n\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // List the names of the persons deleted"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "        formatBuilder.append(\"[ \");"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (int i \u003d 0; i \u003c deletePersonList.size(); i++) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append((i + 1) + \". \" + deletePersonList.get(i).getName() + \" \");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "        formatBuilder.append(\"]\\n\");"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // List the details of the persons deleted"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        formatBuilder.append(\"Details: \\n\");"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson p : deletePersonList) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"[\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(p.getAsText());"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"]\");"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "            formatBuilder.append(\"\\n\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String resultMsg \u003d formatBuilder.toString();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return resultMsg;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Generates the command result String for Delete Command when deleting tags"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static String generateResultMsgForTag(ArrayList\u003cTag\u003e arrayTags) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        int numOfTag \u003d arrayTags.size();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        StringBuilder formatBuilder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (numOfTag \u003d\u003d 1) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            formatBuilder.append(\"Deleted Tag :\\n\");"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            formatBuilder.append(\"Deleted Tags :\\n\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        formatBuilder.append(\"[ \");"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (int i \u003d 0; i \u003c arrayTags.size(); i++) {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (i \u003d\u003d 0) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                formatBuilder.append(arrayTags.get(i).tagName);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                formatBuilder.append(\", \" + arrayTags.get(i).tagName);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        formatBuilder.append(\" ]\\n\");"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String resultMsg \u003d formatBuilder.toString();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return resultMsg;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetIndexes !\u003d null) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 this.targetIndexes.equals(((DeleteCommand) other).targetIndexes)); // state check"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    || (other instanceof DeleteCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 this.targetTags.equals(((DeleteCommand) other).targetTags)); // state check"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "nbriannl": 88,
      "April0616": 113,
      "-": 19
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/EditCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EDIT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_PARAMETERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": " * Edits the details of an existing person in the address book."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"edit\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"e\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"modify\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"change\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Edits the details of the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EDIT +  \"Existing values will be overwritten by the input values.\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer) \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"[\" + PREFIX_GENDER + \"GENDER] \""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"[\" + PREFIX_MATRIC_NO + \"MATRIC NO.] \""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS]\\n\""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_PARAMETERS + \"[\" + PREFIX_TIMETABLE + \"TIMETABLE_URL] \""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]... \""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY]\\n\""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            + PREFIX_PHONE + \"91234567 \""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + PREFIX_EMAIL + \"johndoe@example.com\\n\""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"OR\\n\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Edits the specified tag in all contacts containing this tag with a new specified tag.\\n\""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"Parameters: \" + PREFIX_OLD_TAG + \"TAG \" + PREFIX_NEW_TAG + \"TAG\\n\""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" \" + PREFIX_OLD_TAG + \"CS1020 \" + PREFIX_NEW_TAG + \"CS2010\";"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EDIT_PERSON_SUCCESS \u003d \"Edited Person: %1$s\";"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NOT_EDITED \u003d \"At least one field to edit must be provided.\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_EDIT_TAG_SUCCESS \u003d \"Edited Tag: %1$s\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_NONEXISTENT_TAG \u003d \"The specified old tag does not exist\";"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final boolean isEditForPerson;"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index index;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    private final EditPersonDescriptor editPersonDescriptor;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag oldTag;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Tag newTag;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param index of the person in the filtered person list to edit"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param editPersonDescriptor details to edit the person with"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand(Index index, EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(index);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(editPersonDescriptor);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d true;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.index \u003d index;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.editPersonDescriptor \u003d new EditPersonDescriptor(editPersonDescriptor);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d null;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d null;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param oldTag the old tag to be replaced by the new tag"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param newTag that will replace the old tag"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(oldTag);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(newTag);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.isEditForPerson \u003d false;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.index \u003d null;"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.editPersonDescriptor \u003d null;"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.oldTag \u003d oldTag;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.newTag \u003d newTag;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (isEditForPerson) {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return executeCommandForPerson();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return executeCommandForTag();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Command execution of {@code EditCommand} for a {@code Tag}"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private CommandResult executeCommandForTag () throws CommandException {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            model.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new AssertionError(\"Updating the tags on one person cannot possibly make the person\""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    + \" identical to another person.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (TagNotFoundException tgne) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new CommandResult(generateResultMsgForTag(oldTag, newTag));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Command execution of {@code EditCommand} for a {@code Tag}"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private CommandResult executeCommandForPerson () throws CommandException {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personToEdit \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d createEditedPerson(personToEdit, editPersonDescriptor);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            model.updatePerson(personToEdit, editedPerson);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EventsCenter.getInstance().post(new PersonSelectedEvent(editedPerson, index.getZeroBased()));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_EDIT_PERSON_SUCCESS, editedPerson));"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates a new person object with the details of the person to be edited."
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Be edited with {@param editPersonDescriptor}."
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param personToEdit the person to be edited"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the created person object"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static Person createEditedPerson(ReadOnlyPerson personToEdit,"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "                                             EditPersonDescriptor editPersonDescriptor) {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assert personToEdit !\u003d null;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Name updatedName \u003d editPersonDescriptor.getName().orElse(personToEdit.getName());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Gender updatedGender \u003d editPersonDescriptor.getGender().orElse(personToEdit.getGender());"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "        MatricNo updatedMatricNo \u003d editPersonDescriptor.getMatricNo().orElse(personToEdit.getMatricNo());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Phone updatedPhone \u003d editPersonDescriptor.getPhone().orElse(personToEdit.getPhone());"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Email updatedEmail \u003d editPersonDescriptor.getEmail().orElse(personToEdit.getEmail());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Address updatedAddress \u003d editPersonDescriptor.getAddress().orElse(personToEdit.getAddress());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Birthday updateBirthday \u003d editPersonDescriptor.getBirthday().orElse(personToEdit.getBirthday());"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Timetable updatedTimetable \u003d editPersonDescriptor.getTimetable().orElse(personToEdit.getTimetable());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark updatedRemark \u003d personToEdit.getRemark();"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoPath updatedPhotoPath \u003d personToEdit.getPhotoPath();"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Set\u003cTag\u003e updatedTags \u003d editPersonDescriptor.getTags().orElse(personToEdit.getTags());"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new Person(updatedName, updatedGender, updatedMatricNo,"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "                updatedPhone, updatedEmail, updatedAddress,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "April0616"
        },
        "content": "                updatedTimetable, updatedRemark, updatedPhotoPath, updatedTags, updateBirthday);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Generates the command result String for Edit Command when editing tags"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static String generateResultMsgForTag(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"Edited Tag:\\n\" + \"From \u0027\" + oldTag.tagName + \"\u0027 to \u0027\" + newTag.tagName + \"\u0027\";"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!(other instanceof EditCommand)) {"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand e \u003d (EditCommand) other;"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (isEditForPerson) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return  isEditForPerson \u003d\u003d e.isEditForPerson"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 index.equals(e.index)"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 editPersonDescriptor.equals(e.editPersonDescriptor);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return isEditForPerson \u003d\u003d e.isEditForPerson"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 oldTag.equals(e.oldTag)"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    \u0026\u0026 newTag.equals(e.newTag);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "     * Stores the details to edit the person with. Each non-empty field value will replace the"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "     * corresponding field value of the person."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class EditPersonDescriptor {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        private Name name;"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private Gender gender;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private MatricNo matricNo;"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        private Phone phone;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        private Email email;"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        private Address address;"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        private Timetable timetable;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        private Set\u003cTag\u003e tags;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        private Birthday birthday;"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor() {}"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        public EditPersonDescriptor(EditPersonDescriptor toCopy) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d toCopy.name;"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.gender \u003d toCopy.gender;"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.matricNo \u003d toCopy.matricNo;"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d toCopy.phone;"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d toCopy.email;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d toCopy.address;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.timetable \u003d toCopy.timetable;"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d toCopy.tags;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.birthday \u003d toCopy.birthday;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "         * Returns true if at least one field is edited."
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean isAnyFieldEdited() {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return CollectionUtil.isAnyNonNull(this.name, this.gender, this.matricNo, this.phone, this.email,"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    this.address, this.timetable, this.tags, this.birthday);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setName(Name name) {"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "            this.name \u003d name;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cName\u003e getName() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(name);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author April0616"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * Sets the details of the gender to edit the person with."
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * @param gender"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "April0616"
        },
        "content": "         */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.gender \u003d gender;"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * Gets the details of the gender to edit the person with."
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * @return gender if the gender is specified"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "April0616"
        },
        "content": "         */"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public Optional\u003cGender\u003e getGender() {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return Optional.ofNullable(gender);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * Sets the details of the matriculation number to edit the person with."
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * @param matricNo"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "April0616"
        },
        "content": "         */"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void setMatricNo(MatricNo matricNo) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.matricNo \u003d matricNo;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /**"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * Gets the details of the matriculation number to edit the person with."
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "April0616"
        },
        "content": "         * @return matriculation number if it is specified"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "April0616"
        },
        "content": "         */"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public Optional\u003cMatricNo\u003e getMatricNo() {"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return Optional.ofNullable(matricNo);"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "            this.phone \u003d phone;"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cPhone\u003e getPhone() {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(phone);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setEmail(Email email) {"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "            this.email \u003d email;"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cEmail\u003e getEmail() {"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(email);"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setAddress(Address address) {"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "            this.address \u003d address;"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cAddress\u003e getAddress() {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(address);"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        public void setTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.timetable \u003d timetable;"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        public Optional\u003cTimetable\u003e getTimetable() {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return Optional.ofNullable(timetable);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "            this.tags \u003d tags;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        public Optional\u003cSet\u003cTag\u003e\u003e getTags() {"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.ofNullable(tags);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.birthday \u003d birthday;"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        public Optional\u003cBirthday\u003e getBirthday() {"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return Optional.ofNullable(birthday);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": "        public boolean equals(Object other) {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "            // short circuit if same object"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "            if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "            // instanceof handles nulls"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "            if (!(other instanceof EditPersonDescriptor)) {"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "            // state check"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": "            EditPersonDescriptor e \u003d (EditPersonDescriptor) other;"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "            return getName().equals(e.getName())"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 getGender().equals(e.getGender())"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    \u0026\u0026 getMatricNo().equals(e.getMatricNo())"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getPhone().equals(e.getPhone())"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getEmail().equals(e.getEmail())"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "                    \u0026\u0026 getAddress().equals(e.getAddress())"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    \u0026\u0026 getTimetable().equals(e.getTimetable())"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    \u0026\u0026 getTags().equals(e.getTags())"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    \u0026\u0026 getBirthday().equals(e.getBirthday());"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 23,
      "CindyTsai1": 17,
      "nbriannl": 122,
      "April0616": 77,
      "-": 158
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ExitCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Terminates the program."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class ExitCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"exit\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"x\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"quit\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"close\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EXIT_ACKNOWLEDGEMENT \u003d \"Exiting Address Book as requested ...\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_EXIT_ACKNOWLEDGEMENT);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 3,
      "-": 21
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/FindCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Finds and lists all persons in address book whose information contains any of the argument keywords in the"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * specific field."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Keyword matching is case insensitive."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommand extends Command {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"find\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"f\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"search\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \": Finds all persons whose information contain any of \""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"the specified keywords (case-insensitive) and displays them as a list with index numbers.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"Parameters: [\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_NAME + \"NAME] \""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_PHONE + \"PHONE] \""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_EMAIL + \"EMAIL] \""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_ADDRESS + \"ADDRESS] \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_BIRTHDAY + \"BIRTHDAY] \""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"[\" + PREFIX_TAG + \"TAG]...\\n\""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"Example: \\n\" + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_NAME + \"ian zach\\n\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"Returns any person with name including \u0027ian\u0027 and \u0027zach\u0027.\\n\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_TAG + \"friends \""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + PREFIX_TAG + \"owesMoney\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + \"Returns all persons in UniFy containing *both* \u0027JCfriends\u0027 and \u0027computing\u0027.\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_NOT_FOUND \u003d \"At least one field to find must be provided.\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAYKEYWORD_INVALID \u003d \"You should type 0%1$s instead of %1$s.\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAYKEYWORD_NONEXIST \u003d \"Month %1$s does not exist.\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAYKEYWORD_NONNUMBER \u003d \"Keyword input must be in integer.\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private ArrayList\u003cString\u003e predicate;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //to keep track of how many prefixes are input"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private int count \u003d 0;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private String birthdaySearch \u003d new String();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public FindCommand(ArrayList\u003cString\u003e predicate) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.predicate \u003d predicate;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        List\u003cString\u003e predicateList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //to keep track of the number of times a single person matches different fields of keywords"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        HashMap\u003cString, Integer\u003e predicateMap \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c predicate.size() - 1; i++) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            String predicates \u003d predicate.get(i);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_NAME.getPrefix())) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithName \u003d findPersonsWithName(predicate.get(i + 1));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithName.size(); j++) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithName.get(j))) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithName.get(j), 1);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithName.get(j));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithName.get(j), predicateMap.remove(personsWithName.get(j)) + 1);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_PHONE.getPrefix())) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithPhone \u003d findPersonsWithPhone(predicate.get(i + 1));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithPhone.size(); j++) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithPhone.get(j))) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithPhone.get(j), 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithPhone.get(j));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithPhone.get(j), predicateMap.remove(personsWithPhone.get(j)) + 1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_ADDRESS.getPrefix())) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithAddress \u003d findPersonsWithAddress(predicate.get(i + 1));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithAddress.size(); j++) {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithAddress.get(j))) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithAddress.get(j), 1);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithAddress.get(j));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithAddress.get(j), predicateMap.remove(personsWithAddress.get(j)) + 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_EMAIL.getPrefix())) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithEmail \u003d findPersonsWithEmail(predicate.get(i + 1));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithEmail.size(); j++) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithEmail.get(j))) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithEmail.get(j), 1);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithEmail.get(j));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithEmail.get(j), predicateMap.remove(personsWithEmail.get(j)) + 1);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_TAG.getPrefix())) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithTags \u003d findPersonsWithTags(predicate.get(i + 1));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithTags.size(); j++) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithTags.get(j))) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithTags.get(j), 1);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithTags.get(j));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithTags.get(j), predicateMap.remove(personsWithTags.get(j)) + 1);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicates.equals(PREFIX_BIRTHDAY.getPrefix())) {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                birthdaySearch \u003d predicate.get(i + 1).trim();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e personsWithBirthday \u003d findPersonsWithBirthday(predicate.get(i + 1));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (int j \u003d 0; j \u003c personsWithBirthday.size(); j++) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (!predicateMap.containsKey(personsWithBirthday.get(j))) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithBirthday.get(j), 1);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateList.add(personsWithBirthday.get(j));"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    } else {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        predicateMap.put(personsWithBirthday.get(j),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                                predicateMap.remove(personsWithBirthday.get(j)) + 1);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //to eliminate the persons who did not match all keywords"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e predicatesList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (String word : predicateList) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (predicateMap.get(word) \u003d\u003d count) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                predicatesList.add(word);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        NameContainsKeywordsPredicate predicates \u003d new NameContainsKeywordsPredicate(predicatesList);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        model.updateFilteredPersonList(predicates);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //Different display message for birthday"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (!birthdaySearch.isEmpty()) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return new CommandResult(getMessageForPersonListShownSummary("
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    model.getFilteredPersonList().size())"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            + getMessageForMonthSearch(birthdaySearch));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return new CommandResult(getMessageForPersonListShownSummary(model.getFilteredPersonList().size()));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Constructs a feedback message to summarise an operation that displayed a listing of persons with the same"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * birthday month."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param month used to generate Month"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @return summary message for the birthday month of persons displayed"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static String getMessageForMonthSearch(String month) {"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        switch (month) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"01\":"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"January\";"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"02\":"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"February\";"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"03\":"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"March\";"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"04\":"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"April\";"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"05\":"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"May\";"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"06\":"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"June\";"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"07\":"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"July\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"08\":"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"August\";"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"09\":"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"September\";"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"10\":"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"October\";"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"11\":"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"November\";"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        case \"12\":"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            month \u003d \"December\";"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return String.format(Messages.MESSAGE_BIRTHDAY_MONTH_SEARCHED, month);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof FindCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.predicate.equals(((FindCommand) other).predicate)); // state check"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their name"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param name"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithName(String name) {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] nameKeyword \u003d name.split(\" \");"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d nameKeyword.length;"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e nameList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : nameKeyword) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String names \u003d person.getName().toString().toLowerCase();"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (names.contains(keyword)) {"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    nameList.add(person.getName().toString());"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return nameList;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their phone number"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param phone"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithPhone(String phone) {"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] phoneKeyword \u003d phone.split(\" \");"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d phoneKeyword.length;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e phoneList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : phoneKeyword) {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String phones \u003d person.getPhone().toString();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (phones.contains(keyword)) {"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    phoneList.add(person.getName().toString());"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return phoneList;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their email"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param email"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithEmail(String email) {"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] emailKeyword \u003d email.split(\" \");"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d emailKeyword.length;"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e emailList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : emailKeyword) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String emails \u003d person.getEmail().toString().toLowerCase();"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (emails.contains(keyword)) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    emailList.add(person.getName().toString());"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return emailList;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their address"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param address"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithAddress(String address) {"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] addressKeyword \u003d address.split(\" \");"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d addressKeyword.length;"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e addressList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : addressKeyword) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String addresses \u003d person.getAddress().toString().toLowerCase();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (addresses.contains(keyword)) {"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    addressList.add(person.getName().toString());"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return addressList;"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their tag"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param tags"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithTags(String tags) {"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] tagKeyword \u003d tags.split(\" \");"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d tagKeyword.length;"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e tagList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : tagKeyword) {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                //Used to keep track if a person\u0027s tags matches one keyword multiple times, if yes only record once"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArrayList\u003cString\u003e tagsList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                for (Tag tagging : person.getTags()) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    //the tag name returned is in the format of [TAGNAME] so extract the name without []"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    String tag1 \u003d tagging.toString().substring(1, tagging.toString().length()).toLowerCase();"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    keyword \u003d keyword.toLowerCase();"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    if (tag1.contains(keyword) \u0026\u0026 !tagsList.contains(person.getName().toString())) {"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        tagsList.add(person.getName().toString());"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                tagList.addAll(tagsList);"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return tagList;"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Search for persons that contain the {@String keyword} in their birthday"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @param birthday"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ArrayList\u003cString\u003e findPersonsWithBirthday(String birthday) {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d model.getAddressBook().getPersonList();"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String[] birthdayKeyword \u003d birthday.split(\" \");"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        count +\u003d birthdayKeyword.length;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e birthdayList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (String keyword : birthdayKeyword) {"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String birth \u003d person.getBirthday().toString();"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                String birthdays \u003d (!birth.equals(\"\")) ? birth.substring(3, 5) : \"\";"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (birthdays.equals(keyword)) {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    birthdayList.add(person.getName().toString());"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthdayList;"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 338,
      "-": 16
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/GMapsCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_GMAPS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommand extends Command {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"gmaps\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"g\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"map\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"maps\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Opens a Google Maps view of a person’s address.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_GMAPS"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \" If an address is specified, shows the directions from the address to that person\u0027s address.\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Format: \" + COMMAND_WORD + \" INDEX [a/ADDRESS]\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1 \\n\""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" 1 a/Blk 123, Yishun 75\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Showing Map View of %1$s\u0027s address\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS \u003d \"Showing directions to %1$s\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_PERSON_HAS_NO_ADDRESS \u003d \"%1$s has no address!\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Address targetAddress;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public GMapsCommand (Index targetIndex, Address targetAddress) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.targetAddress \u003d targetAddress;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToShowMap \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (personToShowMap.getAddress().toString().equals(\"\")) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(String.format(MESSAGE_PERSON_HAS_NO_ADDRESS, personToShowMap.getName()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (targetAddress !\u003d null) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            model.showDirectionsTo(personToShowMap, targetAddress, targetIndex);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS, personToShowMap.getName()));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            model.showMapOf(personToShowMap, targetIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, personToShowMap.getName()));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!(other instanceof GMapsCommand)) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand e \u003d (GMapsCommand) other;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Objects.equals(this.targetIndex, e.targetIndex)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \u0026\u0026 Objects.equals(this.targetAddress, e.targetAddress);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 81,
      "April0616": 1,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HelpCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Format full help instructions for every command for display."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"help\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Shows program usage instructions.\\n\""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SHOWING_HELP_MESSAGE \u003d \"Opened help window.\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new ShowHelpRequestEvent());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(SHOWING_HELP_MESSAGE);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 2,
      "-": 22
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/HistoryCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all the commands entered by user from the start of app launch."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class HistoryCommand extends Command {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"history\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"h\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"past\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Entered commands (from most recent to earliest):\\n%1$s\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_NO_HISTORY \u003d \"You have not yet entered any commands.\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e previousCommands \u003d history.getHistory();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (previousCommands.isEmpty()) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            return new CommandResult(MESSAGE_NO_HISTORY);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        Collections.reverse(previousCommands);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, String.join(\"\\n\", previousCommands)));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory history, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(history);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.history \u003d history;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 38
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ListCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": " * Lists all persons in the address book to the user."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListCommand extends Command {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"list\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"l\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_ONE \u003d \"showall\";"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY_TWO \u003d \"viewall\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Listed all persons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "-": 20
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/PhotoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_PARAMETERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.REGEX_VALID_IMAGE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.copyFile;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.createIfMissing;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.getFileExtension;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.haveSameContent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isFileExists;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the photo path of the specified person."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"photo\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"ph\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \": Adds a photo to the person identified by the index number used in the last person listing\""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"by specifying the path of the photo.\\n\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"The valid photo extensions are \u0027jpg\u0027, \u0027jpeg\u0027, \u0027png\u0027, \u0027gif\u0027 or \u0027bmp\u0027.\\n\""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"If the path field is empty, the old photo path is removed for the person.\\n\""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_PHOTO + \"[PHOTO PATH] \\n\""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_PARAMETERS + \"(INDEX must be a positive integer)\\n\""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Example: (add photo)  \" + COMMAND_WORD + \" 1 \" + PREFIX_PHOTO"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"C:\\\\Users\\\\User\\\\Desktop\\\\photo.jpg\\n\""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + \"(delete photo) \" + COMMAND_WORD + \" 2 \" + PREFIX_PHOTO + \"\\n\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_ADD_PHOTO_SUCCESS \u003d"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Successfully saved photo and added the photo path to Person: %1$s\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DELETE_PHOTO_SUCCESS \u003d \"Removed photo path from Person: %1$s\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_NO_PHOTO_TO_DELETE \u003d \"No photo path to remove from Person: %1$s\";"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSONS \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_LOCAL_PHOTOPATH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Photo Path should be the absolute path of a valid file in your PC. It should be a string started \""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"with the name of your disk, \""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"followed by several groups of backslash and string, like \\\"c:\\\\desktop\\\\happy.jpg\\\",\""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"and the file should exist.\\n\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"The valid photo extensions are \u0027jpg\u0027, \u0027jpeg\u0027, \u0027png\u0027, \u0027gif\u0027 or \u0027bmp\u0027.\\n\";"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String REGEX_LOCAL_PHOTOPATH_VALIDATION \u003d"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"([a-zA-Z]:)?(\\\\\\\\[a-zA-Z0-9_.-]+)+\\\\\\\\?\" + REGEX_VALID_IMAGE;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String PATH_FILE_SAVED_PARENT_DIRECTORY \u003d \"src/main/resources/images/contactPhotos/\";"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String PATH_DEFAULT_PHOTO \u003d \"src/main/resources/images/defaultPhoto.jpg\";"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Index targetIndex;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String localPhotoPath;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private PhotoPath photoPath;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the PhotoCommand and decides its behaviour."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param targetIndex of the person in the list to edit the photo path"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param localPhotoPath path of the photo store in the computer"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PhotoCommand(Index targetIndex, String localPhotoPath) throws IllegalValueException, FileNotFoundException {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(localPhotoPath);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedPhotoPath \u003d localPhotoPath.trim();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (isEmptyPhotoPath(trimmedPhotoPath)) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "            setDeletePhotoCommandParameters(targetIndex);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (isValidLocalPhotoPath(trimmedPhotoPath)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "            setEditPhotoCommandParametersAndFile(targetIndex, trimmedPhotoPath);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_LOCAL_PHOTOPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void setEditPhotoCommandParametersAndFile(Index targetIndex, String photoPath)"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throws FileNotFoundException, IllegalValueException {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // copy the photo"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String savePath \u003d copyLocalPhotoToApp(photoPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // set up parameters"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        localPhotoPath \u003d photoPath;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.photoPath \u003d new PhotoPath(savePath);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Copies the photo specified in the local photo path to the app."
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * The copied photo is saved in the default folder in the app."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param localPhotoPath of the photo"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the photo path string of the copied photo"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws FileNotFoundException if the photo is not found in the user\u0027s computer"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String copyLocalPhotoToApp(String localPhotoPath) throws FileNotFoundException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File targetFile \u003d new File(localPhotoPath);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String extension \u003d getFileExtension(localPhotoPath);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String savePath \u003d PATH_FILE_SAVED_PARENT_DIRECTORY + getSavedFileName(extension);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isFileExists(targetFile)) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new FileNotFoundException(MESSAGE_LOCAL_PHOTOPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        createAppPhotoFile(savePath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "            copyFile(localPhotoPath, savePath);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Cannot copy the file!\";"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return savePath;"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void setDeletePhotoCommandParameters(Index targetIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        localPhotoPath \u003d \"\";"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPath \u003d new PhotoPath(\"\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personToPhoto \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person photoedPerson \u003d createPhotoedPerson(personToPhoto, photoPath);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "            model.addPhotoPath(photoPath);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (DuplicatePhotoPathException e) {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Duplicated photo path!\";"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "            model.updatePerson(personToPhoto, photoedPerson);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSONS);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EventsCenter.getInstance().post(new PersonSelectedEvent(photoedPerson, targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new CommandResult(generateSuccessMsg(personToPhoto));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns true if the given string is an empty photo path."
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isEmptyPhotoPath(String photoPathString) {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPathString.equals(\"\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns true if the given string is a valid local photo path."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidLocalPhotoPath(String photoPathString) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPathString.matches(REGEX_LOCAL_PHOTOPATH_VALIDATION);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generates the unique name of the copied photo."
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * The name is generated by combining the time {@code num} this method executes and"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * its original {@code fileExtension}."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the name of the copied photo."
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String getSavedFileName(String fileExtension) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Date date \u003d new Date();"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Long num \u003d date.getTime();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return num.toString() + fileExtension;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToPhoto}."
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static Person createPhotoedPerson(ReadOnlyPerson personToPhoto,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "                                              PhotoPath photoPath) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assert personToPhoto !\u003d null;"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person photoPerson \u003d new Person(personToPhoto.getName(), personToPhoto.getGender(),"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToPhoto.getMatricNo(), personToPhoto.getPhone(),"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToPhoto.getEmail(), personToPhoto.getAddress(), personToPhoto.getTimetable(),"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToPhoto.getRemark(), photoPath, personToPhoto.getTags(), personToPhoto.getBirthday());"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPerson;"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates an empty app photo file if it doesn\u0027t exist."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param path of the app photo"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IOException if the file or directory cannot be created."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void createAppPhotoFile(String path) {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File photoFile \u003d new File(path);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "April0616"
        },
        "content": "            createIfMissing(photoFile);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"The file or directory cannot be created.\";"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generates the successful message accordingly."
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param personToPhoto"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the successful message for adding photo if the photo path string is not empty."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String generateSuccessMsg(ReadOnlyPerson personToPhoto) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (photoPath.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (personToPhoto.getPhotoPath().value.equals(\"\")) {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return String.format(MESSAGE_NO_PHOTO_TO_DELETE, personToPhoto);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return String.format(MESSAGE_DELETE_PHOTO_SUCCESS, personToPhoto);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return String.format(MESSAGE_ADD_PHOTO_SUCCESS, personToPhoto);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the local photo path of the file."
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the string of local photo path"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String getLocalPhotoPath() {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this.localPhotoPath;"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the photo path of the file stored in app."
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the string of app photo path"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String getAppPhotoPath() {"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this.photoPath.value;"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the index of the person."
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the target index of the person"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Index getIndex() {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this.targetIndex;"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!(other instanceof PhotoCommand)) {"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand ph \u003d (PhotoCommand) other;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return targetIndex.equals(ph.targetIndex)"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 haveSameContent(ph.photoPath.value, ((PhotoCommand) other).photoPath.value);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 2,
      "April0616": 269,
      "-": 13
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RedoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Redo the previously undone command."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class RedoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"redo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"r\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Redo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to redo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canRedo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popRedo().redo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/RemarkCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_PARAMETERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_REMARK;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Edits the remark of the specified person."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"remark\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"rm\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \": Adds one or more remarks the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_REMARK + \"If the remark field is empty, the remark is removed for the person.\\n\""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Parameters: INDEX \" + PREFIX_REMARK + \"[REMARK1] \" + PREFIX_REMARK + \"[REMARK2] ...\\n\""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_PARAMETERS + \"(INDEX must be a positive integer)\\n\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"Example: (add a remark) \" + COMMAND_WORD + \" 1 \" + PREFIX_REMARK + \"Likes to drink coffee\\n\""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + \"(add multiple remarks) \" + COMMAND_WORD + \" 1 \" + PREFIX_REMARK + \"Likes to drink coffee \""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + PREFIX_REMARK + \"CAP5.0\\n\""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + \"(delete remarks) \" + COMMAND_WORD + \" 2 \" + PREFIX_REMARK + \"\\n\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_ADD_REMARK_SUCCESS \u003d \"Added Remark(s) to Person: %1$s\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DELETE_REMARK_SUCCESS \u003d \"Removed Remark(s) from Person: %1$s\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_DUPLICATE_PERSON \u003d \"This person already exists in the address book.\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Remark remark;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the remark command."
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param targetIndex of the person in the list to edit the remark"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param remark of the person"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public RemarkCommand(Index targetIndex, Remark remark) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(targetIndex);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark \u003d remark;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personToRemark \u003d lastShownList.get(targetIndex.getZeroBased());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person remarkedPerson \u003d createRemarkedPerson(personToRemark, remark);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "            model.updatePerson(personToRemark, remarkedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new CommandException(MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new AssertionError(\"The target person cannot be missing\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        model.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EventsCenter.getInstance().post(new PersonSelectedEvent(remarkedPerson, targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new CommandResult(generateSuccessMsg(remarkedPerson));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Generates the successful message for adding remarks and deleting remarks."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param personToRemark the person to be remarked"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the successful message for adding remark if the remark string is not empty."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String generateSuccessMsg(ReadOnlyPerson personToRemark) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (remark.toString().isEmpty()) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return String.format(MESSAGE_DELETE_REMARK_SUCCESS, personToRemark);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return String.format(MESSAGE_ADD_REMARK_SUCCESS, personToRemark);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates and returns a {@code Person} with the details of {@code personToRemark}"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * remarked with {@code remarkPersonDescriptor}."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the person object with the new remark"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Person createRemarkedPerson(ReadOnlyPerson personToRemark, Remark remark) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assert personToRemark !\u003d null;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person remarkPerson \u003d new Person(personToRemark.getName(), personToRemark.getGender(),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToRemark.getMatricNo(), personToRemark.getPhone(),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "                personToRemark.getEmail(), personToRemark.getAddress(), personToRemark.getTimetable(),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "                remark, personToRemark.getPhotoPath(), personToRemark.getTags(), personToRemark.getBirthday());"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remarkPerson;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!(other instanceof RemarkCommand)) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand r \u003d (RemarkCommand) other;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return targetIndex.equals(r.targetIndex)"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 remark.equals(r.remark);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "nbriannl": 3,
      "April0616": 126,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SelectCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Selects a person identified using it\u0027s last displayed index from the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommand extends Command {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"select\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"s\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"choose\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \": Selects the person identified by the index number used in the last person listing.\\n\""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Parameters: INDEX (must be a positive integer)\\n\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SELECT_PERSON_SUCCESS \u003d \"Selected Person: %1$s\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Index targetIndex;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public SelectCommand(Index targetIndex) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        this.targetIndex \u003d targetIndex;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        if (targetIndex.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EventsCenter.getInstance().post(new PersonSelectedEvent(model.getFilteredPersonList()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .get(targetIndex.getZeroBased()), targetIndex.getZeroBased()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.getInstance().post(new JumpToListRequestEvent(targetIndex));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SELECT_PERSON_SUCCESS, targetIndex.getOneBased()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof SelectCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.targetIndex.equals(((SelectCommand) other).targetIndex)); // state check"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "nbriannl": 1,
      "-": 49
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/SuggestCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Suggests a correct command"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommand extends Command {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Do you mean %1$s?\";"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private final String possibleCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Creates an SuggestCommand to suggest the specified {@code String} for command"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public SuggestCommand(String command) {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.possibleCommand \u003d command;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        throw new CommandException(String.format(MESSAGE_SUCCESS, possibleCommand));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 24,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/ThemeCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_PARAMETERS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Changes the theme to the theme indicated"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class ThemeCommand extends UndoableCommand {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"theme\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"th\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"changetheme\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \": Changes the theme to the specified theme word.\\n\""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Parameters: THEMEWORD\\n\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_PARAMETERS + \"(Possible theme words are: dark, light)\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" dark\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" light\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Theme switched: %1$s\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String VIEW_PATH \u003d \"/view/\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final String themeKeyword;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Creates an AddCommand to add the specified {@code ReadOnlyPerson}"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public ThemeCommand (String themeKeyword) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.themeKeyword \u003d themeKeyword;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public CommandResult executeUndoableCommand() throws CommandException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(model);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String themeToSwitch;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String currentTheme \u003d model.getCurrentTheme();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        HashMap\u003cString, String\u003e themes \u003d model.getThemeMap();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (themes.containsKey(themeKeyword)) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            themeToSwitch \u003d themes.get(themeKeyword);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_THEME_NOT_FOUND);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (currentTheme.equals(VIEW_PATH + themeToSwitch)) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new CommandException(Messages.MESSAGE_ALREADY_IN_THEME);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EventsCenter.getInstance().post(new ChangeThemeRequestEvent(themeToSwitch));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new CommandResult(String.format(MESSAGE_SUCCESS, themeToSwitch));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                || (other instanceof ThemeCommand // instanceof handles nulls"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \u0026\u0026 themeKeyword.equals(((ThemeCommand) other).themeKeyword));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 66,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/TimetableCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.MessageAlignmentFormatter.FORMAT_ALIGNMENT_TO_EXAMPLE;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.TimetableDisplayEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Selects persons identified using their last displayed indexes and displays a combined timetable"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * of the selected persons"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableCommand extends Command {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"whenfree\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"wf\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_SECONDARY \u003d \"timetable\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_USAGE \u003d  \"| \" + COMMAND_WORD + \" |\""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \": Displays a combined timetable of persons, identified using their last displayed indexes.\\n\""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"Parameters: INDEX (must be positive integers)\\n\""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + \"Example: \" + COMMAND_WORD + \" 1\\n\""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" 1, 2, 3\\n\""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            + FORMAT_ALIGNMENT_TO_EXAMPLE + COMMAND_WORD + \" 2 4\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_DISPLAY_SUCCESS \u003d \"Displayed timetables: \";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final ArrayList\u003cIndex\u003e targetIndexes;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableCommand(ArrayList\u003cIndex\u003e targetIndexes) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.targetIndexes \u003d targetIndexes;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        List\u003cReadOnlyPerson\u003e lastShownList \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        List\u003cReadOnlyPerson\u003e personsToDisplay;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // If no indexes passed, display all persons listed"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (targetIndexes.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            personsToDisplay \u003d model.getFilteredPersonList();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            personsToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            for (Index index : targetIndexes) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                if (index.getZeroBased() \u003e\u003d lastShownList.size()) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    throw new CommandException(Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                ReadOnlyPerson personSelected \u003d lastShownList.get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                personsToDisplay.add(personSelected);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EventsCenter.getInstance().post(new TimetableDisplayEvent(personsToDisplay));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return new CommandResult(generateResultMsg(personsToDisplay));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Generates the success message for the timetable command"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String generateResultMsg(List\u003cReadOnlyPerson\u003e personList) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StringBuilder msg \u003d new StringBuilder();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        msg.append(MESSAGE_DISPLAY_SUCCESS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ReadOnlyPerson person : personList) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(\"[\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(person.getName().toString());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            msg.append(\"]\\n\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return msg.toString();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 72,
      "nbriannl": 2,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UndoCommand.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Undo the previous {@code UndoableCommand}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class UndoCommand extends Command {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String COMMAND_WORD \u003d \"undo\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String COMMAND_ALIAS \u003d \"u\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_SUCCESS \u003d \"Undo success!\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_FAILURE \u003d \"No more commands to undo!\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandResult execute() throws CommandException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(model, undoRedoStack);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!undoRedoStack.canUndo()) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new CommandException(MESSAGE_FAILURE);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        undoRedoStack.popUndo().undo();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        return new CommandResult(MESSAGE_SUCCESS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setData(Model model, CommandHistory commandHistory, UndoRedoStack undoRedoStack) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.model \u003d model;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.undoRedoStack \u003d undoRedoStack;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 36
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/commands/UniqueCommandList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * A list of all command words, including alias and secondary word"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class UniqueCommandList {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static ArrayList\u003cString\u003e commandList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static TreeSet\u003cString\u003e possibleCommandList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static ArrayList\u003cString\u003e getCommandList() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(AddCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ClearCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(DeleteCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(EditCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ExitCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(FindCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(HistoryCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ListCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RedoCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RemarkCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(RemarkCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(SelectCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(UndoCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(GMapsCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(GMapsCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(GMapsCommand.COMMAND_SECONDARY_ONE);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(GMapsCommand.COMMAND_SECONDARY_TWO);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(PhotoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(PhotoCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ThemeCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ThemeCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(ThemeCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(TimetableCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(TimetableCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        commandList.add(TimetableCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return commandList;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static TreeSet\u003cString\u003e getPossibleCommandList(String command) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        possibleCommandList \u003d new TreeSet\u003c\u003e();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // Swapping i with i+1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 1; i \u003c command.length() - 1; i++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            possibleCommandList.add(command.substring(0, i) + command.charAt(i + 1)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    + command.charAt(i) + command.substring(i + 2));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // deleting one char, skipping i"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c command.length(); i++) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            possibleCommandList.add(command.substring(0, i) + command.substring(i + 1));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // inserting one char"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (int i \u003d 0; i \u003c command.length() + 1; i++) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            for (char j \u003d \u0027a\u0027; j \u003c\u003d \u0027z\u0027; j++) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                possibleCommandList.add(command.substring(0, i) + j + command.substring(i));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                // replacing one char"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (i \u003c command.length()) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    possibleCommandList.add(command.substring(0, i) + j + command.substring(i + 1));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return possibleCommandList;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 94
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new AddCommand object"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParser implements Parser\u003cAddCommand\u003e {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the AddCommand"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * and returns an AddCommand object for execution."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public AddCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArgumentMultimap argMultimap \u003d"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_MATRIC_NO,"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_TIMETABLE);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (!arePrefixesPresent(argMultimap, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Name name \u003d ParserUtil.parseName(argMultimap.getValue(PREFIX_NAME)).get();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Gender gender \u003d (arePrefixesPresent(argMultimap, PREFIX_GENDER))"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseGender(argMultimap.getValue(PREFIX_GENDER)).get() : new Gender(\"\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            MatricNo matricNo \u003d (arePrefixesPresent(argMultimap, PREFIX_MATRIC_NO))"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseMatricNo(argMultimap.getValue(PREFIX_MATRIC_NO)).get() : new MatricNo(\"\");"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Phone phone \u003d (arePrefixesPresent(argMultimap, PREFIX_PHONE))"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parsePhone(argMultimap.getValue(PREFIX_PHONE)).get() : new Phone(\"\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Email email \u003d (arePrefixesPresent(argMultimap, PREFIX_EMAIL))"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseEmail(argMultimap.getValue(PREFIX_EMAIL)).get() : new Email(\"\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Address address \u003d (arePrefixesPresent(argMultimap, PREFIX_ADDRESS))"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseAddress(argMultimap.getValue(PREFIX_ADDRESS)).get() : new Address(\"\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Timetable timetable \u003d (arePrefixesPresent(argMultimap, PREFIX_TIMETABLE))"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseTimetable(argMultimap.getValue(PREFIX_TIMETABLE)).get() : new Timetable(\"\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Remark remark \u003d new Remark(\"\");"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            PhotoPath photoPath \u003d new PhotoPath(\"\");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Birthday birthday \u003d (arePrefixesPresent(argMultimap, PREFIX_BIRTHDAY))"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    ? ParserUtil.parseBirthday(argMultimap.getValue(PREFIX_BIRTHDAY)).get() : new Birthday(\"\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            ReadOnlyPerson person \u003d new Person(name, gender, matricNo, phone, email, address, timetable,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    remark, photoPath, tagList, birthday);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return new AddCommand(person);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 47,
      "April0616": 6,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/AddressBookParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.Command;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.TimetableCommand;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses user input."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParser {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used for initial separation of command word and args."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Pattern BASIC_COMMAND_FORMAT \u003d Pattern.compile(\"(?\u003ccommandWord\u003e\\\\S+)(?\u003carguments\u003e.*)\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses user input into command for execution."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param userInput full user input string"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the command based on the user input"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public Command parseCommand(String userInput) throws ParseException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        final Matcher matcher \u003d BASIC_COMMAND_FORMAT.matcher(userInput.trim());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matcher.matches()) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final String commandWords \u003d matcher.group(\"commandWord\");"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final String commandWord \u003d commandWords.toLowerCase();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        final String arguments \u003d matcher.group(\"arguments\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (commandWord) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        case AddCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case AddCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case AddCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        case EditCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case EditCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            return new EditCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        case SelectCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case SelectCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case SelectCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "            return new SelectCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        case DeleteCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case DeleteCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case DeleteCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            return new DeleteCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        case ClearCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ClearCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ClearCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ClearCommand();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case GMapsCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new GMapsCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        case FindCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case FindCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case FindCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            return new FindCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        case ListCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ListCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ListCommand();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case ThemeCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case ThemeCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case ThemeCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new ThemeCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case PhotoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case PhotoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return new PhotoCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case RemarkCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        case RemarkCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return new RemarkCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case TimetableCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case TimetableCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case TimetableCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableCommandParser().parse(arguments);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        case HistoryCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case HistoryCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case HistoryCommand.COMMAND_SECONDARY:"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HistoryCommand();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        case ExitCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case ExitCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case ExitCommand.COMMAND_SECONDARY_ONE:"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        case ExitCommand.COMMAND_SECONDARY_TWO:"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "            return new ExitCommand();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        case HelpCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "            return new HelpCommand();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        case UndoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case UndoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            return new UndoCommand();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        case RedoCommand.COMMAND_WORD:"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        case RedoCommand.COMMAND_ALIAS:"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            return new RedoCommand();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return new SuggestCommandParser().parse(commandWord);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 26,
      "CindyTsai1": 4,
      "nbriannl": 15,
      "April0616": 23,
      "-": 77
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ArgumentTokenizer.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": " * Tokenizes arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}\u003cbr\u003e"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " *     e.g. {@code some preamble text t/ 11.00 t/12.00 k/ m/ July}  where prefixes are {@code t/ k/ m/}.\u003cbr\u003e"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * 1. An argument\u0027s value can be an empty string e.g. the value of {@code k/} in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * 2. Leading and trailing whitespaces of an argument value will be discarded.\u003cbr\u003e"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * 3. An argument may be repeated and all its values will be accumulated e.g. the value of {@code t/}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " *    in the above example.\u003cbr\u003e"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class ArgumentTokenizer {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * Tokenizes an arguments string and returns an {@code ArgumentMultimap} object that maps prefixes to their"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * respective argument values. Only the given prefixes will be recognized in the arguments string."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to tokenize the arguments string with"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ArgumentMultimap tokenize(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d findAllPrefixPositions(argsString, prefixes);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        return extractArguments(argsString, positions);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * Finds all zero-based prefix positions in the given arguments string."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixes   Prefixes to find in the arguments string"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return           List of zero-based prefix positions in the given arguments string"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findAllPrefixPositions(String argsString, Prefix... prefixes) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Prefix prefix : prefixes) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            positions.addAll(findPrefixPositions(argsString, prefix));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@see findAllPrefixPositions}"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static List\u003cPrefixPosition\u003e findPrefixPositions(String argsString, Prefix prefix) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPrefixPosition\u003e positions \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int prefixPosition \u003d findPrefixPosition(argsString.toLowerCase(), prefix.getPrefix().toLowerCase(), 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        while (prefixPosition !\u003d -1) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "            PrefixPosition extendedPrefix \u003d new PrefixPosition(prefix, prefixPosition);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            positions.add(extendedPrefix);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            prefixPosition \u003d findPrefixPosition(argsString.toLowerCase(),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    prefix.getPrefix().toLowerCase(), prefixPosition);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return positions;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the index of the first occurrence of {@code prefix} in"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * {@code argsString} starting from index {@code fromIndex}. An occurrence"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * is valid if there is a whitespace before {@code prefix}. Returns -1 if no"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     * such occurrence can be found."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * E.g if {@code argsString} \u003d \"e/hip/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns -1 as there are no valid"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "     * occurrences of \"p/\" with whitespace before it. However, if"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString} \u003d \"e/hi p/900\", {@code prefix} \u003d \"p/\" and"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code fromIndex} \u003d 0, this method returns 5."
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    private static int findPrefixPosition(String argsString, String prefix, int fromIndex) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        int prefixIndex \u003d argsString.indexOf(\" \" + prefix, fromIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return prefixIndex \u003d\u003d -1 ? -1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "                : prefixIndex + 1; // +1 as offset for whitespace"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Extracts prefixes and their argument values, and returns an {@code ArgumentMultimap} object that maps the"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * extracted prefixes to their respective arguments. Prefixes are extracted based on their zero-based positions in"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code argsString}."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param argsString      Arguments string of the form: {@code preamble \u003cprefix\u003evalue \u003cprefix\u003evalue ...}"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param prefixPositions Zero-based positions of all prefixes in {@code argsString}"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return                ArgumentMultimap object that maps prefixes to their arguments"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private static ArgumentMultimap extractArguments(String argsString, List\u003cPrefixPosition\u003e prefixPositions) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        // Sort by start position"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.sort((prefix1, prefix2) -\u003e prefix1.getStartPosition() - prefix2.getStartPosition());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        // Insert a PrefixPosition to represent the preamble"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition preambleMarker \u003d new PrefixPosition(new Prefix(\"\"), 0);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(0, preambleMarker);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        // Add a dummy PrefixPosition to represent the end of the string"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition endPositionMarker \u003d new PrefixPosition(new Prefix(\"\"), argsString.length());"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        prefixPositions.add(endPositionMarker);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        // Map prefixes to their argument values (if any)"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        ArgumentMultimap argMultimap \u003d new ArgumentMultimap();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        for (int i \u003d 0; i \u003c prefixPositions.size() - 1; i++) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            // Extract and store prefixes and their arguments"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            Prefix argPrefix \u003d prefixPositions.get(i).getPrefix();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            String argValue \u003d extractArgumentValue(argsString, prefixPositions.get(i), prefixPositions.get(i + 1));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            argMultimap.put(argPrefix, argValue);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        return argMultimap;"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the trimmed value of the argument in the arguments string specified by {@code currentPrefixPosition}."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * The end position of the value is determined by {@code nextPrefixPosition}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private static String extractArgumentValue(String argsString,"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition currentPrefixPosition,"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "                                        PrefixPosition nextPrefixPosition) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix prefix \u003d currentPrefixPosition.getPrefix();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        int valueStartPos \u003d currentPrefixPosition.getStartPosition() + prefix.getPrefix().length();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        String value \u003d argsString.substring(valueStartPos, nextPrefixPosition.getStartPosition());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.trim();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Represents a prefix\u0027s position in an arguments string."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    private static class PrefixPosition {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        private int startPosition;"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        private final Prefix prefix;"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        PrefixPosition(Prefix prefix, int startPosition) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            this.prefix \u003d prefix;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            this.startPosition \u003d startPosition;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        int getStartPosition() {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.startPosition;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        Prefix getPrefix() {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            return this.prefix;"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 6,
      "-": 145
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/CliSyntax.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains Command Line Interface (CLI) syntax definitions common to multiple commands"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "public class CliSyntax {"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "    /* Prefix definitions */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_NAME \u003d new Prefix(\"n/\");"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_PHONE \u003d new Prefix(\"p/\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_GENDER \u003d new Prefix(\"g/\");"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_MATRIC_NO \u003d new Prefix(\"m/\");"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_EMAIL \u003d new Prefix(\"e/\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_ADDRESS \u003d new Prefix(\"a/\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_REMARK \u003d new Prefix(\"r/\");"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final Prefix PREFIX_PHOTO \u003d new Prefix(\"ph/\");"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final Prefix PREFIX_TAG \u003d new Prefix(\"t/\");"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final Prefix PREFIX_BIRTHDAY \u003d new Prefix(\"b/\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final Prefix PREFIX_OLD_TAG \u003d new Prefix(\"old/\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final Prefix PREFIX_NEW_TAG \u003d new Prefix(\"new/\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Prefix PREFIX_TIMETABLE \u003d new Prefix(\"tt/\");"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "nbriannl": 2,
      "April0616": 4,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/DeleteCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new DeleteCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParser implements Parser\u003cDeleteCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_REGEX_DELETE_ONE_PERSON \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DELETE_MULTIPLE_PERSON_COMMA_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"(-?\\\\d\\\\s*?,\\\\s*?-?\\\\d?)+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DELETE_MULTIPLE_PERSON_WHITESPACE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"(-?\\\\d\\\\s*?-?\\\\d?)+\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the arguments of the delete command."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @return an DeleteCommand object for execution"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public DeleteCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_TAG);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String preamble \u003d argMultimap.getPreamble();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (preamble.equals(\"\")) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            // there exists \u0027t/\u0027"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            DeleteCommand deleteCommandForTag \u003d parseForTags(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (deleteCommandForTag !\u003d null) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                return deleteCommandForTag;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            DeleteCommand deleteCommandForPerson \u003d parseForPersonIndexes(args, preamble);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (deleteCommandForPerson !\u003d null) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                return deleteCommandForPerson;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the {@code Tags} contained within {@code argMultimap} to return"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * a DeleteCommand object that executes a delete for Tags."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the values mapped as a tag does not conform as a valid tag"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see #parse(String)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private DeleteCommand parseForTags (ArgumentMultimap argMultimap) throws ParseException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (arePrefixesPresent(argMultimap, PREFIX_TAG)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                Set\u003cTag\u003e tagList \u003d ParserUtil.parseTags(argMultimap.getAllValues(PREFIX_TAG));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                return new DeleteCommand(tagList);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return null;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses the indexes contained within {@code argMultimap} to return"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * a DeleteCommand object that executes a delete for Persons."
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws ParseException if the values mapped as the persons do not conform as valid person indexes"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @see #parse(String)"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private DeleteCommand parseForPersonIndexes (String args, String preamble) throws ParseException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (preamble.matches(VALID_REGEX_DELETE_ONE_PERSON)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "            // code block for delete for a person"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return new DeleteCommand(index);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (preamble.matches(DELETE_MULTIPLE_PERSON_COMMA_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "            //code block for delete multiple persons, input string separated by comma"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ArrayList\u003cIndex\u003e deletePersons \u003d ParserUtil.parseIndexes(args, \",\");"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return new DeleteCommand(deletePersons);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (preamble.matches(DELETE_MULTIPLE_PERSON_WHITESPACE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "            //code block for delete multiple persons, input indexes separated by whitespace"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "                ArrayList\u003cIndex\u003e deletePersons \u003d ParserUtil.parseIndexes(args, \" \");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return new DeleteCommand(deletePersons);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 59,
      "April0616": 49,
      "-": 15
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/EditCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * Parses input arguments and creates a new EditCommand object"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParser implements Parser\u003cEditCommand\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the EditCommand"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and returns an EditCommand object for execution."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public EditCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArgumentMultimap argsMultimap \u003d"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_GENDER, PREFIX_MATRIC_NO,"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        PREFIX_PHONE, PREFIX_EMAIL, PREFIX_ADDRESS, PREFIX_TIMETABLE, PREFIX_TAG,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        PREFIX_OLD_TAG, PREFIX_NEW_TAG, PREFIX_BIRTHDAY);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String preamble \u003d argsMultimap.getPreamble();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (preamble.matches(\"\")) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return parseForTags(argsMultimap);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else if (preamble.matches(\"\\\\d+\")) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return parseForPersonDetails(argsMultimap);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the old {@code Tag} and new {@code Tag} contained within {@code argMultimap} to return"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * a EditCommand object that executes a edit for Tag"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the values mapped as a old or new tag does not conform as a valid tag"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see #parse(String)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private EditCommand parseForTags (ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!arePrefixesPresent(argsMultimap, PREFIX_NEW_TAG, PREFIX_OLD_TAG)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Tag oldTag \u003d ParserUtil.parseSingleTag(argsMultimap.getValue(PREFIX_OLD_TAG)).get();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Tag newTag \u003d ParserUtil.parseSingleTag(argsMultimap.getValue(PREFIX_NEW_TAG)).get();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return new EditCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the various attributes of a {@code Person} contained within {@code argMultimap} to return"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * a EditCommand object that executes a edit for a Person"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if any attribute is not a valid value."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see #parse(String)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private EditCommand parseForPersonDetails (ArgumentMultimap argsMultimap) throws ParseException {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editPersonDescriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ParserUtil.parseName(argsMultimap.getValue(PREFIX_NAME)).ifPresent(editPersonDescriptor::setName);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseGender(argsMultimap.getValue(PREFIX_GENDER)).ifPresent(editPersonDescriptor::setGender);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseMatricNo(argsMultimap.getValue(PREFIX_MATRIC_NO))"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setMatricNo);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ParserUtil.parsePhone(argsMultimap.getValue(PREFIX_PHONE)).ifPresent(editPersonDescriptor::setPhone);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ParserUtil.parseEmail(argsMultimap.getValue(PREFIX_EMAIL)).ifPresent(editPersonDescriptor::setEmail);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ParserUtil.parseAddress(argsMultimap.getValue(PREFIX_ADDRESS))"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setAddress);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ParserUtil.parseTimetable(argsMultimap.getValue(PREFIX_TIMETABLE))"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setTimetable);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            parseTagsForEdit(argsMultimap.getAllValues(PREFIX_TAG)).ifPresent(editPersonDescriptor::setTags);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            ParserUtil.parseBirthday(argsMultimap.getValue(PREFIX_BIRTHDAY))"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    .ifPresent(editPersonDescriptor::setBirthday);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!editPersonDescriptor.isAnyFieldEdited()) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new ParseException(EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        return new EditCommand(index, editPersonDescriptor);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e} if {@code tags} is non-empty."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "     * If {@code tags} contain only one element which is an empty string, it will be parsed into a"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code Set\u003cTag\u003e} containing zero tags."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cSet\u003cTag\u003e\u003e parseTagsForEdit(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assert tags !\u003d null;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        if (tags.isEmpty()) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        Collection\u003cString\u003e tagSet \u003d tags.size() \u003d\u003d 1 \u0026\u0026 tags.contains(\"\") ? Collections.emptySet() : tags;"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(ParserUtil.parseTags(tagSet));"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 3,
      "nbriannl": 69,
      "April0616": 5,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/FindCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NEW_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_OLD_TAG;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Parses input arguments and creates a new FindCommand object"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class FindCommandParser implements Parser\u003cFindCommand\u003e {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the FindCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * and returns an FindCommand object for execution."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public FindCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArgumentMultimap argsMultimap \u003d"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_NAME, PREFIX_PHONE, PREFIX_EMAIL,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        PREFIX_ADDRESS, PREFIX_TAG, PREFIX_BIRTHDAY);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (args.isEmpty() || arePrefixesPresent(argsMultimap, PREFIX_GENDER, PREFIX_TIMETABLE, PREFIX_MATRIC_NO,"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                PREFIX_NEW_TAG, PREFIX_OLD_TAG, PREFIX_PHOTO, PREFIX_REMARK) || !arePrefixesPresent(argsMultimap,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                PREFIX_TAG, PREFIX_BIRTHDAY, PREFIX_ADDRESS, PREFIX_EMAIL, PREFIX_PHONE, PREFIX_NAME)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e predicate \u003d new ArrayList\u003cString\u003e();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String nameList \u003d new String();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String phoneList \u003d new String();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String emailList \u003d new String();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String addressList \u003d new String();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String tagList \u003d new String();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String birthdayList \u003d new String();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_NAME).isPresent()) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            nameList \u003d argsMultimap.getValue(PREFIX_NAME).get();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_NAME.getPrefix());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(nameList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_PHONE).isPresent()) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            phoneList \u003d argsMultimap.getValue(PREFIX_PHONE).get();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_PHONE.getPrefix());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(phoneList);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_EMAIL).isPresent()) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            emailList \u003d argsMultimap.getValue(PREFIX_EMAIL).get();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_EMAIL.getPrefix());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(emailList);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_ADDRESS).isPresent()) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            addressList \u003d argsMultimap.getValue(PREFIX_ADDRESS).get();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_ADDRESS.getPrefix());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(addressList);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_TAG).isPresent()) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            tagList \u003d argsMultimap.getValue(PREFIX_TAG).get();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_TAG.getPrefix());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(tagList);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (argsMultimap.getValue(PREFIX_BIRTHDAY).isPresent()) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            birthdayList \u003d argsMultimap.getValue(PREFIX_BIRTHDAY).get();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            /** validity of birthday keyword input check"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "             *  keyword input must have a value between 1 to 12"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "             *  keyword input must be 2 digits"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "             *  keyword input must be in Integers"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "             */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (!birthdayList.equals(\"\")) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                if (!birthdayList.matches(\"[0-9]+\")) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    throw new ParseException(FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONNUMBER);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                } else if (Integer.parseInt(birthdayList.trim()) \u003e 12 || Integer.parseInt(birthdayList.trim()) \u003c 1) {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    throw new ParseException(String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONEXIST,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                            birthdayList.trim()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                } else if (birthdayList.trim().length() \u003d\u003d 1) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                    throw new ParseException(String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_INVALID,"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                            birthdayList.trim()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(PREFIX_BIRTHDAY.getPrefix());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            predicate.add(birthdayList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (nameList.isEmpty() \u0026\u0026 phoneList.isEmpty() \u0026\u0026 emailList.isEmpty() \u0026\u0026 addressList.isEmpty()"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 tagList.isEmpty() \u0026\u0026 birthdayList.isEmpty()) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new ParseException(FindCommand.MESSAGE_NOT_FOUND);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return new FindCommand(predicate);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return Stream.of(prefixes).anyMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 117,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/GMapsCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Parses input arguments and creates a new GMapsCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandParser implements Parser\u003cGMapsCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GMapsCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and returns an GMapsCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public GMapsCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d null;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArgumentMultimap argsMultimap \u003d"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                ArgumentTokenizer.tokenize(args, PREFIX_ADDRESS);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argsMultimap.getPreamble());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, GMapsCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (arePrefixesPresent(argsMultimap, PREFIX_ADDRESS)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                address \u003d ParserUtil.parseAddress(argsMultimap.getValue(PREFIX_ADDRESS)).get();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                throw new ParseException(ive.getMessage(), ive);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (address !\u003d null \u0026\u0026 address.toString().equals(\"\")) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException(Address.MESSAGE_ADDRESS_CONSTRAINTS,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    new IllegalValueException(Address.MESSAGE_ADDRESS_CONSTRAINTS));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new GMapsCommand(index, address);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 57,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ParserUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods used for parsing strings in the various *Parser classes."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code ParserUtil} contains methods that take in {@code Optional} as parameters. However, it goes against Java\u0027s"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " * convention (see https://stackoverflow.com/a/39005452) as {@code Optional} should only be used a return type."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": " * Justification: The methods in concern receive {@code Optional} return values from other methods as parameters and"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * return {@code Optional} values based on whether the parameters were present. Therefore, it is redundant to unwrap the"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * initial {@code Optional} before passing to {@code ParserUtil} as a parameter and then re-wrap it into an"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * {@code Optional} return value inside {@code ParserUtil} methods."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtil {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INVALID_INDEX \u003d \"Index is not a non-zero unsigned integer.\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_INSUFFICIENT_PARTS \u003d \"Number of parts must be more than 1.\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String REGEX_COMMA \u003d \",\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String REGEX_MULTIPLE_WHITESPACE \u003d \" +\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code oneBasedIndex} into an {@code Index} and returns it. Leading and trailing whitespaces will be"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * trimmed."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @throws IllegalValueException if the specified index is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index parseIndex(String oneBasedIndex) throws IllegalValueException {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedIndex \u003d oneBasedIndex.trim();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!StringUtil.isNonZeroUnsignedInteger(trimmedIndex)) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(Integer.parseInt(trimmedIndex));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses {@code oneBasedIndexes} separated with commas into a {@Code ArrayList\u003cIndex\u003e} and returns it."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Leading and trailing whitespaces are trimmed."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param splitString is the sign used to separate indexes, can be either comma or whitespace(s)"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if one of the specified indexes is invalid (not non-zero unsigned integer)."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static ArrayList\u003cIndex\u003e parseIndexes(String oneBasedIndexes, String splitString)"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedIndexes \u003d oneBasedIndexes.trim();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String[] indexes;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (splitString.equals(REGEX_COMMA)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "            indexes \u003d trimmedIndexes.split(splitString);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "            indexes \u003d trimmedIndexes.split(REGEX_MULTIPLE_WHITESPACE);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (String index : indexes) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "            index \u003d index.trim();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (!StringUtil.isNonZeroUnsignedInteger(index)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "                throw new IllegalValueException(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Index thisIndex \u003d Index.fromOneBased(Integer.valueOf(index));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (!deletePersons.contains(thisIndex)) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "                deletePersons.add(thisIndex);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return deletePersons;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e name} into an {@code Optional\u003cName\u003e} if {@code name} is present."
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cName\u003e parseName(Optional\u003cString\u003e name) throws IllegalValueException {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.isPresent() ? Optional.of(new Name(name.get())) : Optional.empty();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e gender} into an {@code Optional\u003cGender\u003e} if {@code gender} is present."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Optional\u003cGender\u003e parseGender(Optional\u003cString\u003e gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender.isPresent() ? Optional.of(new Gender(gender.get())) : Optional.empty();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e matricNo} into an {@code Optional\u003cMatricNo\u003e} if {@code matricNo} is present."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static Optional\u003cMatricNo\u003e parseMatricNo(Optional\u003cString\u003e matricNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo.isPresent() ? Optional.of(new MatricNo(matricNo.get())) : Optional.empty();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e phone} into an {@code Optional\u003cPhone\u003e} if {@code phone} is present."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cPhone\u003e parsePhone(Optional\u003cString\u003e phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.isPresent() ? Optional.of(new Phone(phone.get())) : Optional.empty();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e address} into an {@code Optional\u003cAddress\u003e} if {@code address} is present."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cAddress\u003e parseAddress(Optional\u003cString\u003e address) throws IllegalValueException {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.isPresent() ? Optional.of(new Address(address.get())) : Optional.empty();"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e email} into an {@code Optional\u003cEmail\u003e} if {@code email} is present."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Optional\u003cEmail\u003e parseEmail(Optional\u003cString\u003e email) throws IllegalValueException {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.isPresent() ? Optional.of(new Email(email.get())) : Optional.empty();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses {@code Collection\u003cString\u003e tags} into a {@code Set\u003cTag\u003e}."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e parseTags(Collection\u003cString\u003e tags) throws IllegalValueException {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(tags);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tagSet \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String tagName : tags) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            tagSet.add(new Tag(tagName));"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagSet;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses {@code Optional\u003cint\u003e birthday} into a {@code HashMap\u003cBirthday\u003e} if {@code birthday} is present."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static Optional\u003cBirthday\u003e parseBirthday(Optional\u003cString\u003e birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday.isPresent() ? Optional.of(new Birthday(birthday.get())) : Optional.empty();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses a single {@code Optional\u003cString\u003e tag} into an {@code Optional\u003cTag\u003e} if {@code tag} is present."
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * See header comment of this class regarding the use of {@code Optional} parameters."
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static Optional\u003cTag\u003e parseSingleTag(Optional\u003cString\u003e tag) throws IllegalValueException {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(tag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tag.isPresent() ? Optional.of(new Tag(tag.get())) : Optional.empty();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses a {@code Optional\u003cString\u003e url} into an {@code Optional\u003cTimetable\u003e} if {@code url} is present."
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static Optional\u003cTimetable\u003e parseTimetable(Optional\u003cString\u003e url) throws IllegalValueException {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return url.isPresent() ? Optional.of(new Timetable(url.get())) : Optional.empty();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 9,
      "CindyTsai1": 13,
      "nbriannl": 11,
      "April0616": 65,
      "-": 87
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/PhotoCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_FILE_NOT_FOUND;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_FILE_PATH;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Parses input arguments and creates a new PhotoCommand object"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoCommandParser implements Parser\u003cPhotoCommand\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the PhotoCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * and returns an PhotoCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PhotoCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_PHOTO);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String localPhotoPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            localPhotoPath \u003d argMultimap.getValue(PREFIX_PHOTO).orElse(\"\");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, PhotoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return new PhotoCommand(index, localPhotoPath);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (FileNotFoundException fnfe) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    String.format(MESSAGE_FILE_NOT_FOUND, PhotoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    String.format(MESSAGE_INVALID_FILE_PATH, PhotoCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 46,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/RemarkCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Parses input arguments and creates a new RemarkCommand object"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandParser implements Parser\u003cRemarkCommand\u003e {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the RemarkCommand"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * and returns an RemarkCommand object for execution."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public RemarkCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(args);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArgumentMultimap argMultimap \u003d ArgumentTokenizer.tokenize(args, PREFIX_REMARK);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index index;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark remark;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "            index \u003d ParserUtil.parseIndex(argMultimap.getPreamble());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new ParseException(String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark \u003d getAllRemarks(argMultimap);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Concatenates all the remarks into one string."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param argumentMultimap"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return the remark contains all the remark string."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Remark getAllRemarks(ArgumentMultimap argumentMultimap) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cString\u003e allRemarks \u003d argumentMultimap.getAllValues(PREFIX_REMARK);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String allRemarkString \u003d \"\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (allRemarks.size() \u003e 1 || (allRemarks.size() \u003d\u003d 1 \u0026\u0026 (!allRemarks.get(0).equals(\"\")))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "            allRemarkString \u003d allRemarks.toString();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new Remark(allRemarkString);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 57,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/SuggestCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.TreeSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.UniqueCommandList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Suggest user input command"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandParser implements Parser\u003cSuggestCommand\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private UniqueCommandList list;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses the given {@code String} of commandWord in the context of the SuggestCommand"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * and returns an SuggestCommand object for execution."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format or if a suggested spelling is found"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public SuggestCommand parse (String commandWord) throws ParseException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        list \u003d new UniqueCommandList();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        TreeSet\u003cString\u003e possibleCommand \u003d list.getPossibleCommandList(commandWord);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e commandList \u003d list.getCommandList();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        for (String command: possibleCommand) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (commandList.contains(command)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return new SuggestCommand(command);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        throw new ParseException(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 34,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/ThemeCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.ThemeCommand;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Parses input arguments and creates a new ThemeCommand object"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class ThemeCommandParser implements Parser\u003cThemeCommand\u003e {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the GMapsCommand"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and returns an GMapsCommand object for execution."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws ParseException if the user input does not conform the expected format"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public ThemeCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String trimmedArgs \u003d args.trim();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (trimmedArgs.isEmpty()) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new ParseException("
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                    String.format(MESSAGE_INVALID_COMMAND_FORMAT, ThemeCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return new ThemeCommand(trimmedArgs);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if none of the prefixes contains empty {@code Optional} values in the given"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code ArgumentMultimap}."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static boolean arePrefixesPresent(ArgumentMultimap argumentMultimap, Prefix... prefixes) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return Stream.of(prefixes).allMatch(prefix -\u003e argumentMultimap.getValue(prefix).isPresent());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 34,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/logic/parser/TimetableCommandParser.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.logic.commands.TimetableCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Parses input arguments and creates a new TimetableCommand object"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableCommandParser implements Parser\u003cTimetableCommand\u003e {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String DISPLAY_ONE_PERSON_VALIDATION_REGEX \u003d \"-?\\\\d+\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String DISPLAY_MULTIPLE_PERSON_COMMA_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            \"((-?\\\\d([\\\\s+]*)\\\\,([\\\\s+]*)(?\u003d-?\\\\d))|-?\\\\d)+\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String DISPLAY_MULTIPLE_PERSON_WHITESPACE_VALIDATION_REGEX \u003d"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            \"(((-?\\\\d)([\\\\s]+)(?\u003d-?\\\\d))|-?\\\\d)+\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String DISPLAY_ALL_LISTED_STRING \u003d \"\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Parses the given {@code String} of arguments in the context of the TimetableCommand"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * and returns a TimetableCommand object for execution"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     *"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @throws ParseException if the user input does not conform to the expected format"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableCommand parse(String args) throws ParseException {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String preamble \u003d ArgumentTokenizer.tokenize(args).getPreamble();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (preamble.equals(DISPLAY_ALL_LISTED_STRING)) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // No arguments passed, display all listed users"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return new TimetableCommand(indexList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else if (preamble.matches(DISPLAY_ONE_PERSON_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Only one argument passed"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                ArrayList\u003cIndex\u003e indexList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Index index \u003d ParserUtil.parseIndex(args);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                indexList.add(index);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return new TimetableCommand(indexList);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else if (preamble.matches(DISPLAY_MULTIPLE_PERSON_COMMA_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Multiple arguments passed in, separated by commas"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                ArrayList\u003cIndex\u003e indexesList \u003d ParserUtil.parseIndexes(args, \",\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return new TimetableCommand(indexesList);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else if (preamble.matches(DISPLAY_MULTIPLE_PERSON_WHITESPACE_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            // Multiple arguments passed in, separated by spaces"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                ArrayList\u003cIndex\u003e indexesList \u003d ParserUtil.parseIndexes(args, \" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return new TimetableCommand(indexesList);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                throw new ParseException("
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        throw new ParseException("
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, TimetableCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 70,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/model/AddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.removeAppFile;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.PhotoCommand.PATH_DEFAULT_PHOTO;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.PhotoCommand.PATH_FILE_SAVED_PARENT_DIRECTORY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Map;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.PersonHasBeenDeletedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.PersonHasBeenModifiedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.UniquePersonList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.UniquePhotoPathList;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.PhotoPathNotFoundException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " * Wraps all data at the address-book level"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": " * Duplicates are not allowed (by .equals comparison)"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniquePersonList persons;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final UniqueTagList tags;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final UniquePhotoPathList photoPaths;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final HashMap\u003cString, String\u003e themes;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     * The \u0027unusual\u0027 code block below is an non-static initialization block, sometimes used to avoid duplication"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * between constructors. See https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note that non-static init blocks are not recommended to use. There are other ways to avoid duplication"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *   among constructors."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        persons \u003d new UniquePersonList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        tags \u003d new UniqueTagList();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPaths \u003d new UniquePhotoPathList();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        themes \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook() {}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates an AddressBook using the Persons, PhotoPaths and Tags in the {@code toBeCopied}"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public AddressBook(ReadOnlyAddressBook toBeCopied) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initialiseThemes();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        resetData(toBeCopied);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    //// list overwrite operations"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPersons(List\u003c? extends ReadOnlyPerson\u003e persons) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        this.persons.setPersons(persons);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags.setTags(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Resets the existing data of this {@code AddressBook} with {@code newData}."
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(newData);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            setPersons(newData.getPersonList());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"AddressBook should not have duplicate persons\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        setTags(new HashSet\u003c\u003e(newData.getTagList()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "            setPhotoPaths(newData.getPhotoPathList());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (DuplicatePhotoPathException e) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"AddressBook should not have duplicate photo paths\";"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(persons);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    //// person-level operations"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a person to the address book."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also checks the new person\u0027s tags and updates {@link #tags} with any new tags found,"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * and updates the Tag objects in the person to point to those in {@link #tags}."
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if an equivalent person already exists."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addPerson(ReadOnlyPerson p) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        Person newPerson \u003d new Person(p);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(newPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.add(newPerson);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} in the list with {@code editedReadOnlyPerson}."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBook}\u0027s tag list will be updated with the tags of {@code editedReadOnlyPerson}."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #syncMasterTagListWith(Person)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedReadOnlyPerson)"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(editedReadOnlyPerson);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new Person(editedReadOnlyPerson);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        syncMasterTagListWith(editedPerson);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: the tags master list will be updated even though the below line fails."
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        // This can cause the tags master list to have additional tags that are not tagged to any person"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        // in the person list."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.setPerson(target, editedPerson);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EventsCenter.getInstance().post(new PersonHasBeenModifiedEvent(target, editedPerson));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that every tag in this person:"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - exists in the master list {@link #tags}"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - points to a Tag object in the master list"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    private void syncMasterTagListWith(Person person) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        final UniqueTagList personTags \u003d new UniqueTagList(person.getTags());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.mergeFrom(personTags);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        // Create map with values \u003d tag object references in the master list"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        // used for checking person tag references"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        final Map\u003cTag, Tag\u003e masterTagObjects \u003d new HashMap\u003c\u003e();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.forEach(tag -\u003e masterTagObjects.put(tag, tag));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // Rebuild the list of person tags to point to the relevant tags in the master tag list."
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e correctTagReferences \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        personTags.forEach(tag -\u003e correctTagReferences.add(masterTagObjects.get(tag)));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        person.setTags(correctTagReferences);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures that every tag in these persons:"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - exists in the master list {@link #tags}"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "     *  - points to a Tag object in the master list"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "     *  @see #syncMasterTagListWith(Person)"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void syncMasterTagListWith(UniquePersonList persons) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        persons.forEach(this::syncMasterTagListWith);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Checks if the master list {@link #tags} has every tag being used."
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @return true if all tags in the master list is being used by a person"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean hasAllTagsInUse () {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        HashSet\u003cTag\u003e masterSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            masterSet.addAll(person.getTags());"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return masterSet.containsAll(tags.toSet());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  Gets the tags in the master list {@link #tags} that is not being used"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @return {@code Set\u003cTag\u003e} of Tags not being used by any person"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  @see #hasAllTagsInUse()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public Set\u003cTag\u003e getUnusedTags () {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        HashSet\u003cTag\u003e actualSet \u003d new HashSet\u003cTag\u003e();"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            actualSet.addAll(person.getTags());"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e masterSet \u003d tags.toSet();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        masterSet.removeAll(actualSet);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return masterSet;"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets a list of photo paths to the address book."
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param photoPaths"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws DuplicatePhotoPathException if an equivalent photo path already exists."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setPhotoPaths(List\u003cPhotoPath\u003e photoPaths) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.photoPaths.setPhotoPaths(photoPaths);"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Adds a new photo path to the address book."
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws DuplicatePhotoPathException if an equivalent photo path already exists."
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void addPhotoPath(PhotoPath newPhotoPath) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPaths.add(newPhotoPath);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks if the master list {@link #photoPaths} has every photo path being used."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if all photo paths in the master list are being used"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean hasAllPhotoPathsInUse () {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cPhotoPath\u003e masterList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "April0616"
        },
        "content": "            masterList.add(person.getPhotoPath());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return masterList.containsAll(photoPaths.toList());"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *  Gets the unused photo paths in the master list {@link #photoPaths}"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *  @return {@code List\u003cPhotoPath\u003e} of photo paths not being used by any person"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *  @see #hasAllPhotoPathsInUse()"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public List\u003cPhotoPath\u003e getUnusedPhotoPaths () {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cPhotoPath\u003e actualList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson person: persons) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "April0616"
        },
        "content": "            PhotoPath thisPhotoPath \u003d person.getPhotoPath();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (!thisPhotoPath.value.equals(\"\")) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "April0616"
        },
        "content": "                actualList.add(thisPhotoPath);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cPhotoPath\u003e masterList \u003d photoPaths.toList();"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "April0616"
        },
        "content": "        masterList.removeAll(actualList);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return masterList;"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes all the unused photos specified by the unused photo paths"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @see #getUnusedPhotoPaths()"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void removeAllUnusedPhotosAndPaths() throws PhotoPathNotFoundException {"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "April0616"
        },
        "content": "        List\u003cPhotoPath\u003e unusedPhotoPathList \u003d getUnusedPhotoPaths();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (PhotoPath unusedPhotoPath : unusedPhotoPathList) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "April0616"
        },
        "content": "            removeContactPhoto(unusedPhotoPath);"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.photoPaths.remove(unusedPhotoPath);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "April0616"
        },
        "content": "            logger.info(\"Delete photo and its path: \" + unusedPhotoPath);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Updates the master list of photo paths saved in the default folder of this"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * address book and delete the empty paths."
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void updatePhotoPathSavedInMasterList() {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final File folder \u003d new File(PATH_FILE_SAVED_PARENT_DIRECTORY);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!folder.exists()) {"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!folder.isDirectory() || folder.listFiles() \u003d\u003d null) {"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Does not exist a default folder to save photos or it has no files!\";"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (File photo : folder.listFiles()) {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "April0616"
        },
        "content": "                // covert the photo path string to standard format in the app"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "April0616"
        },
        "content": "                String photoPathString \u003d photo.getPath().replace(\"\\\\\", \"/\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "April0616"
        },
        "content": "                PhotoPath thisPhotoPath \u003d new PhotoPath(photoPathString);"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "April0616"
        },
        "content": "                if (!this.photoPaths.contains(thisPhotoPath)) {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    this.photoPaths.add(thisPhotoPath);"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "April0616"
        },
        "content": "                }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "April0616"
        },
        "content": "                assert false : \"The string of the photo path has wrong format!\";"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // delete empty path in the master list"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (PhotoPath photoPath : this.photoPaths) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (photoPath.value.equals(\"\")) {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "April0616"
        },
        "content": "                try {"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    this.photoPaths.remove(photoPath);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "April0616"
        },
        "content": "                } catch (PhotoPathNotFoundException e) {"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    assert false : \"This photo path cannot be found: \" + photoPath;"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "April0616"
        },
        "content": "                }"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (this.photoPaths.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "April0616"
        },
        "content": "                break;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes the photo of the specified contact."
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param photoPath of the photo to be removed"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void removeContactPhoto(PhotoPath photoPath) {"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeAppFile(photoPath.value);"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks whether the contact photo is the default photo"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param photoPath of the photo"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if the photo is the default photo"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isDefaultPhoto(PhotoPath photoPath) {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String photoPathValue \u003d photoPath.value;"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPathValue.equals(PATH_DEFAULT_PHOTO);"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes {@code key} from this {@code AddressBook}"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws PersonNotFoundException if the {@code key} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean removePerson(ReadOnlyPerson key) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (persons.remove(key)) {"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "April0616"
        },
        "content": "            EventsCenter.getInstance().post(new PersonHasBeenDeletedEvent(key));"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes {@code keys} from this {@code AddressBook}"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws PersonNotFoundException if one of the {@code keys} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean removePersons(ArrayList\u003cReadOnlyPerson\u003e keys) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (ReadOnlyPerson key : keys) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "April0616"
        },
        "content": "            removePerson(key);"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //// Tag-level operations"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "    public void addTag(Tag t) throws UniqueTagList.DuplicateTagException {"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.add(t);"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Removes {@code tag} from this {@code AddressBook}."
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if the {@code tag} is not in this {@code AddressBook}."
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean removeTag(Tag tag) throws TagNotFoundException {"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (tags.remove(tag)) {"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //// Theme-level operations"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Initialises the themes in the address book."
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void initialiseThemes() {"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        themes.put(\"light\", \"LightTheme.css\");"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        themes.put(\"dark\", \"DarkTheme.css\");"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    HashMap\u003cString, String\u003e getThemeMap () {"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return themes;"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "-"
        },
        "content": "    //// util methods"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList().size() + \" persons, \" + tags.asObservableList().size() +  \" tags\";"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "-"
        },
        "content": "        // TODO: refine later"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "-"
        },
        "content": "        return persons.asObservableList();"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags.asObservableList();"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObservableList\u003cPhotoPath\u003e getPhotoPathList() {"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPaths.asObservableList();"
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof AddressBook // instanceof handles nulls"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.persons.equals(((AddressBook) other).persons)"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.tags.equalsOrderInsensitive(((AddressBook) other).tags));"
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(persons, tags);"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 68,
      "April0616": 190,
      "-": 174
    }
  },
  {
    "path": "src/main/java/seedu/address/model/Model.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The API of the Model component."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public interface Model {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /** {@code Predicate} that always evaluate to true */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    Predicate\u003cReadOnlyPerson\u003e PREDICATE_SHOW_ALL_PERSONS \u003d unused -\u003e true;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Clears existing backing model and replaces with the provided new data. */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    void resetData(ReadOnlyAddressBook newData);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns the AddressBook */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    ReadOnlyAddressBook getAddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Show map of the given person **/"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void showMapOf(ReadOnlyPerson person, Index index);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Show direction to the given person from a given address **/"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void showDirectionsTo(ReadOnlyPerson target, Address address, Index index);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /** Deletes the given person. */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /** Deletes the given list of persons. */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /** Adds the given photo path */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    void addPhotoPath(PhotoPath photoPath) throws DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Adds the given person */"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    void addPerson(ReadOnlyPerson person) throws DuplicatePersonException;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the given person {@code target} with {@code editedPerson}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicatePersonException if updating the person\u0027s details causes the person to be equivalent to"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *      another existing person in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws PersonNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Deletes the specified tag from everyone in the address book"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws DuplicatePersonException if deleting a tag from the person causes the person to be equivalent to"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      another existing person in the list"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws PersonNotFoundException if unable able to find a person in the list when iterating through"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      all the persons"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if {@code tag} could not be found in the list."
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException, TagNotFoundException;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Deletes the specified tag from everyone in the address book"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws DuplicatePersonException if updating a tag for the person causes the person to be equivalent to"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      another existing person in the list"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws PersonNotFoundException if unable to find a person in the list when iterating through"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *      all the persons"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if {@code tag} could not be found in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Returns an unmodifiable view of the filtered person list */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Returns the theme map **/"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    HashMap\u003cString, String\u003e getThemeMap ();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Sets the current theme of the app */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void setCurrentTheme(String theme);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Returns the current theme in use by the app */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    String getCurrentTheme();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Checks if the master list of tags in the address book has every tag being used */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    void checkMasterTagListHasAllTagsUsed ();"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the filter of the filtered person list to filter by the given {@code predicate}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws NullPointerException if {@code predicate} is null."
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 53,
      "April0616": 15,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ModelManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.transformation.FilteredList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.MasterTagListHasAnUnusedTagEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.PhotoPathNotFoundException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.UniqueTagList.DuplicateTagException;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents the in-memory model of the address book data."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": " * All changes to any model should be synchronized."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "public class ModelManager extends ComponentManager implements Model {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ModelManager.class);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static String currentTheme;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private final FilteredList\u003cReadOnlyPerson\u003e filteredPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes a ModelManager with the given addressBook and userPrefs."
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ModelManager(ReadOnlyAddressBook addressBook, UserPrefs userPrefs) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireAllNonNull(addressBook, userPrefs);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "        logger.fine(\"Initializing with address book: \" + addressBook + \" and user prefs \" + userPrefs);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.addressBook \u003d new AddressBook(addressBook);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        logger.fine(\"Updating all photopaths...\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.addressBook.updatePhotoPathSavedInMasterList();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        logger.fine(\"Deleting all unused photos...\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.addressBook.removeAllUnusedPhotosAndPaths();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (PhotoPathNotFoundException e) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Some of the photopaths cannot be found!\";"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        filteredPersons \u003d new FilteredList\u003c\u003e(this.addressBook.getPersonList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        currentTheme \u003d userPrefs.getCurrentTheme();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public ModelManager() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        this(new AddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /** Raises an event to indicate the model has changed */"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    private void indicateAddressBookChanged() {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new AddressBookChangedEvent(addressBook));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Raises an event to indicate a tag in the master list of tags is unused*/"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void indicateMasterTagListHasAnUnusedTag () {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new MasterTagListHasAnUnusedTagEvent(addressBook.getUnusedTags()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void showMapOf(ReadOnlyPerson person, Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new PersonAddressDisplayMapEvent(person, index.getZeroBased()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void showDirectionsTo(ReadOnlyPerson target, Address address, Index index) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        raise(new PersonAddressDisplayDirectionsEvent(target, address, index.getZeroBased()));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public synchronized void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        addressBook.removePerson(target);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public synchronized void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        addressBook.removePersons(targets);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void addPhotoPath(PhotoPath photoPath) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "        addressBook.addPhotoPath(photoPath);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void checkMasterTagListHasAllTagsUsed () {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!addressBook.hasAllTagsInUse()) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            indicateMasterTagListHasAnUnusedTag();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public synchronized void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        addressBook.removeTag(tag);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ReadOnlyPerson oldPerson \u003d personList.get(i);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Person newPerson \u003d new Person(oldPerson);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(newPerson.getTags());"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            newTags.remove(tag);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            newPerson.setTags(newTags);"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            addressBook.updatePerson(oldPerson, newPerson);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException, PersonNotFoundException,"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            TagNotFoundException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        addressBook.removeTag(oldTag);"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ObservableList\u003cReadOnlyPerson\u003e personList \u003d addressBook.getPersonList();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        for (int i \u003d 0; i \u003c personList.size(); i++) {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            ReadOnlyPerson oldPerson \u003d personList.get(i);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Person newPerson \u003d new Person(oldPerson);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Set\u003cTag\u003e newTags \u003d new HashSet\u003cTag\u003e(newPerson.getTags());"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (newTags.remove(oldTag)) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                newTags.add(newTag);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                newPerson.setTags(newTags);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                addressBook.updatePerson(oldPerson, newPerson);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            addressBook.addTag(newTag);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (DuplicateTagException dpe) {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            //do nothing. It\u0027s perfectly fine if the new tag already exists in the address book. Enabled merge"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    public synchronized void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.addPerson(person);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(target, editedPerson);"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.updatePerson(target, editedPerson);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        indicateAddressBookChanged();"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        checkMasterTagListHasAllTagsUsed();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public HashMap\u003cString, String\u003e getThemeMap () {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return this.addressBook.getThemeMap();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setCurrentTheme(String theme) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        currentTheme \u003d theme;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String getCurrentTheme() {"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return currentTheme;"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "content": "    //@@author"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Filtered Person List Accessors \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the list of {@code ReadOnlyPerson} backed by the internal list of"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code addressBook}"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(filteredPersons);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(predicate);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        filteredPersons.setPredicate(predicate);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object obj) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        if (obj \u003d\u003d this) {"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(obj instanceof ModelManager)) {"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelManager other \u003d (ModelManager) obj;"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBook.equals(other.addressBook)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 filteredPersons.equals(other.filteredPersons);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "zacharytang": 1,
      "nbriannl": 105,
      "April0616": 52,
      "-": 100
    }
  },
  {
    "path": "src/main/java/seedu/address/model/ReadOnlyAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Unmodifiable view of an address book"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the persons list."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate persons."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cReadOnlyPerson\u003e getPersonList();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an unmodifiable view of the tags list."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     * This list will not contain any duplicate tags."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObservableList\u003cTag\u003e getTagList();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns an unmodifiable view of the photo paths list."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * This list will not contain any duplicate photo paths."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObservableList\u003cPhotoPath\u003e getPhotoPathList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 7,
      "-": 24
    }
  },
  {
    "path": "src/main/java/seedu/address/model/UserPrefs.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents User\u0027s preferences."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class UserPrefs {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private GuiSettings guiSettings;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookFilePath \u003d \"data/addressbook.xml\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private String addressBookName \u003d \"MyAddressBook\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private String currentTheme;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public UserPrefs() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        this.setGuiSettings(500, 500, 0, 0);"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    public GuiSettings getGuiSettings() {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        return guiSettings \u003d\u003d null ? new GuiSettings() : guiSettings;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void updateLastUsedGuiSetting(GuiSettings guiSettings) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.guiSettings \u003d guiSettings;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setGuiSettings(double width, double height, int x, int y) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiSettings \u003d new GuiSettings(width, height, x, y);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookFilePath;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookFilePath(String addressBookFilePath) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookFilePath \u003d addressBookFilePath;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookName() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookName;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddressBookName(String addressBookName) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookName \u003d addressBookName;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String getCurrentTheme() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (currentTheme \u003d\u003d null) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return \"/view/LightTheme.css\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return currentTheme;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setTheme(String theme) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.currentTheme \u003d theme;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void updateLastSetTheme(String theme) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        setTheme(theme);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "content": "    //@@author"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof UserPrefs)) { //this handles null as well."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        UserPrefs o \u003d (UserPrefs) other;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.equals(guiSettings, o.guiSettings)"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookFilePath, o.addressBookFilePath)"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 Objects.equals(addressBookName, o.addressBookName);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        return Objects.hash(guiSettings, addressBookFilePath, addressBookName);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"Gui Settings : \" + guiSettings.toString());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nLocal data file location : \" + addressBookFilePath);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(\"\\nAddressBook name : \" + addressBookName);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "nbriannl": 17,
      "-": 78
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Address.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s address in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidAddress(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Address {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_ADDRESS_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person addresses can take any values, and it should not be blank\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_VALIDATION_REGEX \u003d \"[^\\\\s].*\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given address."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given address string is invalid."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address(String address) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(address);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidAddress(address)) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d address;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person email."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidAddress(String test) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return test.matches(ADDRESS_VALIDATION_REGEX) || test.equals(\"\");"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Address // instanceof handles nulls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Address) other).value)); // state check"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "-": 60
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Birthday.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.DateFormat;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.ParseException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.text.SimpleDateFormat;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Represents a Person\u0027s birthday in the address book."
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidBirthday(String)}"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class Birthday {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAY_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            \"Person\u0027s birthday should be in the format of DDMMYYYY\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String MESSAGE_BIRTHDAY_INVALID \u003d"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            \"This date does not exist.\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * The first character of the address must not be a whitespace,"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * otherwise \" \" (a blank string) becomes a valid input."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_VALIDATION_REGEX \u003d \"\\\\d{8}\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String DATE_FORMAT \u003d \"ddMMyyyy\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public final String date;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Validates given birthday."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * @throws IllegalValueException if given birthday string is invalid."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public Birthday(String birthday) throws IllegalValueException {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        requireNonNull(birthday);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String trimmedBirthday \u003d birthday.trim();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (!isValidBirthday(trimmedBirthday)) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            if (trimmedBirthday.length() \u003d\u003d 8) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                throw new IllegalValueException(MESSAGE_BIRTHDAY_INVALID);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalValueException(MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.date \u003d formatDate(birthday);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Formats the unformatted input birthday string into dd/mm/yyyy and"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @return the formatted String"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static String formatDate (String unformatted) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (unformatted.equals(\"\")) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DateFormat withoutFormat \u003d new SimpleDateFormat(\"ddmmyyyy\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DateFormat withFormat \u003d new SimpleDateFormat(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Date intermediateDate;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            intermediateDate \u003d withoutFormat.parse(unformatted);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            String newDateString \u003d withFormat.format(intermediateDate);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return newDateString;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Removes the format from the date attribute"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @return the unformatted String as {@code ddmmyyyy}"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String getUnformattedDate () {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (date.equals(\"\")) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return \"\";"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DateFormat withFormat \u003d new SimpleDateFormat(\"dd/mm/yyyy\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DateFormat withoutFormat \u003d new SimpleDateFormat(\"ddmmyyyy\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Date intermediateDate;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            intermediateDate \u003d withFormat.parse(date);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            String newDateString \u003d withoutFormat.format(intermediateDate);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return newDateString;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Returns true if a given string is a valid person birthday."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static boolean isValidBirthday(String test) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (test.equals(\"\")) {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } else if (test.matches(BIRTHDAY_VALIDATION_REGEX)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                DateFormat df \u003d new SimpleDateFormat(DATE_FORMAT);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                df.setLenient(false);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                df.parse(test);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return true;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            } catch (ParseException pe) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return false;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return date;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                || (other instanceof Birthday // instanceof handles nulls"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 this.date.equals(((Birthday) other).date)); // state check"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return date.hashCode();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 85,
      "nbriannl": 44,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Email.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Represents a Person\u0027s email in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidEmail(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Email {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_EMAIL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_VALIDATION_REGEX \u003d \"[\\\\w\\\\.]+@[\\\\w\\\\.]+\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given email."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given email address string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email(String email) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(email);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedEmail \u003d email.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidEmail(trimmedEmail)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d trimmedEmail;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns if a given string is a valid person email."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidEmail(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return test.matches(EMAIL_VALIDATION_REGEX) || test.equals(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Email // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Email) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 55
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Gender.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents a Person\u0027s gender in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidInput(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Gender {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_GENDER_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Person gender should be a case-insensitive string of either \u0027male\u0027, \u0027female\u0027, or \u0027m\u0027, \u0027f\u0027\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MALE_FIRST_WORD \u003d \"male\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MALE_SECOND_WORD \u003d \"m\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_FEMALE_FIRST_WORD \u003d \"female\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_FEMALE_SECOND_WORD \u003d \"f\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_GENDER_UNSPECIFIED \u003d \"\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Validates given gender and sets person\u0027s gender accordingly."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Accepts input (case-insensitive): male, female, m, f"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if the given gender string is invalid."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Gender(String gender) throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(gender);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedGender \u003d gender.trim();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isValidInput(trimmedGender)) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String ignoredCaseGender \u003d trimmedGender.toLowerCase();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        value \u003d setGenderByInput(ignoredCaseGender);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String setGenderByInput(String ignoredCaseGender) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String genderValue \u003d \"\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (ignoredCaseGender.equals(VALID_MALE_FIRST_WORD)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseGender.equals(VALID_MALE_SECOND_WORD)) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "            genderValue \u003d \"Male\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (ignoredCaseGender.equals(VALID_FEMALE_FIRST_WORD)"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseGender.equals(VALID_FEMALE_SECOND_WORD)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "            genderValue \u003d \"Female\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "            genderValue \u003d \"\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return genderValue;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Checks whether the input gender is valid."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return true if a given input string is a valid person gender, false otherwise."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidInput(String inputGender) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String ignoredCaseInput \u003d inputGender.toLowerCase();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return ignoredCaseInput.equals(VALID_MALE_FIRST_WORD)"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseInput.equals(VALID_MALE_SECOND_WORD)"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseInput.equals(VALID_FEMALE_FIRST_WORD)"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseInput.equals(VALID_FEMALE_SECOND_WORD)"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || ignoredCaseInput.equals(VALID_GENDER_UNSPECIFIED);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof Gender // instanceof handles nulls"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.equals(((Gender) other).value)); // state check"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 85,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/MatricNo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents a Person\u0027s Matriculation Number in the address book."
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidMatricNo(String)}"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class MatricNo {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_MATRIC_NO_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"Person\u0027s matriculation number should be a 9-character string starting with \u0027A\u0027 or \u0027a\u0027, \""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"followed by 7 digits, and ending with a letter.\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_VALIDATION_REGEX \u003d \"([Aa])(\\\\d{7})([a-zA-Z])\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes matricNo objeccts and validates given matricNo."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if the given matricNo string is invalid."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public MatricNo(String matricNo) throws IllegalValueException {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(matricNo);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String trimmedMatricNo \u003d matricNo.trim();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isValidMatricNo(trimmedMatricNo)) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d trimmedMatricNo;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns if a given string is a valid person matricNo."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidMatricNo(String test) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return test.matches(MATRIC_NO_VALIDATION_REGEX) || test.equals(\"\");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns true if two matric numbers are the same."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * \u0027A0162533K\u0027 equals \u0027a0162533k\u0027"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof MatricNo // instanceof handles nulls"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.toUpperCase().equals(((MatricNo) other).value.toUpperCase())); // state check"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 56,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Person.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Objects;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleObjectProperty;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person in the address book."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class Person implements ReadOnlyPerson {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cName\u003e name;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cGender\u003e gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cMatricNo\u003e matricNo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cPhone\u003e phone;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cEmail\u003e email;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cAddress\u003e address;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ObjectProperty\u003cTimetable\u003e timetable;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cRemark\u003e remark;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ObjectProperty\u003cPhotoPath\u003e photoPath;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private ObjectProperty\u003cBirthday\u003e birthday;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private ObjectProperty\u003cUniqueTagList\u003e tags;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "     * Every field must be present and not null."
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Person(Name name, Gender gender, MatricNo matricNo, Phone phone, Email email, Address address,"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "                  Timetable timetable, Remark remark, PhotoPath photoPath, Set\u003cTag\u003e tags, Birthday birthday) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(name, phone, email, address, tags);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name \u003d new SimpleObjectProperty\u003c\u003e(name);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.gender \u003d new SimpleObjectProperty\u003c\u003e(gender);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.matricNo \u003d new SimpleObjectProperty\u003c\u003e(matricNo);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone \u003d new SimpleObjectProperty\u003c\u003e(phone);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email \u003d new SimpleObjectProperty\u003c\u003e(email);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address \u003d new SimpleObjectProperty\u003c\u003e(address);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable \u003d new SimpleObjectProperty\u003c\u003e(timetable);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark \u003d new SimpleObjectProperty\u003c\u003e(remark);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.photoPath \u003d new SimpleObjectProperty\u003c\u003e(photoPath);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        // protect internal tags from changes in the arg list"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tags \u003d new SimpleObjectProperty\u003c\u003e(new UniqueTagList(tags));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.birthday \u003d new SimpleObjectProperty\u003c\u003e(birthday);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a copy of the given ReadOnlyPerson."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this(source.getName(), source.getGender(), source.getMatricNo(), source.getPhone(), source.getEmail(),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "                source.getAddress(), source.getTimetable(), source.getRemark(),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "                source.getPhotoPath(), source.getTags(), source.getBirthday());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setName(Name name) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        this.name.set(requireNonNull(name));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cName\u003e nameProperty() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        return name;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public Name getName() {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        return name.get();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setGender(Gender gender) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.gender.set(requireNonNull(gender));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cGender\u003e genderProperty() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Gender getGender() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return gender.get();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setMatricNo(MatricNo matricNo) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.matricNo.set(requireNonNull(matricNo));"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cMatricNo\u003e matricNoProperty() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public MatricNo getMatricNo() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return matricNo.get();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setPhone(Phone phone) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phone.set(requireNonNull(phone));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cPhone\u003e phoneProperty() {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone;"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone getPhone() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        return phone.get();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setEmail(Email email) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        this.email.set(requireNonNull(email));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cEmail\u003e emailProperty() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        return email;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public Email getEmail() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return email.get();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setAddress(Address address) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        this.address.set(requireNonNull(address));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cAddress\u003e addressProperty() {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return address;"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public Address getAddress() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        return address.get();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void setTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable.set(requireNonNull(timetable));"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public ObjectProperty\u003cTimetable\u003e timetableProperty() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Timetable getTimetable() {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable.get();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setRemark(Remark remark) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.remark.set(requireNonNull(remark));"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cRemark\u003e remarkProperty() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remark;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Remark getRemark() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remark.get();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setPhotoPath(PhotoPath photoPath) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.photoPath.set(requireNonNull(photoPath));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObjectProperty\u003cPhotoPath\u003e photoPathProperty() {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPath;"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PhotoPath getPhotoPath() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPath.get();"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an immutable tag set, which throws {@code UnsupportedOperationException}"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "     * if modification is attempted."
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e getTags() {"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        return Collections.unmodifiableSet(tags.get().toSet());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObjectProperty\u003cUniqueTagList\u003e tagProperty() {"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces this person\u0027s tags with the tags in the argument tag set."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e replacement) {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        tags.set(new UniqueTagList(replacement));"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void setBirthday(Birthday birthday) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        this.birthday.set(requireNonNull(birthday));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public ObjectProperty\u003cBirthday\u003e birthdayProperty() {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public Birthday getBirthday() {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return birthday.get();"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof ReadOnlyPerson // instanceof handles nulls"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.isSameStateAs((ReadOnlyPerson) other));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // use this method for custom fields hashing instead of implementing your own"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return Objects.hash(name, gender, matricNo, phone, email, address, timetable, tags, birthday);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "        return getAsText();"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 14,
      "CindyTsai1": 19,
      "April0616": 73,
      "-": 139
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Phone.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a Person\u0027s phone number in the address book."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " * Guarantees: immutable; is valid as declared in {@link #isValidPhone(String)}"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class Phone {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String MESSAGE_PHONE_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            \"Phone numbers can only contain numbers, and should be at least 3 digits long\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_VALIDATION_REGEX \u003d \"\\\\d{3,}\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Validates given phone number."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if given phone string is invalid."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public Phone(String phone) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(phone);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        String trimmedPhone \u003d phone.trim();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!isValidPhone(trimmedPhone)) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalValueException(MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.value \u003d trimmedPhone;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a given string is a valid person phone number."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static boolean isValidPhone(String test) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return test.matches(PHONE_VALIDATION_REGEX) || test.equals(\"\");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof Phone // instanceof handles nulls"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 this.value.equals(((Phone) other).value)); // state check"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "-": 56
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/ReadOnlyPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.ObjectProperty;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.UniqueTagList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A read-only immutable interface for a Person in the addressbook."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * Implementations should guarantee: details are present and not null, field values are validated."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public interface ReadOnlyPerson {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cName\u003e nameProperty();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    Name getName();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cGender\u003e genderProperty();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    Gender getGender();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cMatricNo\u003e matricNoProperty();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    MatricNo getMatricNo();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cPhone\u003e phoneProperty();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    Phone getPhone();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cEmail\u003e emailProperty();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    Email getEmail();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cAddress\u003e addressProperty();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    Address getAddress();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    ObjectProperty\u003cTimetable\u003e timetableProperty();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    Timetable getTimetable();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cRemark\u003e remarkProperty();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    Remark getRemark();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    ObjectProperty\u003cPhotoPath\u003e photoPathProperty();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    PhotoPath getPhotoPath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    ObjectProperty\u003cUniqueTagList\u003e tagProperty();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    Set\u003cTag\u003e getTags();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    ObjectProperty\u003cBirthday\u003e birthdayProperty();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    Birthday getBirthday();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if both have the same state. (interfaces cannot override .equals)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    default boolean isSameStateAs(ReadOnlyPerson other) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other !\u003d null // this is first to avoid NPE below"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getName().equals(this.getName()) // state checks here onwards"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getGender().equals(this.getGender())"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getMatricNo().equals(this.getMatricNo())"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getPhone().equals(this.getPhone())"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 other.getEmail().equals(this.getEmail())"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getAddress().equals(this.getAddress())"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 other.getTimetable().equals(this.getTimetable())"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 other.getRemark().equals(this.getRemark()))"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 other.getPhotoPath().equals(this.getPhotoPath())"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                \u0026\u0026 other.getBirthday().equals(this.getBirthday());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Formats the person as text, showing all contact details."
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    default String getAsText() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        final StringBuilder builder \u003d new StringBuilder();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        builder.append(getName())"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nGender: \")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getGender())"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nMatric No.: \")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getMatricNo())"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nPhone: \")"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getPhone())"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nEmail: \")"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getEmail())"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nAddress: \")"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                .append(getAddress())"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nBirthday: \")"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .append(getBirthday())"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nTimetable: \")"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .append((getTimetable().toString().equals(\"http://modsn.us/5tN3z\")) ? \"\" : getTimetable())"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nRemark: \")"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getRemark())"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nPhoto: \")"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(getPhotoPath())"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .append(\"\\nTags: \");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        getTags().forEach(builder::append);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        return builder.toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 6,
      "April0616": 27,
      "-": 50
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/Remark.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents the remark of a person in the address book."
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class Remark {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Remark(String remark) {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(remark);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof Remark // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.equals(((Remark) other).value)); // state check"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 30,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/Timetable.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseUrl;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.regex.Matcher;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.regex.Pattern;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a person\u0027s timetable in the address book"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Guarantees: Immutable"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class Timetable {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_ODD \u003d 0;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_EVEN \u003d 1;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int WEEK_BOTH \u003d -1;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_MONDAY \u003d 0;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_TUESDAY \u003d 1;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_WEDNESDAY \u003d 2;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_THURSDAY \u003d 3;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int DAY_FRIDAY \u003d 4;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_TIMETABLE_URL_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            \"Timetable URLs should be a valid shortened NUSMods URL\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String MESSAGE_INVALID_SHORT_URL \u003d \"Invalid shortened URL provided\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String EMPTY_TIMETABLE_STRING \u003d \"\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String[] ARRAY_DAYS \u003d {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Monday\","
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Tuesday\","
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Wednesday\","
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Thursday\","
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Friday\""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String[] ARRAY_WEEKS \u003d {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Odd Week\","
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"Even Week\""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String[] ARRAY_TIMES \u003d {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"0800\", \"0830\", \"0900\", \"0930\", \"1000\", \"1030\", \"1100\", \"1130\","
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"1200\", \"1230\", \"1300\", \"1330\", \"1400\", \"1430\", \"1500\", \"1530\","
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"1600\", \"1630\", \"1700\", \"1730\", \"1800\", \"1830\", \"1900\", \"1930\","
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        \"2000\", \"2030\", \"2100\", \"2130\", \"2200\", \"2230\", \"2300\", \"2330\""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    };"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String NUSMODS_SHORT \u003d \"modsn.us\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String URL_HOST_REGEX \u003d \"\\\\/\\\\/.*?\\\\/\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final TimetableInfo timetable;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public Timetable(String url) throws IllegalValueException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        requireNonNull(url);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String trimmedUrl \u003d url.trim();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // If no url provided, returns an empty timetable"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (trimmedUrl.equals(EMPTY_TIMETABLE_STRING)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.value \u003d EMPTY_TIMETABLE_STRING;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.timetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!isValidUrl(trimmedUrl)) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.value \u003d trimmedUrl;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetable \u003d parseUrl(trimmedUrl);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns if a url is a valid NUSMods url"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static boolean isValidUrl(String test) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Matcher matcher \u003d Pattern.compile(URL_HOST_REGEX).matcher(test);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!matcher.find()) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String hostName \u003d matcher.group()"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .substring(2, matcher.group().length() - 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return hostName.equals(NUSMODS_SHORT);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if a timeslot specified has a lesson"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String weekType, String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable.doesSlotHaveLesson(weekType, day, timing);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                || (other instanceof Timetable // instanceof handles nulls"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 this.value.equals(((Timetable) other).value)); // state check"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 115,
      "-": 3
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableDay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseStartEndTime;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a single day in a timetable"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableDay {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int ARRAY_NUM_TIMESLOTS \u003d 32;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableSlot[] slots;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableDay() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        slots \u003d new TimetableSlot[ARRAY_NUM_TIMESLOTS];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_TIMESLOTS; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            slots[i] \u003d new TimetableSlot();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Sets all slots between two timings to have lessons"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String startTime, String endTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int startTimeIndex \u003d parseStartEndTime(startTime);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int endTimeIndex \u003d parseStartEndTime(endTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d startTimeIndex; i \u003c endTimeIndex; i++) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            slots[i].setLesson();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return slots[parseStartEndTime(timing)].hasLesson();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableSlot getTimetableSlot(int index) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return slots[index];"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableDay)) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_TIMESLOTS; i++) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.slots[i].equals(((TimetableDay) other).getTimetableSlot(i))) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 60,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableInfo.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseWeekType;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_BOTH;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_EVEN;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_ODD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Fully represents all information about a person\u0027s timetable slots"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableInfo {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final int ARRAY_NUM_EVEN_ODD \u003d 2;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableWeek[] timetable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableInfo() {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable \u003d new TimetableWeek[ARRAY_NUM_EVEN_ODD];"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_EVEN_ODD; i++) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[i] \u003d new TimetableWeek();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if a specific slot has a lesson"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String weekType, String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int weekIndex \u003d parseWeekType(weekType);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (weekIndex !\u003d WEEK_ODD \u0026\u0026 weekIndex !\u003d WEEK_EVEN) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalValueException(\"Please specify a week type!\");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable[weekIndex].doesSlotHaveLesson(day, timing);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Updates the timetable using lesson information provided"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String weekType, String day, String startTime, String endTime)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throws IllegalValueException {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        int weekIndex \u003d parseWeekType(weekType);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (weekIndex \u003d\u003d WEEK_BOTH) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[WEEK_ODD].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[WEEK_EVEN].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetable[weekIndex].updateSlotsWithLesson(day, startTime, endTime);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableWeek getWeek(int weekIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return timetable[weekIndex];"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableInfo)) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_EVEN_ODD; i++) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.timetable[i].equals(((TimetableInfo) other).getWeek(i))) {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 72,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableSlot.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a single slot in a timetable"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableSlot {"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private boolean hasLesson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableSlot() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.hasLesson \u003d false;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void setLesson() {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        hasLesson \u003d true;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean hasLesson() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return hasLesson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                || (other instanceof TimetableSlot // instanceof handles nulls"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                \u0026\u0026 this.hasLesson \u003d\u003d ((TimetableSlot) other).hasLesson());"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 29
    }
  },
  {
    "path": "src/main/java/seedu/address/model/person/timetable/TimetableWeek.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person.timetable;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseDay;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Represents a full timetable for a week"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableWeek {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final int ARRAY_NUM_DAYS \u003d 5;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDay[] days;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableWeek() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        days \u003d new TimetableDay[ARRAY_NUM_DAYS];"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            days[i] \u003d new TimetableDay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean doesSlotHaveLesson(String day, String timing) throws IllegalValueException {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return days[parseDay(day)].doesSlotHaveLesson(timing);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlotsWithLesson(String day, String startTime, String endTime) throws IllegalValueException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        days[parseDay(day)].updateSlotsWithLesson(startTime, endTime);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDay getDay(int dayIndex) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return days[dayIndex];"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (!(other instanceof TimetableWeek)) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int i \u003d 0; i \u003c ARRAY_NUM_DAYS; i++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            if (!this.days[i].equals(((TimetableWeek) other).getDay(i))) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                return false;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return true;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 52,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/model/photo/PhotoPath.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.photo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isInFolder;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.commons.util.FileUtil.isValidImageFile;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Represents the path of a person\u0027s photo in the address book."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoPath {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String FILE_SAVED_PARENT_PATH \u003d \"src/main/resources/images/contactPhotos/\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MESSAGE_APP_PHOTOPATH_CONSTRAINTS \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "            \"The app photo path should be a string starting with \u0027\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + FILE_SAVED_PARENT_PATH"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"\u0027, following by the file name with a valid extension, like\u0027photo.jpg\u0027.\\n\""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    + \"The valid extensions are \u0027jpg\u0027, \u0027jpeg\u0027, \u0027png\u0027, \u0027gif\u0027 or \u0027bmp\u0027.\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public final String value;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the photo path object and validates the given photo path string."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param photoPath string of the specified photo path"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if the given string is invalid"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PhotoPath(String photoPath) throws IllegalValueException {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(photoPath);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!isValidPhotoPath(photoPath)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalValueException(MESSAGE_APP_PHOTOPATH_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.value \u003d photoPath;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns if a given string is a valid photo path."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static boolean isValidPhotoPath(String photoPath) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (photoPath.equals(\"\")) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "            //empty photo path"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Boolean isValidImage \u003d isValidImageFile(photoPath);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Boolean isInDefaultFolder \u003d isInFolder(photoPath, FILE_SAVED_PARENT_PATH);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return  isInDefaultFolder \u0026\u0026 isValidImage;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof PhotoPath // instanceof handles nulls"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "                \u0026\u0026 this.value.equals(((PhotoPath) other).value)); // state check"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return value.hashCode();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 64,
      "-": 4
    }
  },
  {
    "path": "src/main/java/seedu/address/model/photo/UniquePhotoPathList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.photo;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.PhotoPathNotFoundException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": " * A list of PhotoPaths that enforces uniqueness between its elements and does not allow nulls."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": " *"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Supports a minimal set of list operations."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": " *"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": " * @see PhotoPath#equals(Object)"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class UniquePhotoPathList implements Iterable\u003cPhotoPath\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final ObservableList\u003cPhotoPath\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // used by asObservableList()"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final ObservableList\u003cPhotoPath\u003e mappedList \u003d EasyBind.map(internalList, (photoPath) -\u003e photoPath);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns true if the list contains an equivalent PhotoPath as the given argument."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean contains(PhotoPath toCheck) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Adds a PhotoPath to the list."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws DuplicatePhotoPathException if the PhotoPath to add is a duplicate of an existing PhotoPath in the list."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void add(PhotoPath toAdd) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new DuplicatePhotoPathException();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Replaces the photoPath {@code target} in the list with {@code editedPhotoPath}."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws DuplicatePhotoPathException if the replacement is equivalent to another existing PhotoPath in the list."
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws PhotoPathNotFoundException if {@code target} could not be found in the list."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setPhotoPath(PhotoPath target, PhotoPath editedPhotoPath)"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throws DuplicatePhotoPathException, PhotoPathNotFoundException {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(editedPhotoPath);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        int index \u003d internalList.indexOf(target);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        if (index \u003d\u003d -1) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new PhotoPathNotFoundException();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!target.equals(editedPhotoPath) \u0026\u0026 internalList.contains(editedPhotoPath)) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new DuplicatePhotoPathException();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        internalList.set(index, editedPhotoPath);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes the equivalent PhotoPath from the list."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws PhotoPathNotFoundException if no such PhotoPath could be found in the list."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public boolean remove(PhotoPath toRemove) throws PhotoPathNotFoundException {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final boolean photoPathFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!photoPathFoundAndDeleted) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new PhotoPathNotFoundException();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return photoPathFoundAndDeleted;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setPhotoPaths(UniquePhotoPathList replacement) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        this.internalList.setAll(replacement.internalList);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setPhotoPaths(List\u003cPhotoPath\u003e photoPaths) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final UniquePhotoPathList replacement \u003d new UniquePhotoPathList();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        for (final PhotoPath photoPath : photoPaths) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "            replacement.add(photoPath);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setPhotoPaths(replacement);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns all photo paths in this list as a list."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * This list is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public List\u003cPhotoPath\u003e toList() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new ArrayList\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObservableList\u003cPhotoPath\u003e asObservableList() {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(mappedList);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Get the size of the internal list."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return how many photo paths in the unique photo list."
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public int size() {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return internalList.size();"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Iterator\u003cPhotoPath\u003e iterator() {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "                || (other instanceof UniquePhotoPathList // instanceof handles nulls"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniquePhotoPathList) other).internalList));"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 3,
      "April0616": 102,
      "-": 37
    }
  },
  {
    "path": "src/main/java/seedu/address/model/photo/exceptions/DuplicatePhotoPathException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.photo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Signals that the operation will result in duplicate PhotoPath objects."
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class DuplicatePhotoPathException extends DuplicateDataException {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public DuplicatePhotoPathException() {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "        super(\"Operation would result in duplicate photo paths.\");"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 11,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/model/photo/exceptions/PhotoPathNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.photo.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Signals that the operation is unable to find the specified photo path."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoPathNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "April0616": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/Tag.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Represents a Tag in the address book."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Guarantees: immutable; name is valid as declared in {@link #isValidTagName(String)}"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class Tag {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String MESSAGE_TAG_CONSTRAINTS \u003d \"Tags names should be alphanumeric, and should not be blank\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String TAG_VALIDATION_REGEX \u003d \"\\\\p{Alnum}+\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final int TAG_ACCEPTABLE_LENGTH \u003d 25;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final String tagName;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Validates given tag name."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws IllegalValueException if the given tag name string is invalid."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public Tag(String name) throws IllegalValueException {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(name);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String trimmedName \u003d name.trim();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!isValidTagName(trimmedName)) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new IllegalValueException(MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!isAcceptableTagLength(trimmedName)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new IllegalValueException(generateExceptionMessageForLongTag(trimmedName));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.tagName \u003d trimmedName;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if a given string is a valid tag name."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static boolean isValidTagName(String test) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return test.matches(TAG_VALIDATION_REGEX);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns true if a valid tag name is too long."
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static boolean isAcceptableTagLength(String test) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return test.length() \u003c TAG_ACCEPTABLE_LENGTH;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Generates the exception message when trying to create a tag which is too long"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static String generateExceptionMessageForLongTag(String longTag) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \"The tag: \" + longTag + \" is too long!\\n\""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + \"Consider adding a remark instead?\\n\""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + \"Example: remark INDEX r/\" + longTag + \"\\n\""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + \"\\n\""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + RemarkCommand.MESSAGE_USAGE;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                || (other instanceof Tag // instanceof handles nulls"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                \u0026\u0026 this.tagName.equals(((Tag) other).tagName)); // state check"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tagName.hashCode();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Format state as text for viewing."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String toString() {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return \u0027[\u0027 + tagName + \u0027]\u0027;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 76,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/UniqueTagList.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.tag;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.util.CollectionUtil.requireAllNonNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Iterator;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DuplicateDataException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.CollectionUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A list of tags that enforces no nulls and uniqueness between its elements."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * Supports minimal set of list operations for the app\u0027s features."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " *"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * @see Tag#equals(Object)"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class UniqueTagList implements Iterable\u003cTag\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private final ObservableList\u003cTag\u003e internalList \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs empty TagList."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueTagList() {}"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates a UniqueTagList using given tags."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * Enforces no nulls."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public UniqueTagList(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.addAll(tags);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns all tags in this list as a Set."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * This set is mutable and change-insulated against the internal list."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public Set\u003cTag\u003e toSet() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        return new HashSet\u003c\u003e(internalList);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Replaces the Tags in this list with those in the argument tag list."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setTags(Set\u003cTag\u003e tags) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        requireAllNonNull(tags);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.setAll(tags);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Ensures every tag in the argument list exists in this object."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public void mergeFrom(UniqueTagList from) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e alreadyInside \u003d this.toSet();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        from.internalList.stream()"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(tag -\u003e !alreadyInside.contains(tag))"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .forEach(internalList::add);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the list contains an equivalent Tag as the given argument."
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean contains(Tag toCheck) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toCheck);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.contains(toCheck);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "     * Adds a Tag to the list."
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DuplicateTagException if the Tag to add is a duplicate of an existing Tag in the list."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add(Tag toAdd) throws DuplicateTagException {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(toAdd);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        if (contains(toAdd)) {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicateTagException();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        internalList.add(toAdd);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@aauthor nbriannl"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Removes a Tag from the list."
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @throws TagNotFoundException if no such tag could be found in the list."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public boolean remove(Tag toRemove) throws TagNotFoundException {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        requireNonNull(toRemove);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        final boolean tagFoundAndDeleted \u003d internalList.remove(toRemove);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!tagFoundAndDeleted) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            throw new TagNotFoundException();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tagFoundAndDeleted;"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@aauthor"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    public Iterator\u003cTag\u003e iterator() {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.iterator();"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the backing list as an unmodifiable {@code ObservableList}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e asObservableList() {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(internalList);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        return other \u003d\u003d this // short circuit if same object"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "                || (other instanceof UniqueTagList // instanceof handles nulls"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "                        \u0026\u0026 this.internalList.equals(((UniqueTagList) other).internalList));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the element in this list is equal to the elements in {@code other}."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     * The elements do not have to be in the same order."
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equalsOrderInsensitive(UniqueTagList other) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(other.internalList);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        return this \u003d\u003d other || new HashSet\u003c\u003e(this.internalList).equals(new HashSet\u003c\u003e(other.internalList));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    public int hashCode() {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        assert CollectionUtil.elementsAreUnique(internalList);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        return internalList.hashCode();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "     * Signals that an operation would have violated the \u0027no duplicates\u0027 property of the list."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    public static class DuplicateTagException extends DuplicateDataException {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        protected DuplicateTagException() {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            super(\"Operation would result in duplicate tags\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 17,
      "-": 142
    }
  },
  {
    "path": "src/main/java/seedu/address/model/tag/exceptions/TagNotFoundException.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.model.tag.exceptions;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Signals that the operation is unable to find the specified tag."
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class TagNotFoundException extends Exception {}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/model/util/SampleDataUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains utility methods for populating {@code AddressBook} with sample data."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class SampleDataUtil {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Person[] getSamplePersons() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "            return new Person[]{"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"SELECT ME\"), new Gender(\"Male\"),"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new MatricNo(\"A1234567X\"), new Phone(\"91234567\"), new Email(\"example@example.com\"),"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Address(\"First time in UniFy? Type \\\"help\\\"!\"),"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Timetable(\"http://modsn.us/FX3uR\"),"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"Explore the sample data. When you\u0027re ready, type \\\"clear\\\" to clear address book\"),"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        getTagSet(\"Sample\", \"Tags\"), new Birthday(\"25101996\")),"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"Labayna Neil Brian Narido\"), new Gender(\"Male\"), new MatricNo(\"A0155016R\"),"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Phone(\"96477278\"), new Email(\"neilbrian.nl@example.com\"),"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 630, Yishun St 61\"), new Timetable(\"http://modsn.us/VLQ3g\"),"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"Handsome\"), new PhotoPath(\"\"), getTagSet(\"CS2101\", \"CS2103T\"),"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Birthday(\"02101995\")),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"Fan Yuting\"), new Gender(\"Female\"), new MatricNo(\"A0162131F\"),"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Phone(\"96857667\"), new Email(\"fyt0616@example.com\"),"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Prince George Park Residences NUS\"),"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Timetable(\"http://modsn.us/aHN0q\"),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"[Likes playing Dota 2]\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        getTagSet(\"CS2105\", \"CS2101\", \"CS2103T\"), new Birthday(\"16061998\")),"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"Tsai Yu Hsuan\"), new Gender(\"Female\"), new MatricNo(\"A0161331N\"),"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Phone(\"95567202\"), new Email(\"cindy93@example.com\"),"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"7 Serangoon Avenue 2, #13-07\"),"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Timetable(\"http://modsn.us/VLQ3g\"),"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"), getTagSet(\"CS2101\", \"CS2103T\"),"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Birthday(\"18081993\")),"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"Zachary Tang\"), new Gender(\"Male\"), new MatricNo(\"A0131788N\"),"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Phone(\"91677489\"), new Email(\"zachtang@example.com\"),"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 43 Marine Crescent, #24-02\"),"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Timetable(\"http://modsn.us/9UKRW\"),"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"[Big Dreamer]\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        getTagSet(\"CS2101\", \"CS2103T\"), new Birthday(\"06121995\")),"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new Person(new Name(\"The Myth\"), new Gender(\"Male\"), new MatricNo(\"A0000000R\"),"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Phone(\"99999999\"), new Email(\"theMan.theMyth.@thelegend.com\"),"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Address(\"NUS COM2 #2-57\"),"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Timetable(\"http://modsn.us/9UKRW\"),"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        new Remark(\"The Legend\"), new PhotoPath(\"\"), getTagSet(\"Man\", \"Myth\", \"Legend\"),"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Birthday(\"07121998\")),"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                new Person(new Name(\"Thomas Spencer\"), new Gender(\"Male\"), new MatricNo(\"A0155531K\"),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Phone(\"92624417\"), new Email(\"royb@example.com\"),"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"RC4 NUS UTown\"), new Timetable(\"http://modsn.us/0ECRP\"),"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"[From London]\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        getTagSet(\"ExchangeStudent\", \"Business\"), new Birthday(\"05111998\")),"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                new Person(new Name(\"Bobby Chin\"), new Gender(\"Male\"), new MatricNo(\"A0177348L\"),"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Phone(\"99635723\"), new Email(\"chinnybob@gmail.com\"),"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        new Address(\"Blk 320, Ang Mo Kio St 32\"), new Timetable(\"http://modsn.us/9UKRW\"),"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Arts\", \"Sociology\"), new Birthday(\"01101994\")),"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                new Person(new Name(\"Bruce Banner\"), new Gender(\"Male\"), new MatricNo(\"A4467880N\"),"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"99049128\"), new Email(\"buenapflug@example.com\"),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 16 Bukit Panjang Street 85, #13-04\"), new Timetable(\"http://modsn.us/GWp3V\"),"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"[Triggered]\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Business\", \"MA1330\"), new Birthday(\"20041996\")),"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Marlin Nathaniel\"), new Gender(\"Male\"), new MatricNo(\"A3481535O\"),"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"98344997\"), new Email(\"marlinnathaniel@example.com\"),"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 21 Hougang Street 80, #14-25\"), new Timetable(\"http://modsn.us/AWYIc\"),"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Business\", \"NUSSU\"), new Birthday(\"25011994\")),"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Madalene Mcphearson\"), new Gender(\"Male\"), new MatricNo(\"A1796495R\"),"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"91720552\"), new Email(\"madalenemcphearson@example.com\"),"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 16 Serangoon Gardens Street 76, #02-15\"),"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Timetable(\"http://modsn.us/AWYIc\"),"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Arts\", \"NUSSU\"), new Birthday(\"15041991\")),"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Kathline Guida\"), new Gender(\"Female\"), new MatricNo(\"A3285865D\"),"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"92552370\"), new Email(\"kathlineguida@example.com\"),"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 16 Serangoon Gardens Street 76, #02-15\"),"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Timetable(\"http://modsn.us/rBmlH\"),"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Engineering\", \"ComputingClub\"), new Birthday(\"20101992\")),"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Young Marley\"), new Gender(\"Female\"), new MatricNo(\"A8571220C\"),"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"95314096\"), new Email(\"youngmarley@example.com\"),"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 192 Lorong 4 MacPherson, #09-20\"), new Timetable(\"http://modsn.us/AWYIc\"),"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Science\", \"MA1101R\"), new Birthday(\"15061993\")),"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Barbar Messineo\"), new Gender(\"Female\"), new MatricNo(\"A3981800L\"),"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"99284431\"), new Email(\"barbarmessineo@example.com\"),"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 330 Kallang Street 73, #05-17\"), new Timetable(\"http://modsn.us/Oqiyc\"),"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Arts\", \"MA1101R\"), new Birthday(\"15061993\")),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Lucilla Awong\"), new Gender(\"Male\"), new MatricNo(\"A2256727R\"),"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"94572019\"), new Email(\"lucillaawong@example.com\"),"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 122 Aljunied Lane, #04-26\"), new Timetable(\"http://modsn.us/FX3uR\"),"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Science\", \"MA1330\"), new Birthday(\"20031992\")),"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Tai Yeung\"), new Gender(\"Female\"), new MatricNo(\"A2796193O\"),"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"96492016\"), new Email(\"taiyeung@example.com\"),"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"41 Buangkok Walk\"), new Timetable(\"http://modsn.us/rBmlH\"),"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Science\", \"CS2010\"), new Birthday(\"25101991\")),"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Migdalia Valencia\"), new Gender(\"Male\"), new MatricNo(\"A5673729W\"),"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"92644585\"), new Email(\"migdaliavalencia@example.com\"),"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"46 Lavender Crescent\"), new Timetable(\"http://modsn.us/Oqiyc\"),"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Arts\", \"MA1101R\"), new Birthday(\"01101994\")),"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Almeda Abboud\"), new Gender(\"Female\"), new MatricNo(\"A3395772A\"),"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"93118324\"), new Email(\"almedaabboud@example.com\"),"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 122 Aljunied Lane, #04-26\"), new Timetable(\"http://modsn.us/Oqiyc\"),"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Science\", \"MA1101R\"), new Birthday(\"20041991\")),"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Jeannine Dillingham\"), new Gender(\"Female\"), new MatricNo(\"A3423732X\"),"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"96593876\"), new Email(\"jeanninedillingham@example.com\"),"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 192 Lorong 4 MacPherson, #09-20\"), new Timetable(\"http://modsn.us/AWYIc\"),"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Arts\", \"MA1101R\"), new Birthday(\"01121996\")),"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Jule Mcphatter\"), new Gender(\"Male\"), new MatricNo(\"A1681721Q\"),"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"94288455\"), new Email(\"julemcphatter@example.com\"),"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 407 Pasir Ris Street 11, #08-21\"), new Timetable(\"http://modsn.us/Oqiyc\"),"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        getTagSet(\"Business\", \"MA1101R\"), new Birthday(\"25061997\")),"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Person(new Name(\"Ilene Billiot\"), new Gender(\"Male\"), new MatricNo(\"A2794916O\"),"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Phone(\"91148432\"), new Email(\"ilenebilliot@example.com\"),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        new Address(\"Blk 16 Bukit Panjang Street 85, #13-04\"), new Timetable(\"http://modsn.us/FX3uR\"),"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": "                        new Remark(\"\"), new PhotoPath(\"\"),"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        getTagSet(\"Science\", \"NUSSU\"), new Birthday(\"25101996\"))"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            };"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot be invalid\", e);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyAddressBook getSampleAddressBook() {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "            AddressBook sampleAb \u003d new AddressBook();"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "            for (Person samplePerson : getSamplePersons()) {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "                sampleAb.addPerson(samplePerson);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            return sampleAb;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"sample data cannot contain duplicate persons\", e);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a tag set containing the list of strings given."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Set\u003cTag\u003e getTagSet(String... strings) throws IllegalValueException {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        HashSet\u003cTag\u003e tags \u003d new HashSet\u003c\u003e();"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        for (String s : strings) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.add(new Tag(s));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return tags;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 21,
      "CindyTsai1": 19,
      "nbriannl": 55,
      "April0616": 24,
      "-": 52
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/AddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": " * Represents a storage for {@link seedu.address.model.AddressBook}."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public interface AddressBookStorage {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the file path of the data file."
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    String getAddressBookFilePath();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns AddressBook data as a {@link ReadOnlyAddressBook}."
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "     *   Returns {@code Optional.empty()} if storage file is not found."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the data in storage is not in the expected format."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem when reading from the storage."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #getAddressBookFilePath()"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Saves the given {@link ReadOnlyAddressBook} to the storage."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param addressBook cannot be null."
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IOException if there was any problem writing to the file."
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see #saveAddressBook(ReadOnlyAddressBook)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 4,
      "-": 43
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/StorageManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * Manages storage of AddressBook data in local storage."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StorageManager extends ComponentManager implements Storage {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StorageManager.class);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddressBookStorage addressBookStorage;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefsStorage userPrefsStorage;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public StorageManager(AddressBookStorage addressBookStorage, UserPrefsStorage userPrefsStorage) {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        this.addressBookStorage \u003d addressBookStorage;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        this.userPrefsStorage \u003d userPrefsStorage;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d UserPrefs methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getUserPrefsFilePath() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.getUserPrefsFilePath();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cUserPrefs\u003e readUserPrefs() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        return userPrefsStorage.readUserPrefs();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveUserPrefs(UserPrefs userPrefs) throws IOException {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        userPrefsStorage.saveUserPrefs(userPrefs);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    // \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d AddressBook methods \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.getAddressBookFilePath();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to read data from file: \" + filePath);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return addressBookStorage.readAddressBook(filePath);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Attempting to write to data file: \" + filePath);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        addressBookStorage.saveAddressBook(addressBook, addressBookStorage.getAddressBookFilePath() + \"_backUp.xml\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event, \"Local data changed, saving to file\"));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "            saveAddressBook(event.data);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            raise(new DataSavingExceptionEvent(e));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 8,
      "-": 91
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPerson.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * JAXB-friendly version of the Person."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAdaptedPerson {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private String name;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String gender;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String matricNo;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private String phone;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private String email;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private String address;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private String birthday;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String timetable;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String remark;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement(required \u003d true)"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String photoPath;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     * Constructs an XmlAdaptedPerson."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson() {}"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts a given Person into this class for JAXB use."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param source future changes to this will not affect the created XmlAdaptedPerson"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAdaptedPerson(ReadOnlyPerson source) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        name \u003d source.getName().fullName;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        gender \u003d source.getGender().value;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        matricNo \u003d source.getMatricNo().value;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        phone \u003d source.getPhone().value;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        email \u003d source.getEmail().value;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        address \u003d source.getAddress().value;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable \u003d source.getTimetable().value;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark \u003d source.getRemark().value;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPath \u003d source.getPhotoPath().value;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        tagged \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        birthday \u003d source.getBirthday().getUnformattedDate();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        for (Tag tag : source.getTags()) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "            tagged.add(new XmlAdaptedTag(tag));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Converts this jaxb-friendly adapted person object into the model\u0027s Person object."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        final List\u003cTag\u003e personTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (XmlAdaptedTag tag : tagged) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            personTags.add(tag.toModelType());"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        final Name name \u003d new Name(this.name);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Gender gender \u003d new Gender(this.gender);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final MatricNo matricNo \u003d new MatricNo(this.matricNo);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        final Phone phone \u003d new Phone(this.phone);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Email email \u003d new Email(this.email);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        final Address address \u003d new Address(this.address);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        final Timetable timetable \u003d new Timetable(this.timetable);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Remark remark \u003d new Remark(this.remark);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final PhotoPath photoPath \u003d new PhotoPath(this.photoPath);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        final Set\u003cTag\u003e tags \u003d new HashSet\u003c\u003e(personTags);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        final Birthday birthday \u003d new Birthday(this.birthday);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new Person(name, gender, matricNo, phone, email, address, timetable, remark, photoPath, tags, birthday);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 3,
      "nbriannl": 1,
      "April0616": 17,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAdaptedPhotoPath.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlValue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": " * It\u0027s the JAXB-friendly adapted version of the photo path."
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class XmlAdaptedPhotoPath {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @XmlValue"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private String photoPathName;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Constructs an XmlAdaptedTag."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * This is the no-arg constructor that is required by JAXB."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public XmlAdaptedPhotoPath() {}"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Converts a given PhotoPath into this class for JAXB use."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param source future changes to this will not affect the created"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public XmlAdaptedPhotoPath(PhotoPath source) {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPathName \u003d source.value;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Converts this jaxb-friendly adapted PhotoPath object into the model\u0027s PhotoPath object."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "     *"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IllegalValueException if there were any data constraints violated in the adapted person"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PhotoPath toModelType() throws IllegalValueException {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new PhotoPath(photoPathName);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 36,
      "-": 5
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlAddressBookStorage.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static java.util.Objects.requireNonNull;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.DataConversionException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A class to access AddressBook data stored as an xml file on the hard disk."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class XmlAddressBookStorage implements AddressBookStorage {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(XmlAddressBookStorage.class);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private String filePath;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public XmlAddressBookStorage(String filePath) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        this.filePath \u003d filePath;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getAddressBookFilePath() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        return filePath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook() throws DataConversionException, IOException {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        return readAddressBook(filePath);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #readAddressBook()}"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws DataConversionException if the file is not in the correct format."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public Optional\u003cReadOnlyAddressBook\u003e readAddressBook(String filePath) throws DataConversionException,"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                                                                                 FileNotFoundException {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        File addressBookFile \u003d new File(filePath);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!addressBookFile.exists()) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"AddressBook file \"  + addressBookFile + \" not found\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            return Optional.empty();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyAddressBook addressBookOptional \u003d XmlFileStorage.loadDataFromSaveFile(new File(filePath));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        return Optional.of(addressBookOptional);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        saveAddressBook(addressBook, filePath);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * Similar to {@link #saveAddressBook(ReadOnlyAddressBook)}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param filePath location of the data. Cannot be null"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void saveAddressBook(ReadOnlyAddressBook addressBook, String filePath) throws IOException {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(addressBook);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        requireNonNull(filePath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        File file \u003d new File(filePath);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        FileUtil.createIfMissing(file);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        XmlFileStorage.saveDataToFile(file, new XmlSerializableAddressBook(addressBook));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void backupAddressBook(ReadOnlyAddressBook addressBook) throws IOException {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        saveAddressBook(addressBook, filePath + \"_backup.xml\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 6,
      "-": 76
    }
  },
  {
    "path": "src/main/java/seedu/address/storage/XmlSerializableAddressBook.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.storage;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlElement;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javax.xml.bind.annotation.XmlRootElement;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": " * An Immutable AddressBook that is serializable to XML format"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "@XmlRootElement(name \u003d \"addressbook\")"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class XmlSerializableAddressBook implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private List\u003cXmlAdaptedPerson\u003e persons;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private List\u003cXmlAdaptedTag\u003e tags;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @XmlElement"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private List\u003cXmlAdaptedPhotoPath\u003e photoPaths;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates an empty XmlSerializableAddressBook."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * This empty constructor is required for marshalling."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public XmlSerializableAddressBook() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        persons \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        tags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPaths \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Conversion"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public XmlSerializableAddressBook(ReadOnlyAddressBook src) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        persons.addAll(src.getPersonList().stream().map(XmlAdaptedPerson::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        tags.addAll(src.getTagList().stream().map(XmlAdaptedTag::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoPaths.addAll(src.getPhotoPathList().stream().map(XmlAdaptedPhotoPath::new).collect(Collectors.toList()));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public ObservableList\u003cPhotoPath\u003e getPhotoPathList() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final ObservableList\u003cPhotoPath\u003e photoPaths \u003d this.photoPaths.stream().map(p -\u003e {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return p.toModelType();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "                //TODO: better error handling"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return FXCollections.unmodifiableObservableList(photoPaths);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        final ObservableList\u003cReadOnlyPerson\u003e persons \u003d this.persons.stream().map(p -\u003e {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "                return p.toModelType();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: better error handling"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(persons);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        final ObservableList\u003cTag\u003e tags \u003d this.tags.stream().map(t -\u003e {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "                return t.toModelType();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                e.printStackTrace();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                //TODO: better error handling"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                return null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        }).collect(Collectors.toCollection(FXCollections::observableArrayList));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        return FXCollections.unmodifiableObservableList(tags);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 50,
      "-": 45
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/BrowserPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.Event;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": " * The Browser Panel of the App."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PAGE \u003d \"default.html\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GOOGLE_SEARCH_URL_PREFIX \u003d \"https://www.google.com.sg/search?safe\u003doff\u0026q\u003d\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String GOOGLE_SEARCH_URL_SUFFIX \u003d \"\u0026cad\u003dh\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String GOOGLE_MAPS_URL_PREFIX \u003d \"https://www.google.com.sg/maps/search/\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String GOOGLE_MAPS_DIRECTIONS_URL_PREFIX \u003d \"https://www.google.com.sg/maps/dir/\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"BrowserPanel.fxml\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanel() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // To prevent triggering events for typing inside the loaded Web page."
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().setOnKeyPressed(Event::consume);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        loadDefaultPage();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void loadGoogleMap(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadPage(GOOGLE_MAPS_URL_PREFIX + person.getAddress());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void loadGoogleMapDirections(ReadOnlyPerson person, Address address) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadPage(GOOGLE_MAPS_DIRECTIONS_URL_PREFIX + address.toString() + \"/\" + person.getAddress());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void loadPage(String url) {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e browser.getEngine().load(url));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Loads a default HTML file with a background that matches the general theme."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void loadDefaultPage() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        URL defaultPage \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        loadPage(defaultPage.toExternalForm());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "     * Frees resources allocated to the browser."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        browser \u003d null;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadGoogleMap(event.person);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        loadGoogleMapDirections(event.person, event.address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 29,
      "-": 61
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/CommandBox.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextField;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.ListElementPointer;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.CommandResult;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * The UI component that is responsible for receiving user command inputs."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandBox extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ERROR_STYLE_CLASS \u003d \"error\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"CommandBox.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(CommandBox.class);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logic logic;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer historySnapshot;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextField commandTextField;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBox(Logic logic) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // calls #setStyleToDefault() whenever there is a change to the text of the command box."
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.textProperty().addListener((unused1, unused2, unused3) -\u003e setStyleToDefault());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the key press event, {@code keyEvent}."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleKeyPress(KeyEvent keyEvent) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        switch (keyEvent.getCode()) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        case UP:"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "            // As up and down buttons will alter the position of the caret,"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            // consuming it causes the caret\u0027s position to remain unchanged"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToPreviousInput();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        case DOWN:"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "            keyEvent.consume();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "            navigateToNextInput();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            break;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        default:"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            // let JavaFx handle the keypress"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the previous input in {@code historySnapshot},"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a previous input in {@code historySnapshot}"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToPreviousInput() {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasPrevious()) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.previous());"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates the text field with the next input in {@code historySnapshot},"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     * if there exists a next input in {@code historySnapshot}"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    private void navigateToNextInput() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assert historySnapshot !\u003d null;"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!historySnapshot.hasNext()) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        replaceText(historySnapshot.next());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets {@code CommandBox}\u0027s text field with {@code text} and"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * positions the caret to the end of the {@code text}."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    private void replaceText(String text) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.setText(text);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.positionCaret(commandTextField.getText().length());"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Handles the Enter button pressed event."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleCommandInputChanged() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d logic.execute(commandTextField.getText());"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            historySnapshot.next();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            // process result of the command"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            commandTextField.setText(\"\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Result: \" + commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            raise(new NewResultAvailableEvent(commandResult.feedbackToUser, false));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException | ParseException e) {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            initHistory();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            // handle command failure"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            setStyleToIndicateCommandFailure();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.info(\"Invalid command: \" + commandTextField.getText());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            raise(new NewResultAvailableEvent(e.getMessage(), true));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the history snapshot."
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initHistory() {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot \u003d logic.getHistorySnapshot();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        // add an empty string to represent the most-recent end of historySnapshot, to be shown to"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // the user if she tries to navigate past the most-recent end of the historySnapshot."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        historySnapshot.add(\"\");"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the command box style to use the default style."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setStyleToDefault() {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        commandTextField.getStyleClass().remove(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Sets the command box style to indicate a failed command."
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void setStyleToIndicateCommandFailure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cString\u003e styleClass \u003d commandTextField.getStyleClass();"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (styleClass.contains(ERROR_STYLE_CLASS)) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        styleClass.add(ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 19,
      "-": 135
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/HelpWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.web.WebView;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FxViewUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " * Controller for a help page"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String USERGUIDE_FILE_PATH \u003d \"/docs/UserGuide.html\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(HelpWindow.class);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON \u003d \"/images/help_icon.png\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"HelpWindow.fxml\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TITLE \u003d \"Help\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private WebView browser;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Stage dialogStage;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public HelpWindow() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        Scene scene \u003d new Scene(getRoot());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        //Null passed as the parent stage to make it non-modal."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogStage \u003d createDialogStage(TITLE, null, scene);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        dialogStage.setMaximized(true); //TODO: set a more appropriate initial size"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        FxViewUtil.setStageIcon(dialogStage, ICON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        String userGuideUrl \u003d getClass().getResource(USERGUIDE_FILE_PATH).toString();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        browser.getEngine().load(userGuideUrl);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows the help window."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws IllegalStateException"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003cul\u003e"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on a thread other than the JavaFX Application Thread."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called during animation or layout processing."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if this method is called on the primary stage."
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003cli\u003e"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     *         if {@code dialogStage} is already showing."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     *     \u003c/li\u003e"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * \u003c/ul\u003e"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void show() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.fine(\"Showing help page about the application.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        dialogStage.show();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        dialogStage.toFront();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "-": 63
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/InfoPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.TimetableDisplayEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Container for both browser panel and person information panel"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class InfoPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String FXML \u003d \"InfoPanel.fxml\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDisplay timetableDisplay;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StackPane browserPlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StackPane timetablePlaceholder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public InfoPanel() {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPanel \u003d new BrowserPanel();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPlaceholder.getChildren().add(browserPanel.getRoot());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(null);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.toFront();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void freeResources() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPanel.freeResources();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonPanelSelectionChangeEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cTimetable\u003e timetableToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableToDisplay.add(event.getNewSelection().person.getTimetable());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(timetableToDisplay);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.toFront();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cTimetable\u003e timetableToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableToDisplay.add(event.person.getTimetable());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(timetableToDisplay);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.toFront();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handleTimetableDisplayEvent(TimetableDisplayEvent event) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cTimetable\u003e timetablesToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ReadOnlyPerson person : event.personsToDisplay) {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetablesToDisplay.add(person.getTimetable());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(timetablesToDisplay);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.toFront();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPlaceholder.toFront();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        browserPlaceholder.toFront();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 103,
      "nbriannl": 2,
      "-": 7
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/MainWindow.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.event.ActionEvent;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Scene;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.MenuItem;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextInputControl;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyCombination;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.input.KeyEvent;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.StackPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.GuiSettings;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.ChangeThemeRequestEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ExitAppRequestEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.ShowHelpRequestEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FxViewUtil;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": " * The Main Window. Provides the basic application layout containing"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": " * a menu bar and space where other JavaFX elements can be placed."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class MainWindow extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String ICON \u003d \"/images/icon.png\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String FXML \u003d \"MainWindow.fxml\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final int MIN_HEIGHT \u003d 600;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final int MIN_WIDTH \u003d 450;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String VIEW_PATH \u003d \"/view/\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Stage primaryStage;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // Independent Ui parts residing in this Ui container"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private TagColorMap tagColorMap;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private PersonInfoPanel personInfoPanel;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private InfoPanel infoPanel;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private PersonListPanel personListPanel;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private TagListPanel tagListPanel;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane infoPlaceholder;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane personInfoPlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane commandBoxPlaceholder;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private MenuItem helpMenuItem;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane personListPanelPlaceholder;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane tagListPanelPlaceholder;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane resultDisplayPlaceholder;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private StackPane statusbarPlaceholder;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the main window by the parameters provided."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public MainWindow(Stage primaryStage, Config config, UserPrefs prefs, Logic logic) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // Set dependencies"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.primaryStage \u003d primaryStage;"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // Configure the UI"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setIcon(ICON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setWindowMinSize();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setWindowDefaultSize(prefs);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setWindowDefaultTheme(prefs);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Scene scene \u003d new Scene(getRoot());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        primaryStage.setScene(scene);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setAccelerators();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the primary stage of the main window."
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public Stage getPrimaryStage() {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return primaryStage;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void setAccelerators() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setAccelerator(helpMenuItem, KeyCombination.valueOf(\"F1\"));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the accelerator of a MenuItem."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param keyCombination the KeyCombination value of the accelerator"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setAccelerator(MenuItem menuItem, KeyCombination keyCombination) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        menuItem.setAccelerator(keyCombination);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        /*"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "         * TODO: the code below can be removed once the bug reported here"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "         * https://bugs.openjdk.java.net/browse/JDK-8131666"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "         * is fixed in later version of SDK."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "         * According to the bug report, TextInputControl (TextField, TextArea) will"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "         * consume function-key events. Because CommandBox contains a TextField, and"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "         * ResultDisplay contains a TextArea, thus some accelerators (e.g F1) will"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "         * not work when the focus is in them because the key event is consumed by"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "         * the TextInputControl(s)."
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "         *"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "         * For now, we add following event filter to capture such key events and open"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "         * help window purposely so to support accelerators even when focus is"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "         * in CommandBox or ResultDisplay."
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        getRoot().addEventFilter(KeyEvent.KEY_PRESSED, event -\u003e {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            if (event.getTarget() instanceof TextInputControl \u0026\u0026 keyCombination.match(event)) {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "                menuItem.getOnAction().handle(new ActionEvent());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                event.consume();"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     * Fills up all the placeholders of this window."
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    void fillInnerParts() {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPanel \u003d new InfoPanel();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPlaceholder.getChildren().add(infoPanel.getRoot());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "        personInfoPanel \u003d new PersonInfoPanel();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "        personInfoPlaceholder.getChildren().add(personInfoPanel.getRoot());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanel \u003d new PersonListPanel(logic.getFilteredPersonList());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        personListPanelPlaceholder.getChildren().add(personListPanel.getRoot());"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagListPanel \u003d new TagListPanel(logic.getTagList());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagListPanelPlaceholder.getChildren().add(tagListPanel.getRoot());"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logic.checkAllMasterListTagsAreBeingUsed();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayPlaceholder.getChildren().add(resultDisplay.getRoot());"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(prefs.getAddressBookFilePath(),"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                logic.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        statusbarPlaceholder.getChildren().add(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandBox commandBox \u003d new CommandBox(logic);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        commandBoxPlaceholder.getChildren().add(commandBox.getRoot());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    void hide() {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.hide();"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setTitle(String appTitle) {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(appTitle);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the given image as the icon of the main window."
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "     * @param iconSource e.g. {@code \"/images/help_icon.png\"}"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setIcon(String iconSource) {"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        FxViewUtil.setStageIcon(primaryStage, iconSource);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the default size based on user preferences."
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowDefaultSize(UserPrefs prefs) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setHeight(prefs.getGuiSettings().getWindowHeight());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setWidth(prefs.getGuiSettings().getWindowWidth());"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        if (prefs.getGuiSettings().getWindowCoordinates() !\u003d null) {"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setX(prefs.getGuiSettings().getWindowCoordinates().getX());"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "            primaryStage.setY(prefs.getGuiSettings().getWindowCoordinates().getY());"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setWindowMinSize() {"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setMinHeight(MIN_HEIGHT);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setMinWidth(MIN_WIDTH);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the current size and the position of the main Window."
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    GuiSettings getCurrentGuiSetting() {"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        return new GuiSettings(primaryStage.getWidth(), primaryStage.getHeight(),"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "                (int) primaryStage.getX(), (int) primaryStage.getY());"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "     * Opens the help window."
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleHelp() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        HelpWindow helpWindow \u003d new HelpWindow();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        helpWindow.show();"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Changes the current theme to the given theme."
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void handleChangeTheme(String theme) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (getRoot().getStylesheets().size() \u003e 1) {"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            getRoot().getStylesheets().remove(1);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        getRoot().getStylesheets().add(VIEW_PATH + theme);"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "content": "    //@@author"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void setWindowDefaultTheme(UserPrefs prefs) {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        getRoot().getStylesheets().add(prefs.getCurrentTheme());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    String getCurrentTheme() {"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return getRoot().getStylesheets().get(1);"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "content": "    //@@author"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    void show() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.show();"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "     * Closes the application."
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleExit() {"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "        raise(new ExitAppRequestEvent());"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel getPersonListPanel() {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.personListPanel;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    void releaseResources() {"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        infoPanel.freeResources();"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleShowHelpEvent(ShowHelpRequestEvent event) {"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        handleHelp();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handleChangeThemeEvent(ChangeThemeRequestEvent event) {"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        handleChangeTheme(event.themeToChangeTo);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logic.setCurrentTheme(getCurrentTheme());"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 5,
      "zacharytang": 5,
      "nbriannl": 29,
      "April0616": 90,
      "-": 149
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonCard.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.HBox;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " * An UI component that displays information of a {@code Person}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCard extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListCard.fxml\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ReadOnlyPerson person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private HBox cardPane;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label id;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCard(ReadOnlyPerson person, int displayedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        id.setText(displayedIndex + \". \");"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        bindListeners(person);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "     * Binds the individual UI elements to observe their respective {@code Person} properties"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * so that they will be notified of any changes."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    private void bindListeners(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        name.textProperty().bind(Bindings.convert(person.nameProperty()));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        email.textProperty().bind(Bindings.convert(person.emailProperty()));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "            tags.getChildren().clear();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "            initTags(person);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the tags for person list"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    private void initTags(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: \" + TagColorMap.getInstance().getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "                tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        );"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean equals(Object other) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // short circuit if same object"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        if (other \u003d\u003d this) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            return true;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // instanceof handles nulls"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!(other instanceof PersonCard)) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // state check"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard card \u003d (PersonCard) other;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        return id.getText().equals(card.id.getText())"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "                \u0026\u0026 person.equals(card.person);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 3,
      "April0616": 13,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonInfoPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.paint.ImagePattern;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.shape.Circle;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.PersonHasBeenDeletedEvent;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.ui.PersonHasBeenModifiedEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": " * A UI component that displays a person\u0027s data on the main panel"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PersonInfoPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String FXML \u003d \"PersonInfoPanel.fxml\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static String DEFAULT_PHOTO_PATH \u003d \"/images/defaultPhoto.jpg\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ReadOnlyPerson person;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ReadOnlyPerson currentlyViewedPerson;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Circle photoCircle;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label matricNo;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the person information panel."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonInfoPanel() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.person \u003d null;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        loadDefaultPerson();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Loads the default person when the app is first started"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void loadDefaultPerson() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        name.setText(\"Person X\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        gender.setText(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        matricNo.setText(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        address.setText(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        birthday.setText(\"\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark.setText(\"\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setDefaultContactPhoto();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        currentlyViewedPerson \u003d null;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        logger.info(\"Currently Viewing: Default Person\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Updates info with person selected"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void loadPerson(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        initTags(person);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        name.textProperty().bind(Bindings.convert(person.nameProperty()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        gender.textProperty().bind(Bindings.convert(person.genderProperty()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        matricNo.textProperty().bind(Bindings.convert(person.matricNoProperty()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        address.textProperty().bind(Bindings.convert(person.addressProperty()));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        email.textProperty().bind(Bindings.convert(person.emailProperty()));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        person.tagProperty().addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "            tags.getChildren().clear();"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "            initTags(person);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        });"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        loadPhoto(person);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        currentlyViewedPerson \u003d person;"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        logger.info(\"Currently Viewing: \" + currentlyViewedPerson.getName());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Clears the binds to allow to loadDefaultPerson() again"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void clearBind() {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        name.textProperty().unbind();;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        gender.textProperty().unbind();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        matricNo.textProperty().unbind();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        phone.textProperty().unbind();"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        address.textProperty().unbind();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        email.textProperty().unbind();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        birthday.textProperty().unbind();"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        remark.textProperty().unbind();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Initializes the tags for person list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void initTags(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": "        person.getTags().forEach(tag -\u003e {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: \" + TagColorMap.getInstance().getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "                tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "        );"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the default contact photo."
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setDefaultContactPhoto() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Image defaultImage \u003d new Image(MainApp.class.getResourceAsStream(DEFAULT_PHOTO_PATH));"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoCircle.setFill(new ImagePattern(defaultImage));"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Loads the photo of the specified person."
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void loadPhoto(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String prefix \u003d \"src/main/resources\";"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //String photoPath \u003d person.getPhotoPath().value.substring(prefix.length());"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String photoPathString \u003d person.getPhotoPath().value;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Image image;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (photoPathString.equals(\"\")) {  //default male and female photos"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "            image \u003d getDefaultPhotoByGender();"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "            File contactImg \u003d new File(photoPathString);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (contactImg.exists() \u0026\u0026 !contactImg.isDirectory()) {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "                String url \u003d contactImg.toURI().toString();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "                image \u003d new Image(url);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": "                image \u003d getDefaultPhotoByGender();"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "        photoCircle.setFill(new ImagePattern(image));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Gets the default photo by gender. If the gender is not specifed, then return the default photo without gender."
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @return Image of the according default photo"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Image getDefaultPhotoByGender() {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String photoPathString \u003d \"\";"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (person.getGender().toString().equals(\"Male\")) {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "April0616"
        },
        "content": "            photoPathString \u003d \"/images/default_male.jpg\";"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (person.getGender().toString().equals(\"Female\")) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "            photoPathString \u003d \"/images/default_female.jpg\";"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "            photoPathString \u003d \"/images/defaultPhoto.jpg\";"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(photoPathString));"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author zacharytang"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.person);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.person);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonPanelSelectionChangeEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.getNewSelection().person);"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.person);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonHasBeenModifiedEvent(PersonHasBeenModifiedEvent event) {"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (currentlyViewedPerson !\u003d null \u0026\u0026 currentlyViewedPerson.equals(event.oldPerson)) {"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            loadPerson(event.newPerson);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handlePersonHasBeenDeletedEvent(PersonHasBeenDeletedEvent event) {"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (currentlyViewedPerson !\u003d null \u0026\u0026 currentlyViewedPerson.equals(event.deletedPerson)) {"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            clearBind();"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            loadDefaultPerson();"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void handleAddressBookChangedEvent(AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (event.data.getPersonList().size() \u003d\u003d 0 \u0026\u0026 event.data.getTagList().size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            clearBind();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            loadDefaultPerson();"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 27,
      "nbriannl": 50,
      "April0616": 168,
      "-": 8
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/PersonListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.fxmisc.easybind.EasyBind;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListCell;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * Panel containing the list of persons."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"PersonListPanel.fxml\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(PersonListPanel.class);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListView\u003cPersonCard\u003e personListView;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private boolean shouldRaiseEvent;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanel(ObservableList\u003cReadOnlyPerson\u003e personList) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.shouldRaiseEvent \u003d true;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        setConnections(personList);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setConnections(ObservableList\u003cReadOnlyPerson\u003e personList) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        ObservableList\u003cPersonCard\u003e mappedList \u003d EasyBind.map("
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                personList, (person) -\u003e new PersonCard(person, personList.indexOf(person) + 1));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setItems(mappedList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.setCellFactory(listView -\u003e new PersonListViewCell());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        setEventHandlerForSelectionChangeEvent();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setEventHandlerForSelectionChangeEvent() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        personListView.getSelectionModel().selectedItemProperty()"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "                .addListener((observable, oldValue, newValue) -\u003e {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "                    if (newValue !\u003d null) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "                        logger.fine(\"Selection in person list panel changed to : \u0027\" + newValue + \"\u0027\");"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        if (shouldRaiseEvent) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "                            raise(new PersonPanelSelectionChangedEvent(newValue));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "                        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        shouldRaiseEvent \u003d true;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "                });"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Scrolls to the {@code PersonCard} at the {@code index} and selects it."
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private void scrollTo(int index) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e {"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.scrollTo(index);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            personListView.getSelectionModel().clearAndSelect(index);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleJumpToListRequestEvent(JumpToListRequestEvent event) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        shouldRaiseEvent \u003d false;"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        scrollTo(event.index);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonAddressDisplayMapEvent(PersonAddressDisplayMapEvent event) {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        shouldRaiseEvent \u003d false;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonAddressDisplayDirectionsEvent(PersonAddressDisplayDirectionsEvent event) {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        shouldRaiseEvent \u003d false;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        scrollTo(event.targetIndex);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Custom {@code ListCell} that displays the graphics of a {@code PersonCard}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    class PersonListViewCell extends ListCell\u003cPersonCard\u003e {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        protected void updateItem(PersonCard person, boolean empty) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            super.updateItem(person, empty);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            if (empty || person \u003d\u003d null) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(null);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                setText(null);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "                setGraphic(person.getRoot());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 20,
      "nbriannl": 2,
      "-": 96
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/ResultDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.SimpleStringProperty;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.beans.property.StringProperty;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.TextArea;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the header of the application."
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(ResultDisplay.class);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"ResultDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StringProperty displayed \u003d new SimpleStringProperty(\"\");"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private TextArea resultDisplay;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplay() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplay.textProperty().bind(displayed);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void handleNewResultAvailableEvent(NewResultAvailableEvent event) {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        Platform.runLater(() -\u003e displayed.setValue(event.message));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (event.isError) {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            setErrorStyle();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            setDefaultStyle();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void setDefaultStyle() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        resultDisplay.getStyleClass().remove(\"error\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private void setErrorStyle() {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ObservableList\u003cString\u003e style \u003d resultDisplay.getStyleClass();"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        if (style.contains(\"error\")) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        style.add(\"error\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 29,
      "-": 34
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/StatusBarFooter.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A ui for the status bar that is displayed at the footer of the application."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooter extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_INITIAL \u003d \"Not updated yet in this session\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String SYNC_STATUS_UPDATED \u003d \"Last Updated: %s\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     * Used to generate time stamps."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     *"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * TODO: change clock to an instance variable."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * We leave it as a static variable because manual dependency injection"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     * will require passing down the clock reference all the way from MainApp,"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "     * but it should be easier once we have factories/DI frameworks."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static Clock clock \u003d Clock.systemDefaultZone();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(StatusBarFooter.class);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FXML \u003d \"StatusBarFooter.fxml\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar syncStatus;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBar saveLocationStatus;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private StatusBar totalPersons;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public StatusBarFooter(String saveLocation, int totalPersons) {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        setTotalPersons(totalPersons);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(SYNC_STATUS_INITIAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        setSaveLocation(\"./\" + saveLocation);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the clock used to determine the current time."
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setClock(Clock clock) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.clock \u003d clock;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the clock currently in use."
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Clock getClock() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return clock;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void setTotalPersons(int totalPersons) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Platform.runLater(() -\u003e this.totalPersons.setText(totalPersons + \" person(s) in address book\"));"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSaveLocation(String location) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.saveLocationStatus.setText(location));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void setSyncStatus(String status) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.runLater(() -\u003e this.syncStatus.setText(status));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    public void handleAddressBookChangedEvent(AddressBookChangedEvent abce) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        long now \u003d clock.millis();"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String lastUpdated \u003d new Date(now).toString();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(abce, \"Setting last updated status to \" + lastUpdated));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        setSyncStatus(String.format(SYNC_STATUS_UPDATED, lastUpdated));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        setTotalPersons(abce.data.getPersonList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 8,
      "April0616": 1,
      "-": 80
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagColorMap.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * The mapping of the tag colors to be shared across any UI components containing tags"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class TagColorMap {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static TagColorMap instance;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static final String[] COLORS \u003d {\"Crimson\", \"orange\", \"DarkSalmon\", \"LightSeaGreen\","
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        \"RoyalBlue\", \"MediumPurple\", \"Teal\", \"Sienna\", \"HotPink\", \"MediumSeaGreen\","
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        \"DarkSlateBlue\", \"CadetBlue\", \"MidnightBlue\", \"LightPink\", \"LightSalmon\", \"LightSkyBlue\", \"PaleVioletRed \"};"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static final int NUM_COLORS \u003d COLORS.length;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static int colorIndex \u003d 0;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private HashMap\u003cString, String\u003e tagColors \u003d new HashMap\u003cString, String\u003e();"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private TagColorMap() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static TagColorMap getInstance() {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (instance \u003d\u003d null) {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            instance \u003d new TagColorMap();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return instance;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Gets a random unused color for the new tagName, or returns the corresponding color of the old tagName"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param tagName"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @return the color of the tag"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public String getTagColor(String tagName) {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        if (!tagColors.containsKey(tagName)) {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tagColors.put(tagName, COLORS[colorIndex]);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            updateColorIndex();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return tagColors.get(tagName);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Updates the color index to pick a new color for the new tag."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static void updateColorIndex() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (colorIndex \u003d\u003d NUM_COLORS - 1) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "            colorIndex \u003d 0;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "            colorIndex++;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 38,
      "April0616": 14,
      "-": 2
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TagListPanel.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.FlowPane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.MasterTagListHasAnUnusedTagEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * An UI component that displays all the {@code Tags} in the {@code AddressBook} ."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class TagListPanel extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static final String FXML \u003d \"TagListPanel.fxml\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public final ObservableList\u003cTag\u003e tagList;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(TagListPanel.class);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Note: Certain keywords such as \"location\" and \"resources\" are reserved keywords in JavaFX."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * As a consequence, UI elements\u0027 variable names cannot be set to such keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * or an exception will be thrown by JavaFX during runtime."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see \u003ca href\u003d\"https://github.com/se-edu/addressbook-level4/issues/336\"\u003eThe issue on AddressBook level 4\u003c/a\u003e"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private FlowPane tags;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public TagListPanel (ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        this.tagList \u003d tagList;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTags(tagList);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //bindListeners(person);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void updateTagList (ObservableList\u003cTag\u003e newtagList) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTags(newtagList);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Initializes the tags for tag list"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void initTags (ObservableList\u003cTag\u003e tagList) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d tagList.stream().collect(Collectors.toSet());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagSet.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tagLabel.setStyle(\"-fx-background-color: \" + TagColorMap.getInstance().getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     *  Update the Tag List panel which has unused tags"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void updateTagListWithUnusedTag (ObservableList\u003cTag\u003e tagList, Set\u003cTag\u003e outdatedTags) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tags.getChildren().clear();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagSet \u003d tagList.stream().collect(Collectors.toSet());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        initTagsWithUnusedTags(outdatedTags, tagSet);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Initializes the tags for a tag list which contains unused tags"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and gives a different color to distinguish unused tags"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void initTagsWithUnusedTags (Set\u003cTag\u003e outdatedTags, Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        tagSet.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            if (!outdatedTags.contains(tag)) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tagLabel.setStyle(\"-fx-background-color: \" + TagColorMap.getInstance().getTagColor(tag.tagName));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        outdatedTags.forEach(tag -\u003e {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            Label tagLabel \u003d new Label(tag.tagName);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tagLabel.setStyle(\"-fx-background-color: Gray  \");"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            tags.getChildren().add(tagLabel);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        );"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void handleAddressBookChangedEvent (AddressBookChangedEvent event) {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        updateTagList(event.data.getTagList());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void handleMasterTagListHasUnusedTagEvent (MasterTagListHasAnUnusedTagEvent event) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        updateTagListWithUnusedTag(tagList, event.outdatedTags);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 104,
      "-": 6
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/TimetableDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.ARRAY_DAYS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.ARRAY_TIMES;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.ARRAY_WEEKS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.WEEK_ODD;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.layout.GridPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.layout.Pane;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Display for timetables in the UI"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String FXML \u003d \"TimetableDisplay.fxml\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ArrayList\u003cTimetable\u003e timetables;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private GridPane oddGrid;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private GridPane evenGrid;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public TimetableDisplay(ArrayList\u003cTimetable\u003e timetables) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.timetables \u003d timetables;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        fillInitialGrid();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        fillTimetables();"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Initializes the timetable grid to an empty grid not containing any lessons"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void fillInitialGrid() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int weekType \u003d 0; weekType \u003c ARRAY_WEEKS.length; weekType++) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            for (int day \u003d 0; day \u003c ARRAY_DAYS.length; day++) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                for (int time \u003d 0; time \u003c ARRAY_TIMES.length; time++) {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    markSlot(weekType, day, time, false);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Populates the initialized grid with lessons according to timetables passed"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void fillTimetables() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // If null passed into constructor, display empty timetable"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (timetables \u003d\u003d null) {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (Timetable timetable : timetables) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            fillSingleTimetable(timetable);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Fills the timetable grid with panes according to the timetable oject given"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void fillSingleTimetable(Timetable timetable) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (int weekType \u003d 0; weekType \u003c ARRAY_WEEKS.length; weekType++) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            for (int day \u003d 0; day \u003c ARRAY_DAYS.length; day++) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                for (int time \u003d 0; time \u003c ARRAY_TIMES.length; time++) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    if (hasLesson(weekType, day, time, timetable)) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        markSlot(weekType, day, time, true);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Fills a slot in the timetable grid with a lesson"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void markSlot(int weekIndex, int dayIndex, int timeIndex, boolean hasLesson) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Pane pane \u003d new Pane();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        GridPane.setColumnIndex(pane, timeIndex + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        GridPane.setRowIndex(pane, dayIndex + 1);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // Sets the borders such that half hour slots are combined into an hour"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String borderStyle \u003d timeIndex % 2 \u003d\u003d 0 ? \"solid none solid solid\" : \"solid solid solid none\";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // Fixes the widths to be even across the grid"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String topWidth \u003d dayIndex \u003d\u003d 0 ? \"2\" : \"1\";"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String leftWidth \u003d timeIndex \u003d\u003d 0 ? \"2\" : \"1\";"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String bottomWidth \u003d dayIndex \u003d\u003d 4 ? \"2\" : \"1\";"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String rightWidth \u003d timeIndex \u003d\u003d 31 ? \"2\" : \"1\";"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        String borderWidths \u003d topWidth + \" \" + rightWidth + \" \" + bottomWidth + \" \" + leftWidth;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        pane.getStyleClass().add(hasLesson ? \"timetable-cell-filled\" : \"timetable-cell-empty\");"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        pane.setStyle(\"-fx-border-width: \" + borderWidths + \";\\n\""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + \"-fx-border-style: \" + borderStyle);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        if (weekIndex \u003d\u003d WEEK_ODD) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            oddGrid.getChildren().add(pane);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            evenGrid.getChildren().add(pane);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Checks if a lesson exists in the timetable at the given parameters"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private boolean hasLesson(int weekIndex, int dayIndex, int timeIndex, Timetable timetable) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return timetable.doesSlotHaveLesson(ARRAY_WEEKS[weekIndex], ARRAY_DAYS[dayIndex], ARRAY_TIMES[timeIndex]);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IllegalValueException e) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            e.printStackTrace();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            return false;"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 122,
      "-": 1
    }
  },
  {
    "path": "src/main/java/seedu/address/ui/UiManager.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.application.Platform;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Alert.AlertType;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.stage.Stage;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.ComponentManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Config;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.storage.DataSavingExceptionEvent;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.StringUtil;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.Logic;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * The manager of the UI component."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class UiManager extends ComponentManager implements Ui {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ALERT_DIALOG_PANE_FIELD_ID \u003d \"alertDialogPane\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_STAGE_TITLE \u003d \"File Op Error\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE \u003d \"Could not save data\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE \u003d \"Could not save data to file\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Logger logger \u003d LogsCenter.getLogger(UiManager.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ICON_APPLICATION \u003d \"/images/address_book_32.png\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Logic logic;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private Config config;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private UserPrefs prefs;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindow mainWindow;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public UiManager(Logic logic, Config config, UserPrefs prefs) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        super();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.logic \u003d logic;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        this.config \u003d config;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        this.prefs \u003d prefs;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void start(Stage primaryStage) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(\"Starting UI...\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.setTitle(config.getAppTitle());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        //Set the application icon."
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        primaryStage.getIcons().add(getImage(ICON_APPLICATION));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        primaryStage.setMaximized(true);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow \u003d new MainWindow(primaryStage, config, prefs, logic);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.show(); //This should be called before creating other UI parts"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "            mainWindow.fillInnerParts();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Throwable e) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            logger.severe(StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "            showFatalErrorDialogAndShutdown(\"Fatal error during initializing\", e);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Override"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void stop() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        prefs.updateLastUsedGuiSetting(mainWindow.getCurrentGuiSetting());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        prefs.updateLastSetTheme(mainWindow.getCurrentTheme());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.hide();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindow.releaseResources();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "content": "    //@@author"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFileOperationAlertAndWait(String description, String details, Throwable cause) {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        final String content \u003d details + \":\\n\" + cause.toString();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(AlertType.ERROR, FILE_OPS_ERROR_DIALOG_STAGE_TITLE, description, content);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private Image getImage(String imagePath) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        return new Image(MainApp.class.getResourceAsStream(imagePath));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    void showAlertDialogAndWait(Alert.AlertType type, String title, String headerText, String contentText) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(mainWindow.getPrimaryStage(), type, title, headerText, contentText);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an alert dialog on {@code owner} with the given parameters."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * This method only returns after the user has closed the alert dialog."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    private static void showAlertDialogAndWait(Stage owner, AlertType type, String title, String headerText,"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "                                               String contentText) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        final Alert alert \u003d new Alert(type);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().getStylesheets().add(\"view/DarkTheme.css\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.initOwner(owner);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setTitle(title);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setHeaderText(headerText);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.setContentText(contentText);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.getDialogPane().setId(ALERT_DIALOG_PANE_FIELD_ID);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        alert.showAndWait();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Shows an error alert dialog with {@code title} and error message, {@code e},"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * and exits the application after the user has closed the alert dialog."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showFatalErrorDialogAndShutdown(String title, Throwable e) {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.severe(title + \" \" + e.getMessage() + StringUtil.getDetails(e));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        showAlertDialogAndWait(Alert.AlertType.ERROR, title, e.getMessage(), e.toString());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        Platform.exit();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        System.exit(1);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Sets the given theme as the main theme used in the main window"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @param theme eg. {@code \"DarkTheme.css}"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setTheme(String theme) {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        mainWindow.getRoot().getStylesheets().add(\"/view/\" + theme);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "content": "    //@@author"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    //\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d Event Handling Code \u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    private void handleDataSavingExceptionEvent(DataSavingExceptionEvent event) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        showFileOperationAlertAndWait(FILE_OPS_ERROR_DIALOG_HEADER_MESSAGE, FILE_OPS_ERROR_DIALOG_CONTENT_MESSAGE,"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "                event.exception);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "nbriannl": 10,
      "-": 121
    }
  },
  {
    "path": "src/test/data/ManualTesting/[W09-B1][UniFy]TestScript.adoc",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d UniFy - Test Script"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ":toc:"
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-title:"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ":toc-placement: preamble"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ":sectnums:"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ":imagesDir: images"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ":stylesDir: stylesheets"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github[]"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ":tip-caption: :bulb:"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ":note-caption: :information_source:"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "endif::[]"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "ifdef::env-github,env-browser[:outfilesuffix: .adoc]"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ":repoURL: https://github.com/CS2103AUG2017-W09-B1/main/tree/master"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "By: `Team W09-B1`      Since: `Aug 2017`      Licence: `MIT`"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "---"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Before You Start Testing"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Materials Required for Testing"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Before testing, you need ensure that you have the test data  ([W09-B1][UniFy]SampleData.xml) and a picture in your somewhere in your computer that you know the path to."
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Place UniFy.jar in an empty folder. Open UniFy.jar."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Import Test Data"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* If you are testing on the .jar file, you need to replace the current storage file: addressbook.xml. +"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Type `clear` to clear the application. +"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Close the application. +"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* You should now see additional files created and a folder called `data`. +"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Open `data`. +"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Replace addressbook.xml with [W09-B1][UniFy]SampleData.xml and rename it to addressbook.xml. +"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* Open UniFy.jar. +"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "* You are ready for testing."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "****"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Special Instructions"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d Test Procedures"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "Type the command in the command box and press \u0027Enter\u0027."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "You should type in the commands in the script in order, or you will not see the correct output."
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d Content for Testing (Include ALIAS)"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d AddCommand"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "AddCommand can add persons into the application. All fields are currently optional, except name."
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/The Myth g/Male p/12345678 e/the_myth@example.com a/NUS m/A0000000A b/01011991 t/CS2103T tt/http://modsn.us/Zd8wn +"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message with person information displayed and person information displayed at display panel +"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#New person added: The Myth +"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: A0000000A +"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 12345678 +"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: the_myth@example.com +"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS +"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: 01/01/1991 +"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: http://modsn.us/Zd8wn +"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark:  +"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [CS2103T]#"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/haha  +"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message with person information displayed (blank for fields with no input) and person information displayed at display panel +"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#New person added: haha +"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: +"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone:  +"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email:  +"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address:  +"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark:  +"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags:#"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe g/h +"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct gender format +"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person gender should be a case-insensitive string of either \u0027male\u0027, \u0027female\u0027, or \u0027m\u0027, \u0027f\u0027#"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe p/abc +"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct phone format +"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Phone numbers can only contain numbers, and should be at least 3 digits long#"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe m/A123456A +"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct matriculation number format +"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person\u0027s matriculation number should be a 9-character string starting with \u0027A\u0027 or \u0027a\u0027, followed by 7 digits, and ending with a letter.#"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe e/heheexample.com +"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct email format +"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027#"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe b/29021997 +"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing that the date is invalid +"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#This date does not exist.#"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe b/1234567 +"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct birthday format +"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person\u0027s birthday should be in the format of DDMMYYYY#"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe tt/http://modsn.us/12345 +"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the NUSMods URL is not valid +"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid shortened URL provided#"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add n/hehe tt/https://nusmods.com/timetable/2017-2018/sem1?CS2101[SEC]\u003d1\u0026CS2103T[TUT]\u003dT1\u0026CS2010[LEC]\u003d1\u0026CS2010[TUT]\u003d9\u0026CS2010[LAB]\u003d8\u0026ES2660[SEC]\u003d3\u0026GEQ1000[TUT]\u003dE17\u0026CS1010J[LEC]\u003d1\u0026CS1010J[TUT]\u003d10 +"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message requesting for a shortened NUSMods URL +"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Timetable URLs should be a valid shortened NUSMods URL#"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* add +"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct command format +"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format!  +"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| add |: Adds a person to the address book. +"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: n/NAME [g/GENDER] [m/MATRIC NO.] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [tt/TIMETABLE_URL] [t/TAG]... +"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: add n/John Doe g/Male m/A0162533K p/98765432 e/johnd@example.com a/311, Clementi Ave 2, #02-25 b/21051994 tt/http://modsn.us/0YdMq t/friends t/owesMoney#"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d ThemeCommand"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "ThemeCommand can switch themes in the application. +"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "There are 2 themes currently implemented: DarkTheme.css and LightTheme.css"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* theme light +"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message reminding user that the theme is correct +"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#You are already using this theme!#"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* theme dark +"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Application change theme into DarkTheme.css +"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Theme switched: DarkTheme.css#"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* theme light +"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Application change theme into LightTheme.css +"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Theme switched: LightTheme.css#"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* theme red +"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message for non exist themes +"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Invalid Theme Name#"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* theme +"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message for correct command input +"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format!  +"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| theme |: Changes the theme to the specified theme word. +"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: THEMEWORD +"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            (Possible theme words are: dark, light) +"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: theme dark +"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         theme light#"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d DeleteCommand (Person)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "DeleteCommand can delete multiple persons simultaneously."
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete 1, 2, 3 +"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Delete the first, second and third persons in the shown list. Person Info Panel shows first person in list. Success message showing information of persons deleted. +"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Deleted Persons : +"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[ 1. Damith 2. Neil Bryan 3. Fan Yiting ] +"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Details:  +"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[Damith +"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [CS2103T Prof and Tutor] +"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]] +"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[Neil Bryan +"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: A0155016R +"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96477278 +"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: neilbrian.nl@u.nus.edu +"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: Blk 666, Yishun St 61 +"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: 02/10/1995 +"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: http://modsn.us/VLQ3g +"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Handsome] +"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Tags: [Teammate][CS2103T][CS2101]] +"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[Fan Yiting +"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Female +"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: A0162131F +"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96857667 +"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: fyt0616@u.nus.edu +"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: Prince George Park Residences NUS +"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: 16/06/1998 +"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: http://modsn.us/aHN0q +"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Likes playing Dota 2] +"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Teammate][CS2103T][CS2101]]#"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message for undo command. 3 persons restored. +"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete 1 +"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Delete the first person in the shown list.  +"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Deleted Person : +"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[ 1. Damith ] +"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Details:  +"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[Damith +"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [CS2103T Prof and Tutor] +"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]]#"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message for undo command. 1 person restored. +"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete -1, -2 +"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Expected Result:* Show Error message +"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "      | delete |: Deletes the persons identified using their last displayed indexes used in the last person listing. +"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                     OR the tag specified from all people containing the specific tag +"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "      Parameters: INDEX... (must be positive integers) +"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                         OR  t/TAG... (case-sensitive) +"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "      Example: delete 1 +"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                     delete 1, 2, 3 +"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                     delete 2 3 4 +"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                     delete t/friend +"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                     delete t/friend t/enemy#"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete 999 +"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Expected Result:* Show Error message +"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#The person index provided is invalid#"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete +"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct command format +"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| delete |: Deletes the persons identified using their last displayed indexes used in the last person listing. +"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tOR the tag specified from all people containing the specific tag +"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX... (must be positive integers) +"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "               \tOR  t/TAG... (case-sensitive) +"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: delete 1 +"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete 1, 2, 3 +"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete 2 3 4 +"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete t/friend +"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "           \tdelete t/friend t/enemy#"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d DeleteCommand (Tag)"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "DeleteCommand can delete one or more tags."
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/CS2103T +"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* CS2103T Tag removed from all contacts with CS2103T tag. Removed from panel with list of all tags (Tag List Panel) +"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Deleted Tag : +"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[ CS2103T ]#"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message for undo command. [CS2103T] restored. +"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/CS2101 t/Teammate +"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* CS2103T and Teammate Tags removed from all contacts with any of these tag. +"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Deleted Tags : +"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Teammate, CS2101 ]#"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message for undo command. [Teammate] and [CS2103T] restored. +"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/A +"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing tag A does not exist +"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#One (or more) of the tags provided does not exist#"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/Arts t/Bus +"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing those tags do not exist +"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#One (or more) of the tags provided does not exist#"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/  +"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting correct command input +"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| delete |: Deletes the persons identified using their last displayed indexes used in the last person listing. +"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tOR the tag specified from all people containing the specific tag +"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX... (must be positive integers) +"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "               \tOR  t/TAG... (case-sensitive) +"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: delete 1 +"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "         delete 1, 2, 3 +"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "         delete 2 3 4 +"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete t/friend +"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "           \tdelete t/friend t/enemy#"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* delete t/-1 +"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting correct command input +"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| delete |: Deletes the persons identified using their last displayed indexes used in the last person listing. +"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tOR the tag specified from all people containing the specific tag +"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX... (must be positive integers) +"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "               \tOR  t/TAG... (case-sensitive) +"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: delete 1 +"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete 1, 2, 3 +"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete 2 3 4 +"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           \tdelete t/friend +"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "           \tdelete t/friend t/enemy#"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d EditCommand (Person)"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Edits a person’s information."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit +"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting correct command input +"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| edit |: Edits the details of the person identified by the index number used in the last person listing. +"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "           Existing values will be overwritten by the input values. +"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX (must be a positive integer) [n/NAME] [g/GENDER] [m/MATRIC NO.] [p/PHONE] [e/EMAIL] [a/ADDRESS] +"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                   [tt/TIMETABLE_URL] [t/TAG]... [b/BIRTHDAY] +"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: edit 1 p/91234567 e/johndoe@example.com +"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "OR +"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| edit |: Edits the specified tag in all contacts containing this tag with a new specified tag. +"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: old/TAG new/TAG +"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Example: edit old/CS1020 new/CS2010#"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 p/12345678 g/F +"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success message showing the person with edited field +"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Edited Person: haha +"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Female +"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: +"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 12345678 +"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: +"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: +"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: +"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: +"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: +"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo: +"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags:#"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 g/M m/A0000000A p/12345678 e/the_myth@example.com b/01011991 a/NUS n/The Myth t/CS2103T tt/http://modsn.us/Zd8wn +"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing same person exist in address book +"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#This person already exists in the address book.#"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*_Following test are repeated from AddCommand (modified as EditCommand, but returns the same results as AddCommand)_*"
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 g/h +"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggest correct gender input +"
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person gender should be a case-insensitive string of either \u0027male\u0027, \u0027female\u0027, or \u0027m\u0027, \u0027f\u0027#"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 p/abc +"
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct phone format +"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Phone numbers can only contain numbers, and should be at least 3 digits long#"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 m/A123456A +"
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct matriculation number format +"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person\u0027s matriculation number should be a 9-character string starting with \u0027A\u0027 or \u0027a\u0027, followed by 7 digits, and ending with a letter.#"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 e/heheexample.com +"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct email format +"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 392,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person emails should be 2 alphanumeric/period strings separated by \u0027@\u0027#"
      },
      {
        "lineNumber": 393,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 394,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 b/29021997 +"
      },
      {
        "lineNumber": 395,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing that the date is invalid +"
      },
      {
        "lineNumber": 396,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 397,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#This date does not exist.#"
      },
      {
        "lineNumber": 398,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 399,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 b/1234567 +"
      },
      {
        "lineNumber": 400,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct birthday format +"
      },
      {
        "lineNumber": 401,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 402,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Person\u0027s birthday should be in the format of DDMMYYYY#"
      },
      {
        "lineNumber": 403,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 404,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 26 tt/http://modsn.us/12345 +"
      },
      {
        "lineNumber": 405,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the NUSMods URL is not valid +"
      },
      {
        "lineNumber": 406,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 407,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid shortened URL provided#"
      },
      {
        "lineNumber": 408,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 409,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Type in:* edit 26 tt/https://nusmods.com/timetable/2017-2018/sem1?CS2101[SEC]\u003d1\u0026CS2103T[TUT]\u003dT1 +"
      },
      {
        "lineNumber": 410,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message requesting for a shortened NUSMods URL +"
      },
      {
        "lineNumber": 411,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 412,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Timetable URLs should be a valid shortened NUSMods URL#"
      },
      {
        "lineNumber": 413,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 414,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d EditCommand (Tag)"
      },
      {
        "lineNumber": 415,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 416,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Edits a tag specified as the old tag to the tag specified as the new tag."
      },
      {
        "lineNumber": 417,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 418,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 419,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit old/Arts new/Friend +"
      },
      {
        "lineNumber": 420,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Arts tags now edited into Friend, an existing Tag. +"
      },
      {
        "lineNumber": 421,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 422,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Edited Tag: +"
      },
      {
        "lineNumber": 423,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "From \u0027Arts\u0027 to \u0027Friend\u0027#"
      },
      {
        "lineNumber": 424,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 425,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit old/Prof new/ +"
      },
      {
        "lineNumber": 426,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message suggesting the correct tagName input +"
      },
      {
        "lineNumber": 427,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 428,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Tags names should be alphanumeric, and should not be blank#"
      },
      {
        "lineNumber": 429,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 430,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit old/At new/Friend +"
      },
      {
        "lineNumber": 431,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message showing that old tag At does not exist +"
      },
      {
        "lineNumber": 432,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 433,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#The specified old tag does not exist#"
      },
      {
        "lineNumber": 434,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 435,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d PhotoCommand (For WINDOWS System only)"
      },
      {
        "lineNumber": 436,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 437,
        "author": {
          "gitId": "April0616"
        },
        "content": "PhotoCommand is to add the photo to your specified contact."
      },
      {
        "lineNumber": 438,
        "author": {
          "gitId": "April0616"
        },
        "content": "This command only works with WINDOWS Operating System in v1.5."
      },
      {
        "lineNumber": 439,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 440,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Before Test PhotoCommand"
      },
      {
        "lineNumber": 441,
        "author": {
          "gitId": "April0616"
        },
        "content": "Right click on one picture file, click `Properties`"
      },
      {
        "lineNumber": 442,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "and copy the file path in the `location:` field."
      },
      {
        "lineNumber": 443,
        "author": {
          "gitId": "April0616"
        },
        "content": "It should be an absolute file path in your computer, like \"C:\\selfie\\bg.jpg\"."
      },
      {
        "lineNumber": 444,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 445,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 446,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* photo +"
      },
      {
        "lineNumber": 447,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct command input +"
      },
      {
        "lineNumber": 448,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 449,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format!  +"
      },
      {
        "lineNumber": 450,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| photo |: Adds a photo to the person identified by the index number used in the last person listingby specifying the path of the photo. +"
      },
      {
        "lineNumber": 451,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "If the path field is empty, the old photo path is removed for the person. +"
      },
      {
        "lineNumber": 452,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX ph/[PHOTO PATH]  +"
      },
      {
        "lineNumber": 453,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                   (INDEX must be a positive integer) +"
      },
      {
        "lineNumber": 454,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: (add photo)     photo 1 ph/C:\\Users\\User\\Desktop\\photo.jpg +"
      },
      {
        "lineNumber": 455,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "               (delete photo) photo 2 ph/#"
      },
      {
        "lineNumber": 456,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 457,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* photo 1 ph/[Your copied photo path] +"
      },
      {
        "lineNumber": 458,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* You could see the photo is added to the first person in the shown list. +"
      },
      {
        "lineNumber": 459,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 460,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Successfully saved photo and added the photo path to Person: Damith +"
      },
      {
        "lineNumber": 461,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 462,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 463,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 464,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 465,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 466,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 467,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 468,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [CS2103T Prof and Tutor] +"
      },
      {
        "lineNumber": 469,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo: [Your copied file path] +"
      },
      {
        "lineNumber": 470,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 471,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 472,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* ph 1 +"
      },
      {
        "lineNumber": 473,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The photo is removed from the person card. +"
      },
      {
        "lineNumber": 474,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 475,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Removed photo path from Person: Damith +"
      },
      {
        "lineNumber": 476,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 477,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 478,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 479,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 480,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 481,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 482,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 483,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [CS2103T Prof and Tutor] +"
      },
      {
        "lineNumber": 484,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo: +"
      },
      {
        "lineNumber": 485,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 486,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 487,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* photo 1 ph/Q:\\haha.jpg +"
      },
      {
        "lineNumber": 488,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing there is no such file +"
      },
      {
        "lineNumber": 489,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 490,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Cannot find file here!  +"
      },
      {
        "lineNumber": 491,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| photo |: Adds a photo to the person identified by the index number used in the last person listingby specifying the path of the photo. +"
      },
      {
        "lineNumber": 492,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "If the path field is empty, the old photo path is removed for the person. +"
      },
      {
        "lineNumber": 493,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX ph/[PHOTO PATH]  +"
      },
      {
        "lineNumber": 494,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                   (INDEX must be a positive integer) +"
      },
      {
        "lineNumber": 495,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: (add photo)     photo 1 ph/C:\\Users\\User\\Desktop\\photo.jpg +"
      },
      {
        "lineNumber": 496,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "               (delete photo) photo 2 ph/#"
      },
      {
        "lineNumber": 497,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 498,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* photo 2 ph/[Your copied photo path] +"
      },
      {
        "lineNumber": 499,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* You could see the photo is added to the second person in the shown list. +"
      },
      {
        "lineNumber": 500,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 501,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Successfully saved photo and added the photo path to Person: Neil Bryan +"
      },
      {
        "lineNumber": 502,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 503,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: A0155016R +"
      },
      {
        "lineNumber": 504,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96477278 +"
      },
      {
        "lineNumber": 505,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: neilbrian.nl@u.nus.edu +"
      },
      {
        "lineNumber": 506,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: Blk 666, Yishun St 61 +"
      },
      {
        "lineNumber": 507,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: 02/10/1995 +"
      },
      {
        "lineNumber": 508,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: http://modsn.us/VLQ3g +"
      },
      {
        "lineNumber": 509,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Handsome] +"
      },
      {
        "lineNumber": 510,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo: [Your copied photo path] +"
      },
      {
        "lineNumber": 511,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Teammate][CS2103T][CS2101]]#"
      },
      {
        "lineNumber": 512,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 513,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 514,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Expected Result: Undo the previous result. +"
      },
      {
        "lineNumber": 515,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Result Message:  +"
      },
      {
        "lineNumber": 516,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo Success!#"
      },
      {
        "lineNumber": 517,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 518,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* select 2 +"
      },
      {
        "lineNumber": 519,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Expected Result: The photo will be removed from the person card of the 2nd person. +"
      },
      {
        "lineNumber": 520,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Result Message: +"
      },
      {
        "lineNumber": 521,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Selected Person: 2#"
      },
      {
        "lineNumber": 522,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 523,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* ph 1 +"
      },
      {
        "lineNumber": 524,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Message showing there is no photo path to remove +"
      },
      {
        "lineNumber": 525,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 526,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#No photo path to remove from Person: Damith +"
      },
      {
        "lineNumber": 527,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 528,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 529,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 530,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 531,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 532,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 533,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 534,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Likes CS2103T] +"
      },
      {
        "lineNumber": 535,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 536,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 537,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 538,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Type in:* ph 1 ph/[A path of txt file] +"
      },
      {
        "lineNumber": 539,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Expected Result:* Message showing there is an error +"
      },
      {
        "lineNumber": 540,
        "author": {
          "gitId": "April0616"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 541,
        "author": {
          "gitId": "April0616"
        },
        "content": "Invalid file path! +"
      },
      {
        "lineNumber": 542,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| photo |: Adds a photo to the person identified by the index number used in the last person listingby specifying the path of the photo. +"
      },
      {
        "lineNumber": 543,
        "author": {
          "gitId": "April0616"
        },
        "content": "The valid photo extensions are \u0027jpg\u0027, \u0027jpeg\u0027, \u0027png\u0027, \u0027gif\u0027 or \u0027bmp\u0027."
      },
      {
        "lineNumber": 544,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 545,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d RemarkCommand"
      },
      {
        "lineNumber": 546,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 547,
        "author": {
          "gitId": "April0616"
        },
        "content": "Remark Command is to add a remark to the specified person."
      },
      {
        "lineNumber": 548,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 549,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 550,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* remark +"
      },
      {
        "lineNumber": 551,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct command format +"
      },
      {
        "lineNumber": 552,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 553,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format!  +"
      },
      {
        "lineNumber": 554,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| remark |: Adds one or more remarks the person identified by the index number used in the last person listing. +"
      },
      {
        "lineNumber": 555,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                 If the remark field is empty, the remark is removed for the person. +"
      },
      {
        "lineNumber": 556,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: INDEX r/[REMARK1] r/[REMARK2] ... +"
      },
      {
        "lineNumber": 557,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                   (INDEX must be a positive integer) +"
      },
      {
        "lineNumber": 558,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: (add a remark) remark 1 r/Likes to drink coffee +"
      },
      {
        "lineNumber": 559,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "               (add multiple remarks) remark 1 r/Likes to drink coffee r/CAP5.0 +"
      },
      {
        "lineNumber": 560,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "               (delete remarks) remark 2 r/#"
      },
      {
        "lineNumber": 561,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 562,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* remark 1 r/Likes CS2103T +"
      },
      {
        "lineNumber": 563,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Add the remark \u0027Likes CS2103T\u0027 to the first person in the shown list. +"
      },
      {
        "lineNumber": 564,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 565,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Added Remark(s) to Person: Damith +"
      },
      {
        "lineNumber": 566,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 567,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 568,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 569,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 570,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 571,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 572,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 573,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Likes CS2103T] +"
      },
      {
        "lineNumber": 574,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 575,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 576,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 577,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* remark 1 r/ +"
      },
      {
        "lineNumber": 578,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Remove the remark from the 1st person in the shown list. +"
      },
      {
        "lineNumber": 579,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 580,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Removed Remark(s) from Person: Damith +"
      },
      {
        "lineNumber": 581,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 582,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.:  +"
      },
      {
        "lineNumber": 583,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 584,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 585,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 586,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday:  +"
      },
      {
        "lineNumber": 587,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable:  +"
      },
      {
        "lineNumber": 588,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark:  +"
      },
      {
        "lineNumber": 589,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 590,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 591,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 592,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* rm 2 r/404 r/NOT FOUND +"
      },
      {
        "lineNumber": 593,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Add two remarks to the 2nd person in the shown list. +"
      },
      {
        "lineNumber": 594,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 595,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Added Remark(s) to Person: Neil Bryan +"
      },
      {
        "lineNumber": 596,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 597,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: A0155016R +"
      },
      {
        "lineNumber": 598,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96477278 +"
      },
      {
        "lineNumber": 599,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: neilbrian.nl@u.nus.edu +"
      },
      {
        "lineNumber": 600,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: Blk 666, Yishun St 61 +"
      },
      {
        "lineNumber": 601,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: 02/10/1995 +"
      },
      {
        "lineNumber": 602,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: http://modsn.us/VLQ3g +"
      },
      {
        "lineNumber": 603,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [404, NOT FOUND] +"
      },
      {
        "lineNumber": 604,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo:  +"
      },
      {
        "lineNumber": 605,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Teammate][CS2103T][CS2101]#"
      },
      {
        "lineNumber": 606,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 607,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 608,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Undo the previous command.  +"
      },
      {
        "lineNumber": 609,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 610,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 611,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 612,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* select 2 +"
      },
      {
        "lineNumber": 613,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The remark added to the 2nd person in the shown list will be removed. +"
      },
      {
        "lineNumber": 614,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 615,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Selected Person: 2#"
      },
      {
        "lineNumber": 616,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 617,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d FindCommand"
      },
      {
        "lineNumber": 618,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 619,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Find Command is to find the persons with different fields of information."
      },
      {
        "lineNumber": 620,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 621,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 622,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find +"
      },
      {
        "lineNumber": 623,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting the correct command format +"
      },
      {
        "lineNumber": 624,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 625,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format!  +"
      },
      {
        "lineNumber": 626,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| find |: Finds all persons whose information contain any of the specified keywords (case-insensitive) and displays them as a list with index numbers. +"
      },
      {
        "lineNumber": 627,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Parameters: [n/NAME] [p/PHONE] [e/EMAIL] [a/ADDRESS] [b/BIRTHDAY] [t/TAG]... +"
      },
      {
        "lineNumber": 628,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example:  +"
      },
      {
        "lineNumber": 629,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find n/ian zach +"
      },
      {
        "lineNumber": 630,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Returns any person with name including \u0027ian\u0027 and \u0027zach\u0027. +"
      },
      {
        "lineNumber": 631,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find t/friends t/owesMoney +"
      },
      {
        "lineNumber": 632,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Returns all persons in UniFy containing *both* \u0027JCfriends\u0027 and \u0027computing\u0027.#"
      },
      {
        "lineNumber": 633,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 634,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find n/an +"
      },
      {
        "lineNumber": 635,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons name containing `an` +"
      },
      {
        "lineNumber": 636,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 637,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#9 persons listed!#"
      },
      {
        "lineNumber": 638,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 639,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find p/32 +"
      },
      {
        "lineNumber": 640,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons phone containing `32` +"
      },
      {
        "lineNumber": 641,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 642,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#1 persons listed!#"
      },
      {
        "lineNumber": 643,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 644,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find e/@ +"
      },
      {
        "lineNumber": 645,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons email containing `@` +"
      },
      {
        "lineNumber": 646,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 647,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#24 persons listed!#"
      },
      {
        "lineNumber": 648,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 649,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find a/blk +"
      },
      {
        "lineNumber": 650,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons address containing `blk` +"
      },
      {
        "lineNumber": 651,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 652,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#11 persons listed!#"
      },
      {
        "lineNumber": 653,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 654,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find b/06 +"
      },
      {
        "lineNumber": 655,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons birthday month is June +"
      },
      {
        "lineNumber": 656,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 657,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#2 persons listed! [Born in June]#"
      },
      {
        "lineNumber": 658,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 659,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find t/cs +"
      },
      {
        "lineNumber": 660,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Display all persons tagName containing cs +"
      },
      {
        "lineNumber": 661,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 662,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#13 persons listed!#"
      },
      {
        "lineNumber": 663,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 664,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find b/abc +"
      },
      {
        "lineNumber": 665,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting Birthday month must be in integer +"
      },
      {
        "lineNumber": 666,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 667,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Keyword input must be in integer.#"
      },
      {
        "lineNumber": 668,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 669,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find b/13 +"
      },
      {
        "lineNumber": 670,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting Birthday month out of bound +"
      },
      {
        "lineNumber": 671,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 672,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Month 13 does not exist.#"
      },
      {
        "lineNumber": 673,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 674,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find b/1 +"
      },
      {
        "lineNumber": 675,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message suggesting Birthday Month input needs to be 2 digits +"
      },
      {
        "lineNumber": 676,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 677,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#You should type 01 instead of 1.#"
      },
      {
        "lineNumber": 678,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 679,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* find p/ +"
      },
      {
        "lineNumber": 680,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error message showing the need of at least one field to be searched +"
      },
      {
        "lineNumber": 681,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 682,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#At least one field to find must be provided.#"
      },
      {
        "lineNumber": 683,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 684,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d GmapsCommand"
      },
      {
        "lineNumber": 685,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 686,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Opens a google map location view of the address for the person specified by the index. +"
      },
      {
        "lineNumber": 687,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "If you specify an address. It shows the directions from that specified address to the person’s address."
      },
      {
        "lineNumber": 688,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 689,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 690,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* gmaps +"
      },
      {
        "lineNumber": 691,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message suggesting the correct Command input +"
      },
      {
        "lineNumber": 692,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 693,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "[red]#Invalid command format! +"
      },
      {
        "lineNumber": 694,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "| gmaps |: Opens a Google Maps view of a person’s address. +"
      },
      {
        "lineNumber": 695,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            \tIf an address is specified, shows the directions from the address to that person\u0027s address. +"
      },
      {
        "lineNumber": 696,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Format: gmaps INDEX [a/ADDRESS] +"
      },
      {
        "lineNumber": 697,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Example: gmaps 1 +"
      },
      {
        "lineNumber": 698,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "           \tgmaps 1 a/Blk 123, Yishun 75#"
      },
      {
        "lineNumber": 699,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 700,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* gmaps 1 +"
      },
      {
        "lineNumber": 701,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Shows the google maps directions to Damith’s location (NUS School of Computing, Computing 2 (COM2)) +"
      },
      {
        "lineNumber": 702,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 703,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Showing Map View of Damith\u0027s address#"
      },
      {
        "lineNumber": 704,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 705,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* gmaps 2 a/NUS +"
      },
      {
        "lineNumber": 706,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Shows the google maps directions to Bryan’s location (666 Yishun Street 61) from (National University of Singapore, 21 Lower Kent Ridge Rd, Singapore 119077) +"
      },
      {
        "lineNumber": 707,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 708,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Showing directions to Neil Bryan#"
      },
      {
        "lineNumber": 709,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 710,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* list +"
      },
      {
        "lineNumber": 711,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* All persons in addressbook listed. +"
      },
      {
        "lineNumber": 712,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 713,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Listed all persons#"
      },
      {
        "lineNumber": 714,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 715,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* gmaps 22 +"
      },
      {
        "lineNumber": 716,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message showing that the person has no address to show +"
      },
      {
        "lineNumber": 717,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 718,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Herman Khor has no address!#"
      },
      {
        "lineNumber": 719,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 720,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* gmaps 3 a/ +"
      },
      {
        "lineNumber": 721,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Error Message suggesting the correct address input +"
      },
      {
        "lineNumber": 722,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:*  +"
      },
      {
        "lineNumber": 723,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[red]#Person addresses can take any values, and it should not be blank#"
      },
      {
        "lineNumber": 724,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 725,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d TimetableCommand"
      },
      {
        "lineNumber": 726,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 727,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable Command shows the combined timetable of selected persons"
      },
      {
        "lineNumber": 728,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 729,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Steps to Execute And Expected Results"
      },
      {
        "lineNumber": 730,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* whenfree 1 2 3 +"
      },
      {
        "lineNumber": 731,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* A combined timetable is shown +"
      },
      {
        "lineNumber": 732,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 733,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Displayed timetables: +"
      },
      {
        "lineNumber": 734,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Damith] +"
      },
      {
        "lineNumber": 735,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Neil Bryan] +"
      },
      {
        "lineNumber": 736,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Fan Yiting]#"
      },
      {
        "lineNumber": 737,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 738,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Type in:* whenfree 1, 4 +"
      },
      {
        "lineNumber": 739,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* A combined timetable is shown +"
      },
      {
        "lineNumber": 740,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 741,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Displayed timetables: +"
      },
      {
        "lineNumber": 742,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Damith] +"
      },
      {
        "lineNumber": 743,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Tai Yu Xuan]#"
      },
      {
        "lineNumber": 744,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 745,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Type in:* whenfree 1 +"
      },
      {
        "lineNumber": 746,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* A combined timetable is shown +"
      },
      {
        "lineNumber": 747,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 748,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Displayed timetables: [Damith]#"
      },
      {
        "lineNumber": 749,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 750,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Type in:* find t/CS2101 +"
      },
      {
        "lineNumber": 751,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Expected Result:* Display all persons having `CS2101` tag +"
      },
      {
        "lineNumber": 752,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 753,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#5 Persons listed!#"
      },
      {
        "lineNumber": 754,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 755,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* whenfree +"
      },
      {
        "lineNumber": 756,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* A combined timetable is shown +"
      },
      {
        "lineNumber": 757,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 758,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Displayed timetables: +"
      },
      {
        "lineNumber": 759,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Neil Bryan] +"
      },
      {
        "lineNumber": 760,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Fan Yiting] +"
      },
      {
        "lineNumber": 761,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Tai Yu Xuan] +"
      },
      {
        "lineNumber": 762,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Zachariah Tan] +"
      },
      {
        "lineNumber": 763,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[Oswald Wong]#"
      },
      {
        "lineNumber": 764,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 765,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d SuggestCommand"
      },
      {
        "lineNumber": 766,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 767,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Suggest function suggests user the correct input"
      },
      {
        "lineNumber": 768,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 769,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 770,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* fnid +"
      },
      {
        "lineNumber": 771,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Correct command word suggested +"
      },
      {
        "lineNumber": 772,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 773,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[gree]#Do you mean find?#"
      },
      {
        "lineNumber": 774,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 775,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d ListCommand"
      },
      {
        "lineNumber": 776,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 777,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "List Command is to list all persons."
      },
      {
        "lineNumber": 778,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 779,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 780,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* list +"
      },
      {
        "lineNumber": 781,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* All persons in addressbook listed. +"
      },
      {
        "lineNumber": 782,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 783,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Listed all persons#"
      },
      {
        "lineNumber": 784,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 785,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d HelpCommand"
      },
      {
        "lineNumber": 786,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 787,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Help Command is to open the User guide link for user to view"
      },
      {
        "lineNumber": 788,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 789,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 790,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* help +"
      },
      {
        "lineNumber": 791,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* help page pops up. +"
      },
      {
        "lineNumber": 792,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 793,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Opened help window.#"
      },
      {
        "lineNumber": 794,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 795,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d SelectCommand"
      },
      {
        "lineNumber": 796,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 797,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Select Command is to select a person to show his information."
      },
      {
        "lineNumber": 798,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 799,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 800,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* select 1 +"
      },
      {
        "lineNumber": 801,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* first person in addressbook selected. Information displayed. +"
      },
      {
        "lineNumber": 802,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 803,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Selected Person: 1#"
      },
      {
        "lineNumber": 804,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 805,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d HistoryCommand"
      },
      {
        "lineNumber": 806,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 807,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "History Command is to show the history of commands used since the start of the launch of addressbook"
      },
      {
        "lineNumber": 808,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 809,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected ResultsType in: history"
      },
      {
        "lineNumber": 810,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* history +"
      },
      {
        "lineNumber": 811,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* A list of executed commands is shown +"
      },
      {
        "lineNumber": 812,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 813,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Entered commands (from most recent to earliest): +"
      },
      {
        "lineNumber": 814,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "select 1 +"
      },
      {
        "lineNumber": 815,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "help +"
      },
      {
        "lineNumber": 816,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "list +"
      },
      {
        "lineNumber": 817,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "fnid +"
      },
      {
        "lineNumber": 818,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "whenfree +"
      },
      {
        "lineNumber": 819,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "find t/CS2101 +"
      },
      {
        "lineNumber": 820,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "whenfree 1 +"
      },
      {
        "lineNumber": 821,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "whenfree 1 2 3 +"
      },
      {
        "lineNumber": 822,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "gmaps 3 a/ +"
      },
      {
        "lineNumber": 823,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "gmaps 22 +"
      },
      {
        "lineNumber": 824,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "list +"
      },
      {
        "lineNumber": 825,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "gmaps 2 a/NUS +"
      },
      {
        "lineNumber": 826,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "gmaps 1 +"
      },
      {
        "lineNumber": 827,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "gmaps +"
      },
      {
        "lineNumber": 828,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find p/ +"
      },
      {
        "lineNumber": 829,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find b/1 +"
      },
      {
        "lineNumber": 830,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find b/13 +"
      },
      {
        "lineNumber": 831,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find b/abc +"
      },
      {
        "lineNumber": 832,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find t/cs +"
      },
      {
        "lineNumber": 833,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find b/06 +"
      },
      {
        "lineNumber": 834,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find a/blk +"
      },
      {
        "lineNumber": 835,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find e/@ +"
      },
      {
        "lineNumber": 836,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find p/32 +"
      },
      {
        "lineNumber": 837,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find n/an +"
      },
      {
        "lineNumber": 838,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "find +"
      },
      {
        "lineNumber": 839,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "select 2 +"
      },
      {
        "lineNumber": 840,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 841,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "rm 2 r/404 r/NOT FOUND +"
      },
      {
        "lineNumber": 842,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "remark 1 r/ +"
      },
      {
        "lineNumber": 843,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "remark 1 r/Likes CS2103T +"
      },
      {
        "lineNumber": 844,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "remark +"
      },
      {
        "lineNumber": 845,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "ph 1 +"
      },
      {
        "lineNumber": 846,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "select 2 +"
      },
      {
        "lineNumber": 847,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 848,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "photo 2 ph/[your file path] +"
      },
      {
        "lineNumber": 849,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "photo 1 ph/Q:\\haha.jpg +"
      },
      {
        "lineNumber": 850,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "ph 1 +"
      },
      {
        "lineNumber": 851,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "photo 1 ph/[your file path] +"
      },
      {
        "lineNumber": 852,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "photo +"
      },
      {
        "lineNumber": 853,
        "author": {
          "gitId": "April0616"
        },
        "content": "ph 1 ph/[your file path of a txt file] +"
      },
      {
        "lineNumber": 854,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit old/At new/Friend +"
      },
      {
        "lineNumber": 855,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit old/Prof new/ +"
      },
      {
        "lineNumber": 856,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit old/Arts new/Friend +"
      },
      {
        "lineNumber": 857,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 tt/https://nusmods.com/timetable/2017-2018/sem1?CS2101[SEC]\u003d1\u0026CS2103T[TUT]\u003dT1\u0026CS2010[LEC]\u003d1\u0026CS2010[TUT]\u003d9\u0026CS2010[LAB]\u003d8\u0026ES2660[SEC]\u003d3\u0026GEQ1000[TUT]\u003dE17\u0026CS1010J[LEC]\u003d1\u0026CS1010J[TUT]\u003d10 +"
      },
      {
        "lineNumber": 858,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 tt/http://modsn.us/12345 +"
      },
      {
        "lineNumber": 859,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 b/1234567 +"
      },
      {
        "lineNumber": 860,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 b/29021997 +"
      },
      {
        "lineNumber": 861,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 e/heheexample.com +"
      },
      {
        "lineNumber": 862,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 m/A123456A +"
      },
      {
        "lineNumber": 863,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 p/abc +"
      },
      {
        "lineNumber": 864,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 g/h +"
      },
      {
        "lineNumber": 865,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 g/M m/A0000000A p/12345678 e/the_myth@example.com b/01011991 a/NUS n/The Myth t/CS2103T tt/http://modsn.us/Zd8wn +"
      },
      {
        "lineNumber": 866,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit 26 p/12345678 g/F +"
      },
      {
        "lineNumber": 867,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "edit +"
      },
      {
        "lineNumber": 868,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/-1 +"
      },
      {
        "lineNumber": 869,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/ +"
      },
      {
        "lineNumber": 870,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/Arts t/Bus +"
      },
      {
        "lineNumber": 871,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/A +"
      },
      {
        "lineNumber": 872,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 873,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/CS2101 t/Teammate +"
      },
      {
        "lineNumber": 874,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 875,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete t/CS2103T +"
      },
      {
        "lineNumber": 876,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete +"
      },
      {
        "lineNumber": 877,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete 999 +"
      },
      {
        "lineNumber": 878,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete -1, -2 +"
      },
      {
        "lineNumber": 879,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 880,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete 1 +"
      },
      {
        "lineNumber": 881,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "undo +"
      },
      {
        "lineNumber": 882,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "delete 1 2 3 +"
      },
      {
        "lineNumber": 883,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "theme +"
      },
      {
        "lineNumber": 884,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "theme red +"
      },
      {
        "lineNumber": 885,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "theme light +"
      },
      {
        "lineNumber": 886,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "theme dark +"
      },
      {
        "lineNumber": 887,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "theme light +"
      },
      {
        "lineNumber": 888,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add +"
      },
      {
        "lineNumber": 889,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe tt/https://nusmods.com/timetable/2017-2018/sem1?CS2101[SEC]\u003d1\u0026CS2103T[TUT]\u003dT1\u0026CS2010[LEC]\u003d1\u0026CS2010[TUT]\u003d9\u0026CS2010[LAB]\u003d8\u0026ES2660[SEC]\u003d3\u0026GEQ1000[TUT]\u003dE17\u0026CS1010J[LEC]\u003d1\u0026CS1010J[TUT]\u003d10 +"
      },
      {
        "lineNumber": 890,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe tt/http://modsn.us/12345 +"
      },
      {
        "lineNumber": 891,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe b/1234567 +"
      },
      {
        "lineNumber": 892,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe b/29021997 +"
      },
      {
        "lineNumber": 893,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe e/heheexample.com +"
      },
      {
        "lineNumber": 894,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe m/A123456A +"
      },
      {
        "lineNumber": 895,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe p/abc +"
      },
      {
        "lineNumber": 896,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/hehe g/h +"
      },
      {
        "lineNumber": 897,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "add n/haha +"
      },
      {
        "lineNumber": 898,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "add n/The Myth g/Male p/12345678 e/the_myth@example.com a/NUS m/A0000000A b/01011991 t/CS2103T tt/http://modsn.us/Zd8wn#"
      },
      {
        "lineNumber": 899,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 900,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d UndoCommand"
      },
      {
        "lineNumber": 901,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 902,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Undo Command is to undo an action done."
      },
      {
        "lineNumber": 903,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 904,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 905,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* edit 1 n/1 +"
      },
      {
        "lineNumber": 906,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* Success Message of the first person with his edited fields +"
      },
      {
        "lineNumber": 907,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 908,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Edited Person: 1 +"
      },
      {
        "lineNumber": 909,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Gender: Male +"
      },
      {
        "lineNumber": 910,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Matric No.: +"
      },
      {
        "lineNumber": 911,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Phone: 96584398 +"
      },
      {
        "lineNumber": 912,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Email: damith@u.nus.edu +"
      },
      {
        "lineNumber": 913,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Address: NUS COM2 #2-57 +"
      },
      {
        "lineNumber": 914,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Birthday: +"
      },
      {
        "lineNumber": 915,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Timetable: +"
      },
      {
        "lineNumber": 916,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Remark: [Likes CS2103T] +"
      },
      {
        "lineNumber": 917,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Photo: +"
      },
      {
        "lineNumber": 918,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "Tags: [Legend][Myth][CS2103T][Man][Prof]#"
      },
      {
        "lineNumber": 919,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 920,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 921,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The name of the first person reverts back. +"
      },
      {
        "lineNumber": 922,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 923,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 924,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 925,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d RedoCommand"
      },
      {
        "lineNumber": 926,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 927,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Redo Command is to redo the previous undone Command."
      },
      {
        "lineNumber": 928,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 929,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 930,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* redo +"
      },
      {
        "lineNumber": 931,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The name of the first person is edited to be 1 +"
      },
      {
        "lineNumber": 932,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 933,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Redo success!#"
      },
      {
        "lineNumber": 934,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 935,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 936,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The name of the first person reverts back. +"
      },
      {
        "lineNumber": 937,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 938,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 939,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 940,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d ClearCommand"
      },
      {
        "lineNumber": 941,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Description/Data"
      },
      {
        "lineNumber": 942,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Clear Command is to clear the data in the addressbook."
      },
      {
        "lineNumber": 943,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 944,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 945,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* clear +"
      },
      {
        "lineNumber": 946,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* All persona are cleared +"
      },
      {
        "lineNumber": 947,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 948,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Address book has been cleared!#"
      },
      {
        "lineNumber": 949,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 950,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* undo +"
      },
      {
        "lineNumber": 951,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:* The person list is restored +"
      },
      {
        "lineNumber": 952,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Result Message:* +"
      },
      {
        "lineNumber": 953,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "[green]#Undo success!#"
      },
      {
        "lineNumber": 954,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 955,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d ExitCommand"
      },
      {
        "lineNumber": 956,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "\u003d\u003d\u003d\u003d Description"
      },
      {
        "lineNumber": 957,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "Exit Command is to exit the program"
      },
      {
        "lineNumber": 958,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 959,
        "author": {
          "gitId": "April0616"
        },
        "content": "\u003d\u003d\u003d\u003d Steps To Execute And Expected Results"
      },
      {
        "lineNumber": 960,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Type in:* exit +"
      },
      {
        "lineNumber": 961,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "*Expected Result:*  The addressbook closes."
      }
    ],
    "authorContributionMap": {
      "zacharytang": 114,
      "CindyTsai1": 689,
      "nbriannl": 1,
      "April0616": 145,
      "-": 12
    }
  },
  {
    "path": "src/test/java/guitests/HelpWindowTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.HelpWindowHandle;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class HelpWindowTest extends AddressBookGuiTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ERROR_MESSAGE \u003d \"ATTENTION!!!! : On some computers, this test may fail when run on \""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"non-headless mode as FxRobot#clickOn(Node, MouseButton...) clicks on the wrong location. We suspect \""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"that this is a bug with TestFX library that we are using. If this test fails, you have to run your \""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "            + \"tests on headless mode. See UsingGradle.adoc on how to do so.\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void openHelpWindow() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        //use accelerator"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        getCommandBox().click();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        getResultDisplay().click();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().click();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //clicking on info display should still open help"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().click();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingAccelerator();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        //use menu button"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        getMainMenu().openHelpWindowUsingMenu();"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        //use command box"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        runCommand(HelpCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertHelpWindowOpen();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window is open, and closes it after checking."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowOpen() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        new HelpWindowHandle(guiRobot.getStage(HelpWindowHandle.HELP_WINDOW_TITLE)).close();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.focus();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the help window isn\u0027t open."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertHelpWindowNotOpen() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ERROR_MESSAGE, HelpWindowHandle.isWindowPresent());"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 63
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonCardHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle to a person card in the person list panel."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ID_FIELD_ID \u003d \"#id\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String NAME_FIELD_ID \u003d \"#name\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String GENDER_FIELD_ID \u003d \"#gender\";"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String MATRIC_NO_FIELD_ID \u003d \"#matricNo\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String ADDRESS_FIELD_ID \u003d \"#address\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String PHONE_FIELD_ID \u003d \"#phone\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String EMAIL_FIELD_ID \u003d \"#email\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TIMETABLE_FIELD_ID \u003d \"#timetable\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String PHOTOPATH_FIELD_ID \u003d \"#photoPath\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAGS_FIELD_ID \u003d \"#tags\";"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static final String BIRTHDAY_FIELD_ID \u003d \"#birthday\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String REMARK_FIELD_ID \u003d \"#remark\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label idLabel;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label nameLabel;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label phoneLabel;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Label emailLabel;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private final List\u003cLabel\u003e tagLabels;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle(Node cardNode) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        super(cardNode);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        this.idLabel \u003d getChildNode(ID_FIELD_ID);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        this.nameLabel \u003d getChildNode(NAME_FIELD_ID);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        this.phoneLabel \u003d getChildNode(PHONE_FIELD_ID);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        this.emailLabel \u003d getChildNode(EMAIL_FIELD_ID);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        Region tagsContainer \u003d getChildNode(TAGS_FIELD_ID);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        this.tagLabels \u003d tagsContainer"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "                .getChildrenUnmodifiable()"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label.class::cast)"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getId() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return idLabel.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getName() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return nameLabel.getText();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getPhone() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        return phoneLabel.getText();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getEmail() {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        return emailLabel.getText();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public List\u003cString\u003e getTags() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        return tagLabels"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "                .stream()"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(Label::getText)"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "                .collect(Collectors.toList());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 1,
      "April0616": 4,
      "-": 65
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/PersonListPanelHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.ListView;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.PersonCard;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": " * Provides a handle for {@code PersonListPanel} containing the list of {@code PersonCard}."
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonListPanelHandle extends NodeHandle\u003cListView\u003cPersonCard\u003e\u003e {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PERSON_LIST_VIEW_ID \u003d \"#personListView\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private Optional\u003cPersonCard\u003e lastRememberedSelectedPersonCard;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle(ListView\u003cPersonCard\u003e personListPanelNode) {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        super(personListPanelNode);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a handle to the selected {@code PersonCardHandle}."
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "     * A maximum of 1 item can be selected at any time."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "     * @throws AssertionError if no card is selected, or more than 1 card is selected."
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getHandleToSelectedCard() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPersonCard\u003e personList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        if (personList.size() !\u003d 1) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person list size expected 1.\");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        return new PersonCardHandle(personList.get(0).getRoot());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the index of the selected card."
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getSelectedCardIndex() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getSelectionModel().getSelectedIndex();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if a card is currently selected."
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isAnyCardSelected() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPersonCard\u003e selectedCardsList \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedCardsList.size() \u003e 1) {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Card list size expected 0 or 1.\");"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        return !selectedCardsList.isEmpty();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * Navigates the listview to display and select the person."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    public void navigateToCard(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPersonCard\u003e cards \u003d getRootNode().getItems();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPersonCard\u003e matchingCard \u003d cards.stream().filter(card -\u003e card.person.equals(person)).findFirst();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        if (!matchingCard.isPresent()) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Person does not exist.\");"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().scrollTo(matchingCard.get());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            getRootNode().getSelectionModel().select(matchingCard.get());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the person card handle of a person associated with the {@code index} in the list."
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(int index) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        return getPersonCardHandle(getRootNode().getItems().get(index).person);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the {@code PersonCardHandle} of the specified {@code person} in the list."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonCardHandle getPersonCardHandle(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPersonCardHandle\u003e handle \u003d getRootNode().getItems().stream()"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "                .filter(card -\u003e card.person.equals(person))"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "                .map(card -\u003e new PersonCardHandle(card.getRoot()))"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "                .findFirst();"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return handle.orElseThrow(() -\u003e new IllegalArgumentException(\"Person does not exist.\"));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Selects the {@code PersonCard} at {@code index} in the list."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select(int index) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        getRootNode().getSelectionModel().select(index);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the selected {@code PersonCard} in the list."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSelectedPersonCard() {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.empty();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            lastRememberedSelectedPersonCard \u003d Optional.of(selectedItems.get(0));"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the selected {@code PersonCard} is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSelectedPersonCard()} call."
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSelectedPersonCardChanged() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPersonCard\u003e selectedItems \u003d getRootNode().getSelectionModel().getSelectedItems();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        if (selectedItems.size() \u003d\u003d 0) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "            return lastRememberedSelectedPersonCard.isPresent();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "            return !lastRememberedSelectedPersonCard.isPresent()"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "                    || !lastRememberedSelectedPersonCard.get().equals(selectedItems.get(0));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the size of the list."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    public int getListSize() {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        return getRootNode().getItems().size();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 3,
      "-": 131
    }
  },
  {
    "path": "src/test/java/guitests/guihandles/StatusBarFooterHandle.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package guitests.guihandles;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import org.controlsfx.control.StatusBar;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.Node;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": " * A handle for the {@code StatusBarFooter} at the footer of the application."
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterHandle extends NodeHandle\u003cNode\u003e {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String STATUS_BAR_PLACEHOLDER \u003d \"#statusbarPlaceholder\";"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SYNC_STATUS_ID \u003d \"#syncStatus\";"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SAVE_LOCATION_STATUS_ID \u003d \"#saveLocationStatus\";"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TOTAL_PERSONS_ID \u003d \"#totalPersons\";"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar syncStatusNode;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private final StatusBar saveLocationNode;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private final StatusBar totalPersonsNode;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSyncStatus;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    private String lastRememberedSaveLocation;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle(Node statusBarFooterNode) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        super(statusBarFooterNode);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        this.syncStatusNode \u003d getChildNode(SYNC_STATUS_ID);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        this.saveLocationNode \u003d getChildNode(SAVE_LOCATION_STATUS_ID);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.totalPersonsNode \u003d getChildNode(TOTAL_PERSONS_ID);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the sync status portion of the status bar."
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSyncStatus() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return syncStatusNode.getText();"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the text of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public String getSaveLocation() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return saveLocationNode.getText();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the text of the \u0027total persons\u0027 portion of the status bar."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public String getTotalPersons() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return totalPersonsNode.getText();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the sync status portion of the status bar."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSyncStatus() {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSyncStatus \u003d getSyncStatus();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the sync status is different from the value remembered by the most recent"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code rememberSyncStatus()} call."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSyncStatusChanged() {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSyncStatus.equals(getSyncStatus());"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Remembers the content of the \u0027save location\u0027 portion of the status bar."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void rememberSaveLocation() {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        lastRememberedSaveLocation \u003d getSaveLocation();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns true if the current content of the \u0027save location\u0027 is different from the value remembered by the most"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * recent {@code rememberSaveLocation()} call."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    public boolean isSaveLocationChanged() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        return !lastRememberedSaveLocation.equals(getSaveLocation());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 10,
      "-": 72
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/ConfigTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertNotNull;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "public class ConfigTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    public void toString_defaultObject_stringReturned() {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String defaultConfigAsString \u003d \"App title : UniFy\\n\""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Current log level : INFO\\n\""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "                + \"Preference file Location : preferences.json\";"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(defaultConfigAsString, new Config().toString());"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equalsMethod() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        Config defaultConfig \u003d new Config();"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNotNull(defaultConfig);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(defaultConfig.equals(defaultConfig));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 1,
      "-": 31
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/core/index/IndexTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.core.index;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "public class IndexTest {"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createOneBasedIndex() {"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateOneBasedFailure(0);"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromOneBased(1).getOneBased());"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromOneBased(5).getOneBased());"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // convert from one-based index to zero-based index"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromOneBased(1).getZeroBased());"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(4, Index.fromOneBased(5).getZeroBased());"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public void createZeroBasedIndex() {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid index"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateZeroBasedFailure(-1);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // check equality using the same base"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(0, Index.fromZeroBased(0).getZeroBased());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(5, Index.fromZeroBased(5).getZeroBased());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // convert from zero-based index to one-based index"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(1, Index.fromZeroBased(0).getOneBased());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(6, Index.fromZeroBased(5).getOneBased());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromZeroBased(int)} with {@code invalidZeroBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateZeroBasedFailure(int invalidZeroBasedIndex) {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidZeroBasedIndex, true);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code Index#fromOneBased(int)} with {@code invalidOneBasedIndex}, confirms that an"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateOneBasedFailure(int invalidOneBasedIndex) {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCreateFailure(invalidOneBasedIndex, false);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes either {@code Index#fromZeroBased(int)} (if it is zero based), or {@code Index#fromOneBased(int)}"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "     * (if it is one based), and confirms that an {@code IndexOutOfBoundsException} is thrown."
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCreateFailure(int invalidIndex, boolean isZeroBased) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "            if (isZeroBased) {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromZeroBased(invalidIndex);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                Index.fromOneBased(invalidIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected IndexOutOfBoundsException was not thrown.\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IndexOutOfBoundsException ie) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected behaviour"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        final Index fifthPersonIndex \u003d Index.fromOneBased(5);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromOneBased(5)));"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(Index.fromZeroBased(4)));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(fifthPersonIndex.equals(fifthPersonIndex));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(null));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(5.0f));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(fifthPersonIndex.equals(Index.fromOneBased(1)));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "-": 88
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/StringUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.CoreMatchers.containsString;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.hamcrest.MatcherAssert.assertThat;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class StringUtilTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for isUnsignedPositiveInteger --------------------------------------"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isUnsignedPositiveInteger() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: empty strings"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"\")); // Boundary value"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"  \"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: not a number"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"a\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"aaa\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"0\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: zero as prefix"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"01\"));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: signed numbers"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"-1\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"+1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: numbers with white space"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\" 10 \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(\"1 0\"));  // Spaces in the middle"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: number larger than Integer.MAX_VALUE"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(StringUtil.isNonZeroUnsignedInteger(Long.toString(Integer.MAX_VALUE + 1)));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        // EP: valid numbers, should return true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"1\")); // Boundary value"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(StringUtil.isNonZeroUnsignedInteger(\"10\"));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for containsWordIgnoreCase --------------------------------------"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for word: null, empty, multiple words"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "     * Invalid equivalence partitions for sentence: null"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "     * The four test cases below test one invalid input at a time."
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_nullWord_throwsNullPointerException() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, \"typical sentence\", null, Optional.empty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExceptionThrown(Class\u003c? extends Throwable\u003e exceptionClass, String sentence, String word,"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "            Optional\u003cString\u003e errorMessage) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(exceptionClass);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        errorMessage.ifPresent(message -\u003e thrown.expectMessage(message));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.containsWordIgnoreCase(sentence, word);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void containsWordIgnoreCase_emptyWord_throwsIllegalArgumentException() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExceptionThrown(IllegalArgumentException.class, \"typical sentence\", \"  \","
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                Optional.of(\"Word parameter cannot be empty\"));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void containsWordIgnoreCase_nullSentence_throwsNullPointerException() {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertExceptionThrown(NullPointerException.class, null, \"abc\", Optional.empty());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Valid equivalence partitions for word:"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - any word"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - word containing symbols/numbers"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - word with leading/trailing spaces"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Valid equivalence partitions for sentence:"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - empty string"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - one word"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - multiple words"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - sentence with extra spaces"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Possible scenarios returning true:"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - matches all words"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Possible scenarios returning false:"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - query word matches part of a sentence word"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *   - sentence word matches part of the query word"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * The test method below tries to verify all above with a reasonably low number of test cases."
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void containsWordIgnoreCase_validInputs_correctResult() {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // Empty sentence"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"\", \"abc\")); // Boundary case"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"    \", \"123\"));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // Partial word only"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bb\")); // Sentence word bigger than query word"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(StringUtil.containsWordIgnoreCase(\"aaa bbb ccc\", \"bbbb\")); // Query word bigger than sentence word"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // Matches all word in the sentence, different upper/lower case letters"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"ALICE\", \"ALICE\")); // both upper case"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"alice\", \"alice\")); // both lower case"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Alice\", \"aLice\")); // mixed cases"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"Alice choo\", \"Alice Choo\")); // multiple words"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(StringUtil.containsWordIgnoreCase(\"   Alice   choo\", \"alice Choo  \")); // Leading/trailing spaces"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    //---------------- Tests for getDetails --------------------------------------"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * Equivalence Partitions: null, valid throwable object"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_exceptionGiven() {"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        assertThat(StringUtil.getDetails(new FileNotFoundException(\"file not found\")),"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                   containsString(\"java.io.FileNotFoundException: file not found\"));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getDetails_nullGiven_throwsNullPointerException() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        StringUtil.getDetails(null);"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 49,
      "-": 101
    }
  },
  {
    "path": "src/test/java/seedu/address/commons/util/TimetableParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.commons.util;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.parseUrl;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_INVALID_SHORT_URL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.model.person.timetable.Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableParserUtilTest {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_URL \u003d \"https://www.google.com\";"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_URL_NOT_URL \u003d \"hello123\";"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_SHORT_URL \u003d \"http://modsn.us/abc\";"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_EMPTY \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_ALL_TYPES \u003d \"http://modsn.us/BkDgl\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_invalidUrl_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_URL);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_notUrl_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_URL_NOT_URL);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_invalidShortUrl_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        parseUrl(null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_validUrlEmptyTimetable_success() throws Exception {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo emptyTimetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(emptyTimetable, parseUrl(VALID_URL_EMPTY));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseUrl_validUrl_success() throws Exception {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo emptyTimetable \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(emptyTimetable, parseUrl(VALID_URL_ALL_TYPES));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 61,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/ListElementPointerTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.NoSuchElementException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class ListElementPointerTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String FIRST_ELEMENT \u003d \"first\";"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SECOND_ELEMENT \u003d \"second\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    private List\u003cString\u003e pointerElements;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    private ListElementPointer pointer;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        pointerElements.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public void emptyList() {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(new ArrayList\u003c\u003e());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentFailure();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public void singleElementList() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e list \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        list.add(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(list);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public void multipleElementsList() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        String thirdElement \u003d \"third\";"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        pointer.add(thirdElement);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCurrentSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextSuccess(thirdElement);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertNextFailure();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(SECOND_ELEMENT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousSuccess(FIRST_ELEMENT);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertPreviousFailure();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointer \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointer));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer firstPointerCopy \u003d new ListElementPointer(pointerElements);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different elements -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        ListElementPointer differentElementPointer \u003d new ListElementPointer(Collections.singletonList(SECOND_ELEMENT));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(differentElementPointer));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        firstPointerCopy.previous();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPointer.equals(firstPointerCopy));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns true and the return value"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#next()} equals to {@code element}."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextSuccess(String element) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasNext());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.next());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns true and the return value"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#previous()} equals to {@code element}."
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousSuccess(String element) {"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasPrevious());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.previous());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns true and the return value"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * of {@code pointer#current()} equals to {@code element}."
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentSuccess(String element) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(pointer.hasCurrent());"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(element, pointer.current());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasNext()} returns false and the following"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#next()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertNextFailure() {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasNext());"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.next();"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected NoSuchElementException was not thrown\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasPrevious()} returns false and the following"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#previous()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertPreviousFailure() {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasPrevious());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.previous();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected NoSuchElementException was not thrown\");"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code pointer#hasCurrent()} returns false and the following"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code pointer#current()} call throws {@code NoSuchElementException}."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCurrentFailure() {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(pointer.hasCurrent());"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            pointer.current();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected NoSuchElementException was not thrown\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (NoSuchElementException e) {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "            // expected exception thrown"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "-": 165
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/AddCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.HashMap;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.function.Predicate;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ReadOnlyAddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.exceptions.DuplicatePhotoPathException;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.exceptions.TagNotFoundException;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandTest {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor_nullPerson_throwsNullPointerException() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        new AddCommand(null);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_personAcceptedByModel_addSuccessful() throws Exception {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStubAcceptingPersonAdded modelStub \u003d new ModelStubAcceptingPersonAdded();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        CommandResult commandResult \u003d getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(String.format(AddCommand.MESSAGE_SUCCESS, validPerson), commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Arrays.asList(validPerson), modelStub.personsAdded);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePerson_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        ModelStub modelStub \u003d new ModelStubThrowingDuplicatePersonException();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        Person validPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(CommandException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        getAddCommandForPerson(validPerson, modelStub).execute();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        Person alice \u003d new PersonBuilder().withName(\"Alice\").build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Person bob \u003d new PersonBuilder().withName(\"Bob\").build();"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommand \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addBobCommand \u003d new AddCommand(bob);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommand));"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand addAliceCommandCopy \u003d new AddCommand(alice);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(addAliceCommand.equals(addAliceCommandCopy));"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(1));"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(null));"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(addAliceCommand.equals(addBobCommand));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     * Generates a new AddCommand with the details of the given person."
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommand getAddCommandForPerson(Person person, Model model) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d new AddCommand(person);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * A default model stub that have all of the methods failing."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStub implements Model {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        public void resetData(ReadOnlyAddressBook newData) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author nbriannl"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void showMapOf(ReadOnlyPerson person, Index index) {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author nbriannl"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void showDirectionsTo(ReadOnlyPerson target, Address address, Index index) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        public void deletePerson(ReadOnlyPerson target) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author April0616"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void deletePersons(ArrayList\u003cReadOnlyPerson\u003e targets) throws PersonNotFoundException {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public void addPhotoPath(PhotoPath photoPath) throws DuplicatePhotoPathException {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updatePerson(ReadOnlyPerson target, ReadOnlyPerson editedPerson)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "                throws DuplicatePersonException {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author nbriannl"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void deleteTag(Tag tag) throws DuplicatePersonException, PersonNotFoundException {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author nbriannl"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void editTag(Tag oldTag, Tag newTag) throws DuplicatePersonException,"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                PersonNotFoundException, TagNotFoundException {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author nbriannl"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void checkMasterTagListHasAllTagsUsed () {"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public HashMap\u003cString, String\u003e getThemeMap () {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public void setCurrentTheme(String theme) {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /** Returns the current theme in use by the app */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        public String getCurrentTheme() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        }"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        public ObservableList\u003cReadOnlyPerson\u003e getFilteredPersonList() {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "            return null;"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        public void updateFilteredPersonList(Predicate\u003cReadOnlyPerson\u003e predicate) {"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"This method should not be called.\");"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always throw a DuplicatePersonException when trying to add a person."
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubThrowingDuplicatePersonException extends ModelStub {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new DuplicatePersonException();"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * A Model stub that always accept the person being added."
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "    private class ModelStubAcceptingPersonAdded extends ModelStub {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        final ArrayList\u003cPerson\u003e personsAdded \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        public void addPerson(ReadOnlyPerson person) throws DuplicatePersonException {"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "            personsAdded.add(new Person(person));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        public ReadOnlyAddressBook getAddressBook() {"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "            return new AddressBook();"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 55,
      "April0616": 16,
      "-": 169
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/CommandTestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains helper methods for testing commands."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class CommandTestUtil {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_AMY \u003d \"Amy Bee\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_NAME_BOB \u003d \"Bob Choo\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_GENDER_AMY \u003d \"Female\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_GENDER_BOB \u003d \"Male\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MATRIC_NO_AMY \u003d \"A0133331K\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_MATRIC_NO_BOB \u003d \"A0162555J\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_AMY \u003d \"11111111\";"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_PHONE_BOB \u003d \"22222222\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_AMY \u003d \"amy@example.com\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_EMAIL_BOB \u003d \"bob@example.com\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_AMY \u003d \"Block 312, Amy Street 1\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_ADDRESS_BOB \u003d \"Block 123, Bobby Street 3\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String VALID_BIRTHDAY_AMY \u003d \"07071997\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String VALID_BIRTHDAY_BOB \u003d \"08081998\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String VALID_TIMETABLE_AMY \u003d \"http://modsn.us/ljWdc\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String VALID_TIMETABLE_BOB \u003d \"http://modsn.us/0ECRP\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_HUSBAND \u003d \"husband\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String VALID_TAG_FRIEND \u003d \"friend\";"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_REMARK_COFFEE \u003d \"like to drink coffee\";"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_REMARK_CAP \u003d \"CAP 5.0\";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_PHOTONAME_AMY \u003d \"photo.jpg\";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String VALID_PHOTONAME_BOB \u003d \"selfie.jpg\";"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_AMY \u003d \" \" + PREFIX_NAME + VALID_NAME_AMY;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String NAME_DESC_BOB \u003d \" \" + PREFIX_NAME + VALID_NAME_BOB;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_DESC_AMY \u003d \" \" + PREFIX_GENDER + VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String GENDER_DESC_BOB \u003d \" \" + PREFIX_GENDER + VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_DESC_AMY \u003d \" \" + PREFIX_MATRIC_NO + VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String MATRIC_NO_DESC_BOB \u003d \" \" + PREFIX_MATRIC_NO + VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_AMY \u003d \" \" + PREFIX_PHONE + VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String PHONE_DESC_BOB \u003d \" \" + PREFIX_PHONE + VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_AMY \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String EMAIL_DESC_BOB \u003d \" \" + PREFIX_EMAIL + VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_AMY \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String ADDRESS_DESC_BOB \u003d \" \" + PREFIX_ADDRESS + VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_DESC_AMY \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String BIRTHDAY_DESC_BOB \u003d \" \" + PREFIX_BIRTHDAY + VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String TIMETABLE_DESC_AMY \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String TIMETABLE_DESC_BOB \u003d \" \" + PREFIX_TIMETABLE + VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_FRIEND \u003d \" \" + PREFIX_TAG + VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String TAG_DESC_HUSBAND \u003d \" \" + PREFIX_TAG + VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_NAME_DESC \u003d \" \" + PREFIX_NAME + \"James\u0026\"; // \u0027\u0026\u0027 not allowed in names"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String INVALID_GENDER_DESC \u003d \" \" + PREFIX_GENDER + \"male\u0026\"; // \u0027\u0026\u0027 not allowed in genders"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "    // missing \u0027A\u0027 at the start of the string in matric numbers"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String INVALID_MATRIC_NO_DESC \u003d \" \" + PREFIX_MATRIC_NO + \"30132222K\";"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_PHONE_DESC \u003d \" \" + PREFIX_PHONE + \"911a\"; // \u0027a\u0027 not allowed in phones"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_EMAIL_DESC \u003d \" \" + PREFIX_EMAIL + \"bob!yahoo\"; // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    // \u0027/\u0027 not allowed in birthdays"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String INVALID_BIRTHDAY_DESC \u003d \" \" + PREFIX_BIRTHDAY + \"23/05/1997\";"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String INVALID_PHOTOPATH_DESC \u003d \" \" + PREFIX_PHOTO + \"haa.jpg\";"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String INVALID_TIMETABLE_DESC \u003d \" \" + PREFIX_TIMETABLE + \"https://www.google.com\";"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String INVALID_SHORT_URL_DESC \u003d \" \" + PREFIX_TIMETABLE + \"http://modsn.us/ABC\";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String INVALID_TAG_DESC \u003d \" \" + PREFIX_TAG + \"hubby*\"; // \u0027*\u0027 not allowed in tags"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Remark REMARK_COFFEE \u003d new Remark(\"[\" + VALID_REMARK_COFFEE + \"]\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final Remark REMARK_CAP \u003d new Remark(\"[\" + VALID_REMARK_CAP + \"]\");"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_AMY;"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final EditCommand.EditPersonDescriptor DESC_BOB;"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    static {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DESC_AMY \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DESC_BOB \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the result message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the {@code actualModel} matches {@code expectedModel}"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandSuccess(Command command, Model actualModel, String expectedMessage,"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult result \u003d command.execute();"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, result.feedbackToUser);"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedModel, actualModel);"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the given {@code command}, confirms that \u003cbr\u003e"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "     * - a {@code CommandException} is thrown \u003cbr\u003e"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the CommandException message matches {@code expectedMessage} \u003cbr\u003e"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * - the address book and the filtered person list in the {@code actualModel} remain unchanged"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void assertCommandFailure(Command command, Model actualModel, String expectedMessage) {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // we are unable to defensively copy the model for comparison later, so we can"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // only do so by copying its components."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(actualModel.getAddressBook());"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cReadOnlyPerson\u003e expectedFilteredList \u003d new ArrayList\u003c\u003e(actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "            command.execute();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedAddressBook, actualModel.getAddressBook());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedFilteredList, actualModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show only the first person in the {@code model}\u0027s address book."
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void showFirstPersonOnly(Model model) {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson person \u003d model.getAddressBook().getPersonList().get(0);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        model.updateFilteredPersonList(new NameContainsKeywordsPredicate(Arrays.asList(person.getName().fullName)));"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model.getFilteredPersonList().size() \u003d\u003d 1;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Deletes the first person in {@code model}\u0027s filtered list from {@code model}\u0027s address book."
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void deleteFirstPerson(Model model) {"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson firstPerson \u003d model.getFilteredPersonList().get(0);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(firstPerson);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Person in filtered list must exist in model.\", pnfe);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 9,
      "CindyTsai1": 13,
      "April0616": 24,
      "-": 119
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/DeleteCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code DeleteCommand}."
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandTest {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d deleteCommand.generateSuccessfulResultMsgForPerson(deletePersonList);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validTagUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d Stream.of(new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(tagsToDelete);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArrayList\u003cTag\u003e arrayTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        arrayTags.addAll(tagsToDelete);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d DeleteCommand.generateResultMsgForTag(arrayTags);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.deleteTag(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidTagUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e wrongTag \u003d Stream.of(new Tag(\"nonexistent\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(wrongTag);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e someWrongTags \u003d Stream.of(new Tag(\"wrongtag\"), new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand2 \u003d prepareCommand(someWrongTags);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand2, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personToDelete \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(personToDelete);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d deleteCommand.generateSuccessfulResultMsgForPerson(deletePersonList);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.deletePerson(personToDelete);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showNoPerson(expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validTagFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e tagsToDelete \u003d Stream.of(new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(tagsToDelete);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ArrayList\u003cTag\u003e arrayTags \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        arrayTags.addAll(tagsToDelete);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d DeleteCommand.generateResultMsgForTag(arrayTags);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.deleteTag(new Tag(\"friends\"));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(deleteCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(outOfBoundIndex);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidTagFilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e wrongTag \u003d Stream.of(new Tag(\"nonexistent\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d prepareCommand(wrongTag);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e someWrongTags \u003d Stream.of(new Tag(\"wrongtag\"), new Tag(\"friends\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand2 \u003d prepareCommand(someWrongTags);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(deleteCommand2, model, Messages.MESSAGE_INVALID_TAG_PROVIDED);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommand \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteSecondCommand \u003d new DeleteCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommand));"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommandCopy \u003d new DeleteCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommand.equals(deleteFirstCommandCopy));"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(1));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommand \u003d\u003d null);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommand.equals(deleteSecondCommand));"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e firstSet \u003d Stream.of(new Tag(\"word\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e secondSet \u003d Stream.of(new Tag(\"other\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e thirdSet \u003d Stream.of(new Tag(\"multiple\"), new Tag(\"words\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommandTags \u003d new DeleteCommand(firstSet);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteSecondCommandTags \u003d new DeleteCommand(secondSet);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteThirdCommandTags \u003d new DeleteCommand(thirdSet);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommandTags.equals(deleteFirstCommandTags));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteFirstCommandTagCopy \u003d new DeleteCommand(firstSet);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(deleteFirstCommandTags.equals(deleteFirstCommandTagCopy));"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(1));"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags \u003d\u003d null);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different tag -\u003e returns false"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(deleteSecondCommandTags));"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(deleteFirstCommandTags.equals(deleteThirdCommandTags));"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns a {@code DeleteCommand} with the parameter {@code index}."
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(index);"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns a {@code DeleteCommand} with the parameter {@code tagSet}."
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private DeleteCommand prepareCommand(Set\u003cTag\u003e tagSet) {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        DeleteCommand deleteCommand \u003d new DeleteCommand(tagSet);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        deleteCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return deleteCommand;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assert model.getFilteredPersonList().isEmpty();"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 132,
      "April0616": 38,
      "-": 66
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.MESSAGE_NONEXISTENT_TAG;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.logic.commands.EditCommand.generateResultMsgForTag;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for EditCommand."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandTest {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_allFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(editedPerson).build();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, descriptor);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_unfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag oldTag \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d generateResultMsgForTag(oldTag, newTag);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_someFieldsSpecifiedUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        Index indexLastPerson \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson lastPerson \u003d model.getFilteredPersonList().get(indexLastPerson.getZeroBased());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonBuilder personInList \u003d new PersonBuilder(lastPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d personInList.withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(indexLastPerson, descriptor);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(lastPerson, editedPerson);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_noFieldSpecifiedUnfilteredList_success() {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new EditPersonDescriptor());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson editedPerson \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag oldTag \u003d new Tag(\"friends\");"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d generateResultMsgForTag(oldTag, newTag);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.editTag(oldTag, newTag);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(editCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonUnfilteredList_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        Person firstPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(firstPerson).build();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_SECOND_PERSON, descriptor);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_duplicatePersonFilteredList_failure() {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        // edit person in filtered list into a duplicate in address book"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personInList \u003d model.getAddressBook().getPersonList().get(INDEX_SECOND_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(INDEX_FIRST_PERSON,"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder(personInList).build());"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex, descriptor);"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_invalidTagUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag invalidTag \u003d new Tag(\"idontevenexistlolololol\");"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(invalidTag, newTag);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void executeForTags_invalidTagFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag invalidTag \u003d new Tag(\"idontevenexistlolololol\");"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Tag newTag \u003d new Tag(\"enemy\");"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(invalidTag, newTag);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(editCommand, model, MESSAGE_NONEXISTENT_TAG);"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Edit filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d prepareCommand(outOfBoundIndex,"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "                new EditPersonDescriptorBuilder().withName(VALID_NAME_BOB).build());"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(editCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "content": "    //@@author nbriannl-reused"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        final EditCommand standardCommand \u003d new EditCommand(INDEX_FIRST_PERSON, DESC_AMY);"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor copyDescriptor \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand commandWithSameValues \u003d new EditCommand(INDEX_FIRST_PERSON, copyDescriptor);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(commandWithSameValues));"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(standardCommand.equals(standardCommand));"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(null));"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_SECOND_PERSON, DESC_AMY)));"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        // different descriptor -\u003e returns false"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(standardCommand.equals(new EditCommand(INDEX_FIRST_PERSON, DESC_BOB)));"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        final EditCommand standardCommandForTags \u003d new EditCommand(new Tag(\"old\"), new Tag(\"new\"));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same value -\u003e return true"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(standardCommandForTags.equals(new EditCommand(new Tag(\"old\"), new Tag(\"new\"))));"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e return true"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(standardCommandForTags.equals(standardCommandForTags));"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e return false"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(null));"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e return false"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different old tag -\u003e return false"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"different\"), new Tag(\"new\"))));"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different new tag -\u003e return false"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"old\"), new Tag(\"different\"))));"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different everything -\u003e return false"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(standardCommandForTags.equals(new EditCommand(new Tag(\"absolutely\"), new Tag(\"different\"))));"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 263,
        "content": "    //@@author"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns an {@code EditCommand} for person with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommand prepareCommand(Index index, EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(index, descriptor);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns an {@code EditCommand} for tag with parameters {@code oldTag} and {@code newTag}"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private EditCommand prepareCommand(Tag oldTag, Tag newTag) {"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand editCommand \u003d new EditCommand(oldTag, newTag);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        editCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return editCommand;"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "zacharytang": 3,
      "CindyTsai1": 3,
      "nbriannl": 93,
      "April0616": 5,
      "-": 176
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/EditPersonDescriptorTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptorWithSameValues \u003d new EditPersonDescriptor(DESC_AMY);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(descriptorWithSameValues));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(DESC_AMY.equals(DESC_AMY));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(null));"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(5));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // different values -\u003e returns false"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(DESC_BOB));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        // different name -\u003e returns false"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different gender -\u003e returns false"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withGender(VALID_GENDER_BOB).build();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different matricNo -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withMatricNo(VALID_MATRIC_NO_BOB).build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        // different phone -\u003e returns false"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        // different email -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withEmail(VALID_EMAIL_BOB).build();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // different address -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        // different tags -\u003e returns false"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withTags(VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //different birthday -\u003e returns false"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        editedAmy \u003d new EditPersonDescriptorBuilder(DESC_AMY).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(DESC_AMY.equals(editedAmy));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 8,
      "April0616": 6,
      "-": 60
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/FindCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ELLE;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.FIONA;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.GEORGE;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code FindCommand}."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class FindCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e firstPredicate \u003d"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new ArrayList(Collections.singletonList(\"first\"));"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ArrayList\u003cString\u003e secondPredicate \u003d"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new ArrayList(Collections.singletonList(\"second\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand findFirstCommand \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand findSecondCommand \u003d new FindCommand(secondPredicate);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommand));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand findFirstCommandCopy \u003d new FindCommand(firstPredicate);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(findFirstCommand.equals(findFirstCommandCopy));"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(findFirstCommand.equals(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(findFirstCommand.equals(null));"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(findFirstCommand.equals(findSecondCommand));"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_zeroKeywords_noPersonFound() {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 0);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\" \");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Collections.emptyList());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singleNameKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 2);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"n/ Ku\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL, FIONA));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singlePhoneKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"p/ 94\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singleEmailKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"e/ anna\");"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(GEORGE));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singleAddressKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 3);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"a/ ave\");"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(ALICE, BENSON, ELLE));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singleTagKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"t/ money\");"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(BENSON));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_singleBirthdayKeywords_multiplePersonsFound() {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_PERSONS_LISTED_OVERVIEW, 1)"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + FindCommand.getMessageForMonthSearch(\"07\");"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d prepareCommand(\"b/ 07\");"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedMessage, Arrays.asList(CARL));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Parses {@code userInput} into a {@code FindCommand}."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private FindCommand prepareCommand(String parsedInput) {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand command \u003d"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new FindCommand(new ArrayList\u003cString\u003e(Arrays.asList(parsedInput.split(\"\\\\s+\"))));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return command;"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Asserts that {@code command} is successfully executed, and\u003cbr\u003e"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *     - the command feedback is equal to {@code expectedMessage}\u003cbr\u003e"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *     - the {@code FilteredList\u003cReadOnlyPerson\u003e} is equal to {@code expectedList}\u003cbr\u003e"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     *     - the {@code AddressBook} in model remains the same after executing the {@code command}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void assertCommandSuccess(FindCommand command, String expectedMessage, List\u003cReadOnlyPerson\u003e expectedList) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        AddressBook expectedAddressBook \u003d new AddressBook(model.getAddressBook());"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        CommandResult commandResult \u003d command.execute();"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedMessage, commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedList, model.getFilteredPersonList());"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedAddressBook, model.getAddressBook());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "CindyTsai1": 123,
      "nbriannl": 2,
      "-": 14
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/GMapsCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/**"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for {@code GMapsCommand}."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_SELECT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showMapOf(personToFind, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_throwsCommandException() throws Exception {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(gMapsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_SELECT_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showMapOf(personToFind, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_invalidIndexFilteredList_throwsCommandException() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(outOfBoundIndex, null);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(gMapsCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexValidAddressUnfilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showDirectionsTo(personToFind, address, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void execute_validIndexValidAddressFilteredList_success() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ReadOnlyPerson personToFind \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gMapsCommand \u003d prepareCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedMessage \u003d String.format(GMapsCommand.MESSAGE_DIRECTIONS_TO_PERSON_SUCCESS,"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                personToFind.getName());"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel.showDirectionsTo(personToFind, address, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showFirstPersonOnly(expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(gMapsCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void equals() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address1 \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address2 \u003d new Address(\"NTU\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndex \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithDiffIndex \u003d new GMapsCommand(INDEX_SECOND_PERSON, null);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexAndAddress \u003d new GMapsCommand(INDEX_FIRST_PERSON, address1);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexAndDiffAddress \u003d new GMapsCommand(INDEX_FIRST_PERSON, address2);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithDiffIndexAndDiffAddress \u003d new GMapsCommand(INDEX_SECOND_PERSON, address2);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(commandWithIndex.equals(commandWithIndex));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand commandWithIndexCopy \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertTrue(commandWithIndex.equals(commandWithIndexCopy));"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(1));"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex \u003d\u003d null);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // different index or address -\u003e returns false"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithDiffIndex));"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithIndexAndAddress));"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithIndexAndDiffAddress));"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertFalse(commandWithIndex.equals(commandWithDiffIndexAndDiffAddress));"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Returns a {@code GMapsCommand} with the parameter {@code index}, and {@code address}."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private GMapsCommand prepareCommand(Index index, Address address) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand gmapsCommand \u003d new GMapsCommand(index , address);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        gmapsCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        return gmapsCommand;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Updates {@code model}\u0027s filtered list to show no one."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void showNoPerson(Model model) {"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        model.updateFilteredPersonList(p -\u003e false);"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assert model.getFilteredPersonList().isEmpty();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 144,
      "-": 21
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/PhotoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Ignore;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTONAME_AMY;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "//import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTONAME_BOB;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoCommandTest {"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidLocalPhotoPath() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // blank photo path"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"\")); // empty string"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\" \")); // spaces only"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"photo.jpg\")); // missing disk part"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"c:photo.jpg\")); // missing backslash"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"d:photo.jpg\")); // missing backslash"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"c:\\\\\\\\photo.jpg\")); // too many backslashes"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"c:\\\\\")); // no file name"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"c:\\\\\")); // no file name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"d:\\\\my_photo.txt\"));  // invalid extension"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoCommand.isValidLocalPhotoPath(\"d:\\\\my_photo.pdf\"));  // invalid extension"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid photo path"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoCommand.isValidLocalPhotoPath(\"c:\\\\desktop\\\\baby.jpg\"));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoCommand.isValidLocalPhotoPath(\"d:\\\\myself.jpg\"));  //"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoCommand.isValidLocalPhotoPath(\"d:\\\\my_photo.jpg\"));  // underscore"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * This test cannot run on Travis CI."
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void equals() throws FileNotFoundException, IllegalValueException {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //File amyFile \u003d new File(VALID_PHOTONAME_AMY);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File amyFile \u003d new File(\"photo.jpg\");"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //File bobFile \u003d new File(VALID_PHOTONAME_BOB);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File bobFile \u003d new File(\"selfie.jpg\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "            amyFile.createNewFile();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "            bobFile.createNewFile();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "            System.err.println(\"Cannot create temporary files!\");"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String amyPath \u003d amyFile.getAbsolutePath();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String bobPath \u003d bobFile.getAbsolutePath();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.createTempFile(VALID_PHOTOPATH_AMY);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.createTempFile(VALID_PHOTOPATH_BOB);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand addFirstPersonPhotoPath \u003d new PhotoCommand(INDEX_FIRST_PERSON, amyPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand addSecondPersonPhotoPath \u003d new PhotoCommand(INDEX_SECOND_PERSON, bobPath);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonPhotoPath.equals(addFirstPersonPhotoPath));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand copy \u003d new PhotoCommand(addFirstPersonPhotoPath.getIndex(),"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "                addFirstPersonPhotoPath.getLocalPhotoPath());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonPhotoPath.equals(copy));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath.equals(1));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath \u003d\u003d null);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath.equals(addSecondPersonPhotoPath));"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.removeFileAndItsParentsTillRoot(VALID_PHOTOPATH_BOB);"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.removeFileAndItsParentsTillRoot(VALID_PHOTOPATH_AMY);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        amyFile.delete();"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        bobFile.delete();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 1,
      "April0616": 88,
      "-": 6
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/RemarkCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_CAP;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_COFFEE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.assertCommandSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "/**"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": " * Contains integration tests (interaction with the Model) and unit tests for RemarkCommand."
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": " */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandTest {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Model model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_addRemark_success() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()))"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withRemark(\"remark example\").build();"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ModelManager expectedModel \u003d new ModelManager(model.getAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_deleteRemark_success() throws Exception {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new Person(model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        editedPerson.setRemark(new Remark(\"\"));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_DELETE_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_filteredList_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson personInFilteredList \u003d model.getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased());"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder(personInFilteredList)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "               .withRemark(\"Some remark\").build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, editedPerson.getRemark());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(INDEX_FIRST_PERSON, new Remark(\"Some remark\"));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(RemarkCommand.MESSAGE_ADD_REMARK_SUCCESS, editedPerson);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d new ModelManager(new AddressBook(model.getAddressBook()), new UserPrefs());"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedModel.updatePerson(model.getFilteredPersonList().get(0), editedPerson);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(remarkCommand, model, expectedMessage, expectedModel);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_invalidPersonIndexUnfilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index outOfBoundIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Edits filtered list where index is larger than size of filtered list,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * but smaller than size of address book"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void execute_invalidPersonIndexFilteredList_failure() throws Exception {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index outOfBoundIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(outOfBoundIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d prepareCommand(outOfBoundIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(remarkCommand, model, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addFirstPersonCoffeeRemark \u003d new RemarkCommand(INDEX_FIRST_PERSON, REMARK_COFFEE);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addFirstPersonCapRemark \u003d new RemarkCommand(INDEX_FIRST_PERSON, REMARK_CAP);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand addSecondPersonCoffeeRemark \u003d new RemarkCommand(INDEX_SECOND_PERSON, REMARK_COFFEE);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonCoffeeRemark.equals(addFirstPersonCoffeeRemark));"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonCapRemark.equals(addFirstPersonCapRemark));"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCapRemark \u003d\u003d null);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different index -\u003e returns false"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCoffeeRemark.equals(addSecondPersonCoffeeRemark));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonCoffeeRemark.equals(new ClearCommand()));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Returns an {@code RemarkCommand} with parameters {@code index} and {@code descriptor}"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private RemarkCommand prepareCommand(Index index, Remark remark) {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand remarkCommand \u003d new RemarkCommand(index, remark);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        remarkCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return remarkCommand;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 123,
      "-": 16
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SelectCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.showFirstPersonOnly;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.JumpToListRequestEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.CommandHistory;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.UndoRedoStack;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.UserPrefs;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.testutil.EventsCollectorRule;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SelectCommand}."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    public final EventsCollectorRule eventsCollectorRule \u003d new EventsCollectorRule();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private Model model;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        model \u003d new ModelManager(getTypicalAddressBook(), new UserPrefs());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexUnfilteredList_success() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexUnfilteredList_failure() {"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased(model.getFilteredPersonList().size() + 1);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_validIndexFilteredList_success() {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionSuccess(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    public void execute_invalidIndexFilteredList_failure() {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        showFirstPersonOnly(model);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // ensures that outOfBoundIndex is still in bounds of address book list"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(outOfBoundsIndex.getZeroBased() \u003c model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        assertExecutionFailure(outOfBoundsIndex, Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommand \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectSecondCommand \u003d new SelectCommand(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommand));"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectFirstCommandCopy \u003d new SelectCommand(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(selectFirstCommand.equals(selectFirstCommandCopy));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(1));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(null));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(selectFirstCommand.equals(selectSecondCommand));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that {@code JumpToListRequestEvent}"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * is raised with the correct index."
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionSuccess(Index index) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d prepareCommand(index);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "            CommandResult commandResult \u003d selectCommand.execute();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(String.format(SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS, index.getOneBased()),"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "                    commandResult.feedbackToUser);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"Execution of command should not fail.\", ce);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        JumpToListRequestEvent lastEvent \u003d (JumpToListRequestEvent) eventsCollectorRule.eventsCollector.getMostRecent();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(index, Index.fromZeroBased(lastEvent.targetIndex));"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Executes a {@code SelectCommand} with the given {@code index}, and checks that a {@code CommandException}"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     * is thrown with the {@code expectedMessage}."
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertExecutionFailure(Index index, String expectedMessage) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d prepareCommand(index);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "            selectCommand.execute();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (CommandException ce) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(expectedMessage, ce.getMessage());"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            assertTrue(eventsCollectorRule.eventsCollector.isEmpty());"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns a {@code SelectCommand} with parameters {@code index}."
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    private SelectCommand prepareCommand(Index index) {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand selectCommand \u003d new SelectCommand(index);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        selectCommand.setData(model, new CommandHistory(), new UndoRedoStack());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        return selectCommand;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "-": 137
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/commands/SuggestCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "/**"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " * Contains integration tests (interaction with the Model) for {@code SuggestCommand}."
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": " */"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void execute_suggest_success() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String command \u003d \"edit\";"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, command);"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // assert that suggest command is executed"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            new SuggestCommand(command).execute();"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 22,
      "-": 8
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandParserTest {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private AddCommandParser parser \u003d new AddCommandParser();"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsPresent_success() {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple names - last name accepted"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // multiple genders - last gender accepted"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // multiple matric numbers - last matric number accepted"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_AMY + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple phones - last phone accepted"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple emails - last email accepted"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple addresses - last address accepted"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "                new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // multiple birthdays - last birthday accepted"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_AMY + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_FRIEND, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple tags - all accepted"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPersonMultipleTags \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_BOB)"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTimetable(VALID_TIMETABLE_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND).build();"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "                new AddCommand(expectedPersonMultipleTags));"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_optionalFieldsMissing_success() {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // zero tags"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person expectedPerson \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withEmail(VALID_EMAIL_AMY).withBirthday(VALID_BIRTHDAY_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTimetable(VALID_TIMETABLE_AMY).withTags().build();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY, new AddCommand(expectedPerson));"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_compulsoryFieldMissing_failure() {"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing name prefix"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, expectedMessage);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "content": "        //@@author zacharytang-unused"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // missing timetable prefix (timetable prefix is now an optional field)"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /*assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + VALID_TIMETABLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "content": "        //@@author CindyTsai1-unused"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // missing birthday prefix (birthday prefix is now an optional field"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_BIRTHDAY_BOB + TIMETABLE_DESC_BOB, expectedMessage);*/"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "content": "        //@@author"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        // all prefixes missing"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + VALID_NAME_BOB + VALID_GENDER_BOB"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_MATRIC_NO_BOB + VALID_PHONE_BOB + VALID_EMAIL_BOB + VALID_ADDRESS_BOB"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_BIRTHDAY_BOB + VALID_TIMETABLE_BOB, expectedMessage);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid name"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + INVALID_GENDER_DESC"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid matricNo"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_MATRIC_NO_DESC + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + INVALID_PHONE_DESC + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid email"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author zacharytang"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid timetable"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + INVALID_TIMETABLE_DESC + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid tag"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB + INVALID_TAG_DESC + VALID_TAG_FRIEND,"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // invalid birthday"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_BIRTHDAY_DESC + TIMETABLE_DESC_BOB + TAG_DESC_HUSBAND + TAG_DESC_FRIEND,"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        // two invalid values, only first invalid value reported"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + INVALID_EMAIL_DESC"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_BOB, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 3,
      "zacharytang": 17,
      "CindyTsai1": 63,
      "April0616": 63,
      "-": 84
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/AddressBookParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "/*package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHOTO;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TestUtil.createTempFile;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TestUtil.removeAppFile;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TestUtil.removeFileAndItsParentsTillRoot;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ExitCommand;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HelpCommand;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.HistoryCommand;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.NameContainsKeywordsPredicate;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookParserTest {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBookParser parser \u003d new AddressBookParser();"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_add() throws Exception {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(PersonUtil.getAddCommand(person));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_clear() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD) instanceof ClearCommand);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_WORD + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_delete() throws Exception {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_edit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseCommand_remark() throws Exception {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final Remark remark \u003d new Remark(\"Likes to drink tea.\");"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand command \u003d (RemarkCommand) parser.parseCommand(RemarkCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_REMARK + \" \" + remark.value);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(new RemarkCommand(INDEX_FIRST_PERSON, remark), command);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseCommand_photo() throws Exception {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final String photoPath \u003d createTempFile();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand command \u003d (PhotoCommand) parser.parseCommand(PhotoCommand.COMMAND_WORD + \" \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PREFIX_PHOTO + \" \" + photoPath);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String commandAppPath \u003d command.getAppPhotoPath();"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand newCommand \u003d new PhotoCommand(INDEX_FIRST_PERSON, photoPath);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String newCommandAppPath \u003d newCommand.getAppPhotoPath();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(newCommand, command);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Path thisPhotoPath \u003d Paths.get(photoPath);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeFileAndItsParentsTillRoot(thisPhotoPath);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //remove the two temporary files saved in the app"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeAppFile(commandAppPath);"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeAppFile(newCommandAppPath);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_exit() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD) instanceof ExitCommand);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_WORD + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_find() throws Exception {"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "                FindCommand.COMMAND_WORD + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_help() throws Exception {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD) instanceof HelpCommand);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HelpCommand.COMMAND_WORD + \" 3\") instanceof HelpCommand);"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_history() throws Exception {"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_WORD + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_list() throws Exception {"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD) instanceof ListCommand);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_WORD + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_select() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "                SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "content": "    //@@author zacharytang-reused"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_add() throws Exception {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                                    + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_clear() throws Exception {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS) instanceof ClearCommand);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_ALIAS + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_delete() throws Exception {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                DeleteCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_edit() throws Exception {"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_ALIAS + \" \""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_exit() throws Exception {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS) instanceof ExitCommand);"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_ALIAS + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_find() throws Exception {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                FindCommand.COMMAND_ALIAS + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_history() throws Exception {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_ALIAS + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_list() throws Exception {"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS) instanceof ListCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_ALIAS + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandAlias_select() throws Exception {"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_add() throws Exception {"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        AddCommand command \u003d (AddCommand) parser.parseCommand(AddCommand.COMMAND_SECONDARY + \" \""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                                                + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new AddCommand(person), command);"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_clear() throws Exception {"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SECONDARY) instanceof ClearCommand);"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ClearCommand.COMMAND_SECONDARY + \" 3\") instanceof ClearCommand);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_delete() throws Exception {"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        DeleteCommand command \u003d (DeleteCommand) parser.parseCommand("
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                DeleteCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new DeleteCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryOne_edit() throws Exception {"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_SECONDARY_ONE + \" \""
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryTwo_edit() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder(person).build();"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        EditCommand command \u003d (EditCommand) parser.parseCommand(EditCommand.COMMAND_SECONDARY_TWO + \" \""
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "                + INDEX_FIRST_PERSON.getOneBased() + \" \" + PersonUtil.getPersonDetails(person));"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new EditCommand(INDEX_FIRST_PERSON, descriptor), command);"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_exit() throws Exception {"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_SECONDARY) instanceof ExitCommand);"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ExitCommand.COMMAND_SECONDARY + \" 3\") instanceof ExitCommand);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_find() throws Exception {"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e keywords \u003d Arrays.asList(\"foo\", \"bar\", \"baz\");"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        FindCommand command \u003d (FindCommand) parser.parseCommand("
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                FindCommand.COMMAND_SECONDARY + \" \" + keywords.stream().collect(Collectors.joining(\" \")));"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new FindCommand(new NameContainsKeywordsPredicate(keywords)), command);"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_history() throws Exception {"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SECONDARY) instanceof HistoryCommand);"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(HistoryCommand.COMMAND_SECONDARY + \" 3\") instanceof HistoryCommand);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "            parser.parseCommand(\"histories\");"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "            fail(\"The expected ParseException was not thrown.\");"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (ParseException pe) {"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, pe.getMessage());"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryOne_list() throws Exception {"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_ONE) instanceof ListCommand);"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_ONE + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondaryTwo_list() throws Exception {"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_TWO) instanceof ListCommand);"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(parser.parseCommand(ListCommand.COMMAND_SECONDARY_TWO + \" 3\") instanceof ListCommand);"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseCommandSecondary_select() throws Exception {"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": "        SelectCommand command \u003d (SelectCommand) parser.parseCommand("
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                SelectCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased());"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(new SelectCommand(INDEX_FIRST_PERSON), command);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 317,
        "content": "    //@@author"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_redoCommandWord_returnsRedoCommand() throws Exception {"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(RedoCommand.COMMAND_WORD) instanceof RedoCommand);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"redo 1\") instanceof RedoCommand);"
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_undoCommandWord_returnsUndoCommand() throws Exception {"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(UndoCommand.COMMAND_WORD) instanceof UndoCommand);"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(parser.parseCommand(\"undo 3\") instanceof UndoCommand);"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unrecognisedInput_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(String.format(MESSAGE_INVALID_COMMAND_FORMAT, HelpCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"\");"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseCommand_unknownCommand_throwsParseException() throws Exception {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(ParseException.class);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "        parser.parseCommand(\"unknownCommand\");"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "*/"
      }
    ],
    "authorContributionMap": {
      "null": 2,
      "zacharytang": 73,
      "nbriannl": 2,
      "April0616": 55,
      "-": 212
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/DeleteCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Collectors;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.stream.Stream;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * As we are only doing white-box testing, our test cases do not cover path variations"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " * outside of the DeleteCommand code. For example, inputs \"1\" and \"1 abc\" take the"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": " * same path through the DeleteCommand, and therefore we test only one of them."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": " * The path variation for those two cases occur inside the ParserUtil, and"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": " * therefore should be covered by the ParserUtilTest."
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandParserTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    private DeleteCommandParser parser \u003d new DeleteCommandParser();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsOnePerson_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersons_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1, 2, 3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsNoWhiteSpace_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1,3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsDuplicatedIndexes_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"1, 1, 3, 3\", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsManyWhiteSpaces_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"  1  ,  2  , 3 \", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_validArgsMultiplePersonsSplitByWhiteSpace_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, \"  1 2 3 \", new DeleteCommand(deletePersonList));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_invalidArgsMultiplePersonsManyWhiteSpacesLessComma_returnsDeleteCommand() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cIndex\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_SECOND_PERSON);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(INDEX_THIRD_PERSON);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"  1, 2 3 \","
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validArgsTag_returnsDeleteCommand() throws Exception {"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d Stream.of(new Tag(\"tag\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" t/tag\", new DeleteCommand(expectedTagSet));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet2 \u003d Stream.of(new Tag(\"tag\"), new Tag(\"tags\")).collect(Collectors.toSet());"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" t/tag t/tags\", new DeleteCommand(expectedTagSet2));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidArgsTag_failure() throws Exception {"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/*\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/tag t/*\","
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" t/* t/*\","
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"a\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"0\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"0, -1\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"-1, -2, -3\", String.format(MESSAGE_INVALID_COMMAND_FORMAT,"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "                DeleteCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 29,
      "April0616": 73,
      "-": 27
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/EditCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.EditPersonDescriptorBuilder;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandParserTest {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String TAG_EMPTY \u003d \" \" + PREFIX_TAG;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditCommandParser parser \u003d new EditCommandParser();"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, VALID_NAME_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        // no field specified"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\", EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // no index and no field specified"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /** Only Edit Command on a Person considers the preamble."
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     *  The preamble is the text before the first valid prefix, which in this case, is the index."
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidPreamble_failure() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // negative index"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"-5\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // zero index"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"0\" + NAME_DESC_AMY, MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid arguments being parsed as preamble"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 some random string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid prefix being parsed as preamble"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1 i/ string\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValue_failure() {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC, Name.MESSAGE_NAME_CONSTRAINTS); // invalid name"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS); // invalid phone"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_MATRIC_NO_DESC, MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid matricNo"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_EMAIL_DESC, Email.MESSAGE_EMAIL_CONSTRAINTS); // invalid email"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_TAG_DESC, Tag.MESSAGE_TAG_CONSTRAINTS); // invalid tag"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS); // invalid birthday"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone followed by valid email"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_PHONE_DESC + EMAIL_DESC_AMY, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid gender followed by valid matricNo"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_GENDER_DESC + MATRIC_NO_DESC_AMY, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid gender followed by invalid gender"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + GENDER_DESC_BOB + INVALID_GENDER_DESC, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid matricNo followed by invalid matricNo"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + MATRIC_NO_DESC_BOB + INVALID_MATRIC_NO_DESC,"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        // valid phone followed by invalid phone. The test case for invalid phone followed by valid phone"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        // is tested at {@code parse_invalidValueFollowedByValidValue_success()}"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + PHONE_DESC_BOB + INVALID_PHONE_DESC, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        // while parsing {@code PREFIX_TAG} alone will reset the tags of the {@code Person} being edited,"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        // parsing it together with a valid tag results in error"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + TAG_EMPTY, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_DESC_FRIEND + TAG_EMPTY + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"1\" + TAG_EMPTY + TAG_DESC_FRIEND + TAG_DESC_HUSBAND, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        // multiple invalid values, but only the first invalid value is captured"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, \"1\" + INVALID_NAME_DESC + INVALID_GENDER_DESC + INVALID_MATRIC_NO_DESC"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                        + INVALID_EMAIL_DESC + VALID_ADDRESS_AMY"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + VALID_PHONE_AMY + INVALID_BIRTHDAY_DESC, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@aauthor nbriannl"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parseTagEdit_invalidValue_failure() {"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ new/\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ok new/\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/ new/ok\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/* new/*\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \" old/* new/ok\", Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parseTagEdit_validValue_sucess() throws Exception {"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(new Tag(\"old\"), new Tag(\"new\"));"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" old/old new/new \", expectedCommand);"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@aauthor"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_allFieldsSpecified_success() {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + PHONE_DESC_BOB + TAG_DESC_HUSBAND"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + GENDER_DESC_AMY + ADDRESS_DESC_AMY + NAME_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_BOB + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withGender(VALID_GENDER_AMY).withMatricNo(VALID_MATRIC_NO_BOB)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_someFieldsSpecified_success() {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY + PHONE_DESC_BOB + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_oneFieldSpecified_success() {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "        // name"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + NAME_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withName(VALID_NAME_AMY).build();"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // gender"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_AMY).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // matricNo"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withMatricNo(VALID_MATRIC_NO_AMY).build();"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        // phone"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_AMY).build();"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "        // email"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withEmail(VALID_EMAIL_AMY).build();"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        // address"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withAddress(VALID_ADDRESS_AMY).build();"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        // tags"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // birthday"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withBirthday(VALID_BIRTHDAY_AMY).build();"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_multipleRepeatedFields_acceptsLast() {"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased()  + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + PHONE_DESC_AMY + BIRTHDAY_DESC_AMY"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + TAG_DESC_FRIEND + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + PHONE_DESC_AMY + ADDRESS_DESC_AMY + EMAIL_DESC_AMY + TAG_DESC_FRIEND"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + ADDRESS_DESC_BOB + BIRTHDAY_DESC_BOB"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "April0616"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTags(VALID_TAG_FRIEND, VALID_TAG_HUSBAND)"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_invalidValueFollowedByValidValue_success() {"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        // no other valid values specified"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + INVALID_PHONE_DESC + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withPhone(VALID_PHONE_BOB).build();"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        // other valid values specified"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + GENDER_DESC_BOB + EMAIL_DESC_BOB + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + ADDRESS_DESC_BOB + PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor \u003d new EditPersonDescriptorBuilder().withGender(VALID_GENDER_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).build();"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_resetTags_success() {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        Index targetIndex \u003d INDEX_THIRD_PERSON;"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + TAG_EMPTY;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "        EditPersonDescriptor descriptor \u003d new EditPersonDescriptorBuilder().withTags().build();"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "        EditCommand expectedCommand \u003d new EditCommand(targetIndex, descriptor);"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 5,
      "CindyTsai1": 30,
      "nbriannl": 19,
      "April0616": 49,
      "-": 189
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/FindCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class FindCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private FindCommandParser parser \u003d new FindCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parse_emptyArg_throwsParseException() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        assertParseFailure(parser, \"     \", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_validArgs_returnsFindCommand() {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // no leading and trailing whitespaces"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        FindCommand expectedFindCommand \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                new FindCommand(new ArrayList\u003cString\u003e(Arrays.asList(\"n/\", \"li a\")));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \" n/li a\", expectedFindCommand);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // multiple whitespaces between keywords"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \" n/ \\n li a  \\t\", expectedFindCommand);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_invalidArgs_throwsParseException() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //birthday month is out of bound"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \" b/15\", String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONEXIST, \"15\"));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //birthday month is a single digit"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \" b/1\", String.format(FindCommand.MESSAGE_BIRTHDAYKEYWORD_INVALID, \"1\"));"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //birthday month is not integer"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \" b/abc\", FindCommand.MESSAGE_BIRTHDAYKEYWORD_NONNUMBER);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_noPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \"abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_wrongPrefix_throwsParseException() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseFailure(parser, \" tt/abc\", String.format(MESSAGE_INVALID_COMMAND_FORMAT, FindCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 36,
      "-": 20
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/GMapsCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.GMapsCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "//@@author nbriannl"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class GMapsCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private static final String MESSAGE_INVALID_FORMAT \u003d"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "            String.format(MESSAGE_INVALID_COMMAND_FORMAT, GMapsCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private GMapsCommandParser parser \u003d new GMapsCommandParser();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndex_failure() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndexValidAddress_failure() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1 a/NUS\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidIndexInvalidAddress_failure() {"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // wrong index"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"-1 a/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_missingParts_failure() {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"a/\", MESSAGE_INVALID_FORMAT);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_invalidAddress_failure() {"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // no index specified"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseFailure(parser, \"1 a/\", Address.MESSAGE_ADDRESS_CONSTRAINTS);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validValueWithoutAddress_success() throws Exception {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand expectedCommand \u003d new GMapsCommand(INDEX_FIRST_PERSON, null);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" 1\", expectedCommand);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void parse_validValueWithAddress_success() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Address address \u003d new Address(\"NUS\");"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        GMapsCommand expectedCommand \u003d new GMapsCommand(INDEX_FIRST_PERSON, address);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertParseSuccess(parser, \" 1 a/NUS\", expectedCommand);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "nbriannl": 55,
      "-": 9
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/ParserUtilTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.ParserUtil.MESSAGE_INVALID_INDEX;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.HashSet;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "public class ParserUtilTest {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_NAME \u003d \"R@chel\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_GENDER \u003d \"hello\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String INVALID_MATRIC_NO \u003d \"45663445K\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_PHONE \u003d \"+651234\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_ADDRESS \u003d \" \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_EMAIL \u003d \"example.com\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_TIMETABLE \u003d \"https://www.google.com\";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String INVALID_TAG \u003d \"#friend\";"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_NAME \u003d \"Rachel Walker\";"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String VALID_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String VALID_MATRIC_NO \u003d \"A0162533K\";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_PHONE \u003d \"123456\";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_ADDRESS \u003d \"123 Main Street #0505\";"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_EMAIL \u003d \"rachel@example.com\";"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIMETABLE \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static final String VALID_BIRTHDAY \u003d \"21061997\";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_1 \u003d \"friend\";"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String VALID_TAG_2 \u003d \"neighbour\";"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_invalidInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(\"10 a\");"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_outOfRangeInput_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_INDEX);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseIndex(Long.toString(Integer.MAX_VALUE + 1));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseIndex_validInput_success() throws Exception {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        // No whitespaces"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"1\"));"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        // Leading and trailing whitespaces"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(INDEX_FIRST_PERSON, ParserUtil.parseIndex(\"  1  \"));"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseName(null);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseName(Optional.of(INVALID_NAME));"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseName(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseName_validValue_returnsName() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        Name expectedName \u003d new Name(VALID_NAME);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cName\u003e actualName \u003d ParserUtil.parseName(Optional.of(VALID_NAME));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedName, actualName.get());"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseGender(null);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseGender(Optional.of(INVALID_GENDER));"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(ParserUtil.parseGender(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseGender_validValue_returnsGender() throws Exception {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Gender expectedGender \u003d new Gender(VALID_GENDER);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Optional\u003cGender\u003e actualGender \u003d ParserUtil.parseGender(Optional.of(VALID_GENDER));"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedGender, actualGender.get());"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseMatricNo(null);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ParserUtil.parseMatricNo(Optional.of(INVALID_MATRIC_NO));"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(ParserUtil.parseMatricNo(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parseMatricNo_validValue_returnsMatricNo() throws Exception {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "        MatricNo expectedMatricNo \u003d new MatricNo(VALID_MATRIC_NO);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Optional\u003cMatricNo\u003e actualMatricNo \u003d ParserUtil.parseMatricNo(Optional.of(VALID_MATRIC_NO));"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertEquals(expectedMatricNo, actualMatricNo.get());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parsePhone(null);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parsePhone(Optional.of(INVALID_PHONE));"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parsePhone(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parsePhone_validValue_returnsPhone() throws Exception {"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        Phone expectedPhone \u003d new Phone(VALID_PHONE);"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cPhone\u003e actualPhone \u003d ParserUtil.parsePhone(Optional.of(VALID_PHONE));"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedPhone, actualPhone.get());"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseAddress(null);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseAddress(Optional.of(INVALID_ADDRESS));"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseAddress(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseAddress_validValue_returnsAddress() throws Exception {"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "        Address expectedAddress \u003d new Address(VALID_ADDRESS);"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cAddress\u003e actualAddress \u003d ParserUtil.parseAddress(Optional.of(VALID_ADDRESS));"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedAddress, actualAddress.get());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseEmail(null);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseEmail(Optional.of(INVALID_EMAIL));"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(ParserUtil.parseEmail(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseEmail_validValue_returnsEmail() throws Exception {"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        Email expectedEmail \u003d new Email(VALID_EMAIL);"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        Optional\u003cEmail\u003e actualEmail \u003d ParserUtil.parseEmail(Optional.of(VALID_EMAIL));"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedEmail, actualEmail.get());"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author zacharytang"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ParserUtil.parseTimetable(null);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ParserUtil.parseTimetable(Optional.of(INVALID_TIMETABLE));"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(ParserUtil.parseTimetable(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void parseTimetable_validValue_returnsTimetable() throws Exception {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable expectedTimetable \u003d new Timetable(VALID_TIMETABLE);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Optional\u003cTimetable\u003e actualTimetable \u003d ParserUtil.parseTimetable(Optional.of(VALID_TIMETABLE));"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedTimetable, actualTimetable.get());"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parseBirthday_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ParserUtil.parseBirthday(null);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parseBirthday_invalidValue_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ParserUtil.parseBirthday(Optional.of(INVALID_TIMETABLE));"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parseBirthday_optionalEmpty_returnsOptionalEmpty() throws Exception {"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(ParserUtil.parseBirthday(Optional.empty()).isPresent());"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parseBirthday_validValue_returnsTimetable() throws Exception {"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        Birthday expectedBirthday \u003d new Birthday(VALID_BIRTHDAY);"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        Optional\u003cBirthday\u003e actualBirthday \u003d ParserUtil.parseBirthday(Optional.of(VALID_BIRTHDAY));"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertEquals(expectedBirthday, actualBirthday.get());"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_null_throwsNullPointerException() throws Exception {"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(null);"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithInvalidTags_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "        ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, INVALID_TAG));"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_emptyCollection_returnsEmptySet() throws Exception {"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(ParserUtil.parseTags(Collections.emptyList()).isEmpty());"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "    public void parseTags_collectionWithValidTags_returnsTagSet() throws Exception {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e actualTagSet \u003d ParserUtil.parseTags(Arrays.asList(VALID_TAG_1, VALID_TAG_2));"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "        Set\u003cTag\u003e expectedTagSet \u003d new HashSet\u003cTag\u003e(Arrays.asList(new Tag(VALID_TAG_1), new Tag(VALID_TAG_2)));"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedTagSet, actualTagSet);"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 30,
      "CindyTsai1": 29,
      "April0616": 59,
      "-": 188
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/RemarkCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.REMARK_COFFEE;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_REMARK_COFFEE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_REMARK;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseFailure;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CommandParserTestUtil.assertParseSuccess;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.RemarkCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkCommandParserTest {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static final String REMARK_EMPTY \u003d \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private RemarkCommandParser parser \u003d new RemarkCommandParser();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_remarkSpecified_success() {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Index targetIndex \u003d INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //have remarks"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String userInput \u003d targetIndex.getOneBased() + REMARK_EMPTY + VALID_REMARK_COFFEE;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        RemarkCommand expectedCommand \u003d new RemarkCommand(targetIndex, REMARK_COFFEE);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //no remarks"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        userInput \u003d targetIndex.getOneBased() + \" \" + PREFIX_REMARK;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedCommand \u003d new RemarkCommand(targetIndex, new Remark(\"\"));"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseSuccess(parser, userInput, expectedCommand);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void parse_noFieldSpecified_failure() throws Exception {"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_INVALID_COMMAND_FORMAT, RemarkCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertParseFailure(parser, RemarkCommand.COMMAND_WORD, expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 40,
      "-": 3
    }
  },
  {
    "path": "src/test/java/seedu/address/logic/parser/SuggestCommandParserTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.logic.parser;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.fail;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_UNKNOWN_COMMAND;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.SuggestCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.exceptions.CommandException;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.exceptions.ParseException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class SuggestCommandParserTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private SuggestCommandParser parser \u003d new SuggestCommandParser();"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_validCommand_returnsSuggestCommand() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String expectedMessage \u003d String.format(MESSAGE_SUCCESS, \"edit\");"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character at the back of the commandWord"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"editt\", expectedMessage);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character at the front of the commandWord"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"eedit\", expectedMessage);"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //extra character in the middle of the commandWord"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"ediit\", expectedMessage);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character at the back of the commandWord"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edi\", expectedMessage);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character at the front of the commandWord"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"dit\", expectedMessage);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //missing character in the middle of the commandWord"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edt\", expectedMessage);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character in the middle of the commandWord"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"eidt\", expectedMessage);"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character at the back of the commandWord"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edti\", expectedMessage);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //swapping character at the front of the commandWord"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"deit\", expectedMessage);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character in the middle of the commandWord"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edet\", expectedMessage);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character at the back of the commandWord"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"edip\", expectedMessage);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //wrong character at the front of the commandWord"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"adit\", expectedMessage);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void parse_invalidCommand_returnsfailure() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //suggested command not found"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertParseSuccess(parser, \"amend\", MESSAGE_UNKNOWN_COMMAND);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Asserts that the parsing of {@code command} by {@code parser} is successful and the command created"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * equals to {@code expectedCommand}."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static void assertParseSuccess(Parser parser, String command, String expectedMessage) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            parser.parse(command).execute();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            fail(\"The expected CommandException was not thrown.\");"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (CommandException e) {"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            assertEquals(expectedMessage, e.getMessage());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (ParseException e) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            assertEquals(MESSAGE_UNKNOWN_COMMAND, e.getMessage());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 72,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/AddressBookTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalAddressBook;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collection;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.FXCollections;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.collections.ObservableList;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressBookTest {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    public ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private final AddressBook addressBook \u003d new AddressBook();"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    public void constructor() {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getPersonList());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Collections.emptyList(), addressBook.getTagList());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_null_throwsNullPointerException() {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(NullPointerException.class);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(null);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withValidReadOnlyAddressBook_replacesData() {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook newData \u003d getTypicalAddressBook();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(newData, addressBook);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public void resetData_withDuplicatePersons_throwsAssertionError() {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        // Repeat ALICE twice"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cPerson\u003e newPersons \u003d Arrays.asList(new Person(ALICE), new Person(ALICE));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cTag\u003e newTags \u003d new ArrayList\u003c\u003e(ALICE.getTags());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBookStub newData \u003d new AddressBookStub(newPersons, newTags);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(AssertionError.class);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.resetData(newData);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getPersonList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getPersonList().remove(0);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    public void getTagList_modifyList_throwsUnsupportedOperationException() {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        thrown.expect(UnsupportedOperationException.class);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        addressBook.getTagList().remove(0);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * A stub ReadOnlyAddressBook whose persons and tags lists can violate interface constraints."
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private static class AddressBookStub implements ReadOnlyAddressBook {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private final ObservableList\u003cReadOnlyPerson\u003e persons \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private final ObservableList\u003cTag\u003e tags \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "        private final ObservableList\u003cPhotoPath\u003e photoPaths \u003d FXCollections.observableArrayList();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        AddressBookStub(Collection\u003c? extends ReadOnlyPerson\u003e persons, Collection\u003c? extends Tag\u003e tags) {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.persons.setAll(persons);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.tags.setAll(tags);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public ObservableList\u003cReadOnlyPerson\u003e getPersonList() {"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return persons;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public ObservableList\u003cTag\u003e getTagList() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return tags;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "        @Override"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "        public ObservableList\u003cPhotoPath\u003e getPhotoPathList() {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return photoPaths;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 32,
      "-": 71
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/AddressTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddressTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidAddress() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid addresses"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Address.isValidAddress(\" \")); // spaces only"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // valid addresses/ empty when optional"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Address.isValidAddress(\"\")); // empty string"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Blk 456, Den Road, #01-355\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"-\")); // one character"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Address.isValidAddress(\"Leng Inc; 1234 Market St; San Francisco CA 2349879; USA\")); // long address"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 19
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/BirthdayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "//@@author CindyTsai1"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "public class BirthdayTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public void isValidBirthday() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // invalid birthdays"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\" \")); // spaces only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"1324\")); // less than 8 digits"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"dgd\")); // non-numeric"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"23/05/1997\")); // invalid slash"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"23 05 1997\")); // invalid space"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"99999999\")); //invalid dates"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertFalse(Birthday.isValidBirthday(\"00000000\")); //invalid dates"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // valid birthdays/ empty when optional"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Birthday.isValidBirthday(\"23051997\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 19,
      "-": 7
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/EmailTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class EmailTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidEmail() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // blank email"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\" \")); // spaces only"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        // missing parts"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"@example.com\")); // missing local part"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjackexample.com\")); // missing \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@\")); // missing domain name"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid parts"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"-@example.com\")); // invalid local part"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@-\")); // invalid domain name"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter jack@example.com\")); // spaces in local part"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@exam ple.com\")); // spaces in domain name"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@@example.com\")); // double \u0027@\u0027 symbol"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peter@jack@example.com\")); // \u0027@\u0027 symbol in local part"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Email.isValidEmail(\"peterjack@example@com\")); // \u0027@\u0027 symbol in domain name"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // valid email/ empty when optional"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Email.isValidEmail(\"\")); // empty string"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"PeterJack_1190@example.com\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a@b\"));  // minimal"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"test@localhost\"));   // alphabets only"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"123@145\"));  // numeric local part and domain name"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"a1@example1.com\"));  // mixture of alphanumeric and dot characters"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"_user_@_e_x_a_m_p_l_e_.com_\"));    // underscores"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"peter_jack@very_very_very_long_example.com\"));   // long domain name"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Email.isValidEmail(\"if.you.dream.it_you.can.do.it@example.com\"));    // long local part"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/GenderTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class GenderTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidGender() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid Gender"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidInput(\" \")); // spaces only"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidInput(\"^\")); // only non-alphanumeric characters"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidInput(\"peter*\")); // contains non-alphanumeric characters"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidInput(\"apple\")); // unrelated description"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(Gender.isValidInput(\"fmale\")); // wrong input"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid Gender"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"\")); // empty string when unspecified"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"m\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"f\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"male\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"female\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"MALE\"));"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"FEMALE\"));"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"mAlE\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"FemALE\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"Male\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(Gender.isValidInput(\"Female\"));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 32,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/MatricNoTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class MatricNoTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidMatricNo() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid MatricNo numbers"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\" \")); // spaces only"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A016253K\")); // not exactly 9-digit"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"40162533J\")); // not start with \u0027A\u0027 but a number"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"B0162533J\")); // not start with \u0027A\u0027 but a letter"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A90p3041F\")); // alphabets within 2nd-8th digits"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A014 2333H\")); // spaces within digits"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(MatricNo.isValidMatricNo(\"A01423332\")); // not end with a letter"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid MatricNo numbers/ empty when optional"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"\")); // empty string"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0172631H\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0112331K\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"a0172631h\")); //case-insensitive"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"A0172631h\")); //case-insensitive"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(MatricNo.isValidMatricNo(\"a0172631H\")); //case-insensitive"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 28,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/NameContainsKeywordsPredicateTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Collections;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class NameContainsKeywordsPredicateTest {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e firstPredicateKeywordList \u003d Collections.singletonList(\"first\");"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        List\u003cString\u003e secondPredicateKeywordList \u003d Arrays.asList(\"first\", \"second\");"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicate \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate secondPredicate \u003d new NameContainsKeywordsPredicate(secondPredicateKeywordList);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicate));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        // same values -\u003e returns true"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate firstPredicateCopy \u003d new NameContainsKeywordsPredicate(firstPredicateKeywordList);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(firstPredicate.equals(firstPredicateCopy));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(1));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(null));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        // different person -\u003e returns false"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(firstPredicate.equals(secondPredicate));"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameContainsKeywords_returnsTrue() {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        // One keyword"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.singletonList(\"Alice\"));"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        // Mixed-case keywords"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"aLIce bOB\"));"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    public void test_nameDoesNotContainKeywords_returnsFalse() {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        // Zero keywords"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        NameContainsKeywordsPredicate predicate \u003d new NameContainsKeywordsPredicate(Collections.emptyList());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").build()));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // Non-matching keyword"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"Carol\"));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice Bob\").build()));"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        // Keywords match phone, email and address, but does not match name"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        predicate \u003d new NameContainsKeywordsPredicate(Arrays.asList(\"12345\", \"alice@email.com\", \"Main\", \"Street\"));"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(predicate.test(new PersonBuilder().withName(\"Alice\").withPhone(\"12345\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "                .withEmail(\"alice@email.com\").withAddress(\"Main Street\").build()));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhoneTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "public class PhoneTest {"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "    public void isValidPhone() {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "        // invalid phone numbers"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\" \")); // spaces only"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"91\")); // less than 3 numbers"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"phone\")); // non-numeric"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9011p041\")); // alphabets within digits"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(Phone.isValidPhone(\"9312 1534\")); // spaces within digits"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        // valid phone numbers/ empty when optional"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"\")); // empty string"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"911\")); // exactly 3 numbers"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"93121534\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(Phone.isValidPhone(\"124293842033123\")); // long phone numbers"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 2,
      "-": 23
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/PhotoPathTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoPathTest {"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void isValidPhotoPath() {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // empty"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoPath.isValidPhotoPath(\"\"));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\" \"));"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // missing parts: not start with \u0027docs/images/contactPhotos/\u0027"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"photo.jpg\"));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"c:photo.jpg\"));"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"d:photo.jpg\"));"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"c:\\\\\\\\photo.jpg\"));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"c:\\\\\"));"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"c:\\\\\"));"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // invalid file extension"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/photo.txt\"));"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/selfie.pdf\"));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/selfie2.doc\"));"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // valid photo path"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/help_icon.png\"));  //default photo path"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/1234.jpg\"));"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/12345678.jpg\"));"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(PhotoPath.isValidPhotoPath(\"src/main/resources/images/contactPhotos/1234_5678.jpg\"));  // underscore"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /*"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Ignore"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() throws IllegalValueException {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String parentPath \u003d PATH_FILE_SAVED_PARENT_DIRECTORY;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //PhotoPath validPhotoPath_1 \u003d new PhotoPath(parentPath + \"1234.jpg\");"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //PhotoPath validPhotoPath_2 \u003d new PhotoPath(parentPath + \"5678.jpg\");"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(validPhotoPath_1.equals(validPhotoPath_1));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoPath copy \u003d new PhotoPath(validPhotoPath_1.value);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(validPhotoPath_1.equals(copy));"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(validPhotoPath_1.equals(1));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(validPhotoPath_1 \u003d\u003d null);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(validPhotoPath_1.equals(validPhotoPath_2));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    */"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "April0616": 62,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/RemarkTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "//@@author April0616"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class RemarkTest {"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark likeCoffeeRemark \u003d new Remark(\"Likes to drink coffee.\");"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark capFiveRemark \u003d new Remark(\"Got CAP 5.0.\");"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(likeCoffeeRemark.equals(likeCoffeeRemark));"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Remark copy \u003d new Remark(capFiveRemark.value);"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(capFiveRemark.equals(copy));"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(capFiveRemark.equals(1));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(capFiveRemark \u003d\u003d null);"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(likeCoffeeRemark.equals(capFiveRemark));"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "April0616": 30,
      "-": 2
    }
  },
  {
    "path": "src/test/java/seedu/address/model/person/TimetableTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.model.person;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_DAY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_TIME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.commons.util.timetable.TimetableParserUtil.MESSAGE_INVALID_WEEK_TYPE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.Rule;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import org.junit.rules.ExpectedException;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableDay;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableInfo;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableSlot;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.TimetableWeek;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "//@@author zacharytang"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class TimetableTest {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_DAY \u003d \"Dayday\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_WEEK_TYPE \u003d \"No Week\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String INVALID_TIME \u003d \"080q\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL_EMPTY \u003d \"http://modsn.us/5tN3z\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_URL \u003d \"http://modsn.us/TDSEt\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_TYPE \u003d \"Odd Week\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_DAY \u003d \"Monday\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIME \u003d \"0800\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_TIME_CHECK \u003d \"0900\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_DAY_CHECK \u003d \"Tuesday\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_TYPE_CHECK \u003d \"Even Week\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String VALID_WEEK_EVERY \u003d \"Every Week\";"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Rule"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public final ExpectedException thrown \u003d ExpectedException.none();"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void isValidUrl() throws Exception {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // invalid urls"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"\")); // empty string"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\" \")); // spaces only"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"abcde12345\")); // string"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"https://www.youtube.com/\")); // other url"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"http://modsn.us\")); // invalid request"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(Timetable.isValidUrl(\"http://mods.us/TDSEt\")); // invalid domain name"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // valid urls"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(\"http://modsn.us/TEt\")); // bad short url, but still valid"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(VALID_URL)); // valid url"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(Timetable.isValidUrl(VALID_URL_EMPTY)); // valid url, empty timetable"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void updateSlot() throws Exception {"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableSlot slotToUpdate \u003d new TimetableSlot();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        slotToUpdate.setLesson();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(slotToUpdate, new TimetableSlot());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableDay() throws Exception {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableDay dayToUpdate \u003d new TimetableDay();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(dayToUpdate, dayToUpdate);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", dayToUpdate);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        dayToUpdate.updateSlotsWithLesson(VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(dayToUpdate, new TimetableDay());"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(dayToUpdate.doesSlotHaveLesson(VALID_TIME));"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(dayToUpdate.doesSlotHaveLesson(VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableWeek() throws Exception {"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableWeek weekToUpdate \u003d new TimetableWeek();"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(weekToUpdate, weekToUpdate);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", weekToUpdate);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        weekToUpdate.updateSlotsWithLesson(VALID_DAY, VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(weekToUpdate, new TimetableWeek());"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(weekToUpdate.doesSlotHaveLesson(VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(weekToUpdate.doesSlotHaveLesson(VALID_DAY_CHECK, VALID_TIME));"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(weekToUpdate.doesSlotHaveLesson(VALID_DAY, VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableInfo() throws Exception {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        TimetableInfo timetableToUpdate \u003d new TimetableInfo();"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(timetableToUpdate, timetableToUpdate);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(\"Hello\", timetableToUpdate);"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableToUpdate.updateSlotsWithLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME, VALID_TIME_CHECK);"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertNotEquals(timetableToUpdate, new TimetableInfo());"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE_CHECK, VALID_DAY, VALID_TIME));"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY_CHECK, VALID_TIME));"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertFalse(timetableToUpdate.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME_CHECK));"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidWeekType_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_WEEK_TYPE);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(INVALID_WEEK_TYPE, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_validEveryWeek_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(\"Please specify a week type!\");"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_EVERY, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidDay_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_DAY);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, INVALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_invalidTime_throwsIllegalValueException() throws Exception {"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expect(IllegalValueException.class);"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        thrown.expectMessage(MESSAGE_INVALID_TIME);"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL_EMPTY);"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, INVALID_TIME);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void timetableQueries_validQuery_success() throws Exception {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        Timetable timetable \u003d new Timetable(VALID_URL);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetable.doesSlotHaveLesson(VALID_WEEK_TYPE, VALID_DAY, VALID_TIME);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 145,
      "-": 1
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/EditPersonDescriptorBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Optional;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand.EditPersonDescriptor;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.parser.ParserUtil;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building EditPersonDescriptor objects."
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditPersonDescriptorBuilder {"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private EditPersonDescriptor descriptor;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(EditPersonDescriptor descriptor) {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        this.descriptor \u003d new EditPersonDescriptor(descriptor);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code EditPersonDescriptor} with fields containing {@code person}\u0027s details"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor \u003d new EditPersonDescriptor();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setName(person.getName());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor.setGender(person.getGender());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        descriptor.setMatricNo(person.getMatricNo());"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setPhone(person.getPhone());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setEmail(person.getEmail());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setAddress(person.getAddress());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        descriptor.setTimetable(person.getTimetable());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        descriptor.setTags(person.getTags());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        descriptor.setBirthday(person.getBirthday());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withName(String name) {"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseName(Optional.of(name)).ifPresent(descriptor::setName);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"name is expected to be unique.\");"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public EditPersonDescriptorBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseGender(Optional.of(gender)).ifPresent(descriptor::setGender);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"gender is expected to be unique.\");"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code MatricNo} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public EditPersonDescriptorBuilder withMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "            ParserUtil.parseMatricNo(Optional.of(matricNo)).ifPresent(descriptor::setMatricNo);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"matric number is expected to be unique.\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parsePhone(Optional.of(phone)).ifPresent(descriptor::setPhone);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"phone is expected to be unique.\");"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseEmail(Optional.of(email)).ifPresent(descriptor::setEmail);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"email is expected to be unique.\");"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "            ParserUtil.parseAddress(Optional.of(address)).ifPresent(descriptor::setAddress);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author zacharytang"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Sets the {@code Timetable} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public EditPersonDescriptorBuilder withTimetable(String url) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            ParserUtil.parseTimetable(Optional.of(url)).ifPresent(descriptor::setTimetable);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code EditPersonDescriptor}"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * that we are building."
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    public EditPersonDescriptorBuilder withTags(String... tags) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "            descriptor.setTags(ParserUtil.parseTags(Arrays.asList(tags)));"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"tags are expected to be unique.\");"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Sets the {@code Birthday} of the {@code EditPersonDescriptor} that we are building."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public EditPersonDescriptorBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            ParserUtil.parseBirthday(Optional.of(birthday)).ifPresent(descriptor::setBirthday);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public EditPersonDescriptor build() {"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return descriptor;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 15,
      "CindyTsai1": 19,
      "April0616": 24,
      "-": 100
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonBuilder.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Set;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Remark;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.photo.PhotoPath;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.util.SampleDataUtil;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class to help with building Person objects."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonBuilder {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_NAME \u003d \"Alice Pauline\";"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_GENDER \u003d \"Female\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_MATRIC_NO \u003d \"A0134118K\";"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_PHONE \u003d \"85355255\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_EMAIL \u003d \"alice@gmail.com\";"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_ADDRESS \u003d \"123, Jurong West Ave 6, #08-111\";"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public static final String DEFAULT_BIRTHDAY \u003d \"23051997\";"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String DEFAULT_TIMETABLE_URL \u003d \"http://modsn.us/HXDrJ\";"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final String DEFAULT_REMARK \u003d \"\";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public static final String DEFAULT_PHOTOPATH \u003d \"src/main/resources/images/defaultPhoto.jpg\";"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String DEFAULT_TAGS \u003d \"friends\";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "    private Person person;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder() {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            Name defaultName \u003d new Name(DEFAULT_NAME);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Gender defaultGender \u003d new Gender(DEFAULT_GENDER);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "            MatricNo defaultMatricNo \u003d new MatricNo(DEFAULT_MATRIC_NO);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "            Phone defaultPhone \u003d new Phone(DEFAULT_PHONE);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "            Email defaultEmail \u003d new Email(DEFAULT_EMAIL);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "            Address defaultAddress \u003d new Address(DEFAULT_ADDRESS);"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            Timetable defaultTimetable \u003d new Timetable(DEFAULT_TIMETABLE_URL);"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Remark defaultRemark \u003d new Remark(DEFAULT_REMARK);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "            PhotoPath defaultPhotoPath \u003d new PhotoPath(\"\");"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "            Set\u003cTag\u003e defaultTags \u003d SampleDataUtil.getTagSet(DEFAULT_TAGS);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            Birthday defaultBirthday \u003d new Birthday(DEFAULT_BIRTHDAY);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person \u003d new Person(defaultName, defaultGender, defaultMatricNo, defaultPhone, defaultEmail,"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    defaultAddress, defaultTimetable, defaultRemark, defaultPhotoPath,"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "                    defaultTags, defaultBirthday);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Default person\u0027s values are invalid.\");"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "     * Initializes the PersonBuilder with the data of {@code personToCopy}."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder(ReadOnlyPerson personToCopy) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        this.person \u003d new Person(personToCopy);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Name} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withName(String name) {"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setName(new Name(name));"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"name is expected to be unique.\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withGender(String gender) {"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person.setGender(new Gender(gender));"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"gender is expected to be unique.\");"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Gender} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withMatricNo(String matricNo) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person.setMatricNo(new MatricNo(matricNo));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"matric number is expected to be unique.\");"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Remark} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withRemark(String remark) {"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        this.person.setRemark(new Remark(remark));"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Sets the {@code Photo Path} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public PersonBuilder withPhotoPath(String photoPath) {"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "            this.person.setPhotoPath(new PhotoPath(photoPath));"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "            throw new IllegalArgumentException(\"photo path is expected to be unique.\");"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Parses the {@code tags} into a {@code Set\u003cTag\u003e} and set it to the {@code Person} that we are building."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withTags(String ... tags) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setTags(SampleDataUtil.getTagSet(tags));"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"tags are expected to be unique.\");"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withAddress(String address) {"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setAddress(new Address(address));"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"address is expected to be unique.\");"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Phone} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withPhone(String phone) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setPhone(new Phone(phone));"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"phone is expected to be unique.\");"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Sets the {@code Email} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonBuilder withEmail(String email) {"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "            this.person.setEmail(new Email(email));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"email is expected to be unique.\");"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author CindyTsai1"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     * Sets the {@code Birthday} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "     */"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    public PersonBuilder withBirthday(String birthday) {"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            this.person.setBirthday(new Birthday(birthday));"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            throw new IllegalArgumentException(\"birthday is expected to be unique.\");"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        }"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author zacharytang"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Sets the {@code Address} of the {@code Person} that we are building."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonBuilder withTimetable(String url) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            this.person.setTimetable(new Timetable(url));"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        } catch (IllegalValueException ive) {"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            throw new IllegalArgumentException(\"timetable is expected to be unique.\");"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return this;"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    public Person build() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        return this.person;"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 17,
      "CindyTsai1": 17,
      "nbriannl": 1,
      "April0616": 55,
      "-": 112
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/PersonUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_ADDRESS;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_BIRTHDAY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_EMAIL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_GENDER;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_MATRIC_NO;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_PHONE;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TIMETABLE;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for Person."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an add command string for adding the {@code person}."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getAddCommand(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        return AddCommand.COMMAND_WORD + \" \" + getPersonDetails(person);"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns the part of command string for the given {@code person}\u0027s details."
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getPersonDetails(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        StringBuilder sb \u003d new StringBuilder();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_NAME + person.getName().fullName + \" \");"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        sb.append(PREFIX_GENDER + person.getGender().value + \" \");"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        sb.append(PREFIX_MATRIC_NO + person.getMatricNo().value + \" \");"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_PHONE + person.getPhone().value + \" \");"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_EMAIL + person.getEmail().value + \" \");"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        sb.append(PREFIX_ADDRESS + person.getAddress().value + \" \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        sb.append(PREFIX_BIRTHDAY + person.getBirthday().getUnformattedDate() + \" \");"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        sb.append(PREFIX_TIMETABLE + person.getTimetable().value + \" \");"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        person.getTags().stream().forEach("
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            s -\u003e sb.append(PREFIX_TAG + s.tagName + \" \")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        );"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        return sb.toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 1,
      "nbriannl": 1,
      "April0616": 4,
      "-": 38
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.DirectoryNotEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "     * Folder used for temp files created during testing. Ignored by Git."
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String SANDBOX_FOLDER \u003d FileUtil.getPath(\"./src/test/data/sandbox/\");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "     * Appends {@code fileName} to the sandbox folder path and returns the resulting string."
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "     * Creates the sandbox folder if it doesn\u0027t exist."
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    public static String getFilePathInSandboxFolder(String fileName) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "            FileUtil.createDirs(new File(SANDBOX_FOLDER));"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new RuntimeException(e);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        return SANDBOX_FOLDER + fileName;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the middle index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getMidIndex(Model model) {"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getPersonList().size() / 2);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the last index of the person in the {@code model}\u0027s person list."
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public static Index getLastIndex(Model model) {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        return Index.fromOneBased(model.getAddressBook().getPersonList().size());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Returns the person in the {@code model}\u0027s person list at {@code index}."
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ReadOnlyPerson getPerson(Model model, Index index) {"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        return model.getAddressBook().getPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "content": "    //@@author April0616-unused"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes the temporary test files and parents if they exist till the root of the path."
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param pathString of the file"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void removeFileAndItsParentsTillRoot(String pathString) throws IOException {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Path path \u003d Paths.get(pathString);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (path.toString().matches(\"[a-zA-Z]+[:]+[\\\\\\\\]\") || path \u003d\u003d null) {"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Files.deleteIfExists(path);"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (Files.isDirectory(path)) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Files.delete(path);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (DirectoryNotEmptyException e) {"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String parentPathString \u003d path.getParent().toString();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //use recursion here"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeFileAndItsParentsTillRoot(parentPathString);"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * If the file in the specific path in the app directory exists, delete the file in the path"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param path"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void removeAppFile(String path) {"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File fileToDelete \u003d new File(path);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (fileToDelete.exists()) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "April0616"
        },
        "content": "            fileToDelete.delete();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates temporary folders and a photo file for parseCommand_photo() test, i.e.,"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * \"C:\\\\family\\\\photo.jpg\""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void createTempFile(String path) {"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!PhotoCommand.isValidLocalPhotoPath(path)) {"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Invalid photo path!\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final String photoPath \u003d path;"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File testFile \u003d new File(photoPath);"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //create new test file"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        testFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "            testFile.createNewFile();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Cannot open or write file!\";"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "zacharytang": 3,
      "April0616": 64,
      "-": 51
    }
  },
  {
    "path": "src/test/java/seedu/address/testutil/TypicalPersons.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class containing a list of {@code Person} objects to be used in tests."
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "public class TypicalPersons {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson ALICE \u003d new PersonBuilder().withName(\"Alice Pauline\")"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0172633J\")"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"123, Jurong West Ave 6, #08-111\").withEmail(\"alice@example.com\")"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            .withPhone(\"85355255\")"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withTags(\"friends\").withBirthday(\"23051997\").build();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson BENSON \u003d new PersonBuilder().withName(\"Benson Meier\")"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0173333J\")"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "            .withAddress(\"311, Clementi Ave 2, #02-25\")"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            .withEmail(\"johnd@example.com\").withPhone(\"98765432\")"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withTags(\"owesMoney\", \"friends\").withBirthday(\"06061996\").build();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson CARL \u003d new PersonBuilder().withName(\"Carl Kurz\").withPhone(\"95352563\")"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0185633J\")"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"heinz@example.com\").withAddress(\"wall street\").withBirthday(\"07071997\").build();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson DANIEL \u003d new PersonBuilder().withName(\"Daniel Meier\").withPhone(\"87652533\")"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0162234J\")"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"cornelia@example.com\").withAddress(\"10th street\").withBirthday(\"09091999\").build();"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson ELLE \u003d new PersonBuilder().withName(\"Elle Meyer\").withPhone(\"9482224\")"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0144433K\")"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"werner@example.com\").withAddress(\"michegan ave\").withBirthday(\"10102000\").build();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson FIONA \u003d new PersonBuilder().withName(\"Fiona Kunz\").withPhone(\"9482427\")"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0182342J\")"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"lydia@example.com\").withAddress(\"little tokyo\").withBirthday(\"04041994\").build();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final ReadOnlyPerson GEORGE \u003d new PersonBuilder().withName(\"George Best\").withPhone(\"9482442\")"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withGender(\"Male\").withMatricNo(\"A0182323J\")"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"anna@example.com\").withAddress(\"4th street\").withBirthday(\"03031993\")"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withRemark(\"Likes to drink\").build();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson HOON \u003d new PersonBuilder().withName(\"Hoon Meier\")"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0132323W\").withPhone(\"8482424\")"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"stefan@example.com\").withAddress(\"little india\").withBirthday(\"01011991\").build();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson IDA \u003d new PersonBuilder().withName(\"Ida Mueller\")"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(\"Female\").withMatricNo(\"A0162530W\").withPhone(\"8482131\")"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withEmail(\"hans@example.com\").withAddress(\"chicago ave\").withBirthday(\"02021992\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "    // Manually added - Person\u0027s details found in {@code CommandTestUtil}"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson AMY \u003d new PersonBuilder().withName(VALID_NAME_AMY)"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(VALID_GENDER_AMY).withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY)"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            .withEmail(VALID_EMAIL_AMY).withAddress(VALID_ADDRESS_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_AMY).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static final ReadOnlyPerson BOB \u003d new PersonBuilder().withName(VALID_NAME_BOB)"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "            .withGender(VALID_GENDER_BOB).withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            .withBirthday(VALID_BIRTHDAY_BOB).withTags(VALID_TAG_HUSBAND, VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "    public static final String KEYWORD_MATCHING_MEIER \u003d \"Meier\"; // A keyword that matches MEIER"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "    private TypicalPersons() {} // prevents instantiation"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns an {@code AddressBook} with all the typical persons."
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    public static AddressBook getTypicalAddressBook() {"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        AddressBook ab \u003d new AddressBook();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        for (ReadOnlyPerson person : getTypicalPersons()) {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "                ab.addPerson(person);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "            } catch (DuplicatePersonException e) {"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "                assert false : \"not possible\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "            }"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        return ab;"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    public static List\u003cReadOnlyPerson\u003e getTypicalPersons() {"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        return new ArrayList\u003c\u003e(Arrays.asList(ALICE, BENSON, CARL, DANIEL, ELLE, FIONA, GEORGE));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 19,
      "April0616": 14,
      "-": 65
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/BrowserPanelTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertNotEquals;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_DIRECTIONS_URL_PREFIX;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_MAPS_URL_PREFIX;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_PREFIX;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.GOOGLE_SEARCH_URL_SUFFIX;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.net.URL;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayDirectionsEvent;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.events.model.PersonAddressDisplayMapEvent;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Address;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "public class BrowserPanelTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private PersonPanelSelectionChangedEvent selectionChangedEventStub;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private PersonAddressDisplayMapEvent personAddressDisplayMapEventStub;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private PersonAddressDisplayDirectionsEvent personAddressDisplayDirectionsEventStub;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanel browserPanel;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private BrowserPanelHandle browserPanelHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    //@@author nbriannl"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void setUp() throws Exception {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        selectionChangedEventStub \u003d new PersonPanelSelectionChangedEvent(new PersonCard(ALICE, 0));"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        personAddressDisplayMapEventStub \u003d new PersonAddressDisplayMapEvent(new Person(ALICE), 0);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        personAddressDisplayDirectionsEventStub \u003d new PersonAddressDisplayDirectionsEvent(new Person(ALICE),"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                new Address(\"Blk 123 Yishun 61\"), 0);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        guiRobot.interact(() -\u003e browserPanel \u003d new BrowserPanel());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        uiPartRule.setUiPart(browserPanel);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        browserPanelHandle \u003d new BrowserPanelHandle(browserPanel.getRoot());"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void display() throws Exception {"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // default web page"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedDefaultPageUrl \u003d MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertEquals(expectedDefaultPageUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        // associated web page of a person, should not be loaded"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        postNow(selectionChangedEventStub);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedPersonUrl \u003d new URL(GOOGLE_SEARCH_URL_PREFIX"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                + ALICE.getName().fullName.replaceAll(\" \", \"+\") + GOOGLE_SEARCH_URL_SUFFIX);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertNotEquals(expectedPersonUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        postNow(personAddressDisplayMapEventStub);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedGMapsUrl \u003d new URL("
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                GOOGLE_MAPS_URL_PREFIX + \"123,%20Jurong%20West%20Ave%206,%20?dg\u003ddbrw\u0026newdg\u003d1\");"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertEquals(expectedGMapsUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        postNow(personAddressDisplayDirectionsEventStub);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        URL expectedGMapsDirectionsUrl \u003d new URL("
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                GOOGLE_MAPS_DIRECTIONS_URL_PREFIX + \"Blk%20123%20Yishun%2061\" + \"/\" + \"123,\""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                        + \"%20Jurong%20West%20Ave%206,%20#08-111\");"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        waitUntilBrowserLoaded(browserPanelHandle);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertEquals(expectedGMapsDirectionsUrl, browserPanelHandle.getLoadedUrl());"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 1,
      "nbriannl": 51,
      "-": 26
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/PersonCardTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertCardDisplaysPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonCardHandle;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "public class PersonCardTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        // no tags"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithNoTags \u003d new PersonBuilder().withTags(new String[0]).build();"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(personWithNoTags, 1);"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithNoTags, 1);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "        // with tags"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        Person personWithTags \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        personCard \u003d new PersonCard(personWithTags, 2);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(personCard);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        // changes made to Person reflects on card"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.interact(() -\u003e {"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setName(ALICE.getName());"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setGender(ALICE.getGender());"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setMatricNo(ALICE.getMatricNo());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setAddress(ALICE.getAddress());"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setEmail(ALICE.getEmail());"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setPhone(ALICE.getPhone());"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            personWithTags.setTimetable(ALICE.getTimetable());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setRemark(ALICE.getRemark());"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "            personWithTags.setPhotoPath(ALICE.getPhotoPath());"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "            personWithTags.setTags(ALICE.getTags());"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "            personWithTags.setBirthday(ALICE.getBirthday());"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        });"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplay(personCard, personWithTags, 2);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "    public void equals() {"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        Person person \u003d new PersonBuilder().build();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard personCard \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // same person, same index -\u003e returns true"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCard copy \u003d new PersonCard(person, 0);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(copy));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(personCard.equals(personCard));"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(null));"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(0));"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // different person, same index -\u003e returns false"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        Person differentPerson \u003d new PersonBuilder().withName(\"differentName\").build();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(differentPerson, 0)));"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // same person, different index -\u003e returns false"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(personCard.equals(new PersonCard(person, 1)));"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that {@code personCard} displays the details of {@code expectedPerson} correctly and matches"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedId}."
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCardDisplay(PersonCard personCard, ReadOnlyPerson expectedPerson, int expectedId) {"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        PersonCardHandle personCardHandle \u003d new PersonCardHandle(personCard.getRoot());"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify id is displayed correctly"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(Integer.toString(expectedId) + \". \", personCardHandle.getId());"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        // verify person details are displayed correctly"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCardDisplaysPerson(expectedPerson, personCardHandle);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 4,
      "CindyTsai1": 1,
      "April0616": 4,
      "-": 81
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/ResultDisplayTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.ui.NewResultAvailableEvent;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "public class ResultDisplayTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private static final NewResultAvailableEvent NEW_RESULT_EVENT_STUB \u003d new NewResultAvailableEvent(\"Stub\", false);"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "    private ResultDisplayHandle resultDisplayHandle;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "        ResultDisplay resultDisplay \u003d new ResultDisplay();"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(resultDisplay);"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "        resultDisplayHandle \u003d new ResultDisplayHandle(getChildNode(resultDisplay.getRoot(),"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "                ResultDisplayHandle.RESULT_DISPLAY_ID));"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "        // default result text"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(\"\", resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "        // new result received"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        postNow(NEW_RESULT_EVENT_STUB);"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(NEW_RESULT_EVENT_STUB.message, resultDisplayHandle.getText());"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "CindyTsai1": 1,
      "-": 37
    }
  },
  {
    "path": "src/test/java/seedu/address/ui/StatusBarFooterTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.EventsUtil.postNow;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Clock;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.Instant;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import java.time.ZoneId;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.AfterClass;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.events.model.AddressBookChangedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.AddressBook;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "public class StatusBarFooterTest extends GuiUnitTest {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String STUB_SAVE_LOCATION \u003d \"Stub\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String RELATIVE_PATH \u003d \"./\";"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final Integer STUB_PERSON_TOTAL \u003d 0;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String TOTAL_PERSONS_TEXT \u003d \" person(s) in address book\";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final AddressBookChangedEvent EVENT_STUB \u003d new AddressBookChangedEvent(new AddressBook());"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock originalClock \u003d StatusBarFooter.getClock();"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final Clock injectedClock \u003d Clock.fixed(Instant.now(), ZoneId.systemDefault());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "    private StatusBarFooterHandle statusBarFooterHandle;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setUpBeforeClass() {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "        // inject fixed clock"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(injectedClock);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "    @AfterClass"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void tearDownAfterClass() {"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        // restore original clock"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooter.setClock(originalClock);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StatusBarFooter statusBarFooter \u003d new StatusBarFooter(STUB_SAVE_LOCATION, STUB_PERSON_TOTAL);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        uiPartRule.setUiPart(statusBarFooter);"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle \u003d new StatusBarFooterHandle(statusBarFooter.getRoot());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    //@@author zacharytang"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public void display() {"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // initial state"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION, SYNC_STATUS_INITIAL,"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                STUB_PERSON_TOTAL + TOTAL_PERSONS_TEXT);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        // after address book is updated"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        postNow(EVENT_STUB);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertStatusBarContent(RELATIVE_PATH + STUB_SAVE_LOCATION,"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                String.format(SYNC_STATUS_UPDATED, new Date(injectedClock.millis()).toString()),"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                STUB_PERSON_TOTAL + TOTAL_PERSONS_TEXT);"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Asserts that the save location matches that of {@code expectedSaveLocation}, and the"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * sync status matches that of {@code expectedSyncStatus}."
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void assertStatusBarContent(String expectedSaveLocation, String expectedSyncStatus,"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                                        String expectedTotalPersons) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedSaveLocation, statusBarFooterHandle.getSaveLocation());"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedSyncStatus, statusBarFooterHandle.getSyncStatus());"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertEquals(expectedTotalPersons, statusBarFooterHandle.getTotalPersons());"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        guiRobot.pauseForHuman();"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 30,
      "-": 52
    }
  },
  {
    "path": "src/test/java/systemtests/AddCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_AMY;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_AMY;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_AMY;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_AMY;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_AMY;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_AMY;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_AMY;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_AMY;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.ALICE;"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.HOON;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.IDA;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.AddCommand;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "public class AddCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "    public void add() throws Exception {"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e added"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson toAdd \u003d AMY;"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String command \u003d \"   \" + AddCommand.COMMAND_WORD + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using alias,"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_ALIAS + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using secondary keyword,"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d \"   \" + AddCommand.COMMAND_SECONDARY + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: add a person without tags to a non-empty address book using mixed case keyword,"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e added"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "         */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"   \" + \"aDd\" + \"  \" + NAME_DESC_AMY + \"  \" + GENDER_DESC_AMY + \"  \""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + MATRIC_NO_DESC_AMY + \"   \" + PHONE_DESC_AMY + \" \" + EMAIL_DESC_AMY + \"   \" + ADDRESS_DESC_AMY + \"   \""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_AMY + \"   \" + TIMETABLE_DESC_AMY + \"   \" + TAG_DESC_FRIEND + \" \";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo adding Amy to the list -\u003e Amy deleted */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo adding Amy to the list -\u003e Amy added again */"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        model.addPerson(toAdd);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person -\u003e rejected */"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a duplicate person except with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        // \"friends\" is an existing tag used in the default model, see TypicalPersons#ALICE"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "        // This test will fail is a new tag that is not in the model is used, see the bug documented in"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        // AddressBook#addPerson(ReadOnlyPerson)"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + \" \""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + PREFIX_TAG.getPrefix() + \"friends\";"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, AddCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except name -\u003e added */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_BOB + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author April0616"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except gender -\u003e added */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_BOB + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author April0616"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except matricNo -\u003e added */"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_BOB + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except phone -\u003e added */"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_BOB).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except email -\u003e added */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_BOB)"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_BOB + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except address -\u003e added */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "April0616"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_BOB).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_BOB + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author zacharytang"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except timetable -\u003e added */"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_AMY).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: add a person with all fields same as another person in the address book except birthday -\u003e added */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        toAdd \u003d new PersonBuilder().withName(VALID_NAME_AMY).withGender(VALID_GENDER_AMY)"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_AMY).withPhone(VALID_PHONE_AMY).withEmail(VALID_EMAIL_AMY)"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withAddress(VALID_ADDRESS_AMY).withBirthday(VALID_BIRTHDAY_BOB).withTimetable(VALID_TIMETABLE_AMY)"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + PHONE_DESC_AMY + EMAIL_DESC_AMY + ADDRESS_DESC_AMY"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before adding -\u003e added */"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getFilteredPersonList().size()"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "                \u003c getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(IDA);"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add to empty address book -\u003e added */"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ALICE);"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person with tags, command with parameters in random order -\u003e added */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "        toAdd \u003d BOB;"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + TAG_DESC_FRIEND + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB + ADDRESS_DESC_BOB + NAME_DESC_BOB + TAG_DESC_HUSBAND + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toAdd);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, add a person -\u003e added, card selection remains unchanged */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getPersonListPanel().isAnyCardSelected();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(CARL);"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: add a person, missing tags -\u003e added */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(HOON);"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add to address book with shorthand alias -\u003e added */"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_ALIAS + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(command, AMY);"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: add to address book with secondary keyword -\u003e added */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_SECONDARY + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(command, AMY);"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing name -\u003e rejected */"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, String.format(MESSAGE_INVALID_COMMAND_FORMAT, AddCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d \"adds \" + PersonUtil.getPersonDetails(toAdd);"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(command, String.format(SuggestCommand.MESSAGE_SUCCESS, \"add\"));"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + INVALID_NAME_DESC + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author April0616"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + INVALID_GENDER_DESC + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(command, Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid matricNo -\u003e rejected */"
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + INVALID_MATRIC_NO_DESC + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(command, MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + INVALID_PHONE_DESC"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + INVALID_EMAIL_DESC + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author zacharytang"
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid timetable -\u003e rejected */"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(command, Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid short url -\u003e rejected */"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(command, Timetable.MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + BIRTHDAY_DESC_AMY + TIMETABLE_DESC_AMY + INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d AddCommand.COMMAND_WORD + NAME_DESC_AMY + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + EMAIL_DESC_AMY + ADDRESS_DESC_AMY + INVALID_BIRTHDAY_DESC + TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(command, Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes the {@code AddCommand} that adds {@code toAdd} to the model and verifies that the command box displays"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * an empty string, the result display box displays the success message of executing {@code AddCommand} with the"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * details of {@code toAdd}, and the model related components equal to the current model added with {@code toAdd}."
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class, the status bar\u0027s sync status changes,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remains unchanged."
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(ReadOnlyPerson toAdd) {"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(PersonUtil.getAddCommand(toAdd), toAdd);"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(ReadOnlyPerson)}. Executes {@code command}"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * instead."
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(ReadOnlyPerson)"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, ReadOnlyPerson toAdd) {"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.addPerson(toAdd);"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException dpe) {"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException(\"toAdd already exists in the model.\");"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format(AddCommand.MESSAGE_SUCCESS, toAdd);"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, ReadOnlyPerson)} except that the result"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "     * display box displays {@code expectedResultMessage} and the model related components equal to"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedModel}."
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddCommandSystemTest#assertCommandSuccess(String, ReadOnlyPerson)"
      },
      {
        "lineNumber": 364,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 365,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 366,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 367,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 368,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertSelectedCardChanged();"
      },
      {
        "lineNumber": 369,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 370,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 371,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 372,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 373,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 374,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 375,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 376,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 377,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 378,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 379,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 380,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 381,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 382,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 383,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 384,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 385,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 386,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 387,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 388,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 389,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 390,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 391,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 47,
      "CindyTsai1": 66,
      "April0616": 72,
      "-": 206
    }
  },
  {
    "path": "src/test/java/systemtests/AddressBookSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static guitests.guihandles.WebViewUtil.waitUntilBrowserLoaded;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertEquals;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_NAME;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.BrowserPanel.DEFAULT_PAGE;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_INITIAL;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.StatusBarFooter.SYNC_STATUS_UPDATED;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.UiPart.FXML_FILE_FOLDER;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.ui.testutil.GuiTestAssert.assertListMatching;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Arrays;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.Date;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.After;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Before;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.BeforeClass;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.ClassRule;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.BrowserPanelHandle;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.CommandBoxHandle;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainMenuHandle;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.MainWindowHandle;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.PersonListPanelHandle;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.ResultDisplayHandle;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import guitests.guihandles.StatusBarFooterHandle;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.MainApp;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.TestApp;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.EventsCenter;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.ui.CommandBox;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": " * A system test class for AddressBook, which provides access to handles of GUI components and helper methods"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": " * for test verification."
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "public abstract class AddressBookSystemTest {"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    @ClassRule"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    public static ClockRule clockRule \u003d new ClockRule();"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_DEFAULT_STYLE \u003d Arrays.asList(\"text-input\", \"text-field\");"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final List\u003cString\u003e COMMAND_BOX_ERROR_STYLE \u003d"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "            Arrays.asList(\"text-input\", \"text-field\", CommandBox.ERROR_STYLE_CLASS);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "    private MainWindowHandle mainWindowHandle;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "    private TestApp testApp;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "    private SystemTestSetupHelper setupHelper;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "    @BeforeClass"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "    public static void setupBeforeClass() {"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "        SystemTestSetupHelper.initializeStage();"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "    @Before"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "    public void setUp() {"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper \u003d new SystemTestSetupHelper();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        testApp \u003d setupHelper.setupApplication();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle \u003d setupHelper.setupMainWindowHandle();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationStartingStateIsCorrect();"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "    @After"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "    public void tearDown() throws Exception {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        setupHelper.tearDownStage();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        EventsCenter.clearSubscribers();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": "    public CommandBoxHandle getCommandBox() {"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getCommandBox();"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "    public PersonListPanelHandle getPersonListPanel() {"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getPersonListPanel();"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "    public MainMenuHandle getMainMenu() {"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getMainMenu();"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "    public BrowserPanelHandle getBrowserPanel() {"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getBrowserPanel();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "    public StatusBarFooterHandle getStatusBarFooter() {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getStatusBarFooter();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    public ResultDisplayHandle getResultDisplay() {"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        return mainWindowHandle.getResultDisplay();"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} in the application\u0027s {@code CommandBox}."
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     * Method returns after UI components have been updated."
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void executeCommand(String command) {"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        rememberStates();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        // Injects a fixed clock before executing a command so that the time stamp shown in the status bar"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        // after each command is predictable and also different from the previous command."
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        clockRule.setInjectedClockToCurrentTime();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "        mainWindowHandle.getCommandBox().run(command);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        waitUntilBrowserLoaded(getBrowserPanel());"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons in the address book."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showAllPersons() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d getModel().getFilteredPersonList().size();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "     * Displays all persons with any parts of their names matching {@code keyword} (case-insensitive)."
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void showPersonsWithName(String keyword) {"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" \" + PREFIX_NAME + keyword);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getFilteredPersonList().size() \u003c getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Selects the person at {@code index} of the displayed list."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void selectPerson(Index index) {"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(SelectCommand.COMMAND_WORD + \" \" + index.getOneBased());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getPersonListPanel().getSelectedCardIndex() \u003d\u003d index.getZeroBased();"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the {@code CommandBox} displays {@code expectedCommandInput}, the {@code ResultDisplay} displays"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage}, the model and storage contains the same person objects as {@code expectedModel}"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "     * and the person list panel displays the persons in the model correctly."
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertApplicationDisplaysExpected(String expectedCommandInput, String expectedResultMessage,"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "            Model expectedModel) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedCommandInput, getCommandBox().getInput());"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedResultMessage, getResultDisplay().getText());"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel, getModel());"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedModel.getAddressBook(), testApp.readStorageAddressBook());"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": "        assertListMatching(getPersonListPanel(), expectedModel.getFilteredPersonList());"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "     * Calls {@code BrowserPanelHandle}, {@code PersonListPanelHandle} and {@code StatusBarFooterHandle} to remember"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "     * their current state."
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "    private void rememberStates() {"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle statusBarFooterHandle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        getBrowserPanel().rememberUrl();"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSaveLocation();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        statusBarFooterHandle.rememberSyncStatus();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        getPersonListPanel().rememberSelectedPersonCard();"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the previously selected card is now deselected and the browser\u0027s url remains displaying the details"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the previously selected person."
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardDeselected() {"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isAnyCardSelected());"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url is changed to display the details of the person in the person list panel at"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex}, and only the card at {@code expectedSelectedCardIndex} is selected."
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardChanged(Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSelectedCardIndex.getZeroBased(), getPersonListPanel().getSelectedCardIndex());"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    protected void assertSelectedCardChanged() {"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertTrue(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the browser\u0027s url and the selected card in the person list panel remain unchanged."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see BrowserPanelHandle#isUrlChanged()"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see PersonListPanelHandle#isSelectedPersonCardChanged()"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertSelectedCardUnchanged() {"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getBrowserPanel().isUrlChanged());"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getPersonListPanel().isSelectedPersonCardChanged());"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the default style."
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsDefaultStyle() {"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_DEFAULT_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the command box\u0027s shows the error style."
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertCommandBoxShowsErrorStyle() {"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(COMMAND_BOX_ERROR_STYLE, getCommandBox().getStyleClass());"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the entire status bar remains the same."
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchanged() {"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSyncStatusChanged());"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that only the sync status in the status bar was changed to the timing of"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code ClockRule#getInjectedClock()}, while the save location remains the same."
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    protected void assertStatusBarUnchangedExceptSyncStatus() {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        StatusBarFooterHandle handle \u003d getStatusBarFooter();"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "        String timestamp \u003d new Date(clockRule.getInjectedClock().millis()).toString();"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedSyncStatus \u003d String.format(SYNC_STATUS_UPDATED, timestamp);"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertEquals(expectedSyncStatus, handle.getSyncStatus());"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(handle.isSaveLocationChanged());"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     * Asserts that the starting state of the application is correct."
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertApplicationStartingStateIsCorrect() {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getCommandBox().getInput());"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"\", getResultDisplay().getText());"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "            assertListMatching(getPersonListPanel(), getModel().getFilteredPersonList());"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(MainApp.class.getResource(FXML_FILE_FOLDER + DEFAULT_PAGE), getBrowserPanel().getLoadedUrl());"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(\"./\" + testApp.getStorageSaveLocation(), getStatusBarFooter().getSaveLocation());"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            assertEquals(SYNC_STATUS_INITIAL, getStatusBarFooter().getSyncStatus());"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (Exception e) {"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"Starting state is wrong.\", e);"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "     * Returns a defensive copy of the current model."
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "    protected Model getModel() {"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "        return testApp.getModel();"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 7,
      "-": 254
    }
  },
  {
    "path": "src/test/java/systemtests/ClearCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.ModelManager;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "public class ClearCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "    public void clear() {"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": "        final Model defaultModel \u003d getModel();"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear non-empty address book, command with leading spaces and trailing alphanumeric characters and"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "         * spaces -\u003e cleared"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_WORD + \" ab12   \");"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear non-empty address book with alias, command with leading spaces"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * and trailing alphanumeric characters and spaces -\u003e cleared"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_ALIAS + \" ab12   \");"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear non-empty address book with secondary keyword, command with leading spaces"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * and trailing alphanumeric characters and spaces -\u003e cleared"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(\"   \" + ClearCommand.COMMAND_SECONDARY + \" ab12   \");"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo clearing address book -\u003e original address book restored */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command,  expectedResultMessage, defaultModel);"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo clearing address book -\u003e cleared */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedResultMessage, new ModelManager());"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in person list and clears address book -\u003e cleared and no card selected */"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: filters the person list before clearing -\u003e entire address book cleared */"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // restores the original address book"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear empty address book -\u003e cleared */"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear address book with alias -\u003e cleared */"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_ALIAS);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: clear address book with secondary keyword-\u003e cleared */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandSuccess(ClearCommand.COMMAND_SECONDARY);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: mixed case command word -\u003e cleared */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"ClEaR\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"claer\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"clear\"));"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code ClearCommand#MESSAGE_SUCCESS} and the model related components equal to an empty model."
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar\u0027s sync status changes."
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command) {"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, ClearCommand.MESSAGE_SUCCESS, new ModelManager());"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String)} except that the result box displays"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedResultMessage} and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see ClearCommandSystemTest#assertCommandSuccess(String)"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, String expectedResultMessage, Model expectedModel) {"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 12,
      "CindyTsai1": 11,
      "-": 106
    }
  },
  {
    "path": "src/test/java/systemtests/DeleteCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getLastIndex;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getMidIndex;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TestUtil.getPerson;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "public class DeleteCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "    private static final String MESSAGE_INVALID_DELETE_COMMAND_FORMAT \u003d"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "            String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, DeleteCommand.MESSAGE_USAGE);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": "    public void delete() {"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing delete operation while an unfiltered list is being shown -------------------- */"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the first person in the list, command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"     \" + DeleteCommand.COMMAND_WORD + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedResultMessage \u003d DeleteCommand.generateSuccessfulResultMsgForPerson(deletePersonList);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: delete the first person in the list using alias,"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"     \" + DeleteCommand.COMMAND_ALIAS + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: delete the first person in the list using secondary keyword,"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"     \" + DeleteCommand.COMMAND_SECONDARY + \"      \" + INDEX_FIRST_PERSON.getOneBased() + \"       \";"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: delete the first person in the list using mixed case keyword,"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e deleted */"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD); // Restores address book"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"DelETE 1\", expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the last person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        Model modelBeforeDeletingLast \u003d getModel();"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        Index lastPersonIndex \u003d getLastIndex(modelBeforeDeletingLast);"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(lastPersonIndex);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo deleting the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo deleting the last person in the list -\u003e last person deleted again */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        removePerson(modelBeforeDeletingLast, lastPersonIndex);"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, modelBeforeDeletingLast, expectedResultMessage);"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the middle person in the list -\u003e deleted */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middlePersonIndex \u003d getMidIndex(getModel());"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(middlePersonIndex);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing delete operation while a filtered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book and person list -\u003e deleted */"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(index);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, delete index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + invalidIndex;"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing delete operation while a person card is selected ------------------------ */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: delete the selected person -\u003e person list panel selects the person before the deleted person */"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "        Index selectedIndex \u003d getLastIndex(expectedModel);"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": "        Index expectedIndex \u003d Index.fromZeroBased(selectedIndex.getZeroBased() - 1);"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(selectedIndex);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + selectedIndex.getOneBased();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "        deletedPerson \u003d removePerson(expectedModel, selectedIndex);"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "April0616"
        },
        "content": "        expectedResultMessage \u003d DeleteCommand.generateSuccessfulResultMsgForPerson(deletePersonList);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, expectedIndex);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid delete operation ------------------------------------ */"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" 0\";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" -1\";"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        Index outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_WORD + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_WORD + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Invalid commands with aliases */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" 0\";"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" -1\";"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_ALIAS + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_ALIAS + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Invalid commands with secondary keyword */"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" 0\";"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" -1\";"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        outOfBoundsIndex \u003d Index.fromOneBased("
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getAddressBook().getPersonList().size() + 1);"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d DeleteCommand.COMMAND_SECONDARY + \" \" + outOfBoundsIndex.getOneBased();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_SECONDARY + \" abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(DeleteCommand.COMMAND_SECONDARY + \" 1 abc\", MESSAGE_INVALID_DELETE_COMMAND_FORMAT);"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"Deleete\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"delete\"));"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Removes the {@code ReadOnlyPerson} at the specified {@code index} in {@code model}\u0027s address book."
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "     * @return the removed person"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "    private ReadOnlyPerson removePerson(Model model, Index index) {"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson targetPerson \u003d getPerson(model, index);"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "-"
        },
        "content": "            model.deletePerson(targetPerson);"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (PersonNotFoundException pnfe) {"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new AssertionError(\"targetPerson is retrieved from model.\");"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        return targetPerson;"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author April0616"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Deletes the person at {@code toDelete} by creating a default {@code DeleteCommand} using {@code toDelete} and"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * performs the same verification as {@code assertCommandSuccess(String, Model, String)}."
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private void assertCommandSuccess(Index toDelete) {"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ReadOnlyPerson deletedPerson \u003d removePerson(expectedModel, toDelete);"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "April0616"
        },
        "content": "        ArrayList\u003cReadOnlyPerson\u003e deletePersonList \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "April0616"
        },
        "content": "        deletePersonList.add(deletedPerson);"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String expectedResultMessage \u003d DeleteCommand.generateSuccessfulResultMsgForPerson(deletePersonList);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandSuccess("
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "April0616"
        },
        "content": "                DeleteCommand.COMMAND_WORD + \" \" + toDelete.getOneBased(), expectedModel, expectedResultMessage);"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "April0616"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url and selected card remains unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "-"
        },
        "content": "     * 6. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}."
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String)} except that the browser url"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": "     * and selected card are expected to update accordingly depending on the card at {@code expectedSelectedCardIndex}."
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see DeleteCommandSystemTest#assertCommandSuccess(String, Model, String)"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "-"
        },
        "content": "            Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "-"
        },
        "content": "        if (expectedSelectedCardIndex !\u003d null) {"
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 40,
      "CindyTsai1": 7,
      "April0616": 30,
      "-": 199
    }
  },
  {
    "path": "src/test/java/systemtests/EditCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.ADDRESS_DESC_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_AMY;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.EMAIL_DESC_BOB;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_AMY;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.GENDER_DESC_BOB;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_BIRTHDAY_DESC;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_EMAIL_DESC;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_GENDER_DESC;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_MATRIC_NO_DESC;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_NAME_DESC;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_PHONE_DESC;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_SHORT_URL_DESC;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TAG_DESC;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.INVALID_TIMETABLE_DESC;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_AMY;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.MATRIC_NO_DESC_BOB;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_AMY;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.NAME_DESC_BOB;"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_AMY;"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.PHONE_DESC_BOB;"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TAG_DESC_HUSBAND;"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_AMY;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.TIMETABLE_DESC_BOB;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_ADDRESS_BOB;"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_BIRTHDAY_BOB;"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_EMAIL_BOB;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_GENDER_BOB;"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_MATRIC_NO_BOB;"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_NAME_BOB;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHONE_BOB;"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_FRIEND;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TAG_HUSBAND;"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_TIMETABLE_BOB;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.parser.CliSyntax.PREFIX_TAG;"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.model.Model.PREDICATE_SHOW_ALL_PERSONS;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.AMY;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BOB;"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.Messages;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.EditCommand;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.model.person.Birthday;"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Email;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.Gender;"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.model.person.MatricNo;"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Name;"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Person;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.Phone;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.DuplicatePersonException;"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.exceptions.PersonNotFoundException;"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonBuilder;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.testutil.PersonUtil;"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "public class EditCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "    public void edit() throws Exception {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        Model model \u003d getModel();"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ----------------- Performing edit operation while an unfiltered list is being shown ---------------------- */"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit all fields, command with leading spaces, trailing spaces and multiple spaces between each field"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e edited"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": "        Index index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \" \" + EditCommand.COMMAND_WORD + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Person editedPerson \u003d new PersonBuilder().withName(VALID_NAME_BOB).withGender(VALID_GENDER_BOB)"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "April0616"
        },
        "content": "                .withMatricNo(VALID_MATRIC_NO_BOB).withPhone(VALID_PHONE_BOB)"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                .withEmail(VALID_EMAIL_BOB).withAddress(VALID_ADDRESS_BOB).withTimetable(VALID_TIMETABLE_BOB)"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                .withTags(VALID_TAG_HUSBAND).withBirthday(VALID_BIRTHDAY_BOB).build();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and alias, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_ALIAS + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and secondary keyword, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_SECONDARY_ONE + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + \" \" + MATRIC_NO_DESC_BOB + \" \" + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit all fields, command with leading spaces and secondary keyword, trailing spaces and multiple spaces"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * between each field -\u003e edited"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        executeCommand(UndoCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \" \" + EditCommand.COMMAND_SECONDARY_TWO + \"  \" + index.getOneBased() + \"  \" + NAME_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + \" \" + EMAIL_DESC_BOB + \"  \""
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + \" \" + TIMETABLE_DESC_BOB + \" \" + TAG_DESC_HUSBAND + \" \" + BIRTHDAY_DESC_BOB + \" \";"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo editing the last person in the list -\u003e last person restored */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo editing the last person in the list -\u003e last person edited again */"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_SUCCESS;"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "        model.updatePerson("
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "                getModel().getFilteredPersonList().get(INDEX_FIRST_PERSON.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, model, expectedResultMessage);"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as existing values -\u003e edited */"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit a person with new values same as existing values, using alias -\u003e edited */"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_ALIAS + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: edit a person with new values same as existing values, using secondary keyword -\u003e edited */"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_SECONDARY_ONE + \" \" + index.getOneBased() + NAME_DESC_BOB"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + GENDER_DESC_BOB + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TIMETABLE_DESC_BOB  + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, BOB);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit some fields -\u003e edited */"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + TAG_DESC_FRIEND;"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": "        ReadOnlyPerson personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags(VALID_TAG_FRIEND).build();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: clear tags -\u003e cleared */"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + PREFIX_TAG.getPrefix();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withTags().build();"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "        /* ------------------ Performing edit operation while a filtered list is being shown ------------------------ */"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book and person list -\u003e edited */"
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(index.getZeroBased() \u003c getModel().getFilteredPersonList().size());"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + \" \" + NAME_DESC_BOB;"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        personToEdit \u003d getModel().getFilteredPersonList().get(index.getZeroBased());"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "        editedPerson \u003d new PersonBuilder(personToEdit).withName(VALID_NAME_BOB).build();"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, editedPerson);"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, edit index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------- Performing edit operation while a person card is selected -------------------------- */"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: selects first card in the person list, edit a person -\u003e edited, card selection remains unchanged but"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "-"
        },
        "content": "         * browser url changes"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "-"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "-"
        },
        "content": "        selectPerson(index);"
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_AMY"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + GENDER_DESC_AMY + MATRIC_NO_DESC_AMY + PHONE_DESC_AMY + EMAIL_DESC_AMY"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + ADDRESS_DESC_AMY + TIMETABLE_DESC_AMY + TAG_DESC_FRIEND + BIRTHDAY_DESC_AMY;"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "-"
        },
        "content": "        // this can be misleading: card selection actually remains unchanged but the"
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "-"
        },
        "content": "        // browser\u0027s url is updated to reflect the new person\u0027s name"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, index, AMY, index);"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "-"
        },
        "content": "        /* --------------------------------- Performing invalid edit operation -------------------------------------- */"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" 0\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" -1\" + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 208,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 209,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 210,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 211,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + invalidIndex + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 212,
        "author": {
          "gitId": "-"
        },
        "content": "                Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 213,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 214,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: missing index -\u003e rejected */"
      },
      {
        "lineNumber": 215,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + NAME_DESC_BOB,"
      },
      {
        "lineNumber": 216,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(Messages.MESSAGE_INVALID_COMMAND_FORMAT, EditCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 217,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 218,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: missing all fields -\u003e rejected */"
      },
      {
        "lineNumber": 219,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 220,
        "author": {
          "gitId": "-"
        },
        "content": "                EditCommand.MESSAGE_NOT_EDITED);"
      },
      {
        "lineNumber": 221,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 222,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid name -\u003e rejected */"
      },
      {
        "lineNumber": 223,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_NAME_DESC,"
      },
      {
        "lineNumber": 224,
        "author": {
          "gitId": "-"
        },
        "content": "                Name.MESSAGE_NAME_CONSTRAINTS);"
      },
      {
        "lineNumber": 225,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 226,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid gender -\u003e rejected */"
      },
      {
        "lineNumber": 227,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_GENDER_DESC,"
      },
      {
        "lineNumber": 228,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Gender.MESSAGE_GENDER_CONSTRAINTS);"
      },
      {
        "lineNumber": 229,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 230,
        "author": {
          "gitId": "April0616"
        },
        "content": "        /* Case: invalid matricNo -\u003e rejected */"
      },
      {
        "lineNumber": 231,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_MATRIC_NO_DESC,"
      },
      {
        "lineNumber": 232,
        "author": {
          "gitId": "April0616"
        },
        "content": "                MatricNo.MESSAGE_MATRIC_NO_CONSTRAINTS);"
      },
      {
        "lineNumber": 233,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 234,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid phone -\u003e rejected */"
      },
      {
        "lineNumber": 235,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_PHONE_DESC,"
      },
      {
        "lineNumber": 236,
        "author": {
          "gitId": "-"
        },
        "content": "                Phone.MESSAGE_PHONE_CONSTRAINTS);"
      },
      {
        "lineNumber": 237,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 238,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid email -\u003e rejected */"
      },
      {
        "lineNumber": 239,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_EMAIL_DESC,"
      },
      {
        "lineNumber": 240,
        "author": {
          "gitId": "-"
        },
        "content": "                Email.MESSAGE_EMAIL_CONSTRAINTS);"
      },
      {
        "lineNumber": 241,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 242,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author zacharytang"
      },
      {
        "lineNumber": 243,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid timetable -\u003e rejected */"
      },
      {
        "lineNumber": 244,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TIMETABLE_DESC,"
      },
      {
        "lineNumber": 245,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_TIMETABLE_URL_CONSTRAINTS);"
      },
      {
        "lineNumber": 246,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 247,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid short url -\u003e rejected */"
      },
      {
        "lineNumber": 248,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_SHORT_URL_DESC,"
      },
      {
        "lineNumber": 249,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "                Timetable.MESSAGE_INVALID_SHORT_URL);"
      },
      {
        "lineNumber": 250,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 251,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 252,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid tag -\u003e rejected */"
      },
      {
        "lineNumber": 253,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_TAG_DESC,"
      },
      {
        "lineNumber": 254,
        "author": {
          "gitId": "-"
        },
        "content": "                Tag.MESSAGE_TAG_CONSTRAINTS);"
      },
      {
        "lineNumber": 255,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 256,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 257,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid birthday -\u003e rejected */"
      },
      {
        "lineNumber": 258,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(EditCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + INVALID_BIRTHDAY_DESC,"
      },
      {
        "lineNumber": 259,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                Birthday.MESSAGE_BIRTHDAY_CONSTRAINTS);"
      },
      {
        "lineNumber": 260,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 261,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 262,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values -\u003e rejected */"
      },
      {
        "lineNumber": 263,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(PersonUtil.getAddCommand(BOB));"
      },
      {
        "lineNumber": 264,
        "author": {
          "gitId": "-"
        },
        "content": "        assertTrue(getModel().getAddressBook().getPersonList().contains(BOB));"
      },
      {
        "lineNumber": 265,
        "author": {
          "gitId": "-"
        },
        "content": "        index \u003d INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 266,
        "author": {
          "gitId": "-"
        },
        "content": "        assertFalse(getModel().getFilteredPersonList().get(index.getZeroBased()).equals(BOB));"
      },
      {
        "lineNumber": 267,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 268,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 269,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_FRIEND + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 270,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 271,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 272,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: edit a person with new values same as another person\u0027s values but with different tags -\u003e rejected */"
      },
      {
        "lineNumber": 273,
        "author": {
          "gitId": "April0616"
        },
        "content": "        command \u003d EditCommand.COMMAND_WORD + \" \" + index.getOneBased() + NAME_DESC_BOB + GENDER_DESC_BOB"
      },
      {
        "lineNumber": 274,
        "author": {
          "gitId": "April0616"
        },
        "content": "                + MATRIC_NO_DESC_BOB + PHONE_DESC_BOB + EMAIL_DESC_BOB + ADDRESS_DESC_BOB + TIMETABLE_DESC_BOB"
      },
      {
        "lineNumber": 275,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "                + TAG_DESC_HUSBAND + BIRTHDAY_DESC_BOB;"
      },
      {
        "lineNumber": 276,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, EditCommand.MESSAGE_DUPLICATE_PERSON);"
      },
      {
        "lineNumber": 277,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 278,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 279,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 280,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Index, ReadOnlyPerson, Index)} except that"
      },
      {
        "lineNumber": 281,
        "author": {
          "gitId": "-"
        },
        "content": "     * the browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 282,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list"
      },
      {
        "lineNumber": 283,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Index, ReadOnlyPerson, Index)"
      },
      {
        "lineNumber": 284,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 285,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson) {"
      },
      {
        "lineNumber": 286,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, toEdit, editedPerson, null);"
      },
      {
        "lineNumber": 287,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 288,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 289,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 290,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 291,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that result display box displays the success message of executing {@code EditCommand}.\u003cbr\u003e"
      },
      {
        "lineNumber": 292,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * 2. Asserts that the model related components are updated to reflect the person at index {@code toEdit} being"
      },
      {
        "lineNumber": 293,
        "author": {
          "gitId": "-"
        },
        "content": "     * updated to values specified {@code editedPerson}.\u003cbr\u003e"
      },
      {
        "lineNumber": 294,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * @param toEdit the index of the current model\u0027s filtered list."
      },
      {
        "lineNumber": 295,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 296,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 297,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index toEdit, ReadOnlyPerson editedPerson,"
      },
      {
        "lineNumber": 298,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 299,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 300,
        "author": {
          "gitId": "-"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 301,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updatePerson("
      },
      {
        "lineNumber": 302,
        "author": {
          "gitId": "-"
        },
        "content": "                    expectedModel.getFilteredPersonList().get(toEdit.getZeroBased()), editedPerson);"
      },
      {
        "lineNumber": 303,
        "author": {
          "gitId": "-"
        },
        "content": "            expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 304,
        "author": {
          "gitId": "-"
        },
        "content": "        } catch (DuplicatePersonException | PersonNotFoundException e) {"
      },
      {
        "lineNumber": 305,
        "author": {
          "gitId": "-"
        },
        "content": "            throw new IllegalArgumentException("
      },
      {
        "lineNumber": 306,
        "author": {
          "gitId": "-"
        },
        "content": "                    \"editedPerson is a duplicate in expectedModel, or it isn\u0027t found in the model.\");"
      },
      {
        "lineNumber": 307,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 308,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 309,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel,"
      },
      {
        "lineNumber": 310,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(EditCommand.MESSAGE_EDIT_PERSON_SUCCESS, editedPerson), expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 311,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 312,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 313,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 314,
        "author": {
          "gitId": "-"
        },
        "content": "     * Performs the same verification as {@code assertCommandSuccess(String, Model, String, Index)} except that the"
      },
      {
        "lineNumber": 315,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card remain unchanged."
      },
      {
        "lineNumber": 316,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see EditCommandSystemTest#assertCommandSuccess(String, Model, String, Index)"
      },
      {
        "lineNumber": 317,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 318,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage) {"
      },
      {
        "lineNumber": 319,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, expectedModel, expectedResultMessage, null);"
      },
      {
        "lineNumber": 320,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 321,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 322,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 323,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 324,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays an empty string.\u003cbr\u003e"
      },
      {
        "lineNumber": 325,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that the result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 326,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to {@code expectedModel}.\u003cbr\u003e"
      },
      {
        "lineNumber": 327,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * 4. Asserts that the status bar\u0027s sync status changes.\u003cbr\u003e"
      },
      {
        "lineNumber": 328,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * 5. Asserts that the command box has the default style class.\u003cbr\u003e"
      },
      {
        "lineNumber": 329,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 330,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 331,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 332,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 333,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 334,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel, String expectedResultMessage,"
      },
      {
        "lineNumber": 335,
        "author": {
          "gitId": "-"
        },
        "content": "                                      Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 336,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 337,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedModel.updateFilteredPersonList(PREDICATE_SHOW_ALL_PERSONS);"
      },
      {
        "lineNumber": 338,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 339,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 340,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchangedExceptSyncStatus();"
      },
      {
        "lineNumber": 341,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 342,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 343,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 344,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and in addition,\u003cbr\u003e"
      },
      {
        "lineNumber": 345,
        "author": {
          "gitId": "-"
        },
        "content": "     * 1. Asserts that the command box displays {@code command}.\u003cbr\u003e"
      },
      {
        "lineNumber": 346,
        "author": {
          "gitId": "-"
        },
        "content": "     * 2. Asserts that result display box displays {@code expectedResultMessage}.\u003cbr\u003e"
      },
      {
        "lineNumber": 347,
        "author": {
          "gitId": "-"
        },
        "content": "     * 3. Asserts that the model related components equal to the current model.\u003cbr\u003e"
      },
      {
        "lineNumber": 348,
        "author": {
          "gitId": "-"
        },
        "content": "     * 4. Asserts that the browser url, selected card and status bar remain unchanged.\u003cbr\u003e"
      },
      {
        "lineNumber": 349,
        "author": {
          "gitId": "-"
        },
        "content": "     * 5. Asserts that the command box has the error style.\u003cbr\u003e"
      },
      {
        "lineNumber": 350,
        "author": {
          "gitId": "-"
        },
        "content": "     * Verifications 1 to 3 are performed by"
      },
      {
        "lineNumber": 351,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 352,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 353,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 354,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 355,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 356,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 357,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 358,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 359,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 360,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 361,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 362,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 363,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 45,
      "CindyTsai1": 28,
      "nbriannl": 2,
      "April0616": 30,
      "-": 258
    }
  },
  {
    "path": "src/test/java/systemtests/FindCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_PERSONS_LISTED_OVERVIEW;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.BENSON;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.CARL;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.DANIEL;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.DeleteCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.FindCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.ListCommand;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "import seedu.address.model.tag.Tag;"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.testutil.TypicalPersons;"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "public class FindCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    public void find() {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find multiple persons in"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         address book, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        String command \u003d \"   \" + FindCommand.COMMAND_WORD + \" \" + \"n/\" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find multiple persons in address book using alias, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"   \" + FindCommand.COMMAND_ALIAS + \" \" + \"n/\" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find multiple persons in address book using secondary keyword,"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e 2 persons found"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(ListCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"   \" + FindCommand.COMMAND_SECONDARY + \" \" + \"n/\" + KEYWORD_MATCHING_MEIER + \"   \";"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, BENSON, DANIEL); // first names of Benson and Daniel are \"Meier\""
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: repeat previous find command where person list is displaying the persons we are finding"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         * -\u003e 2 persons found"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "         */"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"n/\" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find person where person list is not displaying the person we are finding -\u003e 1 person found */"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Carl\";"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, CARL);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: undo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: redo previous find command -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find same persons in address book after deleting 1 of them -\u003e 1 person found */"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        executeCommand(FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(DeleteCommand.COMMAND_WORD + \" 1\");"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assert !getModel().getAddressBook().getPersonList().contains(BENSON);"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/\" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find person in address book, keyword is same as name but of different case -\u003e 1 person found */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/MeIeR\";"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: mixed case command word -\u003e 1 person found */"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d \"FiNd n/Meier\";"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: find person in address book, keyword is substring of name -\u003e 1 persons found */"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mei\";"
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find person in address book, name is substring of keyword -\u003e 0 persons found */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Meiers\";"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find person not in address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Mark\";"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: find phone number of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"p/\" + DANIEL.getPhone().value;"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: find address of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"a/\" + DANIEL.getAddress().value;"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: find email of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"e/\" + DANIEL.getEmail().value;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: find tags of person in address book -\u003e 1 persons found */"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        List\u003cTag\u003e tags \u003d new ArrayList\u003c\u003e(DANIEL.getTags());"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"t/\" + tags.get(0).tagName;"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, TypicalPersons.getTypicalPersons());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find while a person is selected -\u003e selected card deselected */"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        showAllPersons();"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        selectPerson(Index.fromOneBased(1));"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assert !getPersonListPanel().getHandleToSelectedCard().getName().equals(DANIEL.getName().fullName);"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" n/Daniel\";"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel, DANIEL);"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardDeselected();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        /* Case: find person in empty address book -\u003e 0 persons found */"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        command \u003d FindCommand.COMMAND_WORD + \" \" + \"n/\" + KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        ModelHelper.setFilteredList(expectedModel);"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandSuccess(command, expectedModel);"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"fnid\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"find\"));"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * box displays {@code Messages#MESSAGE_PERSONS_LISTED_OVERVIEW} with the number of people in the filtered list,"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * and the model related components equal to {@code expectedModel}."
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Also verifies that the status bar remains unchanged, and the command box has the default style class, and the"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * selected card updated accordingly, depending on {@code cardStatus}."
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void assertCommandSuccess(String command, Model expectedModel) {"
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "                MESSAGE_PERSONS_LISTED_OVERVIEW, expectedModel.getFilteredPersonList().size());"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 186,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 187,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 188,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 189,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 190,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 191,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 192,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 193,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 194,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 195,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 196,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 197,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "     */"
      },
      {
        "lineNumber": 198,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 199,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 200,
        "author": {
          "gitId": "nbriannl"
        },
        "content": ""
      },
      {
        "lineNumber": 201,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 202,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 203,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 204,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 205,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 206,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "    }"
      },
      {
        "lineNumber": 207,
        "author": {
          "gitId": "nbriannl"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 2,
      "CindyTsai1": 55,
      "nbriannl": 150
    }
  },
  {
    "path": "src/test/java/systemtests/SelectCommandSystemTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package systemtests;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_COMMAND_FORMAT;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.commons.core.Messages.MESSAGE_INVALID_PERSON_DISPLAYED_INDEX;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.logic.commands.SelectCommand.MESSAGE_SELECT_PERSON_SUCCESS;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.KEYWORD_MATCHING_MEIER;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalPersons.getTypicalPersons;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.ClearCommand;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.RedoCommand;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.SelectCommand;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "import seedu.address.logic.commands.SuggestCommand;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.logic.commands.UndoCommand;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class SelectCommandSystemTest extends AddressBookSystemTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "-"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "-"
        },
        "content": "    public void select() {"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the first card in the person list, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": "        String command \u003d \"   \" + SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: mixed case command word -\u003e rejected */"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandSuccess(\"SeLeCt 1\", INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the first card in the person list using alias, command with leading spaces and trailing spaces"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * -\u003e selected"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + SelectCommand.COMMAND_ALIAS + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the first card in the person list using secondary keyword,"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         * command with leading spaces and trailing spaces -\u003e selected"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "         */"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d \"   \" + SelectCommand.COMMAND_SECONDARY + \" \" + INDEX_FIRST_PERSON.getOneBased() + \"   \";"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, INDEX_FIRST_PERSON);"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the last card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "        Index personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the last card in the person list, using alias -\u003e selected */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d SelectCommand.COMMAND_ALIAS + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: select the last card in the person list, using secondary keyword -\u003e selected */"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        personCount \u003d Index.fromOneBased(getTypicalPersons().size());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        command \u003d SelectCommand.COMMAND_SECONDARY + \" \" + personCount.getOneBased();"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, personCount);"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: undo previous selection -\u003e rejected */"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d UndoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d UndoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: redo selecting last card in the list -\u003e rejected */"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d RedoCommand.COMMAND_WORD;"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "-"
        },
        "content": "        expectedResultMessage \u003d RedoCommand.MESSAGE_FAILURE;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(command, expectedResultMessage);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the middle card in the person list -\u003e selected */"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "-"
        },
        "content": "        Index middleIndex \u003d Index.fromOneBased(personCount.getOneBased() / 2);"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + middleIndex.getOneBased();"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (size + 1) -\u003e rejected */"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "-"
        },
        "content": "        int invalidIndex \u003d getModel().getFilteredPersonList().size() + 1;"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select the current selected card -\u003e selected */"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, middleIndex);"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book but out of bounds of person list"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "-"
        },
        "content": "         * -\u003e rejected"
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "-"
        },
        "content": "         */"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "-"
        },
        "content": "        showPersonsWithName(KEYWORD_MATCHING_MEIER);"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "-"
        },
        "content": "        invalidIndex \u003d getModel().getAddressBook().getPersonList().size();"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + invalidIndex, MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: filtered person list, select index within bounds of address book and person list -\u003e selected */"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "-"
        },
        "content": "        Index validIndex \u003d Index.fromOneBased(1);"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "-"
        },
        "content": "        assert validIndex.getZeroBased() \u003c getModel().getFilteredPersonList().size();"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "-"
        },
        "content": "        command \u003d SelectCommand.COMMAND_WORD + \" \" + validIndex.getOneBased();"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandSuccess(command, validIndex);"
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (0) -\u003e rejected */"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + 0,"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        /* Case: invalid index (-1) -\u003e rejected */"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + -1,"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (alphabets) -\u003e rejected */"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" abc\","
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: invalid arguments (extra argument) -\u003e rejected */"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" 1 abc\","
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "-"
        },
        "content": "                String.format(MESSAGE_INVALID_COMMAND_FORMAT, SelectCommand.MESSAGE_USAGE));"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "-"
        },
        "content": "        /* Case: select from empty address book -\u003e rejected */"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(ClearCommand.COMMAND_WORD);"
      },
      {
        "lineNumber": 115,
        "author": {
          "gitId": "-"
        },
        "content": "        assert getModel().getAddressBook().getPersonList().size() \u003d\u003d 0;"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandFailure(SelectCommand.COMMAND_WORD + \" \" + INDEX_FIRST_PERSON.getOneBased(),"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_INVALID_PERSON_DISPLAYED_INDEX);"
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        //@@author CindyTsai1"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        /* Case: invalid keyword -\u003e suggested */"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "        assertCommandFailure(\"salect\", String.format(SuggestCommand.MESSAGE_SUCCESS, \"select\"));"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    }"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": ""
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    //@@author"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays an empty string, the result display"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays the success message of executing select command with the {@code expectedSelectedCardIndex}"
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "-"
        },
        "content": "     * of the selected person, and the model related components equal to the current model."
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the command box has the default style class and the status bar remain unchanged. The resulting"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "-"
        },
        "content": "     * browser url and selected card will be verified if the current selected card and the card at"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code expectedSelectedCardIndex} are different."
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertSelectedCardChanged(Index)"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandSuccess(String command, Index expectedSelectedCardIndex) {"
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "-"
        },
        "content": "        String expectedResultMessage \u003d String.format("
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "-"
        },
        "content": "                MESSAGE_SELECT_PERSON_SUCCESS, expectedSelectedCardIndex.getOneBased());"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "-"
        },
        "content": "        int preExecutionSelectedCardIndex \u003d getPersonListPanel().getSelectedCardIndex();"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(\"\", expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "-"
        },
        "content": "        if (preExecutionSelectedCardIndex \u003d\u003d expectedSelectedCardIndex.getZeroBased()) {"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "-"
        },
        "content": "        } else {"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "-"
        },
        "content": "            assertSelectedCardChanged(expectedSelectedCardIndex);"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "-"
        },
        "content": "        }"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsDefaultStyle();"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "-"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "-"
        },
        "content": "     * Executes {@code command} and verifies that the command box displays {@code command}, the result display"
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "-"
        },
        "content": "     * box displays {@code expectedResultMessage} and the model related components equal to the current model."
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "-"
        },
        "content": "     * These verifications are done by"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "-"
        },
        "content": "     * {@code AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)}.\u003cbr\u003e"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "-"
        },
        "content": "     * Also verifies that the browser url, selected card and status bar remain unchanged, and the command box has the"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "-"
        },
        "content": "     * error style."
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "-"
        },
        "content": "     * @see AddressBookSystemTest#assertApplicationDisplaysExpected(String, String, Model)"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "-"
        },
        "content": "     */"
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "-"
        },
        "content": "    private void assertCommandFailure(String command, String expectedResultMessage) {"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "-"
        },
        "content": "        Model expectedModel \u003d getModel();"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "-"
        },
        "content": "        executeCommand(command);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "-"
        },
        "content": "        assertApplicationDisplaysExpected(command, expectedResultMessage, expectedModel);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "-"
        },
        "content": "        assertSelectedCardUnchanged();"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "-"
        },
        "content": "        assertCommandBoxShowsErrorStyle();"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "-"
        },
        "content": "        assertStatusBarUnchanged();"
      },
      {
        "lineNumber": 173,
        "author": {
          "gitId": "-"
        },
        "content": "    }"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "zacharytang": 19,
      "CindyTsai1": 14,
      "-": 141
    }
  },
  {
    "path": "unused/CombinedTimetableDisplay.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.List;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.TimetableDisplayEvent;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "content": "//@@author zacharytang-unused"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * Display for the combined timetable command"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class CombinedTimetableDisplay extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public static final String FXML \u003d \"CombinedTimetableDisplay.fxml\";"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDisplay timetableDisplay;"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label names;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private AnchorPane timetablePlaceholder;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public CombinedTimetableDisplay() {"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(null);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Refreshes the timetable display upon command"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void loadPersons(List\u003cReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        names.setText(generateNamesString(persons));"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cTimetable\u003e timetables \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            timetables.add(person.getTimetable());"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(timetables);"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Creates a string to display all names for the combined timetable displayed"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private String generateNamesString(List\u003cReadOnlyPerson\u003e persons) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        StringBuilder names \u003d new StringBuilder();"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        for (ReadOnlyPerson person : persons) {"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            names.append(\"[\");"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            names.append(person.getName().toString());"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "            names.append(\"] \");"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        }"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        return names.toString();"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handleTimetableDisplayEvent(TimetableDisplayEvent event) {"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPersons(event.personsToDisplay);"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "zacharytang": 62,
      "April0616": 3,
      "-": 13
    }
  },
  {
    "path": "unused/PersonInfoOverview.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "package seedu.address.ui;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.net.URI;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import java.util.ArrayList;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "-"
        },
        "content": "import java.util.logging.Logger;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import com.google.common.eventbus.Subscribe;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.beans.binding.Bindings;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.fxml.FXML;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.control.Label;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.image.Image;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import javafx.scene.image.ImageView;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import javafx.scene.layout.AnchorPane;"
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import javafx.scene.layout.Region;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.LogsCenter;"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonPanelSelectionChangedEvent;"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.commons.events.ui.PersonSelectedEvent;"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "import seedu.address.model.person.timetable.Timetable;"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 23,
        "content": "//@@author zacharytang-unused"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "/**"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " * A UI component that displays a person\u0027s data on the main panel"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "zacharytang"
        },
        "content": " */"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "public class PersonInfoOverview extends UiPart\u003cRegion\u003e {"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private static final String FXML \u003d \"PersonInfoOverview.fxml\";"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private ReadOnlyPerson person;"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "-"
        },
        "content": "    private final Logger logger \u003d LogsCenter.getLogger(this.getClass());"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private TimetableDisplay timetableDisplay;"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label name;"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label gender;"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private Label matricNo;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label phone;"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label address;"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "-"
        },
        "content": "    private Label email;"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "-"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    private Label birthday;"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "CindyTsai1"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private Label remark;"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private AnchorPane contactPhotoPane;"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "    private ImageView contactPhoto;"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @FXML"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private AnchorPane timetablePlaceholder;"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    public PersonInfoOverview() {"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        super(FXML);"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.person \u003d null;"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadDefaultPerson();"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "        contactPhoto.fitWidthProperty().bind(contactPhotoPane.widthProperty());"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "        contactPhoto.fitHeightProperty().bind(contactPhotoPane.heightProperty());"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        registerAsAnEventHandler(this);"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Loads the default person when the app is first started"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void loadDefaultPerson() {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        name.setText(\"No person selected\");"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        gender.setText(\"\");"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        matricNo.setText(\"\");"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        phone.setText(\"\");"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        address.setText(\"\");"
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        email.setText(\"\");"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        birthday.setText(\"\");"
      },
      {
        "lineNumber": 82,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        remark.setText(\"\");"
      },
      {
        "lineNumber": 83,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 84,
        "author": {
          "gitId": "April0616"
        },
        "content": "        setDefaultContactPhoto();"
      },
      {
        "lineNumber": 85,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 86,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(null);"
      },
      {
        "lineNumber": 87,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 88,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 89,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 90,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 91,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     * Updates info with person selected"
      },
      {
        "lineNumber": 92,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "     */"
      },
      {
        "lineNumber": 93,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void loadPerson(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 94,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        this.person \u003d person;"
      },
      {
        "lineNumber": 95,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 96,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        name.textProperty().bind(Bindings.convert(person.nameProperty()));"
      },
      {
        "lineNumber": 97,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        gender.textProperty().bind(Bindings.convert(person.genderProperty()));"
      },
      {
        "lineNumber": 98,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        matricNo.textProperty().bind(Bindings.convert(person.matricNoProperty()));"
      },
      {
        "lineNumber": 99,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        phone.textProperty().bind(Bindings.convert(person.phoneProperty()));"
      },
      {
        "lineNumber": 100,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        address.textProperty().bind(Bindings.convert(person.addressProperty()));"
      },
      {
        "lineNumber": 101,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        email.textProperty().bind(Bindings.convert(person.emailProperty()));"
      },
      {
        "lineNumber": 102,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        birthday.textProperty().bind(Bindings.convert(person.birthdayProperty()));"
      },
      {
        "lineNumber": 103,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        remark.textProperty().bind(Bindings.convert(person.remarkProperty()));"
      },
      {
        "lineNumber": 104,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 105,
        "author": {
          "gitId": "April0616"
        },
        "content": "        loadPhoto(person);"
      },
      {
        "lineNumber": 106,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 107,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().removeAll();"
      },
      {
        "lineNumber": 108,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 109,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        ArrayList\u003cTimetable\u003e timetableToDisplay \u003d new ArrayList\u003c\u003e();"
      },
      {
        "lineNumber": 110,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableToDisplay.add(person.getTimetable());"
      },
      {
        "lineNumber": 111,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetableDisplay \u003d new TimetableDisplay(timetableToDisplay);"
      },
      {
        "lineNumber": 112,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        timetablePlaceholder.getChildren().add(timetableDisplay.getRoot());"
      },
      {
        "lineNumber": 113,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 114,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 115,
        "content": "    //@@author April0616-unused"
      },
      {
        "lineNumber": 116,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 117,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Set the default contact photo to the default person."
      },
      {
        "lineNumber": 118,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 119,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void setDefaultContactPhoto() {"
      },
      {
        "lineNumber": 120,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String defaultPhotoPath \u003d \"src/main/resources/images/help_icon.png\";"
      },
      {
        "lineNumber": 121,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File defaultPhoto \u003d new File(defaultPhotoPath);"
      },
      {
        "lineNumber": 122,
        "author": {
          "gitId": "April0616"
        },
        "content": "        URI defaultPhotoUri \u003d defaultPhoto.toURI();"
      },
      {
        "lineNumber": 123,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Image defaultImage \u003d new Image(defaultPhotoUri.toString());"
      },
      {
        "lineNumber": 124,
        "author": {
          "gitId": "April0616"
        },
        "content": "        centerImage(defaultImage);"
      },
      {
        "lineNumber": 125,
        "author": {
          "gitId": "April0616"
        },
        "content": "        contactPhoto.setImage(defaultImage);"
      },
      {
        "lineNumber": 126,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 127,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 128,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 129,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Load the photo of the specified person."
      },
      {
        "lineNumber": 130,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param person"
      },
      {
        "lineNumber": 131,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 132,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void loadPhoto(ReadOnlyPerson person) {"
      },
      {
        "lineNumber": 133,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String photoPath \u003d person.getPhotoPath().value;"
      },
      {
        "lineNumber": 134,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File photo \u003d new File(photoPath);"
      },
      {
        "lineNumber": 135,
        "author": {
          "gitId": "April0616"
        },
        "content": "        URI photoUri \u003d photo.toURI();"
      },
      {
        "lineNumber": 136,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Image image \u003d new Image(photoUri.toString());"
      },
      {
        "lineNumber": 137,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 138,
        "author": {
          "gitId": "April0616"
        },
        "content": "        contactPhoto.setPreserveRatio(true);"
      },
      {
        "lineNumber": 139,
        "author": {
          "gitId": "April0616"
        },
        "content": "        centerImage(image);"
      },
      {
        "lineNumber": 140,
        "author": {
          "gitId": "April0616"
        },
        "content": "        contactPhoto.setImage(image);"
      },
      {
        "lineNumber": 141,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 142,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 143,
        "content": "    //@@author"
      },
      {
        "lineNumber": 144,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 145,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 146,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Put the image at the center of imageView"
      },
      {
        "lineNumber": 147,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Credit to trichetriche (Stack Overflow https://stackoverflow.com/users/4676340/trichetriche)"
      },
      {
        "lineNumber": 148,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * https://stackoverflow.com/questions/32781362/centering-an-image-in-an-imageview"
      },
      {
        "lineNumber": 149,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 150,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void centerImage(Image img) {"
      },
      {
        "lineNumber": 151,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (img !\u003d null) {"
      },
      {
        "lineNumber": 152,
        "author": {
          "gitId": "April0616"
        },
        "content": "            double w \u003d 0;"
      },
      {
        "lineNumber": 153,
        "author": {
          "gitId": "April0616"
        },
        "content": "            double h \u003d 0;"
      },
      {
        "lineNumber": 154,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 155,
        "author": {
          "gitId": "April0616"
        },
        "content": "            double ratioX \u003d contactPhoto.getFitWidth() / img.getWidth();"
      },
      {
        "lineNumber": 156,
        "author": {
          "gitId": "April0616"
        },
        "content": "            double ratioY \u003d contactPhoto.getFitHeight() / img.getHeight();"
      },
      {
        "lineNumber": 157,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 158,
        "author": {
          "gitId": "April0616"
        },
        "content": "            double reducCoeff \u003d 0;"
      },
      {
        "lineNumber": 159,
        "author": {
          "gitId": "April0616"
        },
        "content": "            if (ratioX \u003e\u003d ratioY) {"
      },
      {
        "lineNumber": 160,
        "author": {
          "gitId": "April0616"
        },
        "content": "                reducCoeff \u003d ratioY;"
      },
      {
        "lineNumber": 161,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } else {"
      },
      {
        "lineNumber": 162,
        "author": {
          "gitId": "April0616"
        },
        "content": "                reducCoeff \u003d ratioX;"
      },
      {
        "lineNumber": 163,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 164,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 165,
        "author": {
          "gitId": "April0616"
        },
        "content": "            w \u003d img.getWidth() * reducCoeff;"
      },
      {
        "lineNumber": 166,
        "author": {
          "gitId": "April0616"
        },
        "content": "            h \u003d img.getHeight() * reducCoeff;"
      },
      {
        "lineNumber": 167,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 168,
        "author": {
          "gitId": "April0616"
        },
        "content": "            contactPhoto.setX((contactPhoto.getFitWidth() - w) / 2);"
      },
      {
        "lineNumber": 169,
        "author": {
          "gitId": "April0616"
        },
        "content": "            contactPhoto.setY((contactPhoto.getFitHeight() - h) / 2);"
      },
      {
        "lineNumber": 170,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 171,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 172,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 173,
        "content": "    //@@author zacharytang-unused"
      },
      {
        "lineNumber": 174,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 175,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonSelectedEvent(PersonSelectedEvent event) {"
      },
      {
        "lineNumber": 176,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 177,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.person);"
      },
      {
        "lineNumber": 178,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 179,
        "author": {
          "gitId": "zacharytang"
        },
        "content": ""
      },
      {
        "lineNumber": 180,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    @Subscribe"
      },
      {
        "lineNumber": 181,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    private void handlePersonPanelSelectionChangeEvent(PersonPanelSelectionChangedEvent event) {"
      },
      {
        "lineNumber": 182,
        "author": {
          "gitId": "-"
        },
        "content": "        logger.info(LogsCenter.getEventHandlingLogMessage(event));"
      },
      {
        "lineNumber": 183,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "        loadPerson(event.getNewSelection().person);"
      },
      {
        "lineNumber": 184,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "    }"
      },
      {
        "lineNumber": 185,
        "author": {
          "gitId": "zacharytang"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 4,
      "zacharytang": 85,
      "CindyTsai1": 2,
      "April0616": 74,
      "-": 20
    }
  },
  {
    "path": "unused/PhotoCommandTest.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "April0616"
        },
        "content": "package seedu.address.logic.commands;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertFalse;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import static org.junit.Assert.assertTrue;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTONAME_AMY;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import static seedu.address.logic.commands.CommandTestUtil.VALID_PHOTONAME_BOB;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_FIRST_PERSON;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "-"
        },
        "content": "import static seedu.address.testutil.TypicalIndexes.INDEX_SECOND_PERSON;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.FileNotFoundException;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "April0616"
        },
        "content": "import org.junit.Test;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.exceptions.IllegalValueException;"
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 18,
        "content": "//@@author April0616-unused"
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "April0616"
        },
        "content": "public class PhotoCommandTest {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "April0616"
        },
        "content": "    @Test"
      },
      {
        "lineNumber": 22,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public void equals() throws FileNotFoundException, IllegalValueException {"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File amyFile \u003d new File(VALID_PHOTONAME_AMY);"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File bobFile \u003d new File(VALID_PHOTONAME_BOB);"
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "            amyFile.createNewFile();"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "            bobFile.createNewFile();"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException ioe) {"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "            System.err.println(\"Cannot create temporary files!\");"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String amyPath \u003d amyFile.getAbsolutePath();"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String bobPath \u003d bobFile.getAbsolutePath();"
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.createTempFile(VALID_PHOTOPATH_AMY);"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.createTempFile(VALID_PHOTOPATH_BOB);"
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand addFirstPersonPhotoPath \u003d new PhotoCommand(INDEX_FIRST_PERSON, amyPath);"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand addSecondPersonPhotoPath \u003d new PhotoCommand(INDEX_SECOND_PERSON, bobPath);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same object -\u003e returns true"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonPhotoPath.equals(addFirstPersonPhotoPath));"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // same value -\u003e returns true"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        PhotoCommand copy \u003d new PhotoCommand(addFirstPersonPhotoPath.getIndex(),"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "                addFirstPersonPhotoPath.getLocalPhotoPath());"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertTrue(addFirstPersonPhotoPath.equals(copy));"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different types -\u003e returns false"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath.equals(1));"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // null -\u003e returns false"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath \u003d\u003d null);"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        // different objects -\u003e returns false"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "        assertFalse(addFirstPersonPhotoPath.equals(addSecondPersonPhotoPath));"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.removeFileAndItsParentsTillRoot(VALID_PHOTOPATH_BOB);"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //TestUtil.removeFileAndItsParentsTillRoot(VALID_PHOTOPATH_AMY);"
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "        amyFile.delete();"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "        bobFile.delete();"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "April0616": 56,
      "-": 6
    }
  },
  {
    "path": "unused/TestUtil.java",
    "lines": [
      {
        "lineNumber": 1,
        "author": {
          "gitId": "-"
        },
        "content": "package seedu.address.testutil;"
      },
      {
        "lineNumber": 2,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 3,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.File;"
      },
      {
        "lineNumber": 4,
        "author": {
          "gitId": "-"
        },
        "content": "import java.io.IOException;"
      },
      {
        "lineNumber": 5,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.DirectoryNotEmptyException;"
      },
      {
        "lineNumber": 6,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Files;"
      },
      {
        "lineNumber": 7,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Path;"
      },
      {
        "lineNumber": 8,
        "author": {
          "gitId": "April0616"
        },
        "content": "import java.nio.file.Paths;"
      },
      {
        "lineNumber": 9,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 10,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.core.index.Index;"
      },
      {
        "lineNumber": 11,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.commons.util.FileUtil;"
      },
      {
        "lineNumber": 12,
        "author": {
          "gitId": "April0616"
        },
        "content": "import seedu.address.logic.commands.PhotoCommand;"
      },
      {
        "lineNumber": 13,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.Model;"
      },
      {
        "lineNumber": 14,
        "author": {
          "gitId": "-"
        },
        "content": "import seedu.address.model.person.ReadOnlyPerson;"
      },
      {
        "lineNumber": 15,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 16,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 17,
        "author": {
          "gitId": "-"
        },
        "content": "/**"
      },
      {
        "lineNumber": 18,
        "author": {
          "gitId": "-"
        },
        "content": " * A utility class for test cases."
      },
      {
        "lineNumber": 19,
        "author": {
          "gitId": "-"
        },
        "content": " */"
      },
      {
        "lineNumber": 20,
        "author": {
          "gitId": "-"
        },
        "content": "public class TestUtil {"
      },
      {
        "lineNumber": 21,
        "author": {
          "gitId": "-"
        },
        "content": ""
      },
      {
        "lineNumber": 22,
        "content": "    //@@author April0616-unused"
      },
      {
        "lineNumber": 23,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 24,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Removes the temporary test files and parents if they exist till the root of the path."
      },
      {
        "lineNumber": 25,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param pathString of the file"
      },
      {
        "lineNumber": 26,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @throws IOException"
      },
      {
        "lineNumber": 27,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 28,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void removeFileAndItsParentsTillRoot(String pathString) throws IOException {"
      },
      {
        "lineNumber": 29,
        "author": {
          "gitId": "April0616"
        },
        "content": "        Path path \u003d Paths.get(pathString);"
      },
      {
        "lineNumber": 30,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (path.toString().matches(\"[a-zA-Z]+[:]+[\\\\\\\\]\") || path \u003d\u003d null) {"
      },
      {
        "lineNumber": 31,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 32,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } else if (Files.isRegularFile(path)) {"
      },
      {
        "lineNumber": 33,
        "author": {
          "gitId": "April0616"
        },
        "content": "            Files.deleteIfExists(path);"
      },
      {
        "lineNumber": 34,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 35,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 36,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 37,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (Files.isDirectory(path)) {"
      },
      {
        "lineNumber": 38,
        "author": {
          "gitId": "April0616"
        },
        "content": "            try {"
      },
      {
        "lineNumber": 39,
        "author": {
          "gitId": "April0616"
        },
        "content": "                Files.delete(path);"
      },
      {
        "lineNumber": 40,
        "author": {
          "gitId": "April0616"
        },
        "content": "            } catch (DirectoryNotEmptyException e) {"
      },
      {
        "lineNumber": 41,
        "author": {
          "gitId": "April0616"
        },
        "content": "                return;"
      },
      {
        "lineNumber": 42,
        "author": {
          "gitId": "April0616"
        },
        "content": "            }"
      },
      {
        "lineNumber": 43,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 44,
        "author": {
          "gitId": "April0616"
        },
        "content": "        String parentPathString \u003d path.getParent().toString();"
      },
      {
        "lineNumber": 45,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //use recursion here"
      },
      {
        "lineNumber": 46,
        "author": {
          "gitId": "April0616"
        },
        "content": "        removeFileAndItsParentsTillRoot(parentPathString);"
      },
      {
        "lineNumber": 47,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 48,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 49,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 50,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * If the file in the specific path in the app directory exists, delete the file in the path"
      },
      {
        "lineNumber": 51,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * @param path"
      },
      {
        "lineNumber": 52,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 53,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void removeAppFile(String path) {"
      },
      {
        "lineNumber": 54,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File fileToDelete \u003d new File(path);"
      },
      {
        "lineNumber": 55,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (fileToDelete.exists()) {"
      },
      {
        "lineNumber": 56,
        "author": {
          "gitId": "April0616"
        },
        "content": "            fileToDelete.delete();"
      },
      {
        "lineNumber": 57,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 58,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 59,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 60,
        "author": {
          "gitId": "April0616"
        },
        "content": "    /**"
      },
      {
        "lineNumber": 61,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * Creates temporary folders and a photo file for parseCommand_photo() test, i.e.,"
      },
      {
        "lineNumber": 62,
        "author": {
          "gitId": "April0616"
        },
        "content": "     * \"C:\\\\family\\\\photo.jpg\""
      },
      {
        "lineNumber": 63,
        "author": {
          "gitId": "April0616"
        },
        "content": "     */"
      },
      {
        "lineNumber": 64,
        "author": {
          "gitId": "April0616"
        },
        "content": "    public static void createTempFile(String path) {"
      },
      {
        "lineNumber": 65,
        "author": {
          "gitId": "April0616"
        },
        "content": "        if (!PhotoCommand.isValidLocalPhotoPath(path)) {"
      },
      {
        "lineNumber": 66,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Invalid photo path!\";"
      },
      {
        "lineNumber": 67,
        "author": {
          "gitId": "April0616"
        },
        "content": "            return;"
      },
      {
        "lineNumber": 68,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 69,
        "author": {
          "gitId": "April0616"
        },
        "content": "        final String photoPath \u003d path;"
      },
      {
        "lineNumber": 70,
        "author": {
          "gitId": "April0616"
        },
        "content": "        File testFile \u003d new File(photoPath);"
      },
      {
        "lineNumber": 71,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 72,
        "author": {
          "gitId": "April0616"
        },
        "content": "        //create new test file"
      },
      {
        "lineNumber": 73,
        "author": {
          "gitId": "April0616"
        },
        "content": "        testFile.getParentFile().mkdirs();"
      },
      {
        "lineNumber": 74,
        "author": {
          "gitId": "April0616"
        },
        "content": "        try {"
      },
      {
        "lineNumber": 75,
        "author": {
          "gitId": "April0616"
        },
        "content": "            testFile.createNewFile();"
      },
      {
        "lineNumber": 76,
        "author": {
          "gitId": "April0616"
        },
        "content": "        } catch (IOException e) {"
      },
      {
        "lineNumber": 77,
        "author": {
          "gitId": "April0616"
        },
        "content": "            assert false : \"Cannot open or write file!\";"
      },
      {
        "lineNumber": 78,
        "author": {
          "gitId": "April0616"
        },
        "content": "        }"
      },
      {
        "lineNumber": 79,
        "author": {
          "gitId": "April0616"
        },
        "content": ""
      },
      {
        "lineNumber": 80,
        "author": {
          "gitId": "April0616"
        },
        "content": "    }"
      },
      {
        "lineNumber": 81,
        "author": {
          "gitId": "-"
        },
        "content": "}"
      }
    ],
    "authorContributionMap": {
      "null": 1,
      "April0616": 63,
      "-": 17
    }
  }
]
